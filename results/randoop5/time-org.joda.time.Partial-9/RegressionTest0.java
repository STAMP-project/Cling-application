import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray2 = new int[] { 'a' };
        org.joda.time.Chronology chronology3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial4 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray2, chronology3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must be the same length as the types array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[97]");
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = new org.joda.time.DateTimeFieldType[] { dateTimeFieldType0 };
        int[] intArray3 = new int[] { 1 };
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial4 = new org.joda.time.Partial(dateTimeFieldTypeArray1, intArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Types array must not contain null: index 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1]");
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldType0, (int) 'a', chronology2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldType0, (int) ' ', chronology2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray6 = new int[] { (byte) 10, 'a', 0, (byte) 10, (byte) 1 };
        org.joda.time.Chronology chronology7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial8 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray6, chronology7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must be the same length as the types array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[10, 97, 0, 10, 1]");
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.DurationFieldType durationFieldType3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial5 = partial1.withFieldAddWrapped(durationFieldType3, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.DurationFieldType durationFieldType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial6 = partial1.withFieldAdded(durationFieldType4, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial7 = partial1.withField(dateTimeFieldType5, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray5 = new int[] { (short) 100, '4', ' ', 100 };
        org.joda.time.Chronology chronology6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial7 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray5, chronology6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must be the same length as the types array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 52, 32, 100]");
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = partial1.get(dateTimeFieldType3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField7 = partial3.getField((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DurationFieldType durationFieldType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial6 = partial1.withFieldAdded(durationFieldType4, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial6 = partial1.with(dateTimeFieldType4, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = new org.joda.time.DateTimeFieldType[] { dateTimeFieldType0 };
        int[] intArray3 = new int[] { '4' };
        org.joda.time.Chronology chronology4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray1, intArray3, chronology4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Types array must not contain null: index 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[52]");
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property12 = partial3.property(dateTimeFieldType11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        java.lang.Class<?> wildcardClass21 = partial3.getClass();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        int[] intArray30 = new int[] { '4', (byte) 1, 0, 'a', (short) -1 };
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must be the same length as the types array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[52, 1, 0, 97, -1]");
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property15 = partial10.property(dateTimeFieldType14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial7 = partial3.with(dateTimeFieldType5, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        java.lang.Class<?> wildcardClass6 = intArray5.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        boolean boolean5 = partial3.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology6 = partial3.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial7 = new org.joda.time.Partial(dateTimeFieldType0, 0, chronology6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int7 = partial1.get(dateTimeFieldType6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DurationFieldType durationFieldType23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial25 = partial18.withFieldAddWrapped(durationFieldType23, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = null;
        int[] intArray2 = new int[] { 100 };
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        boolean boolean6 = partial4.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology7 = partial4.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial8 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray2, chronology7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Types array must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial11 = partial1.withField(dateTimeFieldType9, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = new org.joda.time.DateTimeFieldType[] { dateTimeFieldType0 };
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        boolean boolean5 = partial3.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology6 = partial3.getChronology();
        int[] intArray7 = partial3.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial8 = new org.joda.time.Partial(dateTimeFieldTypeArray1, intArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must be the same length as the types array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property5 = partial1.property(dateTimeFieldType4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial11.plus(readablePeriod12);
        int int14 = partial11.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = partial11.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = partial11.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = partial11.indexOf(dateTimeFieldType18);
        boolean boolean20 = partial1.isAfter((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial23 = partial1.withFieldAdded(durationFieldType21, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType10 = partial4.getFieldType((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DurationFieldType durationFieldType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial7 = partial1.withFieldAddWrapped(durationFieldType5, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = partial5.toString(dateTimeFormatter6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial10 = partial5.with(dateTimeFieldType8, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = partial5.getValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType7 = partial1.getFieldType((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = partial3.toString("[]", locale5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial9 = partial3.with(dateTimeFieldType7, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = partial5.toString(dateTimeFormatter6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = partial5.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        boolean boolean9 = partial7.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology10 = partial7.getChronology();
        int[] intArray11 = partial7.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        boolean boolean15 = partial13.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology16 = partial13.getChronology();
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray5, intArray11, chronology16);
        int[] intArray24 = new int[] { (byte) 0, (byte) 1, ' ', (byte) 100, 0, 10 };
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        boolean boolean28 = partial26.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology29 = partial26.getChronology();
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray5, intArray24, chronology29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must be the same length as the types array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1, 32, 100, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        java.lang.String str31 = partial30.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int int36 = partial33.size();
        boolean boolean37 = partial30.isAfter((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        java.lang.String str40 = partial39.toString();
        int int41 = partial30.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        boolean boolean53 = partial43.isMatch((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime55 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean56 = partial3.isMatch((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DurationFieldType durationFieldType57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial59 = partial3.withFieldAdded(durationFieldType57, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        boolean boolean5 = partial3.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology6 = partial3.getChronology();
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial8 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) 10, chronology6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property20 = partial7.property(dateTimeFieldType19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        java.lang.String str11 = partial9.toStringList();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = partial9.getFieldType((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        java.lang.Object obj25 = null;
        boolean boolean26 = partial24.equals(obj25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial29 = partial24.with(dateTimeFieldType27, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.DurationFieldType durationFieldType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial8 = partial3.withFieldAddWrapped(durationFieldType6, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        java.lang.Object obj25 = null;
        boolean boolean26 = partial24.equals(obj25);
        java.util.Locale locale28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = partial24.toString("", locale28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        boolean boolean5 = partial3.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology6 = partial3.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial7 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) 100, chronology6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial1.minus(readablePeriod11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType14 = partial1.getFieldType((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial12);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = partial4.getValue((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DurationFieldType durationFieldType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial6 = partial1.withFieldAdded(durationFieldType4, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial9.plus(readablePeriod10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        boolean boolean25 = partial15.isMatch((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean26 = partial11.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = partial11.toString(dateTimeFormatter27);
        java.lang.String str30 = partial11.toString("[]");
        boolean boolean31 = partial1.isMatch((org.joda.time.ReadablePartial) partial11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField33 = partial1.getField((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int6 = partial4.get(dateTimeFieldType5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial26 = partial3.withField(dateTimeFieldType24, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        boolean boolean24 = partial3.isSupported(dateTimeFieldType23);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = partial3.getValue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial1.minus(readablePeriod11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial15 = partial1.withField(dateTimeFieldType13, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial12);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial15 = partial10.withField(dateTimeFieldType13, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial15);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType22 = partial5.getFieldType((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        java.lang.Class<?> wildcardClass23 = partial18.getClass();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial3.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial30 = partial27.with(dateTimeFieldType28, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial27);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField9 = partial1.getField((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        int int29 = partial26.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial26.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = partial26.isSupported(dateTimeFieldType31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial34.plus(readablePeriod35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial40.plus(readablePeriod41);
        int int43 = partial40.size();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial45.plus(readablePeriod46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        boolean boolean50 = partial40.isMatch((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean51 = partial36.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial36.toString(dateTimeFormatter52);
        java.lang.String str55 = partial36.toString("[]");
        boolean boolean56 = partial26.isMatch((org.joda.time.ReadablePartial) partial36);
        int[] intArray57 = partial26.getValues();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial59.plus(readablePeriod60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = partial65.withChronologyRetainFields(chronology66);
        boolean boolean68 = partial61.isAfter((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology69 = partial65.getChronology();
        org.joda.time.Partial partial70 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray57, chronology69);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property72 = partial70.property(dateTimeFieldType71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = partial7.isSupported(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        java.lang.String str23 = partial22.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        int int28 = partial25.size();
        boolean boolean29 = partial22.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        java.lang.String str32 = partial31.toString();
        int int33 = partial22.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        int int38 = partial35.size();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial40.plus(readablePeriod41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        boolean boolean45 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean46 = partial31.isMatch((org.joda.time.ReadableInstant) dateTime44);
        int int47 = partial31.size();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial31.minus(readablePeriod48);
        boolean boolean50 = partial20.isMatch((org.joda.time.ReadablePartial) partial49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType52 = partial20.getFieldType(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.DurationFieldType durationFieldType2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial4 = partial1.withFieldAddWrapped(durationFieldType2, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int15 = partial10.get(dateTimeFieldType14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial14.toString(dateTimeFormatter30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial14.toString(dateTimeFormatter32);
        int[] intArray34 = partial14.getValues();
        boolean boolean35 = partial1.isEqual((org.joda.time.ReadablePartial) partial14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType37 = partial14.getFieldType(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial3.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.ReadablePartial readablePartial28 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = partial3.isBefore(readablePartial28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial27);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType24 = partial3.getFieldType((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial14.toString(dateTimeFormatter30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial14.toString(dateTimeFormatter32);
        int[] intArray34 = partial14.getValues();
        boolean boolean35 = partial1.isEqual((org.joda.time.ReadablePartial) partial14);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = partial1.getValue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial15);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial12);
        java.lang.Class<?> wildcardClass21 = partial5.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        java.util.Locale locale7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = partial1.toString("hi!", locale7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.DurationFieldType durationFieldType23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial25 = partial3.withFieldAddWrapped(durationFieldType23, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField10 = partial1.getField(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        org.joda.time.Partial partial6 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType8 = partial6.getFieldType((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        int[] intArray17 = new int[] { (short) 0, (byte) 100 };
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must be the same length as the types array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 100]");
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.plus(readablePeriod28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        java.lang.String str32 = partial31.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial34.plus(readablePeriod35);
        int int37 = partial34.size();
        boolean boolean38 = partial31.isAfter((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        java.lang.String str41 = partial40.toString();
        int int42 = partial31.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        int int47 = partial44.size();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.plus(readablePeriod50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial51.toDateTime(readableInstant52);
        boolean boolean54 = partial44.isMatch((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean55 = partial40.isMatch((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime56 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime57 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DurationFieldType durationFieldType58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial60 = partial10.withFieldAddWrapped(durationFieldType58, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime30 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        java.lang.String str37 = partial36.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        boolean boolean43 = partial36.isAfter((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        java.lang.String str46 = partial45.toString();
        int int47 = partial36.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.plus(readablePeriod50);
        int int52 = partial49.size();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial54.plus(readablePeriod55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = partial56.toDateTime(readableInstant57);
        boolean boolean59 = partial49.isMatch((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean60 = partial45.isMatch((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime61 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial63.plus(readablePeriod64);
        int int66 = partial63.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = partial63.getFieldTypes();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        boolean boolean71 = partial69.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology72 = partial69.getChronology();
        int[] intArray73 = partial69.getValues();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        boolean boolean77 = partial75.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology78 = partial75.getChronology();
        org.joda.time.Partial partial79 = new org.joda.time.Partial(dateTimeFieldTypeArray67, intArray73, chronology78);
        org.joda.time.Partial partial80 = partial32.withChronologyRetainFields(chronology78);
        boolean boolean81 = partial1.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial84 = partial32.withField(dateTimeFieldType82, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        int int26 = partial10.size();
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.minus(readablePeriod28);
        org.joda.time.DurationFieldType durationFieldType30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial32 = partial27.withFieldAddWrapped(durationFieldType30, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(partial29);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime48);
        int int51 = partial35.size();
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        boolean boolean53 = partial3.isEqual((org.joda.time.ReadablePartial) partial35);
        // The following exception was thrown during execution in test generation
        try {
            int int55 = partial35.getValue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial14.toString(dateTimeFormatter30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial14.toString(dateTimeFormatter32);
        int[] intArray34 = partial14.getValues();
        boolean boolean35 = partial1.isEqual((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        int int40 = partial37.size();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        boolean boolean47 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial37.toString(dateTimeFormatter48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = partial57.withChronologyRetainFields(chronology58);
        boolean boolean60 = partial53.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial62.plus(readablePeriod63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = partial64.toDateTime(readableInstant65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = partial68.withChronologyRetainFields(chronology69);
        boolean boolean71 = partial64.isAfter((org.joda.time.ReadablePartial) partial68);
        boolean boolean72 = partial53.isBefore((org.joda.time.ReadablePartial) partial68);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial53.plus(readablePeriod73);
        boolean boolean75 = partial37.isAfter((org.joda.time.ReadablePartial) partial53);
        boolean boolean76 = partial14.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int78 = partial37.get(dateTimeFieldType77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial9.plus(readablePeriod10);
        int int12 = partial9.size();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        boolean boolean19 = partial9.isMatch((org.joda.time.ReadableInstant) dateTime18);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial5.toString(dateTimeFormatter21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial5.withPeriodAdded(readablePeriod23, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial5.getFieldTypes();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial28.plus(readablePeriod29);
        int int31 = partial28.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = partial28.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = partial28.isSupported(dateTimeFieldType33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        int int45 = partial42.size();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial47.plus(readablePeriod48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        boolean boolean52 = partial42.isMatch((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = partial38.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = partial38.toString(dateTimeFormatter54);
        java.lang.String str57 = partial38.toString("[]");
        boolean boolean58 = partial28.isMatch((org.joda.time.ReadablePartial) partial38);
        int[] intArray59 = partial28.getValues();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial67.withChronologyRetainFields(chronology68);
        boolean boolean70 = partial63.isAfter((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology71 = partial67.getChronology();
        org.joda.time.Partial partial72 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray59, chronology71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial73 = new org.joda.time.Partial(dateTimeFieldType0, (-1), chronology71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = partial3.toString("[]", locale5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = partial3.isSupported(dateTimeFieldType7);
        java.util.Locale locale10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = partial3.toString("", locale10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        java.lang.String str22 = partial20.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField24 = partial20.getField((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField25 = partial23.getField(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType7 = partial5.getFieldType((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        java.lang.String str4 = partial3.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial7 = partial3.withField(dateTimeFieldType5, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = partial1.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.minus(readablePeriod5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial9 = partial1.withField(dateTimeFieldType7, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(partial6);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        java.lang.String str11 = partial5.toStringList();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        java.lang.String str14 = partial13.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        int int19 = partial16.size();
        boolean boolean20 = partial13.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        java.lang.String str23 = partial22.toString();
        int int24 = partial13.compareTo((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        int int29 = partial26.size();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial31.plus(readablePeriod32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = partial33.toDateTime(readableInstant34);
        boolean boolean36 = partial26.isMatch((org.joda.time.ReadableInstant) dateTime35);
        boolean boolean37 = partial22.isMatch((org.joda.time.ReadableInstant) dateTime35);
        int int38 = partial22.size();
        org.joda.time.Partial partial39 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial22);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.minus(readablePeriod40);
        int int42 = partial5.compareTo((org.joda.time.ReadablePartial) partial39);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType6 = partial1.getFieldType((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial3.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        int int38 = partial35.size();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial40.plus(readablePeriod41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        boolean boolean45 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean46 = partial31.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = partial31.toString(dateTimeFormatter47);
        boolean boolean49 = partial27.isMatch((org.joda.time.ReadablePartial) partial31);
        // The following exception was thrown during execution in test generation
        try {
            int int51 = partial31.getValue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial8 = partial1.with(dateTimeFieldType6, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        int int26 = partial10.size();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial10.minus(readablePeriod27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial30.plus(readablePeriod31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        int int39 = partial36.size();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        boolean boolean46 = partial36.isMatch((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean47 = partial32.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial32.toString(dateTimeFormatter48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = partial32.toString(dateTimeFormatter50);
        int[] intArray52 = partial32.getValues();
        int[] intArray53 = partial32.getValues();
        boolean boolean54 = partial10.isAfter((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DurationFieldType durationFieldType55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial57 = partial32.withFieldAdded(durationFieldType55, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial14.toString(dateTimeFormatter30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial14.toString(dateTimeFormatter32);
        int[] intArray34 = partial14.getValues();
        boolean boolean35 = partial1.isEqual((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        int int40 = partial37.size();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        boolean boolean47 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial37.toString(dateTimeFormatter48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = partial57.withChronologyRetainFields(chronology58);
        boolean boolean60 = partial53.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial62.plus(readablePeriod63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = partial64.toDateTime(readableInstant65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = partial68.withChronologyRetainFields(chronology69);
        boolean boolean71 = partial64.isAfter((org.joda.time.ReadablePartial) partial68);
        boolean boolean72 = partial53.isBefore((org.joda.time.ReadablePartial) partial68);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial53.plus(readablePeriod73);
        boolean boolean75 = partial37.isAfter((org.joda.time.ReadablePartial) partial53);
        boolean boolean76 = partial14.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property78 = partial37.property(dateTimeFieldType77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial10.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType16 = partial10.getFieldType((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.DurationFieldType durationFieldType11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial13 = partial7.withFieldAdded(durationFieldType11, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField25 = partial23.getField((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = partial10.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial17 = partial10.withField(dateTimeFieldType15, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter14);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        boolean boolean13 = partial11.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology14 = partial11.getChronology();
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = partial17.withChronologyRetainFields(chronology18);
        boolean boolean20 = partial15.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        java.lang.String str23 = partial22.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        int int28 = partial25.size();
        boolean boolean29 = partial22.isAfter((org.joda.time.ReadablePartial) partial25);
        boolean boolean30 = partial15.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean31 = partial1.isMatch((org.joda.time.ReadablePartial) partial15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial15.toString(dateTimeFormatter32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial36 = partial15.with(dateTimeFieldType34, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial1.minus(readablePeriod13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField16 = partial1.getField(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial14);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        int[] intArray20 = new int[] { (short) 100, 10, 10, (-1), 0 };
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        org.joda.time.Partial partial26 = partial22.without(dateTimeFieldType25);
        org.joda.time.Chronology chronology27 = partial26.getChronology();
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray20, chronology27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must be the same length as the types array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[100, 10, 10, -1, 0]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property3 = partial1.property(dateTimeFieldType2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        int int29 = partial26.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial26.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = partial26.isSupported(dateTimeFieldType31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial34.plus(readablePeriod35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial40.plus(readablePeriod41);
        int int43 = partial40.size();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial45.plus(readablePeriod46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        boolean boolean50 = partial40.isMatch((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean51 = partial36.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial36.toString(dateTimeFormatter52);
        java.lang.String str55 = partial36.toString("[]");
        boolean boolean56 = partial26.isMatch((org.joda.time.ReadablePartial) partial36);
        int[] intArray57 = partial26.getValues();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial59.plus(readablePeriod60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = partial65.withChronologyRetainFields(chronology66);
        boolean boolean68 = partial61.isAfter((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology69 = partial65.getChronology();
        org.joda.time.Partial partial70 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray57, chronology69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        boolean boolean74 = partial72.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology75 = partial72.getChronology();
        int[] intArray76 = partial72.getValues();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = new org.joda.time.Partial(chronology77);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Partial partial80 = partial78.withChronologyRetainFields(chronology79);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = null;
        org.joda.time.Partial partial82 = partial78.without(dateTimeFieldType81);
        org.joda.time.Chronology chronology83 = partial82.getChronology();
        org.joda.time.Partial partial84 = new org.joda.time.Partial(chronology83);
        org.joda.time.Partial partial85 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray76, chronology83);
        int[] intArray86 = partial85.getValues();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial27 = partial3.withFieldAddWrapped(durationFieldType25, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        boolean boolean13 = partial11.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology14 = partial11.getChronology();
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = partial17.withChronologyRetainFields(chronology18);
        boolean boolean20 = partial15.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        java.lang.String str23 = partial22.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        int int28 = partial25.size();
        boolean boolean29 = partial22.isAfter((org.joda.time.ReadablePartial) partial25);
        boolean boolean30 = partial15.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean31 = partial1.isMatch((org.joda.time.ReadablePartial) partial15);
        java.util.Locale locale33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = partial1.toString("hi!", locale33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial1.minus(readablePeriod11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        int int23 = partial20.size();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        boolean boolean30 = partial20.isMatch((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial16.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial16.toString(dateTimeFormatter32);
        java.lang.String str35 = partial16.toString("[]");
        boolean boolean36 = partial12.isBefore((org.joda.time.ReadablePartial) partial16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType38 = partial16.getFieldType(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial9.plus(readablePeriod10);
        int int12 = partial9.size();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        boolean boolean19 = partial9.isMatch((org.joda.time.ReadableInstant) dateTime18);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial5.toString(dateTimeFormatter21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial5.withPeriodAdded(readablePeriod23, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial5.getFieldTypes();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial28.plus(readablePeriod29);
        int int31 = partial28.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = partial28.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = partial28.isSupported(dateTimeFieldType33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        int int45 = partial42.size();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial47.plus(readablePeriod48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        boolean boolean52 = partial42.isMatch((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = partial38.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = partial38.toString(dateTimeFormatter54);
        java.lang.String str57 = partial38.toString("[]");
        boolean boolean58 = partial28.isMatch((org.joda.time.ReadablePartial) partial38);
        int[] intArray59 = partial28.getValues();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial67.withChronologyRetainFields(chronology68);
        boolean boolean70 = partial63.isAfter((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology71 = partial67.getChronology();
        org.joda.time.Partial partial72 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray59, chronology71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        boolean boolean76 = partial74.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology77 = partial74.getChronology();
        int[] intArray78 = partial74.getValues();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Partial partial80 = new org.joda.time.Partial(chronology79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = partial80.withChronologyRetainFields(chronology81);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = null;
        org.joda.time.Partial partial84 = partial80.without(dateTimeFieldType83);
        org.joda.time.Chronology chronology85 = partial84.getChronology();
        org.joda.time.Partial partial86 = new org.joda.time.Partial(chronology85);
        org.joda.time.Partial partial87 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray78, chronology85);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial88 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) 100, chronology85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertNotNull(chronology85);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        boolean boolean11 = partial1.isMatch((org.joda.time.ReadableInstant) dateTime10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = partial1.getFieldType((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        java.lang.String str4 = partial3.toString();
        java.lang.Class<?> wildcardClass5 = partial3.getClass();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial3.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int29 = partial27.get(dateTimeFieldType28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial27);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = partial6.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        java.lang.String str23 = partial22.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        int int28 = partial25.size();
        boolean boolean29 = partial22.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        java.lang.String str32 = partial31.toString();
        int int33 = partial22.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        int int38 = partial35.size();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial40.plus(readablePeriod41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        boolean boolean45 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean46 = partial31.isMatch((org.joda.time.ReadableInstant) dateTime44);
        int int47 = partial31.size();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial31.minus(readablePeriod48);
        boolean boolean50 = partial20.isMatch((org.joda.time.ReadablePartial) partial49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int52 = partial49.get(dateTimeFieldType51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial9.withChronologyRetainFields(chronology10);
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial20.withChronologyRetainFields(chronology21);
        boolean boolean23 = partial16.isAfter((org.joda.time.ReadablePartial) partial20);
        boolean boolean24 = partial5.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial5.plus(readablePeriod25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial28.plus(readablePeriod29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial34.plus(readablePeriod35);
        int int37 = partial34.size();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = partial41.toDateTime(readableInstant42);
        boolean boolean44 = partial34.isMatch((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean45 = partial30.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial30.plus(readablePeriod46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial47);
        java.lang.String str49 = partial47.toString();
        boolean boolean50 = partial5.isAfter((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        java.lang.String str53 = partial52.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial55.plus(readablePeriod56);
        int int58 = partial55.size();
        boolean boolean59 = partial52.isAfter((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        java.lang.String str62 = partial61.toString();
        int int63 = partial52.compareTo((org.joda.time.ReadablePartial) partial61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = partial61.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray65 = partial61.getFieldTypes();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial67.plus(readablePeriod68);
        int int70 = partial67.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray71 = partial67.getFieldTypes();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = new org.joda.time.Partial(chronology72);
        boolean boolean75 = partial73.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology76 = partial73.getChronology();
        int[] intArray77 = partial73.getValues();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(chronology78);
        boolean boolean81 = partial79.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology82 = partial79.getChronology();
        org.joda.time.Partial partial83 = new org.joda.time.Partial(dateTimeFieldTypeArray71, intArray77, chronology82);
        int[] intArray84 = new int[] {};
        org.joda.time.Partial partial85 = new org.joda.time.Partial(dateTimeFieldTypeArray71, intArray84);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Partial partial87 = new org.joda.time.Partial(chronology86);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Partial partial89 = partial87.withChronologyRetainFields(chronology88);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = null;
        org.joda.time.Partial partial91 = partial87.without(dateTimeFieldType90);
        org.joda.time.Chronology chronology92 = partial91.getChronology();
        org.joda.time.Partial partial93 = new org.joda.time.Partial(dateTimeFieldTypeArray65, intArray84, chronology92);
        org.joda.time.Partial partial94 = partial5.withChronologyRetainFields(chronology92);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial95 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) -1, chronology92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[]" + "'", str62, "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray65);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(partial89);
        org.junit.Assert.assertNotNull(partial91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(partial94);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial9.plus(readablePeriod10);
        int int12 = partial9.size();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        boolean boolean19 = partial9.isMatch((org.joda.time.ReadableInstant) dateTime18);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial5.toString(dateTimeFormatter21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial5.withPeriodAdded(readablePeriod23, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial5.getFieldTypes();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial28.plus(readablePeriod29);
        int int31 = partial28.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = partial28.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = partial28.isSupported(dateTimeFieldType33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        int int45 = partial42.size();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial47.plus(readablePeriod48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        boolean boolean52 = partial42.isMatch((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = partial38.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = partial38.toString(dateTimeFormatter54);
        java.lang.String str57 = partial38.toString("[]");
        boolean boolean58 = partial28.isMatch((org.joda.time.ReadablePartial) partial38);
        int[] intArray59 = partial28.getValues();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial67.withChronologyRetainFields(chronology68);
        boolean boolean70 = partial63.isAfter((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology71 = partial67.getChronology();
        org.joda.time.Partial partial72 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray59, chronology71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial73 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) 1, chronology71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = partial1.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.minus(readablePeriod5);
        org.joda.time.DurationFieldType durationFieldType7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial9 = partial6.withFieldAdded(durationFieldType7, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(partial6);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        boolean boolean6 = partial4.equals((java.lang.Object) 0.0f);
        int int7 = partial1.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.DurationFieldType durationFieldType8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial10 = partial1.withFieldAddWrapped(durationFieldType8, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial14.toString(dateTimeFormatter30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial14.toString(dateTimeFormatter32);
        int[] intArray34 = partial14.getValues();
        boolean boolean35 = partial1.isEqual((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        int int40 = partial37.size();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        boolean boolean47 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial37.toString(dateTimeFormatter48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = partial57.withChronologyRetainFields(chronology58);
        boolean boolean60 = partial53.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial62.plus(readablePeriod63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = partial64.toDateTime(readableInstant65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = partial68.withChronologyRetainFields(chronology69);
        boolean boolean71 = partial64.isAfter((org.joda.time.ReadablePartial) partial68);
        boolean boolean72 = partial53.isBefore((org.joda.time.ReadablePartial) partial68);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial53.plus(readablePeriod73);
        boolean boolean75 = partial37.isAfter((org.joda.time.ReadablePartial) partial53);
        boolean boolean76 = partial14.isBefore((org.joda.time.ReadablePartial) partial37);
        java.lang.Class<?> wildcardClass77 = partial37.getClass();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        java.lang.String str22 = partial3.toString("[]");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        int int27 = partial24.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial24.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = partial24.isSupported(dateTimeFieldType29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = partial24.indexOf(dateTimeFieldType31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial24);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial24.minus(readablePeriod34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        boolean boolean37 = partial35.isSupported(dateTimeFieldType36);
        boolean boolean38 = partial3.equals((java.lang.Object) boolean37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        java.lang.String str41 = partial40.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        boolean boolean47 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        java.lang.String str50 = partial49.toString();
        int int51 = partial40.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.plus(readablePeriod54);
        int int56 = partial53.size();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial58.plus(readablePeriod59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = partial60.toDateTime(readableInstant61);
        boolean boolean63 = partial53.isMatch((org.joda.time.ReadableInstant) dateTime62);
        boolean boolean64 = partial49.isMatch((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime65 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        boolean boolean67 = partial3.isSupported(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        int int26 = partial10.size();
        org.joda.time.ReadablePartial readablePartial27 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = partial10.isBefore(readablePartial27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        java.lang.String str7 = partial1.toString("[]");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        org.joda.time.Partial partial13 = partial9.without(dateTimeFieldType12);
        org.joda.time.Chronology chronology14 = partial13.getChronology();
        boolean boolean15 = partial1.isEqual((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.DurationFieldType durationFieldType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial19 = partial1.withFieldAdded(durationFieldType17, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.minus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        int int29 = partial26.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial26.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = partial26.isSupported(dateTimeFieldType31);
        java.lang.String str33 = partial26.toStringList();
        java.lang.String str35 = partial26.toString("[]");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        boolean boolean53 = partial43.isMatch((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = partial39.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial39.plus(readablePeriod55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        java.lang.String str59 = partial58.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        int int64 = partial61.size();
        boolean boolean65 = partial58.isAfter((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        java.lang.String str68 = partial67.toString();
        int int69 = partial58.compareTo((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.Partial partial73 = partial71.plus(readablePeriod72);
        int int74 = partial71.size();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial78 = partial76.plus(readablePeriod77);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = partial78.toDateTime(readableInstant79);
        boolean boolean81 = partial71.isMatch((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean82 = partial67.isMatch((org.joda.time.ReadableInstant) dateTime80);
        int int83 = partial67.size();
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.Partial partial85 = partial67.minus(readablePeriod84);
        boolean boolean86 = partial56.isMatch((org.joda.time.ReadablePartial) partial85);
        boolean boolean87 = partial26.isMatch((org.joda.time.ReadablePartial) partial85);
        boolean boolean88 = partial24.isEqual((org.joda.time.ReadablePartial) partial26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = partial26.getFormatter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str91 = partial26.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[]" + "'", str68, "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNull(dateTimeFormatter89);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial14.plus(readablePeriod30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        java.lang.String str34 = partial33.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        int int39 = partial36.size();
        boolean boolean40 = partial33.isAfter((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        java.lang.String str43 = partial42.toString();
        int int44 = partial33.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        int int49 = partial46.size();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        boolean boolean56 = partial46.isMatch((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = partial42.isMatch((org.joda.time.ReadableInstant) dateTime55);
        int int58 = partial42.size();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial42.minus(readablePeriod59);
        boolean boolean61 = partial31.isMatch((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial1.isMatch((org.joda.time.ReadablePartial) partial60);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial1.plus(readablePeriod63);
        java.lang.Class<?> wildcardClass65 = partial64.getClass();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = new org.joda.time.DateTimeFieldType[] { dateTimeFieldType0 };
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        boolean boolean5 = partial3.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology6 = partial3.getChronology();
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        int[] intArray8 = partial7.getValues();
        int[] intArray9 = partial7.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial11.plus(readablePeriod12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = partial13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        int int20 = partial17.size();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = partial24.toDateTime(readableInstant25);
        boolean boolean27 = partial17.isMatch((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = partial13.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = partial13.toString(dateTimeFormatter29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial13.withPeriodAdded(readablePeriod31, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = partial13.getFieldTypes();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        int int39 = partial36.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial36.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = partial36.isSupported(dateTimeFieldType41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial50.plus(readablePeriod51);
        int int53 = partial50.size();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial55.plus(readablePeriod56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        boolean boolean60 = partial50.isMatch((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean61 = partial46.isBefore((org.joda.time.ReadablePartial) partial50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = partial46.toString(dateTimeFormatter62);
        java.lang.String str65 = partial46.toString("[]");
        boolean boolean66 = partial36.isMatch((org.joda.time.ReadablePartial) partial46);
        int[] intArray67 = partial36.getValues();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = partial75.withChronologyRetainFields(chronology76);
        boolean boolean78 = partial71.isAfter((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Chronology chronology79 = partial75.getChronology();
        org.joda.time.Partial partial80 = new org.joda.time.Partial(dateTimeFieldTypeArray34, intArray67, chronology79);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial81 = new org.joda.time.Partial(dateTimeFieldTypeArray1, intArray9, chronology79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must be the same length as the types array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[]" + "'", str65, "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology79);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial3.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        int int38 = partial35.size();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial40.plus(readablePeriod41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        boolean boolean45 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean46 = partial31.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = partial31.toString(dateTimeFormatter47);
        boolean boolean49 = partial27.isMatch((org.joda.time.ReadablePartial) partial31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType51 = partial31.getFieldType((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial14.toString(dateTimeFormatter30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial14.toString(dateTimeFormatter32);
        int[] intArray34 = partial14.getValues();
        boolean boolean35 = partial1.isEqual((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        int int40 = partial37.size();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        boolean boolean47 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial37.toString(dateTimeFormatter48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = partial57.withChronologyRetainFields(chronology58);
        boolean boolean60 = partial53.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial62.plus(readablePeriod63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = partial64.toDateTime(readableInstant65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = partial68.withChronologyRetainFields(chronology69);
        boolean boolean71 = partial64.isAfter((org.joda.time.ReadablePartial) partial68);
        boolean boolean72 = partial53.isBefore((org.joda.time.ReadablePartial) partial68);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial53.plus(readablePeriod73);
        boolean boolean75 = partial37.isAfter((org.joda.time.ReadablePartial) partial53);
        boolean boolean76 = partial14.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial79 = partial37.withField(dateTimeFieldType77, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        java.util.Locale locale8 = null;
        java.lang.String str9 = partial5.toString("[]", locale8);
        java.lang.Class<?> wildcardClass10 = partial5.getClass();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        java.lang.String str7 = partial1.toString("[]");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        org.joda.time.Partial partial13 = partial9.without(dateTimeFieldType12);
        org.joda.time.Chronology chronology14 = partial13.getChronology();
        boolean boolean15 = partial1.isEqual((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField18 = partial16.getField((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.DurationFieldType durationFieldType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial6 = partial1.withFieldAddWrapped(durationFieldType4, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (-1));
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial6);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = partial6.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial11 = partial6.withField(dateTimeFieldType9, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property2 = partial0.property(dateTimeFieldType1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial9.withChronologyRetainFields(chronology10);
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial20.withChronologyRetainFields(chronology21);
        boolean boolean23 = partial16.isAfter((org.joda.time.ReadablePartial) partial20);
        boolean boolean24 = partial5.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial5.plus(readablePeriod25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial28.plus(readablePeriod29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial34.plus(readablePeriod35);
        int int37 = partial34.size();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = partial41.toDateTime(readableInstant42);
        boolean boolean44 = partial34.isMatch((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean45 = partial30.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial30.plus(readablePeriod46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial47);
        java.lang.String str49 = partial47.toString();
        boolean boolean50 = partial5.isAfter((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        java.lang.String str53 = partial52.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial55.plus(readablePeriod56);
        int int58 = partial55.size();
        boolean boolean59 = partial52.isAfter((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        java.lang.String str62 = partial61.toString();
        int int63 = partial52.compareTo((org.joda.time.ReadablePartial) partial61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = partial61.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray65 = partial61.getFieldTypes();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial67.plus(readablePeriod68);
        int int70 = partial67.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray71 = partial67.getFieldTypes();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = new org.joda.time.Partial(chronology72);
        boolean boolean75 = partial73.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology76 = partial73.getChronology();
        int[] intArray77 = partial73.getValues();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(chronology78);
        boolean boolean81 = partial79.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology82 = partial79.getChronology();
        org.joda.time.Partial partial83 = new org.joda.time.Partial(dateTimeFieldTypeArray71, intArray77, chronology82);
        int[] intArray84 = new int[] {};
        org.joda.time.Partial partial85 = new org.joda.time.Partial(dateTimeFieldTypeArray71, intArray84);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Partial partial87 = new org.joda.time.Partial(chronology86);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Partial partial89 = partial87.withChronologyRetainFields(chronology88);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = null;
        org.joda.time.Partial partial91 = partial87.without(dateTimeFieldType90);
        org.joda.time.Chronology chronology92 = partial91.getChronology();
        org.joda.time.Partial partial93 = new org.joda.time.Partial(dateTimeFieldTypeArray65, intArray84, chronology92);
        org.joda.time.Partial partial94 = partial5.withChronologyRetainFields(chronology92);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial95 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 100, chronology92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[]" + "'", str62, "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray65);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(partial89);
        org.junit.Assert.assertNotNull(partial91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(partial94);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = partial3.toString("[]", locale5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        java.util.Locale locale10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = partial3.toString("hi!", locale10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial8);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial14.plus(readablePeriod30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        java.lang.String str34 = partial33.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        int int39 = partial36.size();
        boolean boolean40 = partial33.isAfter((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        java.lang.String str43 = partial42.toString();
        int int44 = partial33.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        int int49 = partial46.size();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        boolean boolean56 = partial46.isMatch((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = partial42.isMatch((org.joda.time.ReadableInstant) dateTime55);
        int int58 = partial42.size();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial42.minus(readablePeriod59);
        boolean boolean61 = partial31.isMatch((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial1.isMatch((org.joda.time.ReadablePartial) partial60);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = partial60.getValue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.ReadablePartial readablePartial21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int22 = partial3.compareTo(readablePartial21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        java.lang.String str7 = partial1.toString("[]");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        org.joda.time.Partial partial13 = partial9.without(dateTimeFieldType12);
        org.joda.time.Chronology chronology14 = partial13.getChronology();
        boolean boolean15 = partial1.isEqual((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial19 = partial1.withField(dateTimeFieldType17, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial35.getFieldTypes();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        int int44 = partial41.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = partial41.getFieldTypes();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        boolean boolean49 = partial47.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology50 = partial47.getChronology();
        int[] intArray51 = partial47.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        boolean boolean55 = partial53.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology56 = partial53.getChronology();
        org.joda.time.Partial partial57 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray51, chronology56);
        int[] intArray58 = new int[] {};
        org.joda.time.Partial partial59 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial61.withChronologyRetainFields(chronology62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        org.joda.time.Partial partial65 = partial61.without(dateTimeFieldType64);
        org.joda.time.Chronology chronology66 = partial65.getChronology();
        org.joda.time.Partial partial67 = new org.joda.time.Partial(dateTimeFieldTypeArray39, intArray58, chronology66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = partial75.withChronologyRetainFields(chronology76);
        boolean boolean78 = partial71.isAfter((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Chronology chronology79 = partial75.getChronology();
        org.joda.time.Partial partial80 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray58, chronology79);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int82 = partial80.get(dateTimeFieldType81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology79);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.plus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial26.withChronologyRetainFields(chronology27);
        java.util.Locale locale30 = null;
        java.lang.String str31 = partial28.toString("[]", locale30);
        boolean boolean32 = partial24.isEqual((org.joda.time.ReadablePartial) partial28);
        int int33 = partial28.size();
        java.util.Locale locale35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = partial28.toString("hi!", locale35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial15);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        boolean boolean24 = partial22.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology25 = partial22.getChronology();
        int[] intArray26 = partial22.getValues();
        java.lang.String str28 = partial22.toString("[]");
        boolean boolean29 = partial5.isAfter((org.joda.time.ReadablePartial) partial22);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = partial5.isSupported(dateTimeFieldType30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = partial5.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        java.lang.String str17 = partial14.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial14.getFormatter();
        boolean boolean19 = partial3.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DurationFieldType durationFieldType20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial22 = partial3.withFieldAddWrapped(durationFieldType20, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.lang.String str4 = partial1.toStringList();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField6 = partial1.getField((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial14.toString(dateTimeFormatter30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial14.toString(dateTimeFormatter32);
        int[] intArray34 = partial14.getValues();
        boolean boolean35 = partial1.isEqual((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        int int40 = partial37.size();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        boolean boolean47 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial37.toString(dateTimeFormatter48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = partial57.withChronologyRetainFields(chronology58);
        boolean boolean60 = partial53.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial62.plus(readablePeriod63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = partial64.toDateTime(readableInstant65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = partial68.withChronologyRetainFields(chronology69);
        boolean boolean71 = partial64.isAfter((org.joda.time.ReadablePartial) partial68);
        boolean boolean72 = partial53.isBefore((org.joda.time.ReadablePartial) partial68);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial53.plus(readablePeriod73);
        boolean boolean75 = partial37.isAfter((org.joda.time.ReadablePartial) partial53);
        boolean boolean76 = partial14.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DurationFieldType durationFieldType77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial79 = partial37.withFieldAdded(durationFieldType77, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        int[] intArray23 = partial3.getValues();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        java.lang.String str26 = partial25.toString();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial28.plus(readablePeriod29);
        int int31 = partial28.size();
        boolean boolean32 = partial25.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        java.lang.String str35 = partial34.toString();
        int int36 = partial25.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial38.plus(readablePeriod39);
        int int41 = partial38.size();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = partial45.toDateTime(readableInstant46);
        boolean boolean48 = partial38.isMatch((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean49 = partial34.isMatch((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        java.lang.String str56 = partial55.toString();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial58.plus(readablePeriod59);
        int int61 = partial58.size();
        boolean boolean62 = partial55.isAfter((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        java.lang.String str65 = partial64.toString();
        int int66 = partial55.compareTo((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial70 = partial68.plus(readablePeriod69);
        int int71 = partial68.size();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = new org.joda.time.Partial(chronology72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Partial partial75 = partial73.plus(readablePeriod74);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = partial75.toDateTime(readableInstant76);
        boolean boolean78 = partial68.isMatch((org.joda.time.ReadableInstant) dateTime77);
        boolean boolean79 = partial64.isMatch((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime80 = partial51.toDateTime((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime81 = partial34.toDateTime((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime dateTime82 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial85 = partial3.with(dateTimeFieldType83, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[]" + "'", str65, "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        int int26 = partial10.size();
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.minus(readablePeriod28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        boolean boolean32 = partial27.isMatch((org.joda.time.ReadablePartial) partial31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial27.getFieldTypes();
        int[] intArray34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial35 = new org.joda.time.Partial(dateTimeFieldTypeArray33, intArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        java.lang.String str22 = partial21.toString();
        int int23 = partial12.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial12.minus(readablePeriod24);
        boolean boolean26 = partial1.isBefore((org.joda.time.ReadablePartial) partial12);
        java.lang.String str27 = partial12.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = partial12.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        java.lang.String str25 = partial24.toStringList();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial5.plus(readablePeriod6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        java.lang.String str10 = partial9.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        int int15 = partial12.size();
        boolean boolean16 = partial9.isAfter((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        java.lang.String str19 = partial18.toString();
        int int20 = partial9.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        int int25 = partial22.size();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.plus(readablePeriod28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        boolean boolean32 = partial22.isMatch((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean33 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime31);
        int int34 = partial18.size();
        org.joda.time.Partial partial35 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.minus(readablePeriod36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        boolean boolean40 = partial35.isMatch((org.joda.time.ReadablePartial) partial39);
        boolean boolean41 = partial5.isAfter((org.joda.time.ReadablePartial) partial39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int43 = partial5.get(dateTimeFieldType42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial3.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial3.withPeriodAdded(readablePeriod28, (int) (short) 100);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        java.lang.String str37 = partial36.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        boolean boolean43 = partial36.isAfter((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        java.lang.String str46 = partial45.toString();
        int int47 = partial36.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.plus(readablePeriod50);
        int int52 = partial49.size();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial54.plus(readablePeriod55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = partial56.toDateTime(readableInstant57);
        boolean boolean59 = partial49.isMatch((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean60 = partial45.isMatch((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime61 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime62 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        java.lang.Class<?> wildcardClass63 = dateTime61.getClass();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial1.minus(readablePeriod11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.minus(readablePeriod13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        java.lang.String str17 = partial16.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        int int22 = partial19.size();
        boolean boolean23 = partial16.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        java.lang.String str26 = partial25.toString();
        int int27 = partial16.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        int int29 = partial16.indexOf(dateTimeFieldType28);
        boolean boolean30 = partial12.isMatch((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial33 = partial16.with(dateTimeFieldType31, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        boolean boolean5 = partial3.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology6 = partial3.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial7 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 100, chronology6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        java.lang.String str7 = partial1.toString("[]");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        org.joda.time.Partial partial13 = partial9.without(dateTimeFieldType12);
        org.joda.time.Chronology chronology14 = partial13.getChronology();
        boolean boolean15 = partial1.isEqual((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.DurationFieldType durationFieldType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial19 = partial1.withFieldAddWrapped(durationFieldType17, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = partial24.getValue((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = partial1.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        int int26 = partial10.size();
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial10);
        org.joda.time.DurationFieldType durationFieldType28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial30 = partial10.withFieldAdded(durationFieldType28, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial9.withChronologyRetainFields(chronology10);
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial20.withChronologyRetainFields(chronology21);
        boolean boolean23 = partial16.isAfter((org.joda.time.ReadablePartial) partial20);
        boolean boolean24 = partial5.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial5.plus(readablePeriod25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        int int28 = partial26.indexOf(dateTimeFieldType27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        org.joda.time.Partial partial34 = partial30.without(dateTimeFieldType33);
        org.joda.time.Chronology chronology35 = partial34.getChronology();
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Partial partial37 = partial26.withChronologyRetainFields(chronology35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial38 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 1, chronology35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(partial37);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        org.joda.time.Partial partial6 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType9 = partial1.getFieldType((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        java.lang.String str22 = partial3.toString("[]");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = partial24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        org.joda.time.Partial partial28 = partial24.without(dateTimeFieldType27);
        org.joda.time.Chronology chronology29 = partial28.getChronology();
        org.joda.time.Partial partial30 = partial3.withChronologyRetainFields(chronology29);
        org.joda.time.DurationFieldType durationFieldType31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial33 = partial3.withFieldAdded(durationFieldType31, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType24 = partial3.getFieldType((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = partial3.toString("[]", locale5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = partial3.isSupported(dateTimeFieldType7);
        java.util.Locale locale10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = partial3.toString("hi!", locale10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = partial1.getValue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType9 = partial7.getFieldType((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.minus(readablePeriod23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = partial24.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        boolean boolean5 = partial3.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology6 = partial3.getChronology();
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial8 = new org.joda.time.Partial(dateTimeFieldType0, (int) 'a', chronology6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (-1));
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        org.joda.time.Partial partial9 = partial7.without(dateTimeFieldType8);
        org.joda.time.DateTimeField[] dateTimeFieldArray10 = partial9.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = partial9.indexOf(dateTimeFieldType11);
        java.lang.Class<?> wildcardClass13 = partial9.getClass();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTimeFieldArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType14 = partial10.getFieldType((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = partial3.toString("[]", locale5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        boolean boolean10 = partial8.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology11 = partial8.getChronology();
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        int[] intArray13 = partial12.getValues();
        int[] intArray14 = partial12.getValues();
        org.joda.time.Partial partial15 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial12);
        boolean boolean16 = partial3.isMatch((org.joda.time.ReadablePartial) partial12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField18 = partial3.getField((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial5 = partial1.with(dateTimeFieldType3, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial1.minus(readablePeriod11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        int int23 = partial20.size();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        boolean boolean30 = partial20.isMatch((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial16.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial16.toString(dateTimeFormatter32);
        java.lang.String str35 = partial16.toString("[]");
        boolean boolean36 = partial12.isBefore((org.joda.time.ReadablePartial) partial16);
        java.lang.String str37 = partial12.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        org.joda.time.DateTimeField[] dateTimeFieldArray42 = partial39.getFields();
        boolean boolean43 = partial12.isEqual((org.joda.time.ReadablePartial) partial39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField45 = partial12.getField((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTimeFieldArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        java.lang.String str9 = partial8.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial11.plus(readablePeriod12);
        int int14 = partial11.size();
        boolean boolean15 = partial8.isAfter((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        java.lang.String str18 = partial17.toString();
        int int19 = partial8.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = partial8.indexOf(dateTimeFieldType20);
        boolean boolean22 = partial5.isEqual((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial30.plus(readablePeriod31);
        int int33 = partial30.size();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        boolean boolean40 = partial30.isMatch((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean41 = partial26.isBefore((org.joda.time.ReadablePartial) partial30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial26.toString(dateTimeFormatter42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = partial26.toString(dateTimeFormatter44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial26.minus(readablePeriod46);
        boolean boolean48 = partial8.isAfter((org.joda.time.ReadablePartial) partial47);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial13 = partial1.withField(dateTimeFieldType11, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.plus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial26.withChronologyRetainFields(chronology27);
        java.util.Locale locale30 = null;
        java.lang.String str31 = partial28.toString("[]", locale30);
        boolean boolean32 = partial24.isEqual((org.joda.time.ReadablePartial) partial28);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial28.minus(readablePeriod33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        int int45 = partial42.size();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial47.plus(readablePeriod48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        boolean boolean52 = partial42.isMatch((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = partial38.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = partial38.toString(dateTimeFormatter54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial58 = partial38.withPeriodAdded(readablePeriod56, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = partial38.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial62 = partial38.withPeriodAdded(readablePeriod60, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial65 = partial38.withPeriodAdded(readablePeriod63, (int) (short) 100);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial67.plus(readablePeriod68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        java.lang.String str72 = partial71.toString();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial74.plus(readablePeriod75);
        int int77 = partial74.size();
        boolean boolean78 = partial71.isAfter((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Partial partial80 = new org.joda.time.Partial(chronology79);
        java.lang.String str81 = partial80.toString();
        int int82 = partial71.compareTo((org.joda.time.ReadablePartial) partial80);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Partial partial84 = new org.joda.time.Partial(chronology83);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Partial partial86 = partial84.plus(readablePeriod85);
        int int87 = partial84.size();
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Partial partial89 = new org.joda.time.Partial(chronology88);
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        org.joda.time.Partial partial91 = partial89.plus(readablePeriod90);
        org.joda.time.ReadableInstant readableInstant92 = null;
        org.joda.time.DateTime dateTime93 = partial91.toDateTime(readableInstant92);
        boolean boolean94 = partial84.isMatch((org.joda.time.ReadableInstant) dateTime93);
        boolean boolean95 = partial80.isMatch((org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.DateTime dateTime96 = partial67.toDateTime((org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.DateTime dateTime97 = partial65.toDateTime((org.joda.time.ReadableInstant) dateTime96);
        boolean boolean98 = partial28.isMatch((org.joda.time.ReadableInstant) dateTime96);
        java.lang.String str99 = partial28.toStringList();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[]" + "'", str72, "[]");
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[]" + "'", str81, "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(partial86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(partial91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "[]" + "'", str99, "[]");
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = partial3.indexOf(dateTimeFieldType21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        java.lang.String str29 = partial28.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial31.plus(readablePeriod32);
        int int34 = partial31.size();
        boolean boolean35 = partial28.isAfter((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        java.lang.String str38 = partial37.toString();
        int int39 = partial28.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        int int44 = partial41.size();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        boolean boolean51 = partial41.isMatch((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean52 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial55.plus(readablePeriod56);
        int int58 = partial55.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = partial55.getFieldTypes();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        boolean boolean63 = partial61.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology64 = partial61.getChronology();
        int[] intArray65 = partial61.getValues();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        boolean boolean69 = partial67.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology70 = partial67.getChronology();
        org.joda.time.Partial partial71 = new org.joda.time.Partial(dateTimeFieldTypeArray59, intArray65, chronology70);
        org.joda.time.Partial partial72 = partial24.withChronologyRetainFields(chronology70);
        boolean boolean73 = partial3.isEqual((org.joda.time.ReadablePartial) partial72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property75 = partial3.property(dateTimeFieldType74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        java.lang.String str31 = partial30.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int int36 = partial33.size();
        boolean boolean37 = partial30.isAfter((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        java.lang.String str40 = partial39.toString();
        int int41 = partial30.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        boolean boolean53 = partial43.isMatch((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime55 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean56 = partial3.isMatch((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = partial3.isSupported(dateTimeFieldType57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        org.joda.time.Partial partial60 = partial3.without(dateTimeFieldType59);
        java.util.Locale locale62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = partial3.toString("", locale62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(partial60);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime51 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime52 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial54 = partial3.plus(readablePeriod53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property56 = partial54.property(dateTimeFieldType55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(partial54);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        java.lang.String str9 = partial8.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial11.plus(readablePeriod12);
        int int14 = partial11.size();
        boolean boolean15 = partial8.isAfter((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        java.lang.String str18 = partial17.toString();
        int int19 = partial8.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = partial8.indexOf(dateTimeFieldType20);
        boolean boolean22 = partial5.isEqual((org.joda.time.ReadablePartial) partial8);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        boolean boolean24 = partial8.isSupported(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial15);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        boolean boolean24 = partial22.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology25 = partial22.getChronology();
        int[] intArray26 = partial22.getValues();
        java.lang.String str28 = partial22.toString("[]");
        boolean boolean29 = partial5.isAfter((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial31.plus(readablePeriod32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = partial33.toDateTime(readableInstant34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        int int40 = partial37.size();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        boolean boolean47 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial33.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = partial33.toString(dateTimeFormatter49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = partial33.toString(dateTimeFormatter51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        org.joda.time.Partial partial54 = partial33.without(dateTimeFieldType53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        java.lang.String str57 = partial56.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial59.plus(readablePeriod60);
        int int62 = partial59.size();
        boolean boolean63 = partial56.isAfter((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        java.lang.String str66 = partial65.toString();
        int int67 = partial56.compareTo((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        int int72 = partial69.size();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial74.plus(readablePeriod75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = partial76.toDateTime(readableInstant77);
        boolean boolean79 = partial69.isMatch((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean80 = partial65.isMatch((org.joda.time.ReadableInstant) dateTime78);
        int int81 = partial65.size();
        org.joda.time.Partial partial82 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial65);
        boolean boolean83 = partial33.isEqual((org.joda.time.ReadablePartial) partial65);
        boolean boolean84 = partial5.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Partial partial85 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial65);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = null;
        int int87 = partial85.indexOf(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        boolean boolean17 = partial1.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.Class<?> wildcardClass18 = partial5.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.DurationFieldType durationFieldType8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial10 = partial7.withFieldAddWrapped(durationFieldType8, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial14.toString(dateTimeFormatter30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial14.toString(dateTimeFormatter32);
        int[] intArray34 = partial14.getValues();
        boolean boolean35 = partial1.isEqual((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = partial1.toString(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial24 = partial21.withField(dateTimeFieldType22, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        java.lang.String str17 = partial14.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial14.getFormatter();
        boolean boolean19 = partial3.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial21.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial23.withPeriodAdded(readablePeriod24, (-1));
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        org.joda.time.Partial partial29 = partial27.without(dateTimeFieldType28);
        boolean boolean30 = partial3.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial27.getFieldTypes();
        java.lang.String str32 = partial27.toStringList();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial13 = partial10.with(dateTimeFieldType11, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime48);
        int int51 = partial35.size();
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        boolean boolean53 = partial3.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        boolean boolean57 = partial55.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = partial55.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial55.minus(readablePeriod59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        org.joda.time.Partial partial62 = partial55.without(dateTimeFieldType61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial66 = partial64.plus(readablePeriod65);
        int int67 = partial64.size();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        boolean boolean74 = partial64.isMatch((org.joda.time.ReadableInstant) dateTime73);
        boolean boolean75 = partial55.isMatch((org.joda.time.ReadableInstant) dateTime73);
        boolean boolean76 = partial3.equals((java.lang.Object) partial55);
        org.joda.time.DurationFieldType durationFieldType77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial79 = partial3.withFieldAddWrapped(durationFieldType77, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField7 = partial5.getField(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.plus(readablePeriod23);
        org.joda.time.DurationFieldType durationFieldType25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial27 = partial24.withFieldAddWrapped(durationFieldType25, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = partial10.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = partial10.getFieldTypes();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        int int20 = partial17.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = partial17.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial17.isSupported(dateTimeFieldType22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = partial17.indexOf(dateTimeFieldType24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial17);
        boolean boolean27 = partial10.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.DurationFieldType durationFieldType28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial30 = partial17.withFieldAdded(durationFieldType28, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = partial7.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = partial7.isSupported(dateTimeFieldType12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = partial7.indexOf(dateTimeFieldType14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial7);
        boolean boolean17 = partial5.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        int int28 = partial25.size();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial30.plus(readablePeriod31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        boolean boolean35 = partial25.isMatch((org.joda.time.ReadableInstant) dateTime34);
        boolean boolean36 = partial21.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = partial21.toString(dateTimeFormatter37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial21.withPeriodAdded(readablePeriod39, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = partial21.getFieldTypes();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        java.lang.String str45 = partial44.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial47.plus(readablePeriod48);
        int int50 = partial47.size();
        boolean boolean51 = partial44.isAfter((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        java.lang.String str54 = partial53.toString();
        int int55 = partial44.compareTo((org.joda.time.ReadablePartial) partial53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = partial53.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = partial53.getFieldTypes();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial59.plus(readablePeriod60);
        int int62 = partial59.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = partial59.getFieldTypes();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        boolean boolean67 = partial65.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology68 = partial65.getChronology();
        int[] intArray69 = partial65.getValues();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        boolean boolean73 = partial71.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology74 = partial71.getChronology();
        org.joda.time.Partial partial75 = new org.joda.time.Partial(dateTimeFieldTypeArray63, intArray69, chronology74);
        int[] intArray76 = new int[] {};
        org.joda.time.Partial partial77 = new org.joda.time.Partial(dateTimeFieldTypeArray63, intArray76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(chronology78);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Partial partial81 = partial79.withChronologyRetainFields(chronology80);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = null;
        org.joda.time.Partial partial83 = partial79.without(dateTimeFieldType82);
        org.joda.time.Chronology chronology84 = partial83.getChronology();
        org.joda.time.Partial partial85 = new org.joda.time.Partial(dateTimeFieldTypeArray57, intArray76, chronology84);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Partial partial87 = new org.joda.time.Partial(chronology86);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.Partial partial89 = partial87.plus(readablePeriod88);
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.DateTime dateTime91 = partial89.toDateTime(readableInstant90);
        org.joda.time.Chronology chronology92 = null;
        org.joda.time.Partial partial93 = new org.joda.time.Partial(chronology92);
        org.joda.time.Chronology chronology94 = null;
        org.joda.time.Partial partial95 = partial93.withChronologyRetainFields(chronology94);
        boolean boolean96 = partial89.isAfter((org.joda.time.ReadablePartial) partial93);
        org.joda.time.Chronology chronology97 = partial93.getChronology();
        org.joda.time.Partial partial98 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray76, chronology97);
        org.joda.time.Partial partial99 = partial16.withChronologyRetainFields(chronology97);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(partial89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(partial95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(chronology97);
        org.junit.Assert.assertNotNull(partial99);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial9.plus(readablePeriod10);
        int int12 = partial9.size();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        boolean boolean19 = partial9.isMatch((org.joda.time.ReadableInstant) dateTime18);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial5.toString(dateTimeFormatter21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial5.withPeriodAdded(readablePeriod23, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial5.getFieldTypes();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial28.plus(readablePeriod29);
        int int31 = partial28.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = partial28.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = partial28.isSupported(dateTimeFieldType33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        int int45 = partial42.size();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial47.plus(readablePeriod48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        boolean boolean52 = partial42.isMatch((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = partial38.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = partial38.toString(dateTimeFormatter54);
        java.lang.String str57 = partial38.toString("[]");
        boolean boolean58 = partial28.isMatch((org.joda.time.ReadablePartial) partial38);
        int[] intArray59 = partial28.getValues();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial67.withChronologyRetainFields(chronology68);
        boolean boolean70 = partial63.isAfter((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology71 = partial67.getChronology();
        org.joda.time.Partial partial72 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray59, chronology71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial73 = new org.joda.time.Partial(dateTimeFieldType0, (int) ' ', chronology71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        java.lang.String str8 = partial7.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        int int13 = partial10.size();
        boolean boolean14 = partial7.isAfter((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        java.lang.String str17 = partial16.toString();
        int int18 = partial7.compareTo((org.joda.time.ReadablePartial) partial16);
        java.lang.String str19 = partial16.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = partial16.getFormatter();
        boolean boolean21 = partial5.isMatch((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology22 = partial5.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial23 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) -1, chronology22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        int int26 = partial10.size();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial10.minus(readablePeriod27);
        java.lang.String str29 = partial28.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        boolean boolean33 = partial31.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial31.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial31.minus(readablePeriod35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        org.joda.time.Partial partial38 = partial31.without(dateTimeFieldType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial40.plus(readablePeriod41);
        int int43 = partial40.size();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial45.plus(readablePeriod46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        boolean boolean50 = partial40.isMatch((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean51 = partial31.isMatch((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean52 = partial28.isMatch((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DurationFieldType durationFieldType53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial55 = partial28.withFieldAdded(durationFieldType53, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        int int26 = partial10.size();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial10.minus(readablePeriod27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property30 = partial10.property(dateTimeFieldType29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(partial28);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = partial1.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.minus(readablePeriod5);
        java.lang.String str7 = partial6.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property9 = partial6.property(dateTimeFieldType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.plus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial26.withChronologyRetainFields(chronology27);
        java.util.Locale locale30 = null;
        java.lang.String str31 = partial28.toString("[]", locale30);
        boolean boolean32 = partial24.isEqual((org.joda.time.ReadablePartial) partial28);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial28.minus(readablePeriod33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int36 = partial34.get(dateTimeFieldType35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(partial34);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime48);
        int int51 = partial35.size();
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        boolean boolean53 = partial3.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial54 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        org.joda.time.DurationFieldType durationFieldType55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial57 = partial35.withFieldAdded(durationFieldType55, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        java.lang.String str4 = partial3.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        int int9 = partial6.size();
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        int int14 = partial3.compareTo((org.joda.time.ReadablePartial) partial12);
        java.lang.String str15 = partial12.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = partial12.getFieldTypes();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial18.getFieldTypes();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        boolean boolean26 = partial24.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology27 = partial24.getChronology();
        int[] intArray28 = partial24.getValues();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        boolean boolean32 = partial30.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology33 = partial30.getChronology();
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray28, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial(dateTimeFieldTypeArray16, intArray28);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        int int40 = partial37.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = partial37.getFieldTypes();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        boolean boolean45 = partial43.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology46 = partial43.getChronology();
        int[] intArray47 = partial43.getValues();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        boolean boolean51 = partial49.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology52 = partial49.getChronology();
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray41, intArray47, chronology52);
        int[] intArray54 = new int[] {};
        org.joda.time.Partial partial55 = new org.joda.time.Partial(dateTimeFieldTypeArray41, intArray54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial57.plus(readablePeriod58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = partial59.toDateTime(readableInstant60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = partial63.withChronologyRetainFields(chronology64);
        boolean boolean66 = partial59.isAfter((org.joda.time.ReadablePartial) partial63);
        org.joda.time.Chronology chronology67 = partial63.getChronology();
        org.joda.time.Partial partial68 = new org.joda.time.Partial(dateTimeFieldTypeArray16, intArray54, chronology67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial69 = new org.joda.time.Partial(dateTimeFieldType0, 1, chronology67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime30 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial33 = partial1.withField(dateTimeFieldType31, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.plus(readablePeriod23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = partial24.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = partial28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        org.joda.time.Partial partial32 = partial28.without(dateTimeFieldType31);
        org.joda.time.Chronology chronology33 = partial32.getChronology();
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Partial partial35 = partial24.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = partial35.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial39 = partial35.withField(dateTimeFieldType37, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int5 = partial1.get(dateTimeFieldType4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int[] intArray6 = partial5.getValues();
        int[] intArray7 = partial5.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType9 = partial5.getFieldType(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = partial5.toString(dateTimeFormatter6);
        java.lang.String str8 = partial5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        int int13 = partial10.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = partial10.isSupported(dateTimeFieldType15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = partial20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        int int27 = partial24.size();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        boolean boolean34 = partial24.isMatch((org.joda.time.ReadableInstant) dateTime33);
        boolean boolean35 = partial20.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = partial20.toString(dateTimeFormatter36);
        java.lang.String str39 = partial20.toString("[]");
        boolean boolean40 = partial10.isMatch((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        int int51 = partial48.size();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.plus(readablePeriod54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        boolean boolean58 = partial48.isMatch((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = partial44.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = partial44.toString(dateTimeFormatter60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = partial44.toString(dateTimeFormatter62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        org.joda.time.Partial partial65 = partial44.without(dateTimeFieldType64);
        java.lang.Object obj66 = null;
        boolean boolean67 = partial65.equals(obj66);
        int int68 = partial20.compareTo((org.joda.time.ReadablePartial) partial65);
        boolean boolean69 = partial5.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.DurationFieldType durationFieldType70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial72 = partial5.withFieldAdded(durationFieldType70, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        boolean boolean4 = partial2.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology5 = partial2.getChronology();
        int[] intArray6 = partial2.getValues();
        java.lang.String str8 = partial2.toString("[]");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = partial10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        org.joda.time.Partial partial14 = partial10.without(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = partial14.getChronology();
        boolean boolean16 = partial2.isEqual((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial2);
        int[] intArray18 = partial2.getValues();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        java.lang.String str21 = partial20.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        int int26 = partial23.size();
        boolean boolean27 = partial20.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        java.lang.String str30 = partial29.toString();
        int int31 = partial20.compareTo((org.joda.time.ReadablePartial) partial29);
        java.lang.String str32 = partial29.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial29.getFieldTypes();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        int int38 = partial35.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial35.getFieldTypes();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        boolean boolean43 = partial41.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology44 = partial41.getChronology();
        int[] intArray45 = partial41.getValues();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        boolean boolean49 = partial47.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology50 = partial47.getChronology();
        org.joda.time.Partial partial51 = new org.joda.time.Partial(dateTimeFieldTypeArray39, intArray45, chronology50);
        org.joda.time.Partial partial52 = new org.joda.time.Partial(dateTimeFieldTypeArray33, intArray45);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial54.plus(readablePeriod55);
        int int57 = partial54.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = partial54.getFieldTypes();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        boolean boolean62 = partial60.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology63 = partial60.getChronology();
        int[] intArray64 = partial60.getValues();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        boolean boolean68 = partial66.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology69 = partial66.getChronology();
        org.joda.time.Partial partial70 = new org.joda.time.Partial(dateTimeFieldTypeArray58, intArray64, chronology69);
        int[] intArray71 = new int[] {};
        org.joda.time.Partial partial72 = new org.joda.time.Partial(dateTimeFieldTypeArray58, intArray71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial74.plus(readablePeriod75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = partial76.toDateTime(readableInstant77);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Partial partial80 = new org.joda.time.Partial(chronology79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = partial80.withChronologyRetainFields(chronology81);
        boolean boolean83 = partial76.isAfter((org.joda.time.ReadablePartial) partial80);
        org.joda.time.Chronology chronology84 = partial80.getChronology();
        org.joda.time.Partial partial85 = new org.joda.time.Partial(dateTimeFieldTypeArray33, intArray71, chronology84);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial86 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray18, chronology84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Types array must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(chronology84);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial24 = partial21.with(dateTimeFieldType22, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        java.lang.String str28 = partial27.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial30.plus(readablePeriod31);
        int int33 = partial30.size();
        boolean boolean34 = partial27.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        java.lang.String str37 = partial36.toString();
        int int38 = partial27.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = partial36.getFormatter();
        boolean boolean40 = partial10.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = partial10.isSupported(dateTimeFieldType41);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = partial10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = partial10.toString(dateTimeFormatter26);
        java.lang.String str29 = partial10.toString("[]");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial31.plus(readablePeriod32);
        int int34 = partial31.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = partial31.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        boolean boolean37 = partial31.isSupported(dateTimeFieldType36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = partial31.indexOf(dateTimeFieldType38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial31);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial31.minus(readablePeriod41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        boolean boolean44 = partial42.isSupported(dateTimeFieldType43);
        boolean boolean45 = partial10.equals((java.lang.Object) boolean44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        java.lang.String str48 = partial47.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial50.plus(readablePeriod51);
        int int53 = partial50.size();
        boolean boolean54 = partial47.isAfter((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        java.lang.String str57 = partial56.toString();
        int int58 = partial47.compareTo((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial60.plus(readablePeriod61);
        int int63 = partial60.size();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial67 = partial65.plus(readablePeriod66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial67.toDateTime(readableInstant68);
        boolean boolean70 = partial60.isMatch((org.joda.time.ReadableInstant) dateTime69);
        boolean boolean71 = partial56.isMatch((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime72 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        boolean boolean73 = partial5.isMatch((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int75 = partial5.get(dateTimeFieldType74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = partial10.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial10.plus(readablePeriod15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DurationFieldType durationFieldType18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial20 = partial17.withFieldAddWrapped(durationFieldType18, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(partial16);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.plus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        int int35 = partial32.size();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        boolean boolean42 = partial32.isMatch((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean43 = partial28.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial28.plus(readablePeriod44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial45);
        java.lang.String str47 = partial45.toString();
        boolean boolean48 = partial3.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        java.lang.String str51 = partial50.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.plus(readablePeriod54);
        int int56 = partial53.size();
        boolean boolean57 = partial50.isAfter((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        java.lang.String str60 = partial59.toString();
        int int61 = partial50.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = partial59.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = partial59.getFieldTypes();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial67 = partial65.plus(readablePeriod66);
        int int68 = partial65.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = partial65.getFieldTypes();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        boolean boolean73 = partial71.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology74 = partial71.getChronology();
        int[] intArray75 = partial71.getValues();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = new org.joda.time.Partial(chronology76);
        boolean boolean79 = partial77.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology80 = partial77.getChronology();
        org.joda.time.Partial partial81 = new org.joda.time.Partial(dateTimeFieldTypeArray69, intArray75, chronology80);
        int[] intArray82 = new int[] {};
        org.joda.time.Partial partial83 = new org.joda.time.Partial(dateTimeFieldTypeArray69, intArray82);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Partial partial85 = new org.joda.time.Partial(chronology84);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Partial partial87 = partial85.withChronologyRetainFields(chronology86);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = null;
        org.joda.time.Partial partial89 = partial85.without(dateTimeFieldType88);
        org.joda.time.Chronology chronology90 = partial89.getChronology();
        org.joda.time.Partial partial91 = new org.joda.time.Partial(dateTimeFieldTypeArray63, intArray82, chronology90);
        org.joda.time.Partial partial92 = partial3.withChronologyRetainFields(chronology90);
        java.lang.String str93 = partial92.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial96 = partial92.with(dateTimeFieldType94, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertNotNull(partial89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(partial92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[]" + "'", str93, "[]");
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        boolean boolean24 = partial3.isSupported(dateTimeFieldType23);
        java.util.Locale locale26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = partial3.toString("", locale26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = partial10.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = partial10.getFieldTypes();
        int[] intArray17 = new int[] { (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray15, intArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must be the same length as the types array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1]");
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType14 = partial12.getFieldType((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = partial7.getFieldTypes();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        int int13 = partial10.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        boolean boolean18 = partial16.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology19 = partial16.getChronology();
        int[] intArray20 = partial16.getValues();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        boolean boolean24 = partial22.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology25 = partial22.getChronology();
        org.joda.time.Partial partial26 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray20, chronology25);
        int[] intArray27 = new int[] {};
        org.joda.time.Partial partial28 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial30.plus(readablePeriod31);
        int int33 = partial30.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = partial30.getFieldTypes();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        boolean boolean38 = partial36.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology39 = partial36.getChronology();
        int[] intArray40 = partial36.getValues();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        boolean boolean44 = partial42.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology45 = partial42.getChronology();
        org.joda.time.Partial partial46 = new org.joda.time.Partial(dateTimeFieldTypeArray34, intArray40, chronology45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray40);
        org.joda.time.Partial partial48 = new org.joda.time.Partial(dateTimeFieldTypeArray8, intArray40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType50 = partial48.getFieldType((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime48);
        int int51 = partial35.size();
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        boolean boolean53 = partial3.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial55.plus(readablePeriod56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        int int64 = partial61.size();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial66.plus(readablePeriod67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = partial68.toDateTime(readableInstant69);
        boolean boolean71 = partial61.isMatch((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean72 = partial57.isBefore((org.joda.time.ReadablePartial) partial61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = null;
        java.lang.String str74 = partial57.toString(dateTimeFormatter73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial77 = partial57.withPeriodAdded(readablePeriod75, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray78 = partial57.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial81 = partial57.withPeriodAdded(readablePeriod79, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.Partial partial84 = partial57.withPeriodAdded(readablePeriod82, (int) (short) 100);
        int int85 = partial35.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.Partial partial88 = partial57.withPeriodAdded(readablePeriod86, (int) (byte) 1);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[]" + "'", str74, "[]");
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray78);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(partial88);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        org.joda.time.Partial partial7 = partial3.without(dateTimeFieldType6);
        org.joda.time.Chronology chronology8 = partial7.getChronology();
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldType0, (int) ' ', chronology8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNotNull(chronology8);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial10.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        org.joda.time.Partial partial16 = partial10.without(dateTimeFieldType15);
        int int17 = partial16.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial20 = partial16.with(dateTimeFieldType18, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial14.plus(readablePeriod30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial31);
        java.lang.String str33 = partial31.toString();
        int int34 = partial9.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial37 = partial9.with(dateTimeFieldType35, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        java.lang.String str4 = partial3.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        int int9 = partial6.size();
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        int int14 = partial3.compareTo((org.joda.time.ReadablePartial) partial12);
        java.lang.String str15 = partial12.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = partial12.getFieldTypes();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial18.getFieldTypes();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        boolean boolean26 = partial24.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology27 = partial24.getChronology();
        int[] intArray28 = partial24.getValues();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        boolean boolean32 = partial30.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology33 = partial30.getChronology();
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray28, chronology33);
        org.joda.time.Partial partial35 = partial12.withChronologyRetainFields(chronology33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial36 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) -1, chronology33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(partial35);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial14.toString(dateTimeFormatter30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial14.toString(dateTimeFormatter32);
        int[] intArray34 = partial14.getValues();
        boolean boolean35 = partial1.isEqual((org.joda.time.ReadablePartial) partial14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType37 = partial1.getFieldType((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.Partial partial4 = partial2.plus(readablePeriod3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial13.plus(readablePeriod14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = partial15.toDateTime(readableInstant16);
        boolean boolean18 = partial8.isMatch((org.joda.time.ReadableInstant) dateTime17);
        boolean boolean19 = partial4.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = partial4.toString(dateTimeFormatter20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial4.toString(dateTimeFormatter22);
        int[] intArray24 = partial4.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Types array must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime30 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        java.lang.String str37 = partial36.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        boolean boolean43 = partial36.isAfter((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        java.lang.String str46 = partial45.toString();
        int int47 = partial36.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.plus(readablePeriod50);
        int int52 = partial49.size();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial54.plus(readablePeriod55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = partial56.toDateTime(readableInstant57);
        boolean boolean59 = partial49.isMatch((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean60 = partial45.isMatch((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime61 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial63.plus(readablePeriod64);
        int int66 = partial63.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = partial63.getFieldTypes();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        boolean boolean71 = partial69.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology72 = partial69.getChronology();
        int[] intArray73 = partial69.getValues();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        boolean boolean77 = partial75.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology78 = partial75.getChronology();
        org.joda.time.Partial partial79 = new org.joda.time.Partial(dateTimeFieldTypeArray67, intArray73, chronology78);
        org.joda.time.Partial partial80 = partial32.withChronologyRetainFields(chronology78);
        boolean boolean81 = partial1.isMatch((org.joda.time.ReadablePartial) partial32);
        java.lang.Class<?> wildcardClass82 = partial32.getClass();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial3.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial3.withPeriodAdded(readablePeriod28, (int) (short) 100);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        java.lang.String str37 = partial36.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        boolean boolean43 = partial36.isAfter((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        java.lang.String str46 = partial45.toString();
        int int47 = partial36.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.plus(readablePeriod50);
        int int52 = partial49.size();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial54.plus(readablePeriod55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = partial56.toDateTime(readableInstant57);
        boolean boolean59 = partial49.isMatch((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean60 = partial45.isMatch((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime61 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime62 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property64 = partial30.property(dateTimeFieldType63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime30 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        java.lang.String str37 = partial36.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        boolean boolean43 = partial36.isAfter((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        java.lang.String str46 = partial45.toString();
        int int47 = partial36.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.plus(readablePeriod50);
        int int52 = partial49.size();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial54.plus(readablePeriod55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = partial56.toDateTime(readableInstant57);
        boolean boolean59 = partial49.isMatch((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean60 = partial45.isMatch((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime61 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial63.plus(readablePeriod64);
        int int66 = partial63.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = partial63.getFieldTypes();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        boolean boolean71 = partial69.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology72 = partial69.getChronology();
        int[] intArray73 = partial69.getValues();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        boolean boolean77 = partial75.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology78 = partial75.getChronology();
        org.joda.time.Partial partial79 = new org.joda.time.Partial(dateTimeFieldTypeArray67, intArray73, chronology78);
        org.joda.time.Partial partial80 = partial32.withChronologyRetainFields(chronology78);
        boolean boolean81 = partial1.isMatch((org.joda.time.ReadablePartial) partial32);
        int int82 = partial32.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int84 = partial32.get(dateTimeFieldType83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        int int19 = partial16.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial16.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = partial16.isSupported(dateTimeFieldType21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial30.plus(readablePeriod31);
        int int33 = partial30.size();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        boolean boolean40 = partial30.isMatch((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean41 = partial26.isBefore((org.joda.time.ReadablePartial) partial30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial26.toString(dateTimeFormatter42);
        java.lang.String str45 = partial26.toString("[]");
        boolean boolean46 = partial16.isMatch((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial54.plus(readablePeriod55);
        int int57 = partial54.size();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial59.plus(readablePeriod60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        boolean boolean64 = partial54.isMatch((org.joda.time.ReadableInstant) dateTime63);
        boolean boolean65 = partial50.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = partial50.toString(dateTimeFormatter66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = null;
        java.lang.String str69 = partial50.toString(dateTimeFormatter68);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = null;
        org.joda.time.Partial partial71 = partial50.without(dateTimeFieldType70);
        java.lang.Object obj72 = null;
        boolean boolean73 = partial71.equals(obj72);
        int int74 = partial26.compareTo((org.joda.time.ReadablePartial) partial71);
        boolean boolean75 = partial10.isAfter((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DurationFieldType durationFieldType76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial78 = partial26.withFieldAdded(durationFieldType76, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DateTimeField[] dateTimeFieldArray1 = partial0.getFields();
        org.joda.time.Partial partial2 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        java.util.Locale locale4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = partial0.toString("hi!", locale4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray1);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        int int26 = partial10.size();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial10.minus(readablePeriod27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial10.plus(readablePeriod29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial33 = partial30.withField(dateTimeFieldType31, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(partial30);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        org.joda.time.Partial partial25 = partial3.without(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial20.plus(readablePeriod22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial26 = partial23.withField(dateTimeFieldType24, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial23);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        java.lang.String str8 = partial7.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        int int13 = partial10.size();
        boolean boolean14 = partial7.isAfter((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        java.lang.String str17 = partial16.toString();
        int int18 = partial7.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        int int23 = partial20.size();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        boolean boolean30 = partial20.isMatch((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial16.isMatch((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial34.plus(readablePeriod35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        java.lang.String str39 = partial38.toString();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        int int44 = partial41.size();
        boolean boolean45 = partial38.isAfter((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        java.lang.String str48 = partial47.toString();
        int int49 = partial38.compareTo((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        int int54 = partial51.size();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial58 = partial56.plus(readablePeriod57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = partial58.toDateTime(readableInstant59);
        boolean boolean61 = partial51.isMatch((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean62 = partial47.isMatch((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime63 = partial34.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial67 = partial65.plus(readablePeriod66);
        int int68 = partial65.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = partial65.getFieldTypes();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        boolean boolean73 = partial71.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology74 = partial71.getChronology();
        int[] intArray75 = partial71.getValues();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = new org.joda.time.Partial(chronology76);
        boolean boolean79 = partial77.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology80 = partial77.getChronology();
        org.joda.time.Partial partial81 = new org.joda.time.Partial(dateTimeFieldTypeArray69, intArray75, chronology80);
        org.joda.time.Partial partial82 = partial34.withChronologyRetainFields(chronology80);
        boolean boolean83 = partial3.isMatch((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology84 = partial34.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial85 = new org.joda.time.Partial(dateTimeFieldType0, (int) '#', chronology84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(chronology84);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial3.getFormatter();
        java.util.Locale locale23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = partial3.toString("hi!", locale23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNull(dateTimeFormatter21);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial15);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial23 = partial12.withFieldAdded(durationFieldType21, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        boolean boolean5 = partial3.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = partial3.getFormatter();
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial8 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 0, chronology7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        boolean boolean17 = partial1.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        int int22 = partial19.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = partial19.isSupported(dateTimeFieldType24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        int int27 = partial19.indexOf(dateTimeFieldType26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        boolean boolean31 = partial29.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology32 = partial29.getChronology();
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = partial35.withChronologyRetainFields(chronology36);
        boolean boolean38 = partial33.isAfter((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        java.lang.String str41 = partial40.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        boolean boolean47 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        boolean boolean48 = partial33.isBefore((org.joda.time.ReadablePartial) partial40);
        boolean boolean49 = partial19.isMatch((org.joda.time.ReadablePartial) partial33);
        boolean boolean50 = partial1.isEqual((org.joda.time.ReadablePartial) partial19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = partial19.toString(dateTimeFormatter51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial55 = partial19.with(dateTimeFieldType53, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        int int6 = partial3.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        boolean boolean11 = partial9.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology12 = partial9.getChronology();
        int[] intArray13 = partial9.getValues();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        boolean boolean17 = partial15.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology18 = partial15.getChronology();
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray13, chronology18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial21 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 0, chronology18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime30 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType32 = partial1.getFieldType((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        boolean boolean11 = partial1.isMatch((org.joda.time.ReadableInstant) dateTime10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = partial1.getFieldType(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        int int26 = partial10.size();
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.minus(readablePeriod28);
        org.joda.time.DurationFieldType durationFieldType30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial32 = partial27.withFieldAddWrapped(durationFieldType30, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(partial29);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = partial24.getFieldTypes();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.minus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        int int29 = partial26.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial26.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = partial26.isSupported(dateTimeFieldType31);
        java.lang.String str33 = partial26.toStringList();
        java.lang.String str35 = partial26.toString("[]");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        boolean boolean53 = partial43.isMatch((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = partial39.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial39.plus(readablePeriod55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        java.lang.String str59 = partial58.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        int int64 = partial61.size();
        boolean boolean65 = partial58.isAfter((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        java.lang.String str68 = partial67.toString();
        int int69 = partial58.compareTo((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.Partial partial73 = partial71.plus(readablePeriod72);
        int int74 = partial71.size();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial78 = partial76.plus(readablePeriod77);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = partial78.toDateTime(readableInstant79);
        boolean boolean81 = partial71.isMatch((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean82 = partial67.isMatch((org.joda.time.ReadableInstant) dateTime80);
        int int83 = partial67.size();
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.Partial partial85 = partial67.minus(readablePeriod84);
        boolean boolean86 = partial56.isMatch((org.joda.time.ReadablePartial) partial85);
        boolean boolean87 = partial26.isMatch((org.joda.time.ReadablePartial) partial85);
        boolean boolean88 = partial24.isEqual((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property90 = partial24.property(dateTimeFieldType89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[]" + "'", str68, "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial11.plus(readablePeriod12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = partial13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        int int20 = partial17.size();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = partial24.toDateTime(readableInstant25);
        boolean boolean27 = partial17.isMatch((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = partial13.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = partial13.toString(dateTimeFormatter29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial13.withPeriodAdded(readablePeriod31, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = partial13.getFieldTypes();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        int int39 = partial36.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial36.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = partial36.isSupported(dateTimeFieldType41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial50.plus(readablePeriod51);
        int int53 = partial50.size();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial55.plus(readablePeriod56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        boolean boolean60 = partial50.isMatch((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean61 = partial46.isBefore((org.joda.time.ReadablePartial) partial50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = partial46.toString(dateTimeFormatter62);
        java.lang.String str65 = partial46.toString("[]");
        boolean boolean66 = partial36.isMatch((org.joda.time.ReadablePartial) partial46);
        int[] intArray67 = partial36.getValues();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = partial75.withChronologyRetainFields(chronology76);
        boolean boolean78 = partial71.isAfter((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Chronology chronology79 = partial75.getChronology();
        org.joda.time.Partial partial80 = new org.joda.time.Partial(dateTimeFieldTypeArray34, intArray67, chronology79);
        boolean boolean81 = partial1.isBefore((org.joda.time.ReadablePartial) partial80);
        // The following exception was thrown during execution in test generation
        try {
            int int83 = partial1.getValue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[]" + "'", str65, "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        int int29 = partial26.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial26.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = partial26.isSupported(dateTimeFieldType31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial34.plus(readablePeriod35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial40.plus(readablePeriod41);
        int int43 = partial40.size();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial45.plus(readablePeriod46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        boolean boolean50 = partial40.isMatch((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean51 = partial36.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial36.toString(dateTimeFormatter52);
        java.lang.String str55 = partial36.toString("[]");
        boolean boolean56 = partial26.isMatch((org.joda.time.ReadablePartial) partial36);
        int[] intArray57 = partial26.getValues();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial59.plus(readablePeriod60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = partial65.withChronologyRetainFields(chronology66);
        boolean boolean68 = partial61.isAfter((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology69 = partial65.getChronology();
        org.joda.time.Partial partial70 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray57, chronology69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        boolean boolean74 = partial72.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology75 = partial72.getChronology();
        int[] intArray76 = partial72.getValues();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = new org.joda.time.Partial(chronology77);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Partial partial80 = partial78.withChronologyRetainFields(chronology79);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = null;
        org.joda.time.Partial partial82 = partial78.without(dateTimeFieldType81);
        org.joda.time.Chronology chronology83 = partial82.getChronology();
        org.joda.time.Partial partial84 = new org.joda.time.Partial(chronology83);
        org.joda.time.Partial partial85 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray76, chronology83);
        java.lang.Class<?> wildcardClass86 = dateTimeFieldTypeArray24.getClass();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = partial10.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = partial10.getFieldTypes();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        int int20 = partial17.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = partial17.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial17.isSupported(dateTimeFieldType22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = partial17.indexOf(dateTimeFieldType24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial17);
        boolean boolean27 = partial10.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial29.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = partial29.isSupported(dateTimeFieldType34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        int int37 = partial29.indexOf(dateTimeFieldType36);
        org.joda.time.Partial partial38 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial29);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial29.minus(readablePeriod39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        int int51 = partial48.size();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.plus(readablePeriod54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        boolean boolean58 = partial48.isMatch((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = partial44.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = partial44.toString(dateTimeFormatter60);
        java.lang.String str63 = partial44.toString("[]");
        boolean boolean64 = partial40.isBefore((org.joda.time.ReadablePartial) partial44);
        boolean boolean65 = partial10.isAfter((org.joda.time.ReadablePartial) partial44);
        java.lang.String str67 = partial10.toString("[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        boolean boolean11 = partial1.isMatch((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial1.toString(dateTimeFormatter12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = partial1.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        int int20 = partial17.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = partial17.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial17.isSupported(dateTimeFieldType22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = partial17.indexOf(dateTimeFieldType24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial17);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial17.minus(readablePeriod27);
        boolean boolean29 = partial1.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial28.withPeriodAdded(readablePeriod30, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial35 = partial32.withFieldAddWrapped(durationFieldType33, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial32);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = partial1.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        int int15 = partial12.size();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        boolean boolean22 = partial12.isMatch((org.joda.time.ReadableInstant) dateTime21);
        boolean boolean23 = partial8.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial8.toString(dateTimeFormatter24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = partial8.toString(dateTimeFormatter26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        org.joda.time.Partial partial29 = partial8.without(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        java.lang.String str32 = partial31.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial34.plus(readablePeriod35);
        int int37 = partial34.size();
        boolean boolean38 = partial31.isAfter((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        java.lang.String str41 = partial40.toString();
        int int42 = partial31.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        int int47 = partial44.size();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.plus(readablePeriod50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial51.toDateTime(readableInstant52);
        boolean boolean54 = partial44.isMatch((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean55 = partial40.isMatch((org.joda.time.ReadableInstant) dateTime53);
        int int56 = partial40.size();
        org.joda.time.Partial partial57 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        boolean boolean58 = partial8.isEqual((org.joda.time.ReadablePartial) partial40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = partial8.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial8.minus(readablePeriod60);
        boolean boolean62 = partial1.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial1.plus(readablePeriod63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = null;
        int int66 = partial64.indexOf(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = partial3.toString("[]", locale5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial16.withChronologyRetainFields(chronology17);
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial21.plus(readablePeriod22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial27.withChronologyRetainFields(chronology28);
        boolean boolean30 = partial23.isAfter((org.joda.time.ReadablePartial) partial27);
        boolean boolean31 = partial12.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        boolean boolean33 = partial12.isSupported(dateTimeFieldType32);
        boolean boolean34 = partial3.equals((java.lang.Object) dateTimeFieldType32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial3.withPeriodAdded(readablePeriod35, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial40 = partial3.with(dateTimeFieldType38, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial37);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial14.plus(readablePeriod30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        java.lang.String str34 = partial33.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        int int39 = partial36.size();
        boolean boolean40 = partial33.isAfter((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        java.lang.String str43 = partial42.toString();
        int int44 = partial33.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        int int49 = partial46.size();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        boolean boolean56 = partial46.isMatch((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = partial42.isMatch((org.joda.time.ReadableInstant) dateTime55);
        int int58 = partial42.size();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial42.minus(readablePeriod59);
        boolean boolean61 = partial31.isMatch((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial1.isMatch((org.joda.time.ReadablePartial) partial60);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial1.plus(readablePeriod63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        java.lang.String str67 = partial66.toString();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        int int72 = partial69.size();
        boolean boolean73 = partial66.isAfter((org.joda.time.ReadablePartial) partial69);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        java.lang.String str76 = partial75.toString();
        int int77 = partial66.compareTo((org.joda.time.ReadablePartial) partial75);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = partial75.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray79 = partial75.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        org.joda.time.Partial partial81 = partial75.without(dateTimeFieldType80);
        boolean boolean82 = partial1.isEqual((org.joda.time.ReadablePartial) partial75);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType84 = partial1.getFieldType((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[]" + "'", str76, "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter78);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray79);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial21 = partial7.with(dateTimeFieldType19, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = partial3.toString("[]", locale5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial16.withChronologyRetainFields(chronology17);
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial21.plus(readablePeriod22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial27.withChronologyRetainFields(chronology28);
        boolean boolean30 = partial23.isAfter((org.joda.time.ReadablePartial) partial27);
        boolean boolean31 = partial12.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        boolean boolean33 = partial12.isSupported(dateTimeFieldType32);
        boolean boolean34 = partial3.equals((java.lang.Object) dateTimeFieldType32);
        int int35 = partial3.size();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = partial1.getFormatter();
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property7 = partial1.property(dateTimeFieldType6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(chronology5);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial5.plus(readablePeriod6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = partial7.isSupported(dateTimeFieldType8);
        java.lang.String str10 = partial7.toStringList();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        int[] intArray23 = partial3.getValues();
        int[] intArray24 = partial3.getValues();
        org.joda.time.DurationFieldType durationFieldType25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial27 = partial3.withFieldAddWrapped(durationFieldType25, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial1.withPeriodAdded(readablePeriod11, 0);
        java.lang.Class<?> wildcardClass14 = partial1.getClass();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.minus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        int int29 = partial26.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial26.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = partial26.isSupported(dateTimeFieldType31);
        java.lang.String str33 = partial26.toStringList();
        java.lang.String str35 = partial26.toString("[]");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        boolean boolean53 = partial43.isMatch((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = partial39.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial39.plus(readablePeriod55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        java.lang.String str59 = partial58.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        int int64 = partial61.size();
        boolean boolean65 = partial58.isAfter((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        java.lang.String str68 = partial67.toString();
        int int69 = partial58.compareTo((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.Partial partial73 = partial71.plus(readablePeriod72);
        int int74 = partial71.size();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial78 = partial76.plus(readablePeriod77);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = partial78.toDateTime(readableInstant79);
        boolean boolean81 = partial71.isMatch((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean82 = partial67.isMatch((org.joda.time.ReadableInstant) dateTime80);
        int int83 = partial67.size();
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.Partial partial85 = partial67.minus(readablePeriod84);
        boolean boolean86 = partial56.isMatch((org.joda.time.ReadablePartial) partial85);
        boolean boolean87 = partial26.isMatch((org.joda.time.ReadablePartial) partial85);
        boolean boolean88 = partial24.isEqual((org.joda.time.ReadablePartial) partial26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = partial26.getFormatter();
        java.lang.String str90 = partial26.toString();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[]" + "'", str68, "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNull(dateTimeFormatter89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "[]" + "'", str90, "[]");
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.lang.String str4 = partial1.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = partial1.isSupported(dateTimeFieldType5);
        org.joda.time.Chronology chronology7 = partial1.getChronology();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        java.lang.String str17 = partial14.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial14.getFormatter();
        boolean boolean19 = partial3.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial21.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial23.withPeriodAdded(readablePeriod24, (-1));
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        org.joda.time.Partial partial29 = partial27.without(dateTimeFieldType28);
        boolean boolean30 = partial3.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = partial3.toString(dateTimeFormatter31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial34.plus(readablePeriod35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial40.plus(readablePeriod41);
        int int43 = partial40.size();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial45.plus(readablePeriod46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        boolean boolean50 = partial40.isMatch((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean51 = partial36.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial36.toString(dateTimeFormatter52);
        java.lang.String str55 = partial36.toString("[]");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial57.plus(readablePeriod58);
        int int60 = partial57.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray61 = partial57.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        boolean boolean63 = partial57.isSupported(dateTimeFieldType62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        int int65 = partial57.indexOf(dateTimeFieldType64);
        org.joda.time.Partial partial66 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial57);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial57.minus(readablePeriod67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        boolean boolean70 = partial68.isSupported(dateTimeFieldType69);
        boolean boolean71 = partial36.equals((java.lang.Object) boolean70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = new org.joda.time.Partial(chronology72);
        java.lang.String str74 = partial73.toString();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial78 = partial76.plus(readablePeriod77);
        int int79 = partial76.size();
        boolean boolean80 = partial73.isAfter((org.joda.time.ReadablePartial) partial76);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = new org.joda.time.Partial(chronology81);
        java.lang.String str83 = partial82.toString();
        int int84 = partial73.compareTo((org.joda.time.ReadablePartial) partial82);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.Partial partial86 = new org.joda.time.Partial(chronology85);
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.Partial partial88 = partial86.plus(readablePeriod87);
        int int89 = partial86.size();
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.Partial partial91 = new org.joda.time.Partial(chronology90);
        org.joda.time.ReadablePeriod readablePeriod92 = null;
        org.joda.time.Partial partial93 = partial91.plus(readablePeriod92);
        org.joda.time.ReadableInstant readableInstant94 = null;
        org.joda.time.DateTime dateTime95 = partial93.toDateTime(readableInstant94);
        boolean boolean96 = partial86.isMatch((org.joda.time.ReadableInstant) dateTime95);
        boolean boolean97 = partial82.isMatch((org.joda.time.ReadableInstant) dateTime95);
        org.joda.time.DateTime dateTime98 = partial36.toDateTime((org.joda.time.ReadableInstant) dateTime95);
        org.joda.time.DateTime dateTime99 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime98);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[]" + "'", str74, "[]");
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "[]" + "'", str83, "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(partial88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(partial93);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(dateTime98);
        org.junit.Assert.assertNotNull(dateTime99);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        java.lang.String str17 = partial14.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial14.getFormatter();
        boolean boolean19 = partial3.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial21.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial23.withPeriodAdded(readablePeriod24, (-1));
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        org.joda.time.Partial partial29 = partial27.without(dateTimeFieldType28);
        boolean boolean30 = partial3.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial27.getFieldTypes();
        int[] intArray32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial34.plus(readablePeriod35);
        int int37 = partial34.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = partial34.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        boolean boolean40 = partial34.isSupported(dateTimeFieldType39);
        java.lang.String str41 = partial34.toStringList();
        java.lang.String str43 = partial34.toString("[]");
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray32, chronology44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(chronology44);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        boolean boolean5 = partial1.isSupported(dateTimeFieldType4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial13.plus(readablePeriod14);
        int int16 = partial13.size();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = partial20.toDateTime(readableInstant21);
        boolean boolean23 = partial13.isMatch((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean24 = partial9.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial9.toString(dateTimeFormatter25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = partial9.toString(dateTimeFormatter27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        org.joda.time.Partial partial30 = partial9.without(dateTimeFieldType29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        java.lang.String str33 = partial32.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        int int38 = partial35.size();
        boolean boolean39 = partial32.isAfter((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        java.lang.String str42 = partial41.toString();
        int int43 = partial32.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial45.plus(readablePeriod46);
        int int48 = partial45.size();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial50.plus(readablePeriod51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = partial52.toDateTime(readableInstant53);
        boolean boolean55 = partial45.isMatch((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean56 = partial41.isMatch((org.joda.time.ReadableInstant) dateTime54);
        int int57 = partial41.size();
        org.joda.time.Partial partial58 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial41);
        boolean boolean59 = partial9.isEqual((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial67.plus(readablePeriod68);
        int int70 = partial67.size();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial72.plus(readablePeriod73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = partial74.toDateTime(readableInstant75);
        boolean boolean77 = partial67.isMatch((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean78 = partial63.isBefore((org.joda.time.ReadablePartial) partial67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = null;
        java.lang.String str80 = partial63.toString(dateTimeFormatter79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.Partial partial83 = partial63.withPeriodAdded(readablePeriod81, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray84 = partial63.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Partial partial87 = partial63.withPeriodAdded(readablePeriod85, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.Partial partial90 = partial63.withPeriodAdded(readablePeriod88, (int) (short) 100);
        int int91 = partial41.compareTo((org.joda.time.ReadablePartial) partial63);
        boolean boolean92 = partial1.isMatch((org.joda.time.ReadablePartial) partial63);
        int[] intArray93 = partial63.getValues();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[]" + "'", str80, "[]");
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray84);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertNotNull(partial90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField6 = partial1.getField((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime48);
        int int51 = partial35.size();
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        boolean boolean53 = partial3.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology54 = partial35.getChronology();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = partial56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        org.joda.time.Partial partial60 = partial56.without(dateTimeFieldType59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial56.minus(readablePeriod61);
        boolean boolean63 = partial35.isBefore((org.joda.time.ReadablePartial) partial56);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        boolean boolean13 = partial11.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology14 = partial11.getChronology();
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = partial17.withChronologyRetainFields(chronology18);
        boolean boolean20 = partial15.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        java.lang.String str23 = partial22.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        int int28 = partial25.size();
        boolean boolean29 = partial22.isAfter((org.joda.time.ReadablePartial) partial25);
        boolean boolean30 = partial15.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean31 = partial1.isMatch((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int int36 = partial33.size();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial38.plus(readablePeriod39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        boolean boolean43 = partial33.isMatch((org.joda.time.ReadableInstant) dateTime42);
        int int44 = partial15.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial54 = partial52.plus(readablePeriod53);
        int int55 = partial52.size();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial57.plus(readablePeriod58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = partial59.toDateTime(readableInstant60);
        boolean boolean62 = partial52.isMatch((org.joda.time.ReadableInstant) dateTime61);
        boolean boolean63 = partial48.isBefore((org.joda.time.ReadablePartial) partial52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = null;
        java.lang.String str65 = partial48.toString(dateTimeFormatter64);
        boolean boolean66 = partial33.isEqual((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial69 = partial33.withField(dateTimeFieldType67, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[]" + "'", str65, "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        java.lang.String str22 = partial3.toString("[]");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        int int27 = partial24.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial24.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = partial24.isSupported(dateTimeFieldType29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = partial24.indexOf(dateTimeFieldType31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial24);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial24.minus(readablePeriod34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        boolean boolean37 = partial35.isSupported(dateTimeFieldType36);
        boolean boolean38 = partial3.equals((java.lang.Object) boolean37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial3.plus(readablePeriod39);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = partial40.getValue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = partial1.indexOf(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        int int25 = partial22.size();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.plus(readablePeriod28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        boolean boolean32 = partial22.isMatch((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean33 = partial18.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = partial18.toString(dateTimeFormatter34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial18.withPeriodAdded(readablePeriod36, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial18.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial18.minus(readablePeriod40);
        boolean boolean42 = partial1.isMatch((org.joda.time.ReadablePartial) partial18);
        int int43 = partial1.size();
        // The following exception was thrown during execution in test generation
        try {
            int int45 = partial1.getValue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        int int2 = partial0.indexOf(dateTimeFieldType1);
        // The following exception was thrown during execution in test generation
        try {
            int int4 = partial0.getValue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        int int6 = partial3.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = partial3.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = partial3.isSupported(dateTimeFieldType8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = partial3.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        boolean boolean15 = partial13.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology16 = partial13.getChronology();
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = partial19.withChronologyRetainFields(chronology20);
        boolean boolean22 = partial17.isAfter((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        java.lang.String str25 = partial24.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.plus(readablePeriod28);
        int int30 = partial27.size();
        boolean boolean31 = partial24.isAfter((org.joda.time.ReadablePartial) partial27);
        boolean boolean32 = partial17.isBefore((org.joda.time.ReadablePartial) partial24);
        boolean boolean33 = partial3.isMatch((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        int int44 = partial41.size();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        boolean boolean51 = partial41.isMatch((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean52 = partial37.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial37.toString(dateTimeFormatter53);
        java.lang.String str56 = partial37.toString("[]");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = partial58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        org.joda.time.Partial partial62 = partial58.without(dateTimeFieldType61);
        org.joda.time.Chronology chronology63 = partial62.getChronology();
        org.joda.time.Partial partial64 = partial37.withChronologyRetainFields(chronology63);
        org.joda.time.Partial partial65 = partial17.withChronologyRetainFields(chronology63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial66 = new org.joda.time.Partial(dateTimeFieldType0, 100, chronology63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(partial65);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial9.plus(readablePeriod10);
        int int12 = partial9.size();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        boolean boolean19 = partial9.isMatch((org.joda.time.ReadableInstant) dateTime18);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial5.toString(dateTimeFormatter21);
        java.lang.String str24 = partial5.toString("[]");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        org.joda.time.Partial partial30 = partial26.without(dateTimeFieldType29);
        org.joda.time.Chronology chronology31 = partial30.getChronology();
        org.joda.time.Partial partial32 = partial5.withChronologyRetainFields(chronology31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 100, chronology31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(partial32);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.DurationFieldType durationFieldType11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial13 = partial5.withFieldAddWrapped(durationFieldType11, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial9.plus(readablePeriod10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        boolean boolean25 = partial15.isMatch((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean26 = partial11.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = partial11.toString(dateTimeFormatter27);
        java.lang.String str30 = partial11.toString("[]");
        boolean boolean31 = partial1.isMatch((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = partial35.toString(dateTimeFormatter51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial35.toString(dateTimeFormatter53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        org.joda.time.Partial partial56 = partial35.without(dateTimeFieldType55);
        java.lang.Object obj57 = null;
        boolean boolean58 = partial56.equals(obj57);
        int int59 = partial11.compareTo((org.joda.time.ReadablePartial) partial56);
        int int60 = partial56.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType62 = partial56.getFieldType((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.plus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        int int35 = partial32.size();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        boolean boolean42 = partial32.isMatch((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean43 = partial28.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial28.plus(readablePeriod44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial45);
        java.lang.String str47 = partial45.toString();
        boolean boolean48 = partial3.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        java.lang.String str51 = partial50.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.plus(readablePeriod54);
        int int56 = partial53.size();
        boolean boolean57 = partial50.isAfter((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        java.lang.String str60 = partial59.toString();
        int int61 = partial50.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = partial59.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = partial59.getFieldTypes();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial67 = partial65.plus(readablePeriod66);
        int int68 = partial65.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = partial65.getFieldTypes();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        boolean boolean73 = partial71.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology74 = partial71.getChronology();
        int[] intArray75 = partial71.getValues();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = new org.joda.time.Partial(chronology76);
        boolean boolean79 = partial77.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology80 = partial77.getChronology();
        org.joda.time.Partial partial81 = new org.joda.time.Partial(dateTimeFieldTypeArray69, intArray75, chronology80);
        int[] intArray82 = new int[] {};
        org.joda.time.Partial partial83 = new org.joda.time.Partial(dateTimeFieldTypeArray69, intArray82);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Partial partial85 = new org.joda.time.Partial(chronology84);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Partial partial87 = partial85.withChronologyRetainFields(chronology86);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = null;
        org.joda.time.Partial partial89 = partial85.without(dateTimeFieldType88);
        org.joda.time.Chronology chronology90 = partial89.getChronology();
        org.joda.time.Partial partial91 = new org.joda.time.Partial(dateTimeFieldTypeArray63, intArray82, chronology90);
        org.joda.time.Partial partial92 = partial3.withChronologyRetainFields(chronology90);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial95 = partial92.withField(dateTimeFieldType93, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertNotNull(partial89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(partial92);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        boolean boolean13 = partial11.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology14 = partial11.getChronology();
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = partial17.withChronologyRetainFields(chronology18);
        boolean boolean20 = partial15.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        java.lang.String str23 = partial22.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        int int28 = partial25.size();
        boolean boolean29 = partial22.isAfter((org.joda.time.ReadablePartial) partial25);
        boolean boolean30 = partial15.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean31 = partial1.isMatch((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int int36 = partial33.size();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial38.plus(readablePeriod39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        boolean boolean43 = partial33.isMatch((org.joda.time.ReadableInstant) dateTime42);
        int int44 = partial15.compareTo((org.joda.time.ReadablePartial) partial33);
        java.lang.Class<?> wildcardClass45 = partial15.getClass();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial3.getFormatter();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial23.withChronologyRetainFields(chronology24);
        int int26 = partial3.compareTo((org.joda.time.ReadablePartial) partial23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = partial3.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        boolean boolean11 = partial1.isMatch((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial1.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial21.withChronologyRetainFields(chronology22);
        boolean boolean24 = partial17.isAfter((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = partial32.withChronologyRetainFields(chronology33);
        boolean boolean35 = partial28.isAfter((org.joda.time.ReadablePartial) partial32);
        boolean boolean36 = partial17.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial17.plus(readablePeriod37);
        boolean boolean39 = partial1.isAfter((org.joda.time.ReadablePartial) partial17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField41 = partial17.getField(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial1.minus(readablePeriod11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        int int23 = partial20.size();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        boolean boolean30 = partial20.isMatch((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial16.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial16.toString(dateTimeFormatter32);
        java.lang.String str35 = partial16.toString("[]");
        boolean boolean36 = partial12.isBefore((org.joda.time.ReadablePartial) partial16);
        java.lang.String str37 = partial16.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        org.joda.time.Partial partial39 = partial16.without(dateTimeFieldType38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = partial45.toDateTime(readableInstant46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial49.withChronologyRetainFields(chronology50);
        boolean boolean52 = partial45.isAfter((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial54.plus(readablePeriod55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = partial56.toDateTime(readableInstant57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = partial60.withChronologyRetainFields(chronology61);
        boolean boolean63 = partial56.isAfter((org.joda.time.ReadablePartial) partial60);
        boolean boolean64 = partial45.isBefore((org.joda.time.ReadablePartial) partial60);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial66 = partial45.plus(readablePeriod65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = partial68.withChronologyRetainFields(chronology69);
        java.util.Locale locale72 = null;
        java.lang.String str73 = partial70.toString("[]", locale72);
        boolean boolean74 = partial66.isEqual((org.joda.time.ReadablePartial) partial70);
        int int75 = partial70.size();
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial77 = partial70.plus(readablePeriod76);
        int int78 = partial41.compareTo((org.joda.time.ReadablePartial) partial77);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField80 = partial41.getField((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime48);
        int int51 = partial35.size();
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        boolean boolean53 = partial3.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = partial35.indexOf(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        boolean boolean27 = partial10.isSupported(dateTimeFieldType26);
        int int28 = partial10.size();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        org.joda.time.Partial partial11 = partial7.without(dateTimeFieldType10);
        boolean boolean12 = partial5.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial14.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        boolean boolean20 = partial14.isSupported(dateTimeFieldType19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = partial14.indexOf(dateTimeFieldType21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial23.getFieldTypes();
        boolean boolean25 = partial5.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.DurationFieldType durationFieldType26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial28 = partial5.withFieldAdded(durationFieldType26, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = partial10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = partial10.toString(dateTimeFormatter26);
        java.lang.String str29 = partial10.toString("[]");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial31.plus(readablePeriod32);
        int int34 = partial31.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = partial31.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        boolean boolean37 = partial31.isSupported(dateTimeFieldType36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = partial31.indexOf(dateTimeFieldType38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial31);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial31.minus(readablePeriod41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        boolean boolean44 = partial42.isSupported(dateTimeFieldType43);
        boolean boolean45 = partial10.equals((java.lang.Object) boolean44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        java.lang.String str48 = partial47.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial50.plus(readablePeriod51);
        int int53 = partial50.size();
        boolean boolean54 = partial47.isAfter((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        java.lang.String str57 = partial56.toString();
        int int58 = partial47.compareTo((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial60.plus(readablePeriod61);
        int int63 = partial60.size();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial67 = partial65.plus(readablePeriod66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial67.toDateTime(readableInstant68);
        boolean boolean70 = partial60.isMatch((org.joda.time.ReadableInstant) dateTime69);
        boolean boolean71 = partial56.isMatch((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime72 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        boolean boolean73 = partial5.isMatch((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property75 = partial5.property(dateTimeFieldType74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.plus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        int int35 = partial32.size();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        boolean boolean42 = partial32.isMatch((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean43 = partial28.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial28.plus(readablePeriod44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial45);
        java.lang.String str47 = partial45.toString();
        boolean boolean48 = partial3.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        java.lang.String str51 = partial50.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.plus(readablePeriod54);
        int int56 = partial53.size();
        boolean boolean57 = partial50.isAfter((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        java.lang.String str60 = partial59.toString();
        int int61 = partial50.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = partial59.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = partial59.getFieldTypes();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial67 = partial65.plus(readablePeriod66);
        int int68 = partial65.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = partial65.getFieldTypes();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        boolean boolean73 = partial71.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology74 = partial71.getChronology();
        int[] intArray75 = partial71.getValues();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = new org.joda.time.Partial(chronology76);
        boolean boolean79 = partial77.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology80 = partial77.getChronology();
        org.joda.time.Partial partial81 = new org.joda.time.Partial(dateTimeFieldTypeArray69, intArray75, chronology80);
        int[] intArray82 = new int[] {};
        org.joda.time.Partial partial83 = new org.joda.time.Partial(dateTimeFieldTypeArray69, intArray82);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Partial partial85 = new org.joda.time.Partial(chronology84);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Partial partial87 = partial85.withChronologyRetainFields(chronology86);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = null;
        org.joda.time.Partial partial89 = partial85.without(dateTimeFieldType88);
        org.joda.time.Chronology chronology90 = partial89.getChronology();
        org.joda.time.Partial partial91 = new org.joda.time.Partial(dateTimeFieldTypeArray63, intArray82, chronology90);
        org.joda.time.Partial partial92 = partial3.withChronologyRetainFields(chronology90);
        org.joda.time.DurationFieldType durationFieldType93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial95 = partial92.withFieldAddWrapped(durationFieldType93, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertNotNull(partial89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(partial92);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial1.minus(readablePeriod11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        int int23 = partial20.size();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        boolean boolean30 = partial20.isMatch((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial16.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial16.toString(dateTimeFormatter32);
        java.lang.String str35 = partial16.toString("[]");
        boolean boolean36 = partial12.isBefore((org.joda.time.ReadablePartial) partial16);
        java.lang.String str37 = partial16.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        org.joda.time.Partial partial39 = partial16.without(dateTimeFieldType38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property43 = partial39.property(dateTimeFieldType42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(partial41);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        boolean boolean11 = partial1.isMatch((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial1.toString(dateTimeFormatter12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = partial1.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        int int20 = partial17.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = partial17.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial17.isSupported(dateTimeFieldType22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = partial17.indexOf(dateTimeFieldType24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial17);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial17.minus(readablePeriod27);
        boolean boolean29 = partial1.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial28.toString(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = partial10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = partial10.toString(dateTimeFormatter26);
        java.lang.String str29 = partial10.toString("[]");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial31.plus(readablePeriod32);
        int int34 = partial31.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = partial31.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        boolean boolean37 = partial31.isSupported(dateTimeFieldType36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = partial31.indexOf(dateTimeFieldType38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial31);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial31.minus(readablePeriod41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        boolean boolean44 = partial42.isSupported(dateTimeFieldType43);
        boolean boolean45 = partial10.equals((java.lang.Object) boolean44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        java.lang.String str48 = partial47.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial50.plus(readablePeriod51);
        int int53 = partial50.size();
        boolean boolean54 = partial47.isAfter((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        java.lang.String str57 = partial56.toString();
        int int58 = partial47.compareTo((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial60.plus(readablePeriod61);
        int int63 = partial60.size();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial67 = partial65.plus(readablePeriod66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial67.toDateTime(readableInstant68);
        boolean boolean70 = partial60.isMatch((org.joda.time.ReadableInstant) dateTime69);
        boolean boolean71 = partial56.isMatch((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime72 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        boolean boolean73 = partial5.isMatch((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        int int75 = partial5.indexOf(dateTimeFieldType74);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int77 = partial5.get(dateTimeFieldType76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        int int26 = partial10.size();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial10.minus(readablePeriod27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial30.plus(readablePeriod31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        int int39 = partial36.size();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        boolean boolean46 = partial36.isMatch((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean47 = partial32.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial32.toString(dateTimeFormatter48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = partial32.toString(dateTimeFormatter50);
        int[] intArray52 = partial32.getValues();
        int[] intArray53 = partial32.getValues();
        boolean boolean54 = partial10.isAfter((org.joda.time.ReadablePartial) partial32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = partial10.toString(dateTimeFormatter55);
        org.joda.time.DurationFieldType durationFieldType57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial59 = partial10.withFieldAdded(durationFieldType57, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial35.getFieldTypes();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        int int44 = partial41.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = partial41.getFieldTypes();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        boolean boolean49 = partial47.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology50 = partial47.getChronology();
        int[] intArray51 = partial47.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        boolean boolean55 = partial53.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology56 = partial53.getChronology();
        org.joda.time.Partial partial57 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray51, chronology56);
        int[] intArray58 = new int[] {};
        org.joda.time.Partial partial59 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial61.withChronologyRetainFields(chronology62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        org.joda.time.Partial partial65 = partial61.without(dateTimeFieldType64);
        org.joda.time.Chronology chronology66 = partial65.getChronology();
        org.joda.time.Partial partial67 = new org.joda.time.Partial(dateTimeFieldTypeArray39, intArray58, chronology66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = partial75.withChronologyRetainFields(chronology76);
        boolean boolean78 = partial71.isAfter((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Chronology chronology79 = partial75.getChronology();
        org.joda.time.Partial partial80 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray58, chronology79);
        org.joda.time.DurationFieldType durationFieldType81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial83 = partial80.withFieldAdded(durationFieldType81, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology79);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        java.lang.Class<?> wildcardClass26 = dateTime23.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial3.minus(readablePeriod25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int28 = partial3.get(dateTimeFieldType27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime51 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime52 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        java.lang.String str53 = partial3.toString();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = partial3.toString(dateTimeFormatter5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        java.lang.String str9 = partial8.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial11.plus(readablePeriod12);
        int int14 = partial11.size();
        boolean boolean15 = partial8.isAfter((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        java.lang.String str18 = partial17.toString();
        int int19 = partial8.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial8.minus(readablePeriod20);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType24 = partial3.getFieldType(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.minus(readablePeriod23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial3.plus(readablePeriod25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = partial26.getFields();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial30.plus(readablePeriod31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial36.withChronologyRetainFields(chronology37);
        boolean boolean39 = partial32.isAfter((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial47.withChronologyRetainFields(chronology48);
        boolean boolean50 = partial43.isAfter((org.joda.time.ReadablePartial) partial47);
        boolean boolean51 = partial32.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        boolean boolean53 = partial32.isSupported(dateTimeFieldType52);
        int int54 = partial32.size();
        boolean boolean55 = partial26.equals((java.lang.Object) int54);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        boolean boolean11 = partial1.isMatch((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial1.toString(dateTimeFormatter12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = partial1.isSupported(dateTimeFieldType14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType17 = partial1.getFieldType((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = partial3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial7 = partial3.withPeriodAdded(readablePeriod5, (int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial3.indexOf(dateTimeFieldType8);
        java.lang.Class<?> wildcardClass10 = partial3.getClass();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial10.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        org.joda.time.Partial partial16 = partial10.without(dateTimeFieldType15);
        int[] intArray17 = partial10.getValues();
        org.joda.time.DurationFieldType durationFieldType18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial20 = partial10.withFieldAddWrapped(durationFieldType18, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime48);
        int int51 = partial35.size();
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        boolean boolean53 = partial3.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        boolean boolean57 = partial55.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = partial55.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial55.minus(readablePeriod59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        org.joda.time.Partial partial62 = partial55.without(dateTimeFieldType61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial66 = partial64.plus(readablePeriod65);
        int int67 = partial64.size();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        boolean boolean74 = partial64.isMatch((org.joda.time.ReadableInstant) dateTime73);
        boolean boolean75 = partial55.isMatch((org.joda.time.ReadableInstant) dateTime73);
        boolean boolean76 = partial3.equals((java.lang.Object) partial55);
        java.util.Locale locale78 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = partial55.toString("", locale78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        boolean boolean27 = partial10.isSupported(dateTimeFieldType26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        int int29 = partial10.indexOf(dateTimeFieldType28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial32 = partial10.with(dateTimeFieldType30, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial3 = partial0.with(dateTimeFieldType1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime30 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        int int35 = partial32.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = partial32.getFieldTypes();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        boolean boolean40 = partial38.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology41 = partial38.getChronology();
        int[] intArray42 = partial38.getValues();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        boolean boolean46 = partial44.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology47 = partial44.getChronology();
        org.joda.time.Partial partial48 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray42, chronology47);
        org.joda.time.Partial partial49 = partial1.withChronologyRetainFields(chronology47);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.plus(readablePeriod50);
        org.joda.time.DurationFieldType durationFieldType52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial54 = partial51.withFieldAddWrapped(durationFieldType52, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(partial51);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = partial3.toString("[]", locale5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        boolean boolean10 = partial8.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology11 = partial8.getChronology();
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        int[] intArray13 = partial12.getValues();
        int[] intArray14 = partial12.getValues();
        org.joda.time.Partial partial15 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial12);
        boolean boolean16 = partial3.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property18 = partial3.property(dateTimeFieldType17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        org.joda.time.Partial partial11 = partial7.without(dateTimeFieldType10);
        boolean boolean12 = partial5.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial14.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        boolean boolean20 = partial14.isSupported(dateTimeFieldType19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = partial14.indexOf(dateTimeFieldType21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial23.getFieldTypes();
        boolean boolean25 = partial5.isAfter((org.joda.time.ReadablePartial) partial23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = partial23.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        boolean boolean17 = partial1.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        int int22 = partial19.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = partial19.isSupported(dateTimeFieldType24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        int int27 = partial19.indexOf(dateTimeFieldType26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        boolean boolean31 = partial29.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology32 = partial29.getChronology();
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = partial35.withChronologyRetainFields(chronology36);
        boolean boolean38 = partial33.isAfter((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        java.lang.String str41 = partial40.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        boolean boolean47 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        boolean boolean48 = partial33.isBefore((org.joda.time.ReadablePartial) partial40);
        boolean boolean49 = partial19.isMatch((org.joda.time.ReadablePartial) partial33);
        boolean boolean50 = partial1.isEqual((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property52 = partial19.property(dateTimeFieldType51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        org.joda.time.Partial partial6 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial7.toString(dateTimeFormatter8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property11 = partial7.property(dateTimeFieldType10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        int int19 = partial16.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial16.getFieldTypes();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        boolean boolean24 = partial22.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology25 = partial22.getChronology();
        int[] intArray26 = partial22.getValues();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        boolean boolean30 = partial28.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology31 = partial28.getChronology();
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray26, chronology31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray26);
        java.lang.Class<?> wildcardClass34 = intArray26.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        boolean boolean11 = partial1.isMatch((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial1.toString(dateTimeFormatter12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField15 = partial1.getField(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        int int19 = partial16.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial16.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = partial16.isSupported(dateTimeFieldType21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial30.plus(readablePeriod31);
        int int33 = partial30.size();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        boolean boolean40 = partial30.isMatch((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean41 = partial26.isBefore((org.joda.time.ReadablePartial) partial30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial26.toString(dateTimeFormatter42);
        java.lang.String str45 = partial26.toString("[]");
        boolean boolean46 = partial16.isMatch((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial54.plus(readablePeriod55);
        int int57 = partial54.size();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial59.plus(readablePeriod60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        boolean boolean64 = partial54.isMatch((org.joda.time.ReadableInstant) dateTime63);
        boolean boolean65 = partial50.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = partial50.toString(dateTimeFormatter66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = null;
        java.lang.String str69 = partial50.toString(dateTimeFormatter68);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = null;
        org.joda.time.Partial partial71 = partial50.without(dateTimeFieldType70);
        java.lang.Object obj72 = null;
        boolean boolean73 = partial71.equals(obj72);
        int int74 = partial26.compareTo((org.joda.time.ReadablePartial) partial71);
        boolean boolean75 = partial10.isAfter((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DurationFieldType durationFieldType76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial78 = partial26.withFieldAddWrapped(durationFieldType76, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial3.plus(readablePeriod24);
        org.joda.time.DurationFieldType durationFieldType26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial28 = partial3.withFieldAdded(durationFieldType26, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial14.toString(dateTimeFormatter30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial14.toString(dateTimeFormatter32);
        int[] intArray34 = partial14.getValues();
        boolean boolean35 = partial1.isEqual((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        int int40 = partial37.size();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        boolean boolean47 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial37.toString(dateTimeFormatter48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = partial57.withChronologyRetainFields(chronology58);
        boolean boolean60 = partial53.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial62.plus(readablePeriod63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = partial64.toDateTime(readableInstant65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = partial68.withChronologyRetainFields(chronology69);
        boolean boolean71 = partial64.isAfter((org.joda.time.ReadablePartial) partial68);
        boolean boolean72 = partial53.isBefore((org.joda.time.ReadablePartial) partial68);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial53.plus(readablePeriod73);
        boolean boolean75 = partial37.isAfter((org.joda.time.ReadablePartial) partial53);
        boolean boolean76 = partial14.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DurationFieldType durationFieldType77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial79 = partial37.withFieldAdded(durationFieldType77, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = partial3.toString("[]", locale5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial16.withChronologyRetainFields(chronology17);
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial21.plus(readablePeriod22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial27.withChronologyRetainFields(chronology28);
        boolean boolean30 = partial23.isAfter((org.joda.time.ReadablePartial) partial27);
        boolean boolean31 = partial12.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        boolean boolean33 = partial12.isSupported(dateTimeFieldType32);
        boolean boolean34 = partial3.equals((java.lang.Object) dateTimeFieldType32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial3.withPeriodAdded(readablePeriod35, (int) 'a');
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial3.withPeriodAdded(readablePeriod38, (int) (short) 1);
        java.lang.String str42 = partial3.toString("[]");
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        java.lang.String str7 = partial1.toString("[]");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        org.joda.time.Partial partial13 = partial9.without(dateTimeFieldType12);
        org.joda.time.Chronology chronology14 = partial13.getChronology();
        boolean boolean15 = partial1.isEqual((org.joda.time.ReadablePartial) partial13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = partial13.indexOf(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial13.getFieldTypes();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        java.lang.String str21 = partial20.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        int int26 = partial23.size();
        boolean boolean27 = partial20.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        java.lang.String str30 = partial29.toString();
        int int31 = partial20.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = partial20.indexOf(dateTimeFieldType32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        int int44 = partial41.size();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        boolean boolean51 = partial41.isMatch((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean52 = partial37.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial37.toString(dateTimeFormatter53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial57 = partial37.withPeriodAdded(readablePeriod55, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = partial37.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial37.minus(readablePeriod59);
        boolean boolean61 = partial20.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial63.plus(readablePeriod64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = partial65.toDateTime(readableInstant66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        int int72 = partial69.size();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial74.plus(readablePeriod75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = partial76.toDateTime(readableInstant77);
        boolean boolean79 = partial69.isMatch((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean80 = partial65.isBefore((org.joda.time.ReadablePartial) partial69);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.Partial partial82 = partial65.plus(readablePeriod81);
        boolean boolean83 = partial37.equals((java.lang.Object) partial65);
        int int84 = partial13.compareTo((org.joda.time.ReadablePartial) partial65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = null;
        java.lang.String str86 = partial65.toString(dateTimeFormatter85);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial89 = partial65.with(dateTimeFieldType87, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "[]" + "'", str86, "[]");
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        java.lang.String str26 = partial25.toString();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial28.plus(readablePeriod29);
        int int31 = partial28.size();
        boolean boolean32 = partial25.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        java.lang.String str35 = partial34.toString();
        int int36 = partial25.compareTo((org.joda.time.ReadablePartial) partial34);
        java.lang.String str37 = partial34.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial34.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial34.getFieldTypes();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        int int44 = partial41.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = partial41.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = partial41.isSupported(dateTimeFieldType46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = partial41.indexOf(dateTimeFieldType48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial41);
        boolean boolean51 = partial34.isEqual((org.joda.time.ReadablePartial) partial41);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial34.toDateTime(readableInstant52);
        boolean boolean54 = partial23.isMatch((org.joda.time.ReadableInstant) dateTime53);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial3.minus(readablePeriod25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int28 = partial3.get(dateTimeFieldType27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial26);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        int int19 = partial16.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial16.getFieldTypes();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        boolean boolean24 = partial22.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology25 = partial22.getChronology();
        int[] intArray26 = partial22.getValues();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        boolean boolean30 = partial28.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology31 = partial28.getChronology();
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray26, chronology31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray26);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        boolean boolean37 = partial35.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology38 = partial35.getChronology();
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        int[] intArray40 = partial39.getValues();
        org.joda.time.Partial partial41 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial44 = partial41.withField(dateTimeFieldType42, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        java.lang.String str17 = partial14.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial14.getFormatter();
        boolean boolean19 = partial3.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DurationFieldType durationFieldType20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial22 = partial3.withFieldAdded(durationFieldType20, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial5.plus(readablePeriod6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        boolean boolean11 = partial9.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = partial9.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.minus(readablePeriod13);
        java.lang.String str15 = partial14.toStringList();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial23.withChronologyRetainFields(chronology24);
        boolean boolean26 = partial19.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial28.plus(readablePeriod29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial34.withChronologyRetainFields(chronology35);
        boolean boolean37 = partial30.isAfter((org.joda.time.ReadablePartial) partial34);
        boolean boolean38 = partial19.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        boolean boolean40 = partial19.isSupported(dateTimeFieldType39);
        boolean boolean41 = partial14.isAfter((org.joda.time.ReadablePartial) partial19);
        boolean boolean42 = partial5.isMatch((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DurationFieldType durationFieldType43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial45 = partial5.withFieldAdded(durationFieldType43, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        org.joda.time.Partial partial6 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology7 = partial6.getChronology();
        org.joda.time.DurationFieldType durationFieldType8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial10 = partial6.withFieldAdded(durationFieldType8, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial14.toString(dateTimeFormatter30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial14.toString(dateTimeFormatter32);
        int[] intArray34 = partial14.getValues();
        boolean boolean35 = partial1.isEqual((org.joda.time.ReadablePartial) partial14);
        int int36 = partial1.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property38 = partial1.property(dateTimeFieldType37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        java.lang.String str38 = partial35.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial35.getFieldTypes();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        int int44 = partial41.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = partial41.getFieldTypes();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        boolean boolean49 = partial47.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology50 = partial47.getChronology();
        int[] intArray51 = partial47.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        boolean boolean55 = partial53.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology56 = partial53.getChronology();
        org.joda.time.Partial partial57 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray51, chronology56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial(dateTimeFieldTypeArray39, intArray51);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial60.plus(readablePeriod61);
        int int63 = partial60.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = partial60.getFieldTypes();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        boolean boolean68 = partial66.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology69 = partial66.getChronology();
        int[] intArray70 = partial66.getValues();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        boolean boolean74 = partial72.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology75 = partial72.getChronology();
        org.joda.time.Partial partial76 = new org.joda.time.Partial(dateTimeFieldTypeArray64, intArray70, chronology75);
        int[] intArray77 = new int[] {};
        org.joda.time.Partial partial78 = new org.joda.time.Partial(dateTimeFieldTypeArray64, intArray77);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Partial partial80 = new org.joda.time.Partial(chronology79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.Partial partial82 = partial80.plus(readablePeriod81);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.DateTime dateTime84 = partial82.toDateTime(readableInstant83);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.Partial partial86 = new org.joda.time.Partial(chronology85);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.Partial partial88 = partial86.withChronologyRetainFields(chronology87);
        boolean boolean89 = partial82.isAfter((org.joda.time.ReadablePartial) partial86);
        org.joda.time.Chronology chronology90 = partial86.getChronology();
        org.joda.time.Partial partial91 = new org.joda.time.Partial(dateTimeFieldTypeArray39, intArray77, chronology90);
        org.joda.time.Partial partial92 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray77);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(partial88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(chronology90);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        java.lang.String str17 = partial14.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial14.getFormatter();
        boolean boolean19 = partial3.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial21.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial23.withPeriodAdded(readablePeriod24, (-1));
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        org.joda.time.Partial partial29 = partial27.without(dateTimeFieldType28);
        boolean boolean30 = partial3.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial31 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        java.lang.String str32 = partial3.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial35 = partial3.with(dateTimeFieldType33, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        java.lang.String str7 = partial1.toString("[]");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        org.joda.time.Partial partial13 = partial9.without(dateTimeFieldType12);
        org.joda.time.Chronology chronology14 = partial13.getChronology();
        boolean boolean15 = partial1.isEqual((org.joda.time.ReadablePartial) partial13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = partial13.indexOf(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial13.getFieldTypes();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        java.lang.String str21 = partial20.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        int int26 = partial23.size();
        boolean boolean27 = partial20.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        java.lang.String str30 = partial29.toString();
        int int31 = partial20.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = partial20.indexOf(dateTimeFieldType32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        int int44 = partial41.size();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        boolean boolean51 = partial41.isMatch((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean52 = partial37.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial37.toString(dateTimeFormatter53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial57 = partial37.withPeriodAdded(readablePeriod55, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = partial37.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial37.minus(readablePeriod59);
        boolean boolean61 = partial20.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial63.plus(readablePeriod64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = partial65.toDateTime(readableInstant66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        int int72 = partial69.size();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial74.plus(readablePeriod75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = partial76.toDateTime(readableInstant77);
        boolean boolean79 = partial69.isMatch((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean80 = partial65.isBefore((org.joda.time.ReadablePartial) partial69);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.Partial partial82 = partial65.plus(readablePeriod81);
        boolean boolean83 = partial37.equals((java.lang.Object) partial65);
        int int84 = partial13.compareTo((org.joda.time.ReadablePartial) partial65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = null;
        java.lang.String str86 = partial65.toString(dateTimeFormatter85);
        java.lang.String str87 = partial65.toStringList();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "[]" + "'", str86, "[]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "[]" + "'", str87, "[]");
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        java.lang.String str4 = partial3.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        int int9 = partial6.size();
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        int int14 = partial3.compareTo((org.joda.time.ReadablePartial) partial12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial3.minus(readablePeriod15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial18.getFieldTypes();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        boolean boolean26 = partial24.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology27 = partial24.getChronology();
        int[] intArray28 = partial24.getValues();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        boolean boolean32 = partial30.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology33 = partial30.getChronology();
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray28, chronology33);
        org.joda.time.Partial partial35 = partial16.withChronologyRetainFields(chronology33);
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial37 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) -1, chronology33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(partial35);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial15);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = partial5.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial3.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial3.withPeriodAdded(readablePeriod28, (int) (short) 100);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        java.lang.String str37 = partial36.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        boolean boolean43 = partial36.isAfter((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        java.lang.String str46 = partial45.toString();
        int int47 = partial36.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.plus(readablePeriod50);
        int int52 = partial49.size();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial54.plus(readablePeriod55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = partial56.toDateTime(readableInstant57);
        boolean boolean59 = partial49.isMatch((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean60 = partial45.isMatch((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime61 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime62 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial65 = partial30.withField(dateTimeFieldType63, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.minus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        int int29 = partial26.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial26.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = partial26.isSupported(dateTimeFieldType31);
        java.lang.String str33 = partial26.toStringList();
        java.lang.String str35 = partial26.toString("[]");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        boolean boolean53 = partial43.isMatch((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = partial39.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial39.plus(readablePeriod55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        java.lang.String str59 = partial58.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        int int64 = partial61.size();
        boolean boolean65 = partial58.isAfter((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        java.lang.String str68 = partial67.toString();
        int int69 = partial58.compareTo((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.Partial partial73 = partial71.plus(readablePeriod72);
        int int74 = partial71.size();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial78 = partial76.plus(readablePeriod77);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = partial78.toDateTime(readableInstant79);
        boolean boolean81 = partial71.isMatch((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean82 = partial67.isMatch((org.joda.time.ReadableInstant) dateTime80);
        int int83 = partial67.size();
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.Partial partial85 = partial67.minus(readablePeriod84);
        boolean boolean86 = partial56.isMatch((org.joda.time.ReadablePartial) partial85);
        boolean boolean87 = partial26.isMatch((org.joda.time.ReadablePartial) partial85);
        boolean boolean88 = partial24.isEqual((org.joda.time.ReadablePartial) partial26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = partial26.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        org.joda.time.Partial partial92 = partial26.withPeriodAdded(readablePeriod90, 10);
        java.lang.Class<?> wildcardClass93 = partial26.getClass();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[]" + "'", str68, "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNull(dateTimeFormatter89);
        org.junit.Assert.assertNotNull(partial92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        int int19 = partial16.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial16.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = partial16.isSupported(dateTimeFieldType21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial30.plus(readablePeriod31);
        int int33 = partial30.size();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        boolean boolean40 = partial30.isMatch((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean41 = partial26.isBefore((org.joda.time.ReadablePartial) partial30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial26.toString(dateTimeFormatter42);
        java.lang.String str45 = partial26.toString("[]");
        boolean boolean46 = partial16.isMatch((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial54.plus(readablePeriod55);
        int int57 = partial54.size();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial59.plus(readablePeriod60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        boolean boolean64 = partial54.isMatch((org.joda.time.ReadableInstant) dateTime63);
        boolean boolean65 = partial50.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = partial50.toString(dateTimeFormatter66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = null;
        java.lang.String str69 = partial50.toString(dateTimeFormatter68);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = null;
        org.joda.time.Partial partial71 = partial50.without(dateTimeFieldType70);
        java.lang.Object obj72 = null;
        boolean boolean73 = partial71.equals(obj72);
        int int74 = partial26.compareTo((org.joda.time.ReadablePartial) partial71);
        boolean boolean75 = partial10.isAfter((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DurationFieldType durationFieldType76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial78 = partial10.withFieldAddWrapped(durationFieldType76, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.minus(readablePeriod23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial3.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial3.withPeriodAdded(readablePeriod27, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int31 = partial29.get(dateTimeFieldType30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = partial3.toString("[]", locale5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial16.withChronologyRetainFields(chronology17);
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial21.plus(readablePeriod22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial27.withChronologyRetainFields(chronology28);
        boolean boolean30 = partial23.isAfter((org.joda.time.ReadablePartial) partial27);
        boolean boolean31 = partial12.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        boolean boolean33 = partial12.isSupported(dateTimeFieldType32);
        boolean boolean34 = partial3.equals((java.lang.Object) dateTimeFieldType32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial3.withPeriodAdded(readablePeriod35, (int) 'a');
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial3.withPeriodAdded(readablePeriod38, (int) (short) 1);
        java.lang.Class<?> wildcardClass41 = partial3.getClass();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField22 = partial3.getField((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime48);
        int int51 = partial35.size();
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        boolean boolean53 = partial3.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial55.plus(readablePeriod56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        int int64 = partial61.size();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial66.plus(readablePeriod67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = partial68.toDateTime(readableInstant69);
        boolean boolean71 = partial61.isMatch((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean72 = partial57.isBefore((org.joda.time.ReadablePartial) partial61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = null;
        java.lang.String str74 = partial57.toString(dateTimeFormatter73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial77 = partial57.withPeriodAdded(readablePeriod75, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray78 = partial57.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial81 = partial57.withPeriodAdded(readablePeriod79, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.Partial partial84 = partial57.withPeriodAdded(readablePeriod82, (int) (short) 100);
        int int85 = partial35.compareTo((org.joda.time.ReadablePartial) partial57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField87 = partial35.getField((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[]" + "'", str74, "[]");
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray78);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        java.lang.String str11 = partial7.toString();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        int int26 = partial10.size();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial10.minus(readablePeriod27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial10.plus(readablePeriod29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = partial10.toString(dateTimeFormatter31);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.DateTimeField[] dateTimeFieldArray6 = partial3.getFields();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(dateTimeFieldArray6);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        java.lang.String str17 = partial14.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial14.getFormatter();
        boolean boolean19 = partial3.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial21.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial23.withPeriodAdded(readablePeriod24, (-1));
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        org.joda.time.Partial partial29 = partial27.without(dateTimeFieldType28);
        boolean boolean30 = partial3.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = partial3.toString(dateTimeFormatter31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial35 = partial3.with(dateTimeFieldType33, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        java.lang.String str21 = partial20.toString();
        java.lang.String str22 = partial20.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial20.getFormatter();
        org.joda.time.Partial partial24 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology25 = partial20.getChronology();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.plus(readablePeriod28);
        int int30 = partial27.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial27.getFieldTypes();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        boolean boolean35 = partial33.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology36 = partial33.getChronology();
        int[] intArray37 = partial33.getValues();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        boolean boolean41 = partial39.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology42 = partial39.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray37, chronology42);
        int[] intArray44 = new int[] {};
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray44);
        boolean boolean46 = partial20.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial49 = partial45.withField(dateTimeFieldType47, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial35.getFieldTypes();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        int int44 = partial41.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = partial41.getFieldTypes();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        boolean boolean49 = partial47.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology50 = partial47.getChronology();
        int[] intArray51 = partial47.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        boolean boolean55 = partial53.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology56 = partial53.getChronology();
        org.joda.time.Partial partial57 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray51, chronology56);
        int[] intArray58 = new int[] {};
        org.joda.time.Partial partial59 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial61.withChronologyRetainFields(chronology62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        org.joda.time.Partial partial65 = partial61.without(dateTimeFieldType64);
        org.joda.time.Chronology chronology66 = partial65.getChronology();
        org.joda.time.Partial partial67 = new org.joda.time.Partial(dateTimeFieldTypeArray39, intArray58, chronology66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = partial75.withChronologyRetainFields(chronology76);
        boolean boolean78 = partial71.isAfter((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Chronology chronology79 = partial75.getChronology();
        org.joda.time.Partial partial80 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray58, chronology79);
        org.joda.time.Partial partial81 = new org.joda.time.Partial(chronology79);
        // The following exception was thrown during execution in test generation
        try {
            int int83 = partial81.getValue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology79);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        java.lang.String str22 = partial21.toString();
        int int23 = partial12.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial12.minus(readablePeriod24);
        boolean boolean26 = partial1.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial28.plus(readablePeriod29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        java.lang.String str33 = partial32.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        int int38 = partial35.size();
        boolean boolean39 = partial32.isAfter((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        java.lang.String str42 = partial41.toString();
        int int43 = partial32.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial45.plus(readablePeriod46);
        int int48 = partial45.size();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial50.plus(readablePeriod51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = partial52.toDateTime(readableInstant53);
        boolean boolean55 = partial45.isMatch((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean56 = partial41.isMatch((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial58.plus(readablePeriod59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        java.lang.String str63 = partial62.toString();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial67 = partial65.plus(readablePeriod66);
        int int68 = partial65.size();
        boolean boolean69 = partial62.isAfter((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        java.lang.String str72 = partial71.toString();
        int int73 = partial62.compareTo((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial77 = partial75.plus(readablePeriod76);
        int int78 = partial75.size();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Partial partial80 = new org.joda.time.Partial(chronology79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.Partial partial82 = partial80.plus(readablePeriod81);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.DateTime dateTime84 = partial82.toDateTime(readableInstant83);
        boolean boolean85 = partial75.isMatch((org.joda.time.ReadableInstant) dateTime84);
        boolean boolean86 = partial71.isMatch((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTime dateTime87 = partial58.toDateTime((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTime dateTime88 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        boolean boolean89 = partial30.isMatch((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTime dateTime90 = partial12.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[]" + "'", str72, "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(dateTime90);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial15);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        boolean boolean24 = partial22.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology25 = partial22.getChronology();
        int[] intArray26 = partial22.getValues();
        java.lang.String str28 = partial22.toString("[]");
        boolean boolean29 = partial5.isAfter((org.joda.time.ReadablePartial) partial22);
        org.joda.time.DurationFieldType durationFieldType30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial32 = partial5.withFieldAdded(durationFieldType30, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        boolean boolean5 = partial3.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology6 = partial3.getChronology();
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial8 = new org.joda.time.Partial(dateTimeFieldType0, 100, chronology6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        boolean boolean5 = partial3.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = partial3.getFormatter();
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial9 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) 1, chronology7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial15);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        boolean boolean24 = partial22.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology25 = partial22.getChronology();
        int[] intArray26 = partial22.getValues();
        java.lang.String str28 = partial22.toString("[]");
        boolean boolean29 = partial5.isAfter((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial31.plus(readablePeriod32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = partial33.toDateTime(readableInstant34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        int int40 = partial37.size();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        boolean boolean47 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial33.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = partial33.toString(dateTimeFormatter49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = partial33.toString(dateTimeFormatter51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        org.joda.time.Partial partial54 = partial33.without(dateTimeFieldType53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        java.lang.String str57 = partial56.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial59.plus(readablePeriod60);
        int int62 = partial59.size();
        boolean boolean63 = partial56.isAfter((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        java.lang.String str66 = partial65.toString();
        int int67 = partial56.compareTo((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        int int72 = partial69.size();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial74.plus(readablePeriod75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = partial76.toDateTime(readableInstant77);
        boolean boolean79 = partial69.isMatch((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean80 = partial65.isMatch((org.joda.time.ReadableInstant) dateTime78);
        int int81 = partial65.size();
        org.joda.time.Partial partial82 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial65);
        boolean boolean83 = partial33.isEqual((org.joda.time.ReadablePartial) partial65);
        boolean boolean84 = partial5.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Partial partial85 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Partial partial86 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial85);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = null;
        org.joda.time.Partial partial88 = partial86.without(dateTimeFieldType87);
        org.joda.time.DurationFieldType durationFieldType89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial91 = partial86.withFieldAddWrapped(durationFieldType89, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(partial88);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        int int19 = partial16.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial16.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = partial16.isSupported(dateTimeFieldType21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial30.plus(readablePeriod31);
        int int33 = partial30.size();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        boolean boolean40 = partial30.isMatch((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean41 = partial26.isBefore((org.joda.time.ReadablePartial) partial30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial26.toString(dateTimeFormatter42);
        java.lang.String str45 = partial26.toString("[]");
        boolean boolean46 = partial16.isMatch((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial54.plus(readablePeriod55);
        int int57 = partial54.size();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial59.plus(readablePeriod60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        boolean boolean64 = partial54.isMatch((org.joda.time.ReadableInstant) dateTime63);
        boolean boolean65 = partial50.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = partial50.toString(dateTimeFormatter66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = null;
        java.lang.String str69 = partial50.toString(dateTimeFormatter68);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = null;
        org.joda.time.Partial partial71 = partial50.without(dateTimeFieldType70);
        java.lang.Object obj72 = null;
        boolean boolean73 = partial71.equals(obj72);
        int int74 = partial26.compareTo((org.joda.time.ReadablePartial) partial71);
        boolean boolean75 = partial10.isAfter((org.joda.time.ReadablePartial) partial26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = partial10.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime48);
        int int51 = partial35.size();
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        boolean boolean53 = partial3.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = partial3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial3.minus(readablePeriod55);
        int[] intArray57 = partial3.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType59 = partial3.getFieldType((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial10 = partial1.withField(dateTimeFieldType8, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial1.minus(readablePeriod11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        int int23 = partial20.size();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        boolean boolean30 = partial20.isMatch((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial16.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial16.toString(dateTimeFormatter32);
        java.lang.String str35 = partial16.toString("[]");
        boolean boolean36 = partial12.isBefore((org.joda.time.ReadablePartial) partial16);
        java.lang.String str37 = partial16.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        org.joda.time.Partial partial39 = partial16.without(dateTimeFieldType38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType41 = partial16.getFieldType((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial39);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        org.joda.time.Partial partial6 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        java.lang.String str8 = partial1.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property10 = partial1.property(dateTimeFieldType9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        boolean boolean17 = partial1.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial1.plus(readablePeriod18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial22 = partial1.with(dateTimeFieldType20, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial19);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DateTimeField[] dateTimeFieldArray1 = partial0.getFields();
        org.joda.time.Partial partial2 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        java.lang.Class<?> wildcardClass3 = partial2.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial1.minus(readablePeriod11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        int int23 = partial20.size();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        boolean boolean30 = partial20.isMatch((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial16.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial16.toString(dateTimeFormatter32);
        java.lang.String str35 = partial16.toString("[]");
        boolean boolean36 = partial12.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DurationFieldType durationFieldType37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial39 = partial12.withFieldAdded(durationFieldType37, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial3.withChronologyRetainFields(chronology4);
        java.lang.String str6 = partial3.toStringList();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = partial10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial14.withChronologyRetainFields(chronology15);
        boolean boolean17 = partial10.isAfter((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial25.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial21.isAfter((org.joda.time.ReadablePartial) partial25);
        boolean boolean29 = partial10.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial10.plus(readablePeriod30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = partial31.indexOf(dateTimeFieldType32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = partial35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        org.joda.time.Partial partial39 = partial35.without(dateTimeFieldType38);
        org.joda.time.Chronology chronology40 = partial39.getChronology();
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.Partial partial42 = partial31.withChronologyRetainFields(chronology40);
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology40);
        org.joda.time.Partial partial44 = partial3.withChronologyRetainFields(chronology40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldType0, (int) ' ', chronology40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        java.lang.String str4 = partial3.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        int int9 = partial6.size();
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        int int14 = partial3.compareTo((org.joda.time.ReadablePartial) partial12);
        java.lang.String str15 = partial12.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = partial12.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial12.plus(readablePeriod17);
        org.joda.time.Chronology chronology19 = partial12.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldType0, (int) '4', chronology19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial31.plus(readablePeriod32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial38.plus(readablePeriod39);
        int int41 = partial38.size();
        boolean boolean42 = partial35.isAfter((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        java.lang.String str45 = partial44.toString();
        int int46 = partial35.compareTo((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        int int51 = partial48.size();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.plus(readablePeriod54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        boolean boolean58 = partial48.isMatch((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = partial44.isMatch((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime60 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime61 = partial14.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean62 = partial3.isMatch((org.joda.time.ReadableInstant) dateTime60);
        int[] intArray63 = partial3.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = partial3.getFieldTypes();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial1.minus(readablePeriod11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        int int23 = partial20.size();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        boolean boolean30 = partial20.isMatch((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial16.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial16.toString(dateTimeFormatter32);
        java.lang.String str35 = partial16.toString("[]");
        boolean boolean36 = partial12.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        boolean boolean40 = partial38.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology41 = partial38.getChronology();
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = partial44.withChronologyRetainFields(chronology45);
        boolean boolean47 = partial42.isAfter((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.plus(readablePeriod50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial51.toDateTime(readableInstant52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial55.plus(readablePeriod56);
        int int58 = partial55.size();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial60.plus(readablePeriod61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        boolean boolean65 = partial55.isMatch((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean66 = partial51.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial51.plus(readablePeriod67);
        org.joda.time.Partial partial69 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial68);
        java.lang.String str70 = partial68.toString();
        int int71 = partial46.compareTo((org.joda.time.ReadablePartial) partial68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = null;
        java.lang.String str73 = partial46.toString(dateTimeFormatter72);
        boolean boolean74 = partial16.isMatch((org.joda.time.ReadablePartial) partial46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = partial46.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        int[] intArray23 = partial3.getValues();
        org.joda.time.Partial partial24 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.DurationFieldType durationFieldType25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial27 = partial3.withFieldAdded(durationFieldType25, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial15 = partial12.withField(dateTimeFieldType13, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial1.minus(readablePeriod13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        int int19 = partial16.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial16.getFieldTypes();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        boolean boolean24 = partial22.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology25 = partial22.getChronology();
        int[] intArray26 = partial22.getValues();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        boolean boolean30 = partial28.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology31 = partial28.getChronology();
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray26, chronology31);
        org.joda.time.Partial partial33 = partial14.withChronologyRetainFields(chronology31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = partial33.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(partial33);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int[] intArray6 = partial5.getValues();
        int[] intArray7 = partial5.getValues();
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        int int19 = partial16.size();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial21.plus(readablePeriod22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        boolean boolean26 = partial16.isMatch((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = partial12.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = partial12.toString(dateTimeFormatter28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial12.withPeriodAdded(readablePeriod30, (int) (short) 10);
        int int33 = partial8.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial8.getFormatter();
        java.util.Locale locale36 = null;
        java.lang.String str37 = partial8.toString("[]", locale36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = partial8.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (-1));
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        boolean boolean10 = partial8.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology11 = partial8.getChronology();
        int[] intArray12 = partial8.getValues();
        java.lang.String str14 = partial8.toString("[]");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        org.joda.time.Partial partial20 = partial16.without(dateTimeFieldType19);
        org.joda.time.Chronology chronology21 = partial20.getChronology();
        boolean boolean22 = partial8.isEqual((org.joda.time.ReadablePartial) partial20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = partial20.indexOf(dateTimeFieldType23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = partial20.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial20.getFieldTypes();
        boolean boolean27 = partial3.isMatch((org.joda.time.ReadablePartial) partial20);
        int int28 = partial20.size();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        java.lang.String str31 = partial30.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int int36 = partial33.size();
        boolean boolean37 = partial30.isAfter((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        java.lang.String str40 = partial39.toString();
        int int41 = partial30.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        boolean boolean53 = partial43.isMatch((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime55 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean56 = partial3.isMatch((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        boolean boolean60 = partial58.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology61 = partial58.getChronology();
        int[] intArray62 = partial58.getValues();
        java.lang.String str64 = partial58.toString("[]");
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = partial66.withChronologyRetainFields(chronology67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        org.joda.time.Partial partial70 = partial66.without(dateTimeFieldType69);
        org.joda.time.Chronology chronology71 = partial70.getChronology();
        boolean boolean72 = partial58.isEqual((org.joda.time.ReadablePartial) partial70);
        boolean boolean73 = partial3.isBefore((org.joda.time.ReadablePartial) partial58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = null;
        java.lang.String str75 = partial58.toString(dateTimeFormatter74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial77 = partial58.minus(readablePeriod76);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial80 = partial58.withField(dateTimeFieldType78, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[]" + "'", str75, "[]");
        org.junit.Assert.assertNotNull(partial77);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = partial7.getChronology();
        java.lang.String str12 = partial7.toStringList();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial15);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        boolean boolean24 = partial22.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology25 = partial22.getChronology();
        int[] intArray26 = partial22.getValues();
        java.lang.String str28 = partial22.toString("[]");
        boolean boolean29 = partial5.isAfter((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial31.plus(readablePeriod32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = partial33.toDateTime(readableInstant34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        int int40 = partial37.size();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        boolean boolean47 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial33.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = partial33.toString(dateTimeFormatter49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = partial33.toString(dateTimeFormatter51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        org.joda.time.Partial partial54 = partial33.without(dateTimeFieldType53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        java.lang.String str57 = partial56.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial59.plus(readablePeriod60);
        int int62 = partial59.size();
        boolean boolean63 = partial56.isAfter((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        java.lang.String str66 = partial65.toString();
        int int67 = partial56.compareTo((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        int int72 = partial69.size();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial74.plus(readablePeriod75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = partial76.toDateTime(readableInstant77);
        boolean boolean79 = partial69.isMatch((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean80 = partial65.isMatch((org.joda.time.ReadableInstant) dateTime78);
        int int81 = partial65.size();
        org.joda.time.Partial partial82 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial65);
        boolean boolean83 = partial33.isEqual((org.joda.time.ReadablePartial) partial65);
        boolean boolean84 = partial5.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Partial partial85 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Partial partial86 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial85);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = null;
        org.joda.time.Partial partial88 = partial86.without(dateTimeFieldType87);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray89 = partial86.getFieldTypes();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(partial88);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray89);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        java.lang.String str7 = partial1.toString("[]");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        org.joda.time.Partial partial13 = partial9.without(dateTimeFieldType12);
        org.joda.time.Chronology chronology14 = partial13.getChronology();
        boolean boolean15 = partial1.isEqual((org.joda.time.ReadablePartial) partial13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = partial13.indexOf(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial13.getFieldTypes();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        java.lang.String str21 = partial20.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        int int26 = partial23.size();
        boolean boolean27 = partial20.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        java.lang.String str30 = partial29.toString();
        int int31 = partial20.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = partial20.indexOf(dateTimeFieldType32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        int int44 = partial41.size();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        boolean boolean51 = partial41.isMatch((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean52 = partial37.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial37.toString(dateTimeFormatter53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial57 = partial37.withPeriodAdded(readablePeriod55, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = partial37.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial37.minus(readablePeriod59);
        boolean boolean61 = partial20.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial63.plus(readablePeriod64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = partial65.toDateTime(readableInstant66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        int int72 = partial69.size();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial74.plus(readablePeriod75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = partial76.toDateTime(readableInstant77);
        boolean boolean79 = partial69.isMatch((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean80 = partial65.isBefore((org.joda.time.ReadablePartial) partial69);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.Partial partial82 = partial65.plus(readablePeriod81);
        boolean boolean83 = partial37.equals((java.lang.Object) partial65);
        int int84 = partial13.compareTo((org.joda.time.ReadablePartial) partial65);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Partial partial87 = partial13.withPeriodAdded(readablePeriod85, (int) (short) 10);
        java.lang.String str89 = partial87.toString("[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[]" + "'", str89, "[]");
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        boolean boolean6 = partial4.equals((java.lang.Object) 0.0f);
        int int7 = partial1.compareTo((org.joda.time.ReadablePartial) partial4);
        java.lang.String str8 = partial1.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = partial1.get(dateTimeFieldType9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.lang.String str4 = partial1.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = partial1.isSupported(dateTimeFieldType5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType8 = partial1.getFieldType(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = partial7.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        org.joda.time.Partial partial14 = partial1.without(dateTimeFieldType13);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = partial14.getValue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial14);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = partial1.getFormatter();
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = partial6.isSupported(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = partial3.toString("[]", locale5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial11 = partial3.withField(dateTimeFieldType9, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial8);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = partial10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial14.withChronologyRetainFields(chronology15);
        boolean boolean17 = partial10.isAfter((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial25.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial21.isAfter((org.joda.time.ReadablePartial) partial25);
        boolean boolean29 = partial10.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial10.plus(readablePeriod30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial33.withChronologyRetainFields(chronology34);
        java.util.Locale locale37 = null;
        java.lang.String str38 = partial35.toString("[]", locale37);
        boolean boolean39 = partial31.isEqual((org.joda.time.ReadablePartial) partial35);
        int int40 = partial35.size();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        java.lang.String str43 = partial42.toString();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial45.plus(readablePeriod46);
        int int48 = partial45.size();
        boolean boolean49 = partial42.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        java.lang.String str52 = partial51.toString();
        int int53 = partial42.compareTo((org.joda.time.ReadablePartial) partial51);
        java.lang.String str54 = partial51.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial51.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = partial51.getFieldTypes();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial58.plus(readablePeriod59);
        int int61 = partial58.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray62 = partial58.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        boolean boolean64 = partial58.isSupported(dateTimeFieldType63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = null;
        int int66 = partial58.indexOf(dateTimeFieldType65);
        org.joda.time.Partial partial67 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial58);
        boolean boolean68 = partial51.isEqual((org.joda.time.ReadablePartial) partial58);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = partial51.toDateTime(readableInstant69);
        org.joda.time.DateTime dateTime71 = partial35.toDateTime(readableInstant69);
        boolean boolean72 = partial5.isMatch((org.joda.time.ReadableInstant) dateTime71);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        int int26 = partial10.size();
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.minus(readablePeriod28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        boolean boolean32 = partial27.isMatch((org.joda.time.ReadablePartial) partial31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial27.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial27.getFormatter();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNull(dateTimeFormatter34);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        java.lang.String str28 = partial27.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial30.plus(readablePeriod31);
        int int33 = partial30.size();
        boolean boolean34 = partial27.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        java.lang.String str37 = partial36.toString();
        int int38 = partial27.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = partial36.getFormatter();
        boolean boolean40 = partial10.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.DurationFieldType durationFieldType41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial43 = partial10.withFieldAdded(durationFieldType41, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (-1));
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        boolean boolean10 = partial8.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology11 = partial8.getChronology();
        int[] intArray12 = partial8.getValues();
        java.lang.String str14 = partial8.toString("[]");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        org.joda.time.Partial partial20 = partial16.without(dateTimeFieldType19);
        org.joda.time.Chronology chronology21 = partial20.getChronology();
        boolean boolean22 = partial8.isEqual((org.joda.time.ReadablePartial) partial20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = partial20.indexOf(dateTimeFieldType23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = partial20.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial20.getFieldTypes();
        boolean boolean27 = partial3.isMatch((org.joda.time.ReadablePartial) partial20);
        java.util.Locale locale29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = partial3.toString("hi!", locale29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = partial3.toString("[]", locale5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.DurationFieldType durationFieldType9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial11 = partial3.withFieldAdded(durationFieldType9, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial8);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.DurationFieldType durationFieldType9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial11 = partial4.withFieldAdded(durationFieldType9, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial15);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property22 = partial5.property(dateTimeFieldType21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        java.lang.String str8 = partial7.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        int int13 = partial10.size();
        boolean boolean14 = partial7.isAfter((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        java.lang.String str17 = partial16.toString();
        int int18 = partial7.compareTo((org.joda.time.ReadablePartial) partial16);
        java.lang.String str19 = partial16.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = partial16.getFormatter();
        boolean boolean21 = partial5.isMatch((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology22 = partial5.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial23 = new org.joda.time.Partial(dateTimeFieldType0, 10, chronology22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = partial1.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        int int15 = partial12.size();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        boolean boolean22 = partial12.isMatch((org.joda.time.ReadableInstant) dateTime21);
        boolean boolean23 = partial8.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial8.toString(dateTimeFormatter24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = partial8.toString(dateTimeFormatter26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        org.joda.time.Partial partial29 = partial8.without(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        java.lang.String str32 = partial31.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial34.plus(readablePeriod35);
        int int37 = partial34.size();
        boolean boolean38 = partial31.isAfter((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        java.lang.String str41 = partial40.toString();
        int int42 = partial31.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        int int47 = partial44.size();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.plus(readablePeriod50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial51.toDateTime(readableInstant52);
        boolean boolean54 = partial44.isMatch((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean55 = partial40.isMatch((org.joda.time.ReadableInstant) dateTime53);
        int int56 = partial40.size();
        org.joda.time.Partial partial57 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        boolean boolean58 = partial8.isEqual((org.joda.time.ReadablePartial) partial40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = partial8.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial8.minus(readablePeriod60);
        boolean boolean62 = partial1.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        boolean boolean66 = partial64.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = partial64.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial64.minus(readablePeriod68);
        boolean boolean70 = partial8.isBefore((org.joda.time.ReadablePartial) partial69);
        org.joda.time.DurationFieldType durationFieldType71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial73 = partial8.withFieldAdded(durationFieldType71, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(dateTimeFormatter67);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        java.lang.String str17 = partial14.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial14.getFormatter();
        boolean boolean19 = partial3.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial21.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial23.withPeriodAdded(readablePeriod24, (-1));
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        org.joda.time.Partial partial29 = partial27.without(dateTimeFieldType28);
        boolean boolean30 = partial3.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial27.getFieldTypes();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int int36 = partial33.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = partial33.getFieldTypes();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        boolean boolean41 = partial39.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology42 = partial39.getChronology();
        int[] intArray43 = partial39.getValues();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        boolean boolean47 = partial45.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology48 = partial45.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray43, chronology48);
        int[] intArray50 = new int[] {};
        org.joda.time.Partial partial51 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.plus(readablePeriod54);
        int int56 = partial53.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = partial53.getFieldTypes();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        boolean boolean61 = partial59.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology62 = partial59.getChronology();
        int[] intArray63 = partial59.getValues();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        boolean boolean67 = partial65.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology68 = partial65.getChronology();
        org.joda.time.Partial partial69 = new org.joda.time.Partial(dateTimeFieldTypeArray57, intArray63, chronology68);
        org.joda.time.Partial partial70 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray63);
        org.joda.time.Partial partial71 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray63);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        int int73 = partial71.indexOf(dateTimeFieldType72);
        org.joda.time.ReadablePartial readablePartial74 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int75 = partial71.compareTo(readablePartial74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = partial7.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = partial7.getValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = partial1.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.minus(readablePeriod5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = partial10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial14.withChronologyRetainFields(chronology15);
        boolean boolean17 = partial10.isAfter((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology18 = partial14.getChronology();
        int int19 = partial1.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = partial1.toString(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int25 = partial23.get(dateTimeFieldType24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int[] intArray6 = partial5.getValues();
        int[] intArray7 = partial5.getValues();
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = partial5.getFields();
        org.joda.time.DurationFieldType durationFieldType10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial12 = partial5.withFieldAddWrapped(durationFieldType10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DateTimeField[] dateTimeFieldArray1 = partial0.getFields();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType3 = partial0.getFieldType(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray1);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        int int13 = partial10.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = partial10.isSupported(dateTimeFieldType15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        int int18 = partial10.indexOf(dateTimeFieldType17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial10.minus(readablePeriod20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial34.plus(readablePeriod35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        boolean boolean39 = partial29.isMatch((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean40 = partial25.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = partial25.toString(dateTimeFormatter41);
        java.lang.String str44 = partial25.toString("[]");
        boolean boolean45 = partial21.isBefore((org.joda.time.ReadablePartial) partial25);
        java.lang.String str46 = partial25.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        org.joda.time.Partial partial48 = partial25.without(dateTimeFieldType47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        boolean boolean51 = partial8.isEqual((org.joda.time.ReadablePartial) partial48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = partial8.getFormatter();
        int[] intArray53 = partial8.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType55 = partial8.getFieldType((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = partial1.indexOf(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        int int19 = partial16.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial16.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = partial16.isSupported(dateTimeFieldType21);
        java.lang.String str23 = partial16.toStringList();
        java.lang.String str25 = partial16.toString("[]");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.plus(readablePeriod28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int int36 = partial33.size();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial38.plus(readablePeriod39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        boolean boolean43 = partial33.isMatch((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = partial29.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial29.plus(readablePeriod45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        java.lang.String str49 = partial48.toString();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        int int54 = partial51.size();
        boolean boolean55 = partial48.isAfter((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        java.lang.String str58 = partial57.toString();
        int int59 = partial48.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        int int64 = partial61.size();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial66.plus(readablePeriod67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = partial68.toDateTime(readableInstant69);
        boolean boolean71 = partial61.isMatch((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean72 = partial57.isMatch((org.joda.time.ReadableInstant) dateTime70);
        int int73 = partial57.size();
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Partial partial75 = partial57.minus(readablePeriod74);
        boolean boolean76 = partial46.isMatch((org.joda.time.ReadablePartial) partial75);
        boolean boolean77 = partial16.isMatch((org.joda.time.ReadablePartial) partial75);
        boolean boolean78 = partial1.isEqual((org.joda.time.ReadablePartial) partial16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = partial16.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial82 = partial16.with(dateTimeFieldType80, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNull(dateTimeFormatter79);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        int[] intArray23 = partial3.getValues();
        int[] intArray24 = partial3.getValues();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        boolean boolean28 = partial26.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology29 = partial26.getChronology();
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        int[] intArray31 = partial30.getValues();
        int[] intArray32 = partial30.getValues();
        org.joda.time.Partial partial33 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        int int44 = partial41.size();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        boolean boolean51 = partial41.isMatch((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean52 = partial37.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial37.toString(dateTimeFormatter53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial57 = partial37.withPeriodAdded(readablePeriod55, (int) (short) 10);
        int int58 = partial33.compareTo((org.joda.time.ReadablePartial) partial57);
        boolean boolean59 = partial3.equals((java.lang.Object) partial33);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial62 = partial33.withField(dateTimeFieldType60, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        java.lang.String str21 = partial20.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        int int26 = partial23.size();
        boolean boolean27 = partial20.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        java.lang.String str30 = partial29.toString();
        int int31 = partial20.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int int36 = partial33.size();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial38.plus(readablePeriod39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        boolean boolean43 = partial33.isMatch((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = partial29.isMatch((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        java.lang.String str51 = partial50.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.plus(readablePeriod54);
        int int56 = partial53.size();
        boolean boolean57 = partial50.isAfter((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        java.lang.String str60 = partial59.toString();
        int int61 = partial50.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial63.plus(readablePeriod64);
        int int66 = partial63.size();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial70 = partial68.plus(readablePeriod69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = partial70.toDateTime(readableInstant71);
        boolean boolean73 = partial63.isMatch((org.joda.time.ReadableInstant) dateTime72);
        boolean boolean74 = partial59.isMatch((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime75 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime76 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        boolean boolean77 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime75);
        int[] intArray78 = partial18.getValues();
        org.joda.time.Partial partial79 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.Partial partial82 = partial79.withPeriodAdded(readablePeriod80, 0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(partial82);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = partial7.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = partial7.isSupported(dateTimeFieldType12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = partial7.indexOf(dateTimeFieldType14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial7);
        boolean boolean17 = partial5.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = partial5.indexOf(dateTimeFieldType18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial22 = partial5.with(dateTimeFieldType20, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        java.lang.String str31 = partial30.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int int36 = partial33.size();
        boolean boolean37 = partial30.isAfter((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        java.lang.String str40 = partial39.toString();
        int int41 = partial30.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        boolean boolean53 = partial43.isMatch((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime55 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean56 = partial3.isMatch((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        boolean boolean60 = partial58.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology61 = partial58.getChronology();
        int[] intArray62 = partial58.getValues();
        java.lang.String str64 = partial58.toString("[]");
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = partial66.withChronologyRetainFields(chronology67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        org.joda.time.Partial partial70 = partial66.without(dateTimeFieldType69);
        org.joda.time.Chronology chronology71 = partial70.getChronology();
        boolean boolean72 = partial58.isEqual((org.joda.time.ReadablePartial) partial70);
        boolean boolean73 = partial3.isBefore((org.joda.time.ReadablePartial) partial58);
        int[] intArray74 = partial3.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial77 = partial3.withField(dateTimeFieldType75, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        java.lang.String str17 = partial14.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial14.getFormatter();
        boolean boolean19 = partial3.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology20 = partial3.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial3.getFormatter();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNull(dateTimeFormatter21);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = partial7.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = partial7.isSupported(dateTimeFieldType12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = partial7.indexOf(dateTimeFieldType14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial7);
        boolean boolean17 = partial5.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial5.getFieldTypes();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        int int23 = partial20.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial20.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        boolean boolean26 = partial20.isSupported(dateTimeFieldType25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial28.plus(readablePeriod29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial34.plus(readablePeriod35);
        int int37 = partial34.size();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = partial41.toDateTime(readableInstant42);
        boolean boolean44 = partial34.isMatch((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean45 = partial30.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = partial30.toString(dateTimeFormatter46);
        java.lang.String str49 = partial30.toString("[]");
        boolean boolean50 = partial20.isMatch((org.joda.time.ReadablePartial) partial30);
        int[] intArray51 = partial20.getValues();
        org.joda.time.Partial partial52 = new org.joda.time.Partial(dateTimeFieldTypeArray18, intArray51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        boolean boolean56 = partial54.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology57 = partial54.getChronology();
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        int[] intArray59 = partial58.getValues();
        org.joda.time.Partial partial60 = new org.joda.time.Partial(dateTimeFieldTypeArray18, intArray59);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        java.lang.String str21 = partial20.toString();
        java.lang.String str22 = partial20.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial20.getFormatter();
        org.joda.time.Partial partial24 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = partial24.getFieldTypes();
        org.joda.time.Partial partial26 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial24);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = partial1.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.minus(readablePeriod5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        org.joda.time.Partial partial8 = partial1.without(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        int int13 = partial10.size();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        boolean boolean20 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime19);
        boolean boolean21 = partial1.isMatch((org.joda.time.ReadableInstant) dateTime19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField23 = partial1.getField(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        boolean boolean11 = partial1.isMatch((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial1.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial21.withChronologyRetainFields(chronology22);
        boolean boolean24 = partial17.isAfter((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = partial32.withChronologyRetainFields(chronology33);
        boolean boolean35 = partial28.isAfter((org.joda.time.ReadablePartial) partial32);
        boolean boolean36 = partial17.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial17.plus(readablePeriod37);
        boolean boolean39 = partial1.isAfter((org.joda.time.ReadablePartial) partial17);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial17.minus(readablePeriod40);
        java.util.Locale locale43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = partial41.toString("", locale43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(partial41);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial1.minus(readablePeriod11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        int int23 = partial20.size();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        boolean boolean30 = partial20.isMatch((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial16.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial16.toString(dateTimeFormatter32);
        java.lang.String str35 = partial16.toString("[]");
        boolean boolean36 = partial12.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        boolean boolean40 = partial38.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology41 = partial38.getChronology();
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = partial44.withChronologyRetainFields(chronology45);
        boolean boolean47 = partial42.isAfter((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.plus(readablePeriod50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial51.toDateTime(readableInstant52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial55.plus(readablePeriod56);
        int int58 = partial55.size();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial60.plus(readablePeriod61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        boolean boolean65 = partial55.isMatch((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean66 = partial51.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial51.plus(readablePeriod67);
        org.joda.time.Partial partial69 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial68);
        java.lang.String str70 = partial68.toString();
        int int71 = partial46.compareTo((org.joda.time.ReadablePartial) partial68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = null;
        java.lang.String str73 = partial46.toString(dateTimeFormatter72);
        boolean boolean74 = partial16.isMatch((org.joda.time.ReadablePartial) partial46);
        org.joda.time.DurationFieldType durationFieldType75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial77 = partial16.withFieldAddWrapped(durationFieldType75, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        boolean boolean11 = partial1.isMatch((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial1.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial21.withChronologyRetainFields(chronology22);
        boolean boolean24 = partial17.isAfter((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = partial32.withChronologyRetainFields(chronology33);
        boolean boolean35 = partial28.isAfter((org.joda.time.ReadablePartial) partial32);
        boolean boolean36 = partial17.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial17.plus(readablePeriod37);
        boolean boolean39 = partial1.isAfter((org.joda.time.ReadablePartial) partial17);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial17.minus(readablePeriod40);
        org.joda.time.DurationFieldType durationFieldType42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial44 = partial17.withFieldAdded(durationFieldType42, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(partial41);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        org.joda.time.Partial partial6 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial7.toString(dateTimeFormatter8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial11.plus(readablePeriod12);
        int int14 = partial11.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = partial11.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = partial11.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = partial11.indexOf(dateTimeFieldType18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial11);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial11.minus(readablePeriod21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.minus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        int int35 = partial32.size();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        boolean boolean42 = partial32.isMatch((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean43 = partial28.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = partial28.toString(dateTimeFormatter44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial48 = partial28.withPeriodAdded(readablePeriod46, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = partial28.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial28.withPeriodAdded(readablePeriod50, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial55 = partial28.withPeriodAdded(readablePeriod53, (int) (short) 100);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial57.plus(readablePeriod58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        java.lang.String str62 = partial61.toString();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial66 = partial64.plus(readablePeriod65);
        int int67 = partial64.size();
        boolean boolean68 = partial61.isAfter((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        java.lang.String str71 = partial70.toString();
        int int72 = partial61.compareTo((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial74.plus(readablePeriod75);
        int int77 = partial74.size();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(chronology78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.Partial partial81 = partial79.plus(readablePeriod80);
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.DateTime dateTime83 = partial81.toDateTime(readableInstant82);
        boolean boolean84 = partial74.isMatch((org.joda.time.ReadableInstant) dateTime83);
        boolean boolean85 = partial70.isMatch((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime86 = partial57.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime87 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateTime dateTime88 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        boolean boolean89 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime87);
        int[] intArray90 = partial7.getValues();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[]" + "'", str62, "[]");
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[]" + "'", str71, "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial1.minus(readablePeriod11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        int int23 = partial20.size();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        boolean boolean30 = partial20.isMatch((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial16.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial16.toString(dateTimeFormatter32);
        java.lang.String str35 = partial16.toString("[]");
        boolean boolean36 = partial12.isBefore((org.joda.time.ReadablePartial) partial16);
        java.lang.String str37 = partial12.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        org.joda.time.DateTimeField[] dateTimeFieldArray42 = partial39.getFields();
        boolean boolean43 = partial12.isEqual((org.joda.time.ReadablePartial) partial39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType45 = partial12.getFieldType((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTimeFieldArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = partial7.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = partial7.isSupported(dateTimeFieldType12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = partial7.indexOf(dateTimeFieldType14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial7);
        boolean boolean17 = partial5.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial16.minus(readablePeriod18);
        java.lang.Class<?> wildcardClass20 = partial19.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime30 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        int int35 = partial32.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = partial32.getFieldTypes();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        boolean boolean40 = partial38.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology41 = partial38.getChronology();
        int[] intArray42 = partial38.getValues();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        boolean boolean46 = partial44.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology47 = partial44.getChronology();
        org.joda.time.Partial partial48 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray42, chronology47);
        org.joda.time.Partial partial49 = partial1.withChronologyRetainFields(chronology47);
        org.joda.time.DurationFieldType durationFieldType50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial52 = partial49.withFieldAdded(durationFieldType50, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(partial49);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial1.minus(readablePeriod11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial1.getFormatter();
        java.lang.String str15 = partial1.toString("[]");
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        java.lang.String str17 = partial14.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial14.getFormatter();
        boolean boolean19 = partial3.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial21.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial23.withPeriodAdded(readablePeriod24, (-1));
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        org.joda.time.Partial partial29 = partial27.without(dateTimeFieldType28);
        boolean boolean30 = partial3.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial27.withPeriodAdded(readablePeriod31, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property35 = partial33.property(dateTimeFieldType34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial33);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial3.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial3.withPeriodAdded(readablePeriod28, (int) (short) 100);
        java.util.Locale locale32 = null;
        java.lang.String str33 = partial3.toString("[]", locale32);
        java.lang.String str34 = partial3.toStringList();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial1.minus(readablePeriod6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial1.toString(dateTimeFormatter8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial11.plus(readablePeriod12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = partial13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        int int20 = partial17.size();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = partial24.toDateTime(readableInstant25);
        boolean boolean27 = partial17.isMatch((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = partial13.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = partial13.toString(dateTimeFormatter29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = partial13.toString(dateTimeFormatter31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial13.minus(readablePeriod33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial34.toString(dateTimeFormatter35);
        boolean boolean37 = partial1.isEqual((org.joda.time.ReadablePartial) partial34);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        int int2 = partial0.indexOf(dateTimeFieldType1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property4 = partial0.property(dateTimeFieldType3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = partial1.getFormatter();
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial8 = partial1.withField(dateTimeFieldType6, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(chronology5);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = partial7.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = partial7.isSupported(dateTimeFieldType12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = partial7.indexOf(dateTimeFieldType14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial7);
        boolean boolean17 = partial5.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial5.getFieldTypes();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        java.lang.String str21 = partial20.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        int int26 = partial23.size();
        boolean boolean27 = partial20.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        java.lang.String str30 = partial29.toString();
        int int31 = partial20.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int int36 = partial33.size();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial38.plus(readablePeriod39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        boolean boolean43 = partial33.isMatch((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = partial29.isMatch((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        java.lang.String str51 = partial50.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.plus(readablePeriod54);
        int int56 = partial53.size();
        boolean boolean57 = partial50.isAfter((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        java.lang.String str60 = partial59.toString();
        int int61 = partial50.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial63.plus(readablePeriod64);
        int int66 = partial63.size();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial70 = partial68.plus(readablePeriod69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = partial70.toDateTime(readableInstant71);
        boolean boolean73 = partial63.isMatch((org.joda.time.ReadableInstant) dateTime72);
        boolean boolean74 = partial59.isMatch((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime75 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime76 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        int int77 = partial5.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property79 = partial5.property(dateTimeFieldType78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial11.plus(readablePeriod12);
        int int14 = partial11.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = partial11.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = partial11.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = partial11.indexOf(dateTimeFieldType18);
        boolean boolean20 = partial1.isAfter((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = partial24.toDateTime(readableInstant25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial28.plus(readablePeriod29);
        int int31 = partial28.size();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        boolean boolean38 = partial28.isMatch((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean39 = partial24.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = partial24.toString(dateTimeFormatter40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial24.toString(dateTimeFormatter42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        org.joda.time.Partial partial45 = partial24.without(dateTimeFieldType44);
        boolean boolean46 = partial11.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial49 = partial11.with(dateTimeFieldType47, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        int int6 = partial3.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = partial3.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = partial3.isSupported(dateTimeFieldType8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = partial3.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        boolean boolean15 = partial13.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology16 = partial13.getChronology();
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = partial19.withChronologyRetainFields(chronology20);
        boolean boolean22 = partial17.isAfter((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        java.lang.String str25 = partial24.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.plus(readablePeriod28);
        int int30 = partial27.size();
        boolean boolean31 = partial24.isAfter((org.joda.time.ReadablePartial) partial27);
        boolean boolean32 = partial17.isBefore((org.joda.time.ReadablePartial) partial24);
        boolean boolean33 = partial3.isMatch((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial41.plus(readablePeriod42);
        int int44 = partial41.size();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        boolean boolean51 = partial41.isMatch((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean52 = partial37.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial37.toString(dateTimeFormatter53);
        java.lang.String str56 = partial37.toString("[]");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = partial58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        org.joda.time.Partial partial62 = partial58.without(dateTimeFieldType61);
        org.joda.time.Chronology chronology63 = partial62.getChronology();
        org.joda.time.Partial partial64 = partial37.withChronologyRetainFields(chronology63);
        org.joda.time.Partial partial65 = partial17.withChronologyRetainFields(chronology63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial66 = new org.joda.time.Partial(dateTimeFieldType0, 10, chronology63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(partial65);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType2 = partial0.getFieldType((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial3.plus(readablePeriod24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int27 = partial3.get(dateTimeFieldType26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial11.plus(readablePeriod12);
        int int14 = partial11.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = partial11.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = partial11.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = partial11.indexOf(dateTimeFieldType18);
        boolean boolean20 = partial1.isAfter((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        java.lang.String str38 = partial35.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = partial35.getFormatter();
        boolean boolean40 = partial24.isMatch((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology41 = partial24.getChronology();
        org.joda.time.Partial partial42 = partial1.withChronologyRetainFields(chronology41);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(partial42);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial1.minus(readablePeriod13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        int int19 = partial16.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial16.getFieldTypes();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        boolean boolean24 = partial22.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology25 = partial22.getChronology();
        int[] intArray26 = partial22.getValues();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        boolean boolean30 = partial28.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology31 = partial28.getChronology();
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray26, chronology31);
        org.joda.time.Partial partial33 = partial14.withChronologyRetainFields(chronology31);
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology31);
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = partial34.getFields();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = partial34.toString(dateTimeFormatter36);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial15);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial22.plus(readablePeriod23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = partial24.toDateTime(readableInstant25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial28.plus(readablePeriod29);
        int int31 = partial28.size();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        boolean boolean38 = partial28.isMatch((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean39 = partial24.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = partial24.toString(dateTimeFormatter40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial44 = partial24.withPeriodAdded(readablePeriod42, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = partial24.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial48 = partial24.withPeriodAdded(readablePeriod46, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial51 = partial24.withPeriodAdded(readablePeriod49, (int) (short) 100);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.plus(readablePeriod54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        java.lang.String str58 = partial57.toString();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial60.plus(readablePeriod61);
        int int63 = partial60.size();
        boolean boolean64 = partial57.isAfter((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        java.lang.String str67 = partial66.toString();
        int int68 = partial57.compareTo((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Partial partial72 = partial70.plus(readablePeriod71);
        int int73 = partial70.size();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial77 = partial75.plus(readablePeriod76);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.DateTime dateTime79 = partial77.toDateTime(readableInstant78);
        boolean boolean80 = partial70.isMatch((org.joda.time.ReadableInstant) dateTime79);
        boolean boolean81 = partial66.isMatch((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTime dateTime82 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTime dateTime83 = partial51.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime84 = partial12.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = partial12.getValue(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        int int26 = partial10.size();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial10.minus(readablePeriod27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial10.minus(readablePeriod29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial33 = partial10.withField(dateTimeFieldType31, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(partial30);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.plus(readablePeriod23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = partial24.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = partial28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        org.joda.time.Partial partial32 = partial28.without(dateTimeFieldType31);
        org.joda.time.Chronology chronology33 = partial32.getChronology();
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Partial partial35 = partial24.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial38 = partial35.withField(dateTimeFieldType36, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(partial35);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial14.plus(readablePeriod30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        java.lang.String str34 = partial33.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        int int39 = partial36.size();
        boolean boolean40 = partial33.isAfter((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        java.lang.String str43 = partial42.toString();
        int int44 = partial33.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        int int49 = partial46.size();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        boolean boolean56 = partial46.isMatch((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = partial42.isMatch((org.joda.time.ReadableInstant) dateTime55);
        int int58 = partial42.size();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial42.minus(readablePeriod59);
        boolean boolean61 = partial31.isMatch((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial1.isMatch((org.joda.time.ReadablePartial) partial60);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property64 = partial1.property(dateTimeFieldType63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial9.withChronologyRetainFields(chronology10);
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology13 = partial9.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial14 = new org.joda.time.Partial(dateTimeFieldType0, (int) 'a', chronology13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toStringList();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial21.withChronologyRetainFields(chronology22);
        boolean boolean24 = partial17.isAfter((org.joda.time.ReadablePartial) partial21);
        boolean boolean25 = partial10.equals((java.lang.Object) partial17);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int27 = partial10.get(dateTimeFieldType26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial14.toString(dateTimeFormatter30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial14.toString(dateTimeFormatter32);
        int[] intArray34 = partial14.getValues();
        boolean boolean35 = partial1.isEqual((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        int int40 = partial37.size();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        boolean boolean47 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial37.toString(dateTimeFormatter48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = partial57.withChronologyRetainFields(chronology58);
        boolean boolean60 = partial53.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial62.plus(readablePeriod63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = partial64.toDateTime(readableInstant65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = partial68.withChronologyRetainFields(chronology69);
        boolean boolean71 = partial64.isAfter((org.joda.time.ReadablePartial) partial68);
        boolean boolean72 = partial53.isBefore((org.joda.time.ReadablePartial) partial68);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial53.plus(readablePeriod73);
        boolean boolean75 = partial37.isAfter((org.joda.time.ReadablePartial) partial53);
        boolean boolean76 = partial14.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Partial partial77 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial14);
        // The following exception was thrown during execution in test generation
        try {
            int int79 = partial77.getValue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial10.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        org.joda.time.Partial partial16 = partial10.without(dateTimeFieldType15);
        org.joda.time.Chronology chronology17 = partial10.getChronology();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial10.plus(readablePeriod18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        java.lang.String str22 = partial21.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        boolean boolean26 = partial24.equals((java.lang.Object) 0.0f);
        int int27 = partial21.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        org.joda.time.Partial partial29 = partial21.without(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial31.plus(readablePeriod32);
        int int34 = partial31.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = partial31.getFieldTypes();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        boolean boolean39 = partial37.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology40 = partial37.getChronology();
        int[] intArray41 = partial37.getValues();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        boolean boolean45 = partial43.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology46 = partial43.getChronology();
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray35, intArray41, chronology46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology46);
        org.joda.time.Partial partial49 = partial29.withChronologyRetainFields(chronology46);
        boolean boolean50 = partial10.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = partial29.toString(dateTimeFormatter51);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial15);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        boolean boolean24 = partial22.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology25 = partial22.getChronology();
        int[] intArray26 = partial22.getValues();
        java.lang.String str28 = partial22.toString("[]");
        boolean boolean29 = partial5.isAfter((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial31.plus(readablePeriod32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = partial33.toDateTime(readableInstant34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        int int40 = partial37.size();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        boolean boolean47 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial33.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = partial33.toString(dateTimeFormatter49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = partial33.toString(dateTimeFormatter51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        org.joda.time.Partial partial54 = partial33.without(dateTimeFieldType53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        java.lang.String str57 = partial56.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial59.plus(readablePeriod60);
        int int62 = partial59.size();
        boolean boolean63 = partial56.isAfter((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        java.lang.String str66 = partial65.toString();
        int int67 = partial56.compareTo((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        int int72 = partial69.size();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial74.plus(readablePeriod75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = partial76.toDateTime(readableInstant77);
        boolean boolean79 = partial69.isMatch((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean80 = partial65.isMatch((org.joda.time.ReadableInstant) dateTime78);
        int int81 = partial65.size();
        org.joda.time.Partial partial82 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial65);
        boolean boolean83 = partial33.isEqual((org.joda.time.ReadablePartial) partial65);
        boolean boolean84 = partial5.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = null;
        boolean boolean86 = partial5.isSupported(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        boolean boolean9 = partial7.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology10 = partial7.getChronology();
        int[] intArray11 = partial7.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        boolean boolean15 = partial13.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology16 = partial13.getChronology();
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray5, intArray11, chronology16);
        int[] intArray18 = new int[] {};
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray5, intArray18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        boolean boolean23 = partial21.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology24 = partial21.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.plus(readablePeriod28);
        int int30 = partial27.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial27.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        boolean boolean33 = partial27.isSupported(dateTimeFieldType32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = partial27.indexOf(dateTimeFieldType34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial27);
        boolean boolean37 = partial25.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = partial25.getFieldTypes();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial40.plus(readablePeriod41);
        int int43 = partial40.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = partial40.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        boolean boolean46 = partial40.isSupported(dateTimeFieldType45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial54.plus(readablePeriod55);
        int int57 = partial54.size();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial59.plus(readablePeriod60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        boolean boolean64 = partial54.isMatch((org.joda.time.ReadableInstant) dateTime63);
        boolean boolean65 = partial50.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = partial50.toString(dateTimeFormatter66);
        java.lang.String str69 = partial50.toString("[]");
        boolean boolean70 = partial40.isMatch((org.joda.time.ReadablePartial) partial50);
        int[] intArray71 = partial40.getValues();
        org.joda.time.Partial partial72 = new org.joda.time.Partial(dateTimeFieldTypeArray38, intArray71);
        int int73 = partial19.compareTo((org.joda.time.ReadablePartial) partial72);
        org.joda.time.DurationFieldType durationFieldType74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial76 = partial72.withFieldAdded(durationFieldType74, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = new org.joda.time.DateTimeFieldType[] { dateTimeFieldType0 };
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        java.lang.String str8 = partial7.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        int int13 = partial10.size();
        boolean boolean14 = partial7.isAfter((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        java.lang.String str17 = partial16.toString();
        int int18 = partial7.compareTo((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        int int23 = partial20.size();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        boolean boolean30 = partial20.isMatch((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial16.isMatch((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        java.lang.String str38 = partial37.toString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial40.plus(readablePeriod41);
        int int43 = partial40.size();
        boolean boolean44 = partial37.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        java.lang.String str47 = partial46.toString();
        int int48 = partial37.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial50.plus(readablePeriod51);
        int int53 = partial50.size();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial55.plus(readablePeriod56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        boolean boolean60 = partial50.isMatch((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean61 = partial46.isMatch((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime62 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime63 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        boolean boolean64 = partial5.isMatch((org.joda.time.ReadableInstant) dateTime62);
        int[] intArray65 = partial5.getValues();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial67.withChronologyRetainFields(chronology68);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = null;
        org.joda.time.Partial partial71 = partial67.without(dateTimeFieldType70);
        org.joda.time.Chronology chronology72 = partial71.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial73 = new org.joda.time.Partial(dateTimeFieldTypeArray1, intArray65, chronology72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must be the same length as the types array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(chronology72);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = partial3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial7 = partial3.withPeriodAdded(readablePeriod5, (int) (short) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial9.plus(readablePeriod10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        boolean boolean25 = partial15.isMatch((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean26 = partial11.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial11.plus(readablePeriod27);
        java.lang.String str29 = partial28.toString();
        java.lang.String str30 = partial28.toString();
        int int31 = partial7.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology32 = partial28.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int34 = partial28.get(dateTimeFieldType33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        boolean boolean17 = partial1.isBefore((org.joda.time.ReadablePartial) partial5);
        java.util.Locale locale19 = null;
        java.lang.String str20 = partial5.toString("[]", locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int22 = partial5.get(dateTimeFieldType21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial9.withChronologyRetainFields(chronology10);
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial20.withChronologyRetainFields(chronology21);
        boolean boolean23 = partial16.isAfter((org.joda.time.ReadablePartial) partial20);
        boolean boolean24 = partial5.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial5.plus(readablePeriod25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        int int28 = partial26.indexOf(dateTimeFieldType27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        org.joda.time.Partial partial34 = partial30.without(dateTimeFieldType33);
        org.joda.time.Chronology chronology35 = partial34.getChronology();
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.Partial partial37 = partial26.withChronologyRetainFields(chronology35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial38 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) -1, chronology35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(partial37);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial14.toString(dateTimeFormatter30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial14.toString(dateTimeFormatter32);
        int[] intArray34 = partial14.getValues();
        boolean boolean35 = partial1.isEqual((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        int int40 = partial37.size();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        boolean boolean47 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial37.toString(dateTimeFormatter48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = partial57.withChronologyRetainFields(chronology58);
        boolean boolean60 = partial53.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial62.plus(readablePeriod63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = partial64.toDateTime(readableInstant65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = partial68.withChronologyRetainFields(chronology69);
        boolean boolean71 = partial64.isAfter((org.joda.time.ReadablePartial) partial68);
        boolean boolean72 = partial53.isBefore((org.joda.time.ReadablePartial) partial68);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial53.plus(readablePeriod73);
        boolean boolean75 = partial37.isAfter((org.joda.time.ReadablePartial) partial53);
        boolean boolean76 = partial14.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Partial partial77 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType79 = partial77.getFieldType((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        org.joda.time.Partial partial7 = partial3.without(dateTimeFieldType6);
        org.joda.time.Chronology chronology8 = partial7.getChronology();
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 100, chronology8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNotNull(chronology8);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime48);
        int int51 = partial35.size();
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        boolean boolean53 = partial3.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology54 = partial35.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType56 = partial35.getFieldType((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(chronology54);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        int int26 = partial10.size();
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.minus(readablePeriod28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        boolean boolean32 = partial27.isMatch((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        java.lang.String str35 = partial34.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        int int40 = partial37.size();
        boolean boolean41 = partial34.isAfter((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        java.lang.String str44 = partial43.toString();
        int int45 = partial34.compareTo((org.joda.time.ReadablePartial) partial43);
        java.lang.String str46 = partial43.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = partial43.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial43.plus(readablePeriod48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial31.isMatch((org.joda.time.ReadablePartial) partial50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial31.minus(readablePeriod52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property55 = partial31.property(dateTimeFieldType54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(partial53);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime48);
        int int51 = partial35.size();
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        boolean boolean53 = partial3.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        boolean boolean57 = partial55.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = partial55.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial55.minus(readablePeriod59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        org.joda.time.Partial partial62 = partial55.without(dateTimeFieldType61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial66 = partial64.plus(readablePeriod65);
        int int67 = partial64.size();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        boolean boolean74 = partial64.isMatch((org.joda.time.ReadableInstant) dateTime73);
        boolean boolean75 = partial55.isMatch((org.joda.time.ReadableInstant) dateTime73);
        boolean boolean76 = partial3.equals((java.lang.Object) partial55);
        int int77 = partial55.size();
        int[] intArray78 = partial55.getValues();
        java.lang.Class<?> wildcardClass79 = intArray78.getClass();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial1.minus(readablePeriod6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = partial7.getFormatter();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial13.plus(readablePeriod14);
        int int16 = partial13.size();
        boolean boolean17 = partial10.isAfter((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        java.lang.String str20 = partial19.toString();
        int int21 = partial10.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = partial10.indexOf(dateTimeFieldType22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        int int28 = partial25.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial25.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = partial25.isSupported(dateTimeFieldType30);
        java.lang.String str32 = partial25.toStringList();
        java.lang.String str34 = partial25.toString("[]");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        int int45 = partial42.size();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial47.plus(readablePeriod48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        boolean boolean52 = partial42.isMatch((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = partial38.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial38.plus(readablePeriod54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology56);
        java.lang.String str58 = partial57.toString();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial60.plus(readablePeriod61);
        int int63 = partial60.size();
        boolean boolean64 = partial57.isAfter((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        java.lang.String str67 = partial66.toString();
        int int68 = partial57.compareTo((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(chronology69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Partial partial72 = partial70.plus(readablePeriod71);
        int int73 = partial70.size();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial77 = partial75.plus(readablePeriod76);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.DateTime dateTime79 = partial77.toDateTime(readableInstant78);
        boolean boolean80 = partial70.isMatch((org.joda.time.ReadableInstant) dateTime79);
        boolean boolean81 = partial66.isMatch((org.joda.time.ReadableInstant) dateTime79);
        int int82 = partial66.size();
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Partial partial84 = partial66.minus(readablePeriod83);
        boolean boolean85 = partial55.isMatch((org.joda.time.ReadablePartial) partial84);
        boolean boolean86 = partial25.isMatch((org.joda.time.ReadablePartial) partial84);
        boolean boolean87 = partial10.isEqual((org.joda.time.ReadablePartial) partial25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = partial25.getFormatter();
        boolean boolean89 = partial7.isMatch((org.joda.time.ReadablePartial) partial25);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNull(dateTimeFormatter8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNull(dateTimeFormatter88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial3.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial3.withPeriodAdded(readablePeriod28, (int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = partial3.toString(dateTimeFormatter31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        java.lang.String str35 = partial34.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        int int40 = partial37.size();
        boolean boolean41 = partial34.isAfter((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        java.lang.String str44 = partial43.toString();
        int int45 = partial34.compareTo((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial47.plus(readablePeriod48);
        int int50 = partial47.size();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial54 = partial52.plus(readablePeriod53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        boolean boolean57 = partial47.isMatch((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean58 = partial43.isMatch((org.joda.time.ReadableInstant) dateTime56);
        int int59 = partial43.size();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial43.minus(readablePeriod60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial43.minus(readablePeriod62);
        boolean boolean64 = partial3.isMatch((org.joda.time.ReadablePartial) partial43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType66 = partial3.getFieldType((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        boolean boolean6 = partial4.equals((java.lang.Object) 0.0f);
        int int7 = partial1.compareTo((org.joda.time.ReadablePartial) partial4);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        org.joda.time.Partial partial9 = partial1.without(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial11.plus(readablePeriod12);
        int int14 = partial11.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = partial11.getFieldTypes();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        boolean boolean19 = partial17.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology20 = partial17.getChronology();
        int[] intArray21 = partial17.getValues();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        boolean boolean25 = partial23.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology26 = partial23.getChronology();
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray15, intArray21, chronology26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology26);
        org.joda.time.Partial partial29 = partial9.withChronologyRetainFields(chronology26);
        int[] intArray30 = partial29.getValues();
        org.joda.time.DurationFieldType durationFieldType31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial33 = partial29.withFieldAdded(durationFieldType31, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        org.joda.time.Partial partial5 = partial1.without(dateTimeFieldType4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial1.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial10 = partial7.withPeriodAdded(readablePeriod8, (int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial13 = partial7.withField(dateTimeFieldType11, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNotNull(partial10);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        java.lang.String str22 = partial21.toString();
        int int23 = partial12.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial12.minus(readablePeriod24);
        boolean boolean26 = partial1.isBefore((org.joda.time.ReadablePartial) partial12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField28 = partial12.getField(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        boolean boolean5 = partial3.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology6 = partial3.getChronology();
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial9 = new org.joda.time.Partial(dateTimeFieldType0, 100, chronology6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = partial7.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = partial7.isSupported(dateTimeFieldType12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = partial7.indexOf(dateTimeFieldType14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial7);
        boolean boolean17 = partial5.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = partial5.indexOf(dateTimeFieldType18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = partial5.getFormatter();
        java.util.Locale locale22 = null;
        java.lang.String str23 = partial5.toString("[]", locale22);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(dateTimeFormatter20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = partial7.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = partial7.isSupported(dateTimeFieldType12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = partial7.indexOf(dateTimeFieldType14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial7);
        boolean boolean17 = partial5.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial5.getFieldTypes();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        java.lang.String str21 = partial20.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        int int26 = partial23.size();
        boolean boolean27 = partial20.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        java.lang.String str30 = partial29.toString();
        int int31 = partial20.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int int36 = partial33.size();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial38.plus(readablePeriod39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        boolean boolean43 = partial33.isMatch((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = partial29.isMatch((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        java.lang.String str51 = partial50.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.plus(readablePeriod54);
        int int56 = partial53.size();
        boolean boolean57 = partial50.isAfter((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        java.lang.String str60 = partial59.toString();
        int int61 = partial50.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial63.plus(readablePeriod64);
        int int66 = partial63.size();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial70 = partial68.plus(readablePeriod69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = partial70.toDateTime(readableInstant71);
        boolean boolean73 = partial63.isMatch((org.joda.time.ReadableInstant) dateTime72);
        boolean boolean74 = partial59.isMatch((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime75 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime76 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        int int77 = partial5.compareTo((org.joda.time.ReadablePartial) partial29);
        java.lang.Class<?> wildcardClass78 = partial29.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.minus(readablePeriod23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = partial24.indexOf(dateTimeFieldType25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField28 = partial24.getField((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        int int29 = partial26.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial26.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = partial26.isSupported(dateTimeFieldType31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial34.plus(readablePeriod35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial40.plus(readablePeriod41);
        int int43 = partial40.size();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial45.plus(readablePeriod46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        boolean boolean50 = partial40.isMatch((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean51 = partial36.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial36.toString(dateTimeFormatter52);
        java.lang.String str55 = partial36.toString("[]");
        boolean boolean56 = partial26.isMatch((org.joda.time.ReadablePartial) partial36);
        int[] intArray57 = partial26.getValues();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial59.plus(readablePeriod60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = partial65.withChronologyRetainFields(chronology66);
        boolean boolean68 = partial61.isAfter((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology69 = partial65.getChronology();
        org.joda.time.Partial partial70 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray57, chronology69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial72.plus(readablePeriod73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology75);
        java.lang.String str77 = partial76.toString();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(chronology78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.Partial partial81 = partial79.plus(readablePeriod80);
        int int82 = partial79.size();
        boolean boolean83 = partial76.isAfter((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Partial partial85 = new org.joda.time.Partial(chronology84);
        java.lang.String str86 = partial85.toString();
        int int87 = partial76.compareTo((org.joda.time.ReadablePartial) partial85);
        java.lang.String str88 = partial85.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = partial85.getFormatter();
        boolean boolean90 = partial74.isMatch((org.joda.time.ReadablePartial) partial85);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray91 = partial74.getFieldTypes();
        boolean boolean92 = partial70.isMatch((org.joda.time.ReadablePartial) partial74);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[]" + "'", str77, "[]");
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "[]" + "'", str86, "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "[]" + "'", str88, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        java.lang.String str4 = partial3.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        int int9 = partial6.size();
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        int int14 = partial3.compareTo((org.joda.time.ReadablePartial) partial12);
        java.lang.String str15 = partial12.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = partial12.getFieldTypes();
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = partial12.getFields();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = partial19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        org.joda.time.Partial partial23 = partial19.without(dateTimeFieldType22);
        org.joda.time.Chronology chronology24 = partial23.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology24);
        org.joda.time.Partial partial27 = partial12.withChronologyRetainFields(chronology24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial28 = new org.joda.time.Partial(dateTimeFieldType0, 100, chronology24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(partial27);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        boolean boolean13 = partial11.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology14 = partial11.getChronology();
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = partial17.withChronologyRetainFields(chronology18);
        boolean boolean20 = partial15.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology21);
        java.lang.String str23 = partial22.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        int int28 = partial25.size();
        boolean boolean29 = partial22.isAfter((org.joda.time.ReadablePartial) partial25);
        boolean boolean30 = partial15.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean31 = partial1.isMatch((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = partial35.toString(dateTimeFormatter51);
        java.lang.String str54 = partial35.toString("[]");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = partial56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        org.joda.time.Partial partial60 = partial56.without(dateTimeFieldType59);
        org.joda.time.Chronology chronology61 = partial60.getChronology();
        org.joda.time.Partial partial62 = partial35.withChronologyRetainFields(chronology61);
        org.joda.time.Partial partial63 = partial15.withChronologyRetainFields(chronology61);
        int[] intArray64 = partial15.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial67 = partial15.withField(dateTimeFieldType65, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        java.lang.String str4 = partial3.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        int int9 = partial6.size();
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        int int14 = partial3.compareTo((org.joda.time.ReadablePartial) partial12);
        java.lang.String str15 = partial12.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = partial12.getFieldTypes();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial18.getFieldTypes();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        boolean boolean26 = partial24.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology27 = partial24.getChronology();
        int[] intArray28 = partial24.getValues();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        boolean boolean32 = partial30.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology33 = partial30.getChronology();
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray28, chronology33);
        org.joda.time.Partial partial35 = partial12.withChronologyRetainFields(chronology33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial36 = new org.joda.time.Partial(dateTimeFieldType0, 0, chronology33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(partial35);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial3.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial3.withPeriodAdded(readablePeriod28, (int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = partial3.toString(dateTimeFormatter31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        java.lang.String str35 = partial34.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        int int40 = partial37.size();
        boolean boolean41 = partial34.isAfter((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        java.lang.String str44 = partial43.toString();
        int int45 = partial34.compareTo((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial47.plus(readablePeriod48);
        int int50 = partial47.size();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial54 = partial52.plus(readablePeriod53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        boolean boolean57 = partial47.isMatch((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean58 = partial43.isMatch((org.joda.time.ReadableInstant) dateTime56);
        int int59 = partial43.size();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial43.minus(readablePeriod60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial43.minus(readablePeriod62);
        boolean boolean64 = partial3.isMatch((org.joda.time.ReadablePartial) partial43);
        org.joda.time.DurationFieldType durationFieldType65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial67 = partial3.withFieldAdded(durationFieldType65, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial9.plus(readablePeriod10);
        int int12 = partial9.size();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        boolean boolean19 = partial9.isMatch((org.joda.time.ReadableInstant) dateTime18);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial5.toString(dateTimeFormatter21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial5.withPeriodAdded(readablePeriod23, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial5.getFieldTypes();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial28.plus(readablePeriod29);
        int int31 = partial28.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = partial28.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = partial28.isSupported(dateTimeFieldType33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        int int45 = partial42.size();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial47.plus(readablePeriod48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        boolean boolean52 = partial42.isMatch((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = partial38.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = partial38.toString(dateTimeFormatter54);
        java.lang.String str57 = partial38.toString("[]");
        boolean boolean58 = partial28.isMatch((org.joda.time.ReadablePartial) partial38);
        int[] intArray59 = partial28.getValues();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial67.withChronologyRetainFields(chronology68);
        boolean boolean70 = partial63.isAfter((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology71 = partial67.getChronology();
        org.joda.time.Partial partial72 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray59, chronology71);
        org.joda.time.Partial partial73 = new org.joda.time.Partial(chronology71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial74 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) 100, chronology71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        java.lang.String str13 = partial12.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        java.lang.String str22 = partial21.toString();
        int int23 = partial12.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial12.minus(readablePeriod24);
        boolean boolean26 = partial1.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        int int28 = partial1.indexOf(dateTimeFieldType27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        org.joda.time.Partial partial30 = partial1.without(dateTimeFieldType29);
        java.util.Locale locale32 = null;
        java.lang.String str33 = partial1.toString("[]", locale32);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial16 = partial10.with(dateTimeFieldType14, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        boolean boolean17 = partial1.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        int int22 = partial19.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = partial19.isSupported(dateTimeFieldType24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        int int27 = partial19.indexOf(dateTimeFieldType26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        boolean boolean31 = partial29.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology32 = partial29.getChronology();
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = partial35.withChronologyRetainFields(chronology36);
        boolean boolean38 = partial33.isAfter((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        java.lang.String str41 = partial40.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        boolean boolean47 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        boolean boolean48 = partial33.isBefore((org.joda.time.ReadablePartial) partial40);
        boolean boolean49 = partial19.isMatch((org.joda.time.ReadablePartial) partial33);
        boolean boolean50 = partial1.isEqual((org.joda.time.ReadablePartial) partial19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = partial19.toString(dateTimeFormatter51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial55 = partial19.withField(dateTimeFieldType53, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = partial3.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology27 = partial3.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            int int29 = partial3.getValue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.plus(readablePeriod23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial27 = partial24.withField(dateTimeFieldType25, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.minus(readablePeriod23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = partial24.indexOf(dateTimeFieldType25);
        int[] intArray27 = partial24.getValues();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial20.plus(readablePeriod22);
        java.lang.Class<?> wildcardClass24 = partial20.getClass();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        java.lang.String str11 = partial9.toStringList();
        java.lang.Class<?> wildcardClass12 = partial9.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        boolean boolean17 = partial1.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        int int22 = partial19.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = partial19.isSupported(dateTimeFieldType24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        int int27 = partial19.indexOf(dateTimeFieldType26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        boolean boolean31 = partial29.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology32 = partial29.getChronology();
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = partial35.withChronologyRetainFields(chronology36);
        boolean boolean38 = partial33.isAfter((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        java.lang.String str41 = partial40.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        boolean boolean47 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        boolean boolean48 = partial33.isBefore((org.joda.time.ReadablePartial) partial40);
        boolean boolean49 = partial19.isMatch((org.joda.time.ReadablePartial) partial33);
        boolean boolean50 = partial1.isEqual((org.joda.time.ReadablePartial) partial19);
        java.util.Locale locale52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = partial1.toString("", locale52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology4);
        java.lang.String str7 = partial6.toStringList();
        java.lang.Class<?> wildcardClass8 = partial6.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = partial3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial7 = partial3.withPeriodAdded(readablePeriod5, (int) (short) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial9.plus(readablePeriod10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial15.plus(readablePeriod16);
        int int18 = partial15.size();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        boolean boolean25 = partial15.isMatch((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean26 = partial11.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial11.plus(readablePeriod27);
        java.lang.String str29 = partial28.toString();
        java.lang.String str30 = partial28.toString();
        int int31 = partial7.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = partial35.toString(dateTimeFormatter51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial55 = partial35.withPeriodAdded(readablePeriod53, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = partial35.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial59 = partial35.withPeriodAdded(readablePeriod57, (int) '#');
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial67.plus(readablePeriod68);
        int int70 = partial67.size();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial72.plus(readablePeriod73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = partial74.toDateTime(readableInstant75);
        boolean boolean77 = partial67.isMatch((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean78 = partial63.isBefore((org.joda.time.ReadablePartial) partial67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = null;
        java.lang.String str80 = partial63.toString(dateTimeFormatter79);
        boolean boolean81 = partial59.isMatch((org.joda.time.ReadablePartial) partial63);
        org.joda.time.DateTimeField[] dateTimeFieldArray82 = partial63.getFields();
        boolean boolean83 = partial7.equals((java.lang.Object) partial63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = partial63.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[]" + "'", str80, "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime48);
        int int51 = partial35.size();
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        boolean boolean53 = partial3.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial55.plus(readablePeriod56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        int int64 = partial61.size();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial66.plus(readablePeriod67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = partial68.toDateTime(readableInstant69);
        boolean boolean71 = partial61.isMatch((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean72 = partial57.isBefore((org.joda.time.ReadablePartial) partial61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = null;
        java.lang.String str74 = partial57.toString(dateTimeFormatter73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial77 = partial57.withPeriodAdded(readablePeriod75, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray78 = partial57.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial81 = partial57.withPeriodAdded(readablePeriod79, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.Partial partial84 = partial57.withPeriodAdded(readablePeriod82, (int) (short) 100);
        int int85 = partial35.compareTo((org.joda.time.ReadablePartial) partial57);
        java.lang.String str86 = partial57.toString();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[]" + "'", str74, "[]");
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray78);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "[]" + "'", str86, "[]");
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = partial3.toString(dateTimeFormatter5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial14.toString(dateTimeFormatter30);
        java.lang.String str33 = partial14.toString("[]");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        int int38 = partial35.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial35.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = partial35.isSupported(dateTimeFieldType40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        int int43 = partial35.indexOf(dateTimeFieldType42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial35.minus(readablePeriod45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = partial46.isSupported(dateTimeFieldType47);
        boolean boolean49 = partial14.equals((java.lang.Object) boolean48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        java.lang.String str52 = partial51.toString();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial54.plus(readablePeriod55);
        int int57 = partial54.size();
        boolean boolean58 = partial51.isAfter((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        java.lang.String str61 = partial60.toString();
        int int62 = partial51.compareTo((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial66 = partial64.plus(readablePeriod65);
        int int67 = partial64.size();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        boolean boolean74 = partial64.isMatch((org.joda.time.ReadableInstant) dateTime73);
        boolean boolean75 = partial60.isMatch((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime76 = partial14.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime77 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        boolean boolean78 = partial3.isMatch((org.joda.time.ReadableInstant) dateTime73);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = partial3.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology27 = partial3.getChronology();
        java.lang.Class<?> wildcardClass28 = partial3.getClass();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.plus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        int int35 = partial32.size();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        boolean boolean42 = partial32.isMatch((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean43 = partial28.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial28.plus(readablePeriod44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial45);
        java.lang.String str47 = partial45.toString();
        boolean boolean48 = partial3.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial51 = partial3.with(dateTimeFieldType49, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        java.lang.String str21 = partial20.toString();
        java.lang.String str22 = partial20.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial20.getFormatter();
        org.joda.time.Partial partial24 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology25 = partial20.getChronology();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.plus(readablePeriod28);
        int int30 = partial27.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial27.getFieldTypes();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        boolean boolean35 = partial33.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology36 = partial33.getChronology();
        int[] intArray37 = partial33.getValues();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        boolean boolean41 = partial39.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology42 = partial39.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray37, chronology42);
        int[] intArray44 = new int[] {};
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray44);
        boolean boolean46 = partial20.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DurationFieldType durationFieldType47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial49 = partial20.withFieldAddWrapped(durationFieldType47, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.lang.String str4 = partial1.toStringList();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial6.plus(readablePeriod7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = partial12.withChronologyRetainFields(chronology13);
        boolean boolean15 = partial8.isAfter((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial23.withChronologyRetainFields(chronology24);
        boolean boolean26 = partial19.isAfter((org.joda.time.ReadablePartial) partial23);
        boolean boolean27 = partial8.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial8.plus(readablePeriod28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = partial29.indexOf(dateTimeFieldType30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        org.joda.time.Partial partial37 = partial33.without(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = partial37.getChronology();
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.Partial partial40 = partial29.withChronologyRetainFields(chronology38);
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology38);
        org.joda.time.Partial partial42 = partial1.withChronologyRetainFields(chronology38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType44 = partial42.getFieldType(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(partial42);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int[] intArray6 = partial5.getValues();
        int[] intArray7 = partial5.getValues();
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial16.plus(readablePeriod17);
        int int19 = partial16.size();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial21.plus(readablePeriod22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        boolean boolean26 = partial16.isMatch((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = partial12.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = partial12.toString(dateTimeFormatter28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial12.withPeriodAdded(readablePeriod30, (int) (short) 10);
        int int33 = partial8.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = partial32.toString(dateTimeFormatter34);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial10.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int16 = partial10.get(dateTimeFieldType15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        boolean boolean5 = partial3.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology6 = partial3.getChronology();
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        int[] intArray8 = partial7.getValues();
        int[] intArray9 = partial7.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial14.plus(readablePeriod30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial31);
        java.lang.String str33 = partial31.toString();
        org.joda.time.Chronology chronology34 = partial31.getChronology();
        org.joda.time.Partial partial35 = partial10.withChronologyRetainFields(chronology34);
        org.joda.time.Chronology chronology36 = partial35.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial37 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) -1, chronology36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(chronology36);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial1.minus(readablePeriod11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        int int23 = partial20.size();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        boolean boolean30 = partial20.isMatch((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial16.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial16.toString(dateTimeFormatter32);
        java.lang.String str35 = partial16.toString("[]");
        boolean boolean36 = partial12.isBefore((org.joda.time.ReadablePartial) partial16);
        java.lang.String str37 = partial16.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        org.joda.time.Partial partial39 = partial16.without(dateTimeFieldType38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial16.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property42 = partial16.property(dateTimeFieldType41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial7.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial3.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial18.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial14.isAfter((org.joda.time.ReadablePartial) partial18);
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.plus(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial26.plus(readablePeriod27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial32.plus(readablePeriod33);
        int int35 = partial32.size();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        boolean boolean42 = partial32.isMatch((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean43 = partial28.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial28.plus(readablePeriod44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial45);
        java.lang.String str47 = partial45.toString();
        boolean boolean48 = partial3.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial3.plus(readablePeriod49);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial50);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial10.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.minus(readablePeriod14);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(partial15);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial3.plus(readablePeriod19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial20.plus(readablePeriod22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField25 = partial20.getField((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial23);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial9.withChronologyRetainFields(chronology10);
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial20.withChronologyRetainFields(chronology21);
        boolean boolean23 = partial16.isAfter((org.joda.time.ReadablePartial) partial20);
        boolean boolean24 = partial5.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        boolean boolean26 = partial5.isSupported(dateTimeFieldType25);
        int int27 = partial5.size();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        int int38 = partial35.size();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial40.plus(readablePeriod41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        boolean boolean45 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean46 = partial31.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial31.plus(readablePeriod47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        java.lang.String str51 = partial50.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.plus(readablePeriod54);
        int int56 = partial53.size();
        boolean boolean57 = partial50.isAfter((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        java.lang.String str60 = partial59.toString();
        int int61 = partial50.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial63.plus(readablePeriod64);
        int int66 = partial63.size();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial70 = partial68.plus(readablePeriod69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = partial70.toDateTime(readableInstant71);
        boolean boolean73 = partial63.isMatch((org.joda.time.ReadableInstant) dateTime72);
        boolean boolean74 = partial59.isMatch((org.joda.time.ReadableInstant) dateTime72);
        int int75 = partial59.size();
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial77 = partial59.minus(readablePeriod76);
        boolean boolean78 = partial48.isMatch((org.joda.time.ReadablePartial) partial77);
        boolean boolean79 = partial5.isEqual((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology80 = partial5.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial81 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) 10, chronology80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(chronology80);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial5.plus(readablePeriod6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        boolean boolean11 = partial9.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = partial9.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.minus(readablePeriod13);
        java.lang.String str15 = partial14.toStringList();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial23.withChronologyRetainFields(chronology24);
        boolean boolean26 = partial19.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial28.plus(readablePeriod29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial34.withChronologyRetainFields(chronology35);
        boolean boolean37 = partial30.isAfter((org.joda.time.ReadablePartial) partial34);
        boolean boolean38 = partial19.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        boolean boolean40 = partial19.isSupported(dateTimeFieldType39);
        boolean boolean41 = partial14.isAfter((org.joda.time.ReadablePartial) partial19);
        boolean boolean42 = partial5.isMatch((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = partial19.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = partial19.getFormatter();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNull(dateTimeFormatter44);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        int int26 = partial10.size();
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.minus(readablePeriod28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        boolean boolean32 = partial27.isMatch((org.joda.time.ReadablePartial) partial31);
        java.lang.String str33 = partial31.toStringList();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.plus(readablePeriod36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        boolean boolean40 = partial31.isMatch((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = partial31.isSupported(dateTimeFieldType41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial31);
        org.joda.time.DurationFieldType durationFieldType44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial46 = partial31.withFieldAdded(durationFieldType44, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        java.lang.Class<?> wildcardClass15 = dateTimeFieldTypeArray14.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial14.plus(readablePeriod30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        java.lang.String str34 = partial33.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        int int39 = partial36.size();
        boolean boolean40 = partial33.isAfter((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        java.lang.String str43 = partial42.toString();
        int int44 = partial33.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        int int49 = partial46.size();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        boolean boolean56 = partial46.isMatch((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = partial42.isMatch((org.joda.time.ReadableInstant) dateTime55);
        int int58 = partial42.size();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial42.minus(readablePeriod59);
        boolean boolean61 = partial31.isMatch((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial1.isMatch((org.joda.time.ReadablePartial) partial60);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial1.plus(readablePeriod63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial66.plus(readablePeriod67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = partial68.toDateTime(readableInstant69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(chronology71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial72.plus(readablePeriod73);
        int int75 = partial72.size();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = new org.joda.time.Partial(chronology76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.Partial partial79 = partial77.plus(readablePeriod78);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        boolean boolean82 = partial72.isMatch((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean83 = partial68.isBefore((org.joda.time.ReadablePartial) partial72);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.Partial partial85 = partial68.plus(readablePeriod84);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = partial68.getFormatter();
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.Partial partial88 = new org.joda.time.Partial(chronology87);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.Partial partial90 = partial88.withChronologyRetainFields(chronology89);
        int int91 = partial68.compareTo((org.joda.time.ReadablePartial) partial88);
        boolean boolean92 = partial64.isMatch((org.joda.time.ReadablePartial) partial68);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial95 = partial64.withField(dateTimeFieldType93, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertNull(dateTimeFormatter86);
        org.junit.Assert.assertNotNull(partial90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = partial10.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = partial10.getFieldTypes();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial17.plus(readablePeriod18);
        int int20 = partial17.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = partial17.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial17.isSupported(dateTimeFieldType22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = partial17.indexOf(dateTimeFieldType24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial17);
        boolean boolean27 = partial10.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = partial17.isSupported(dateTimeFieldType28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType31 = partial17.getFieldType((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial1.minus(readablePeriod11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        int int23 = partial20.size();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        boolean boolean30 = partial20.isMatch((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial16.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial16.toString(dateTimeFormatter32);
        java.lang.String str35 = partial16.toString("[]");
        boolean boolean36 = partial12.isBefore((org.joda.time.ReadablePartial) partial16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField38 = partial16.getField((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = partial3.indexOf(dateTimeFieldType25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        boolean boolean31 = partial29.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology32 = partial29.getChronology();
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        int[] intArray34 = partial33.getValues();
        int[] intArray35 = partial33.getValues();
        org.joda.time.Partial partial36 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeField[] dateTimeFieldArray37 = partial33.getFields();
        int int38 = partial27.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        boolean boolean40 = partial33.isSupported(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        java.lang.String str6 = partial5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        int int11 = partial8.size();
        boolean boolean12 = partial5.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        java.lang.String str15 = partial14.toString();
        int int16 = partial5.compareTo((org.joda.time.ReadablePartial) partial14);
        boolean boolean17 = partial1.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        int int22 = partial19.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = partial19.isSupported(dateTimeFieldType24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        int int27 = partial19.indexOf(dateTimeFieldType26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        boolean boolean31 = partial29.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology32 = partial29.getChronology();
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = partial35.withChronologyRetainFields(chronology36);
        boolean boolean38 = partial33.isAfter((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        java.lang.String str41 = partial40.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        boolean boolean47 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        boolean boolean48 = partial33.isBefore((org.joda.time.ReadablePartial) partial40);
        boolean boolean49 = partial19.isMatch((org.joda.time.ReadablePartial) partial33);
        boolean boolean50 = partial1.isEqual((org.joda.time.ReadablePartial) partial19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = partial19.toString(dateTimeFormatter51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        org.joda.time.Partial partial54 = partial19.without(dateTimeFieldType53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = partial54.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(partial54);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        java.lang.String str8 = partial1.toStringList();
        java.lang.String str10 = partial1.toString("[]");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        int int21 = partial18.size();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial23.plus(readablePeriod24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        boolean boolean28 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial14.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial14.plus(readablePeriod30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        java.lang.String str34 = partial33.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial36.plus(readablePeriod37);
        int int39 = partial36.size();
        boolean boolean40 = partial33.isAfter((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        java.lang.String str43 = partial42.toString();
        int int44 = partial33.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial46.plus(readablePeriod47);
        int int49 = partial46.size();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial51.plus(readablePeriod52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        boolean boolean56 = partial46.isMatch((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = partial42.isMatch((org.joda.time.ReadableInstant) dateTime55);
        int int58 = partial42.size();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial42.minus(readablePeriod59);
        boolean boolean61 = partial31.isMatch((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial1.isMatch((org.joda.time.ReadablePartial) partial60);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial1.plus(readablePeriod63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(chronology65);
        java.lang.String str67 = partial66.toString();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        int int72 = partial69.size();
        boolean boolean73 = partial66.isAfter((org.joda.time.ReadablePartial) partial69);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(chronology74);
        java.lang.String str76 = partial75.toString();
        int int77 = partial66.compareTo((org.joda.time.ReadablePartial) partial75);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = partial75.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray79 = partial75.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        org.joda.time.Partial partial81 = partial75.without(dateTimeFieldType80);
        boolean boolean82 = partial1.isEqual((org.joda.time.ReadablePartial) partial75);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property84 = partial1.property(dateTimeFieldType83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[]" + "'", str76, "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter78);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray79);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        int int4 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = partial1.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        int int9 = partial1.indexOf(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial1.minus(readablePeriod11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        int int23 = partial20.size();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        boolean boolean30 = partial20.isMatch((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = partial16.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial16.toString(dateTimeFormatter32);
        java.lang.String str35 = partial16.toString("[]");
        boolean boolean36 = partial12.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        int int38 = partial12.indexOf(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        org.joda.time.Partial partial6 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        boolean boolean11 = partial9.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial9.toString(dateTimeFormatter12);
        boolean boolean14 = partial7.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial9.minus(readablePeriod15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int18 = partial16.get(dateTimeFieldType17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial3.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        boolean boolean31 = partial29.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology32 = partial29.getChronology();
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = partial35.withChronologyRetainFields(chronology36);
        boolean boolean38 = partial33.isAfter((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology39);
        java.lang.String str41 = partial40.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        boolean boolean47 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        boolean boolean48 = partial33.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        boolean boolean52 = partial50.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology53 = partial50.getChronology();
        int[] intArray54 = partial50.getValues();
        java.lang.String str56 = partial50.toString("[]");
        boolean boolean57 = partial33.isAfter((org.joda.time.ReadablePartial) partial50);
        boolean boolean58 = partial27.isAfter((org.joda.time.ReadablePartial) partial50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = null;
        java.lang.String str60 = partial50.toString(dateTimeFormatter59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property62 = partial50.property(dateTimeFieldType61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        org.joda.time.Partial partial5 = new org.joda.time.Partial(chronology4);
        int[] intArray6 = partial5.getValues();
        java.lang.String str7 = partial5.toStringList();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial3.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial3.without(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        java.lang.String str27 = partial26.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        boolean boolean33 = partial26.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        java.lang.String str36 = partial35.toString();
        int int37 = partial26.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial39.plus(readablePeriod40);
        int int42 = partial39.size();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial44.plus(readablePeriod45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime48);
        int int51 = partial35.size();
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial35);
        boolean boolean53 = partial3.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology54);
        boolean boolean57 = partial55.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = partial55.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial55.minus(readablePeriod59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        org.joda.time.Partial partial62 = partial55.without(dateTimeFieldType61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial66 = partial64.plus(readablePeriod65);
        int int67 = partial64.size();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        boolean boolean74 = partial64.isMatch((org.joda.time.ReadableInstant) dateTime73);
        boolean boolean75 = partial55.isMatch((org.joda.time.ReadableInstant) dateTime73);
        boolean boolean76 = partial3.equals((java.lang.Object) partial55);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = null;
        int int78 = partial55.indexOf(dateTimeFieldType77);
        org.joda.time.DateTimeField[] dateTimeFieldArray79 = partial55.getFields();
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldArray79);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        java.lang.String str13 = partial10.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = partial10.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = partial10.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = partial10.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial19 = partial10.withField(dateTimeFieldType17, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNull(dateTimeFormatter16);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial5 = partial3.plus(readablePeriod4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial9.plus(readablePeriod10);
        int int12 = partial9.size();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        boolean boolean19 = partial9.isMatch((org.joda.time.ReadableInstant) dateTime18);
        boolean boolean20 = partial5.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial5.plus(readablePeriod21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial22);
        java.lang.String str24 = partial22.toString();
        org.joda.time.Chronology chronology25 = partial22.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial26 = new org.joda.time.Partial(dateTimeFieldType0, (int) 'a', chronology25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial10.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial10.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        org.joda.time.Partial partial16 = partial10.without(dateTimeFieldType15);
        org.joda.time.Chronology chronology17 = partial10.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = partial10.indexOf(dateTimeFieldType18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial10.minus(readablePeriod20);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(partial21);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial3.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial3.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = partial3.indexOf(dateTimeFieldType25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        int int32 = partial29.size();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial34.plus(readablePeriod35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        boolean boolean39 = partial29.isMatch((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = partial29.toString(dateTimeFormatter40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        boolean boolean43 = partial29.isSupported(dateTimeFieldType42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial45.plus(readablePeriod46);
        int int48 = partial45.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = partial45.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        boolean boolean51 = partial45.isSupported(dateTimeFieldType50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        int int53 = partial45.indexOf(dateTimeFieldType52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial45);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial45.minus(readablePeriod55);
        boolean boolean57 = partial29.isAfter((org.joda.time.ReadablePartial) partial56);
        boolean boolean58 = partial27.isMatch((org.joda.time.ReadablePartial) partial29);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial3 = partial1.plus(readablePeriod2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        int int10 = partial7.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial12.plus(readablePeriod13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean18 = partial3.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial3.toString(dateTimeFormatter19);
        java.lang.String str22 = partial3.toString("[]");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        int int27 = partial24.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial24.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = partial24.isSupported(dateTimeFieldType29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = partial24.indexOf(dateTimeFieldType31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial24);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial24.minus(readablePeriod34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        boolean boolean37 = partial35.isSupported(dateTimeFieldType36);
        boolean boolean38 = partial3.equals((java.lang.Object) boolean37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial3.plus(readablePeriod39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial3.minus(readablePeriod41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = partial42.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(partial42);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = partial3.toString("[]", locale5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial10.plus(readablePeriod11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial16.withChronologyRetainFields(chronology17);
        boolean boolean19 = partial12.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial21.plus(readablePeriod22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial27.withChronologyRetainFields(chronology28);
        boolean boolean30 = partial23.isAfter((org.joda.time.ReadablePartial) partial27);
        boolean boolean31 = partial12.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        boolean boolean33 = partial12.isSupported(dateTimeFieldType32);
        boolean boolean34 = partial3.equals((java.lang.Object) dateTimeFieldType32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial3.withPeriodAdded(readablePeriod35, (int) 'a');
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = partial3.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        org.joda.time.Partial partial40 = partial3.without(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
        org.junit.Assert.assertNotNull(partial40);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial1.toString(dateTimeFormatter4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial8 = partial1.with(dateTimeFieldType6, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = partial1.withChronologyRetainFields(chronology2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = partial3.toString("[]", locale5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        boolean boolean10 = partial8.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology11 = partial8.getChronology();
        org.joda.time.Partial partial12 = new org.joda.time.Partial(chronology11);
        int[] intArray13 = partial12.getValues();
        int[] intArray14 = partial12.getValues();
        org.joda.time.Partial partial15 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial12);
        boolean boolean16 = partial3.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial18.plus(readablePeriod19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = partial20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.plus(readablePeriod25);
        int int27 = partial24.size();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial29.plus(readablePeriod30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        boolean boolean34 = partial24.isMatch((org.joda.time.ReadableInstant) dateTime33);
        boolean boolean35 = partial20.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = partial20.toString(dateTimeFormatter36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial20.withPeriodAdded(readablePeriod38, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = partial20.getFieldTypes();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        java.lang.String str48 = partial47.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial50.plus(readablePeriod51);
        int int53 = partial50.size();
        boolean boolean54 = partial47.isAfter((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology55);
        java.lang.String str57 = partial56.toString();
        int int58 = partial47.compareTo((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial60.plus(readablePeriod61);
        int int63 = partial60.size();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial67 = partial65.plus(readablePeriod66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial67.toDateTime(readableInstant68);
        boolean boolean70 = partial60.isMatch((org.joda.time.ReadableInstant) dateTime69);
        boolean boolean71 = partial56.isMatch((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime72 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        boolean boolean73 = partial20.isMatch((org.joda.time.ReadableInstant) dateTime72);
        boolean boolean74 = partial12.isMatch((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = null;
        java.lang.String str76 = partial12.toString(dateTimeFormatter75);
        java.util.Locale locale78 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = partial12.toString("", locale78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[]" + "'", str76, "[]");
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        org.joda.time.Partial partial14 = partial1.without(dateTimeFieldType13);
        java.util.Locale locale16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = partial14.toString("", locale16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial14);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        java.lang.String str2 = partial1.toString();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial4.plus(readablePeriod5);
        int int7 = partial4.size();
        boolean boolean8 = partial1.isAfter((org.joda.time.ReadablePartial) partial4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(chronology9);
        java.lang.String str11 = partial10.toString();
        int int12 = partial1.compareTo((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.plus(readablePeriod15);
        int int17 = partial14.size();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        boolean boolean24 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime23);
        int int26 = partial10.size();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial10.minus(readablePeriod27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial10.plus(readablePeriod29);
        int[] intArray31 = partial10.getValues();
        org.joda.time.Partial partial32 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial10);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        boolean boolean3 = partial1.equals((java.lang.Object) 0.0f);
        org.joda.time.Chronology chronology4 = partial1.getChronology();
        int[] intArray5 = partial1.getValues();
        java.lang.String str7 = partial1.toString("[]");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        org.joda.time.Partial partial13 = partial9.without(dateTimeFieldType12);
        org.joda.time.Chronology chronology14 = partial13.getChronology();
        boolean boolean15 = partial1.isEqual((org.joda.time.ReadablePartial) partial13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = partial13.indexOf(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.plus(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial25.plus(readablePeriod26);
        int int28 = partial25.size();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial30.plus(readablePeriod31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        boolean boolean35 = partial25.isMatch((org.joda.time.ReadableInstant) dateTime34);
        boolean boolean36 = partial21.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = partial21.toString(dateTimeFormatter37);
        java.lang.String str40 = partial21.toString("[]");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial42.plus(readablePeriod43);
        int int45 = partial42.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = partial42.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = partial42.isSupported(dateTimeFieldType47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        int int50 = partial42.indexOf(dateTimeFieldType49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial42);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial42.minus(readablePeriod52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        boolean boolean55 = partial53.isSupported(dateTimeFieldType54);
        boolean boolean56 = partial21.equals((java.lang.Object) boolean55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        java.lang.String str59 = partial58.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial61.plus(readablePeriod62);
        int int64 = partial61.size();
        boolean boolean65 = partial58.isAfter((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        java.lang.String str68 = partial67.toString();
        int int69 = partial58.compareTo((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(chronology70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.Partial partial73 = partial71.plus(readablePeriod72);
        int int74 = partial71.size();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial78 = partial76.plus(readablePeriod77);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = partial78.toDateTime(readableInstant79);
        boolean boolean81 = partial71.isMatch((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean82 = partial67.isMatch((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime dateTime83 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean84 = partial13.isMatch((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial87 = partial13.with(dateTimeFieldType85, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[]" + "'", str68, "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }
}


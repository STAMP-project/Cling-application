import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    @Ignore
  public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        mutableInterval12.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology17 = mutableInterval12.getChronology();
        mutableInterval3.setChronology(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(readableInstant19, readablePeriod20);
        mutableInterval21.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval24 = mutableInterval21.toMutableInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        long long29 = mutableInterval28.toDurationMillis();
        mutableInterval21.setInterval((org.joda.time.ReadableInterval) mutableInterval28);
        org.joda.time.Duration duration31 = mutableInterval28.toDuration();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        java.lang.Object obj37 = mutableInterval35.clone();
        org.joda.time.Interval interval38 = mutableInterval35.toInterval();
        org.joda.time.ReadableInterval readableInterval39 = null;
        boolean boolean40 = mutableInterval35.isBefore(readableInterval39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology43);
        boolean boolean45 = mutableInterval35.isAfter((org.joda.time.ReadableInterval) mutableInterval44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        boolean boolean52 = mutableInterval35.isBefore((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval3.equals((java.lang.Object) mutableInterval53);
        org.joda.time.Interval interval56 = mutableInterval53.toInterval();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = mutableInterval53.toPeriod(periodType57);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(period58);
    }

    @Test
    @Ignore
  public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(obj14, chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableInterval16.setPeriodBeforeEnd(readablePeriod17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        mutableInterval22.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        long long31 = interval30.getEndMillis();
        boolean boolean33 = interval30.isAfter((long) (byte) 100);
        boolean boolean34 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) interval30);
        org.joda.time.Duration duration35 = mutableInterval22.toDuration();
        boolean boolean36 = mutableInterval16.isBefore((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.MutableInterval mutableInterval37 = mutableInterval22.toMutableInterval();
        boolean boolean38 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        boolean boolean40 = mutableInterval37.contains(1606267308130L);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        mutableInterval44.setPeriodBeforeEnd(readablePeriod45);
        mutableInterval44.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(readableInstant49, readablePeriod50);
        long long52 = mutableInterval51.getEndMillis();
        boolean boolean53 = mutableInterval44.overlaps((org.joda.time.ReadableInterval) mutableInterval51);
        boolean boolean54 = mutableInterval51.isAfterNow();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(readableInstant55, readablePeriod56);
        mutableInterval57.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval60 = mutableInterval57.toMutableInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval60.getEnd();
        org.joda.time.MutableInterval mutableInterval62 = mutableInterval60.toMutableInterval();
        boolean boolean63 = mutableInterval51.equals((java.lang.Object) mutableInterval60);
        org.joda.time.Period period64 = mutableInterval51.toPeriod();
        mutableInterval37.setPeriodAfterStart((org.joda.time.ReadablePeriod) period64);
        org.joda.time.Interval interval66 = mutableInterval37.toInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1606267509528L + "'", long52 == 1606267509528L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(mutableInterval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(mutableInterval62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(interval66);
    }

    @Test
    @Ignore
  public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        java.lang.Object obj9 = mutableInterval7.clone();
        mutableInterval7.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology12 = mutableInterval7.getChronology();
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval7.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval14 = mutableInterval7.copy();
        org.joda.time.Duration duration15 = mutableInterval7.toDuration();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant18, readablePeriod19);
        mutableInterval20.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval23 = mutableInterval20.toMutableInterval();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        long long28 = mutableInterval27.toDurationMillis();
        mutableInterval20.setInterval((org.joda.time.ReadableInterval) mutableInterval27);
        mutableInterval20.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        mutableInterval39.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        mutableInterval46.setDurationAfterStart((long) (byte) 1);
        boolean boolean51 = mutableInterval46.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology52 = mutableInterval46.getChronology();
        mutableInterval39.setChronology(chronology52);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology52);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology52);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval20, chronology52);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology52);
        mutableInterval7.setChronology(chronology52);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((long) (short) 0, 1606267308130L, chronology52);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(10L, 1606267295857L, chronology52);
        long long61 = mutableInterval60.getStartMillis();
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10L + "'", long61 == 10L);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = mutableInterval2.getStart();
        mutableInterval2.setDurationBeforeEnd((long) (short) 10);
        boolean boolean15 = mutableInterval2.contains(10L);
        boolean boolean16 = mutableInterval2.containsNow();
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267509630L + "'", long3 == 1606267509630L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        org.joda.time.DateTime dateTime12 = mutableInterval10.getStart();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(readableInstant13, readablePeriod14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.DateTime dateTime21 = mutableInterval19.getStart();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval25.getStart();
        mutableInterval15.setInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        mutableInterval34.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        long long43 = interval42.getEndMillis();
        boolean boolean45 = interval42.isAfter((long) (byte) 100);
        boolean boolean46 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Duration duration47 = mutableInterval34.toDuration();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readableInstant54, readablePeriod55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        mutableInterval56.setInterval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration73 = mutableInterval72.toDuration();
        boolean boolean74 = mutableInterval72.isAfterNow();
        long long75 = mutableInterval72.getEndMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
    }

    @Test
    @Ignore
  public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        mutableInterval7.setDurationBeforeEnd((long) 100);
        mutableInterval7.setStartMillis(1L);
        org.joda.time.MutableInterval mutableInterval14 = mutableInterval7.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval14.toMutableInterval();
        boolean boolean16 = mutableInterval14.isAfterNow();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = mutableInterval14.toPeriod(periodType17);
        java.lang.String str19 = mutableInterval14.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z" + "'", str19, "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        boolean boolean6 = mutableInterval5.containsNow();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        mutableInterval10.setInterval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(readablePeriod7, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean25 = mutableInterval5.isAfter((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean27 = mutableInterval5.isAfter(1606267310105L);
        org.joda.time.Duration duration28 = mutableInterval5.toDuration();
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval5.copy();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(mutableInterval29);
    }

    @Test
    @Ignore
  public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) ' ', 1606267286325L);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(readableInstant10, readablePeriod11);
        mutableInterval12.setDurationBeforeEnd(1L);
        boolean boolean15 = mutableInterval12.isAfterNow();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        java.lang.Object obj21 = mutableInterval19.clone();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(obj21, chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutableInterval23.setPeriodBeforeEnd(readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        mutableInterval29.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        long long38 = interval37.getEndMillis();
        boolean boolean40 = interval37.isAfter((long) (byte) 100);
        boolean boolean41 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Duration duration42 = mutableInterval29.toDuration();
        boolean boolean43 = mutableInterval23.isBefore((org.joda.time.ReadableInterval) mutableInterval29);
        org.joda.time.MutableInterval mutableInterval44 = mutableInterval29.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(readableInstant46, readablePeriod47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        mutableInterval48.setInterval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(readablePeriod45, (org.joda.time.ReadableInstant) dateTime54);
        mutableInterval29.setEnd((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean64 = mutableInterval12.contains((org.joda.time.ReadableInterval) mutableInterval29);
        org.joda.time.DateTime dateTime65 = mutableInterval29.getEnd();
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period9, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        java.lang.Object obj72 = mutableInterval70.clone();
        java.lang.Object obj73 = mutableInterval70.clone();
        org.joda.time.MutableInterval mutableInterval74 = mutableInterval70.copy();
        org.joda.time.Duration duration75 = mutableInterval70.toDuration();
        mutableInterval66.setDurationAfterStart((org.joda.time.ReadableDuration) duration75);
        long long77 = mutableInterval66.toDurationMillis();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        java.lang.Object obj83 = mutableInterval81.clone();
        java.lang.Object obj84 = mutableInterval81.clone();
        org.joda.time.MutableInterval mutableInterval85 = mutableInterval81.copy();
        org.joda.time.DateTime dateTime86 = mutableInterval81.getStart();
        boolean boolean87 = mutableInterval66.contains((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval(readableDuration4, (org.joda.time.ReadableInstant) dateTime86);
        boolean boolean89 = mutableInterval2.contains((org.joda.time.ReadableInstant) dateTime86);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval2.setInterval(1606267416104L, 1606267395890L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267286325L + "'", long3 == 1606267286325L);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(mutableInterval44);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertEquals(obj83.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertEquals(obj84.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj84), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj84), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    @Ignore
  public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        boolean boolean15 = interval8.isBefore((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean16 = mutableInterval1.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval12.toMutableInterval();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = mutableInterval12.toPeriod(periodType18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        java.lang.Object obj25 = mutableInterval23.clone();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(obj25, chronology26);
        org.joda.time.DateTime dateTime28 = mutableInterval27.getEnd();
        boolean boolean29 = mutableInterval12.contains((org.joda.time.ReadableInterval) mutableInterval27);
        boolean boolean30 = mutableInterval27.isAfterNow();
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    @Ignore
  public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        java.lang.Object obj12 = mutableInterval9.clone();
        boolean boolean13 = mutableInterval3.equals((java.lang.Object) mutableInterval9);
        mutableInterval9.setDurationAfterStart(1606267353228L);
        boolean boolean16 = mutableInterval9.isBeforeNow();
        boolean boolean17 = mutableInterval9.containsNow();
        boolean boolean19 = mutableInterval9.isBefore(1606267332182L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    @Ignore
  public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        java.lang.Object obj8 = mutableInterval7.clone();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        mutableInterval11.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval14 = mutableInterval11.toMutableInterval();
        org.joda.time.Period period15 = mutableInterval11.toPeriod();
        mutableInterval7.setPeriodAfterStart((org.joda.time.ReadablePeriod) period15);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval7.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval19 = org.joda.time.MutableInterval.parse("2020-11-25T01:21:51.925Z/2020-11-25T01:21:51.926Z");
        org.joda.time.MutableInterval mutableInterval20 = mutableInterval19.toMutableInterval();
        boolean boolean21 = mutableInterval7.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    @Ignore
  public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval2.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        mutableInterval28.setDurationAfterStart((long) (byte) 1);
        boolean boolean33 = mutableInterval28.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology34 = mutableInterval28.getChronology();
        mutableInterval21.setChronology(chronology34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology34);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology34);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval2, chronology34);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        java.lang.Object obj44 = mutableInterval42.clone();
        java.lang.Object obj45 = mutableInterval42.clone();
        org.joda.time.MutableInterval mutableInterval46 = mutableInterval42.copy();
        org.joda.time.Duration duration47 = mutableInterval42.toDuration();
        org.joda.time.Period period48 = mutableInterval42.toPeriod();
        mutableInterval38.setPeriodAfterStart((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        java.lang.Object obj55 = mutableInterval53.clone();
        org.joda.time.Interval interval56 = mutableInterval53.toInterval();
        mutableInterval53.setDurationBeforeEnd(0L);
        boolean boolean60 = mutableInterval53.contains((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(readableInstant61, readablePeriod62);
        mutableInterval63.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval66 = mutableInterval63.toMutableInterval();
        mutableInterval53.setInterval((org.joda.time.ReadableInterval) mutableInterval66);
        long long68 = mutableInterval53.getEndMillis();
        mutableInterval53.setStartMillis(1606267377590L);
        boolean boolean71 = mutableInterval53.isAfterNow();
        boolean boolean72 = mutableInterval38.isAfter((org.joda.time.ReadableInterval) mutableInterval53);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(mutableInterval66);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1606267510158L + "'", long68 == 1606267510158L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    @Ignore
  public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval3.setPeriodAfterStart(readablePeriod7);
        mutableInterval3.setEndMillis((long) 100);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Interval interval24 = mutableInterval21.toInterval();
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = mutableInterval21.isBefore(readableInterval25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology29);
        boolean boolean31 = mutableInterval21.isAfter((org.joda.time.ReadableInterval) mutableInterval30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        boolean boolean38 = mutableInterval21.isBefore((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean39 = mutableInterval14.contains((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean40 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        java.lang.Object obj53 = mutableInterval51.clone();
        org.joda.time.Interval interval54 = mutableInterval51.toInterval();
        org.joda.time.ReadableInterval readableInterval55 = null;
        boolean boolean56 = mutableInterval51.isBefore(readableInterval55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology59);
        boolean boolean61 = mutableInterval51.isAfter((org.joda.time.ReadableInterval) mutableInterval60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        boolean boolean68 = mutableInterval51.isBefore((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean69 = mutableInterval44.contains((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        java.lang.Object obj75 = mutableInterval73.clone();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(obj75, chronology76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        mutableInterval77.setPeriodAfterStart(readablePeriod78);
        org.joda.time.Period period80 = mutableInterval77.toPeriod();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(0L, 1L, chronology83);
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        java.lang.Object obj86 = mutableInterval84.clone();
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval(obj86, chronology87);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        mutableInterval88.setPeriodAfterStart(readablePeriod89);
        org.joda.time.Period period91 = mutableInterval88.toPeriod();
        mutableInterval77.setPeriodAfterStart((org.joda.time.ReadablePeriod) period91);
        org.joda.time.MutableInterval mutableInterval93 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadablePeriod) period91);
        org.joda.time.Duration duration94 = mutableInterval93.toDuration();
        org.joda.time.Period period95 = mutableInterval93.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period95);
        org.joda.time.DateTime dateTime97 = mutableInterval3.getEnd();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertEquals(obj86.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj86), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj86), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertNotNull(period95);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    @Ignore
  public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        org.joda.time.DateTime dateTime24 = mutableInterval22.getEnd();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        mutableInterval28.setDurationAfterStart((long) (byte) 1);
        boolean boolean33 = mutableInterval28.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        java.lang.Object obj39 = mutableInterval37.clone();
        mutableInterval37.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology42 = mutableInterval37.getChronology();
        mutableInterval28.setChronology(chronology42);
        mutableInterval22.setChronology(chronology42);
        boolean boolean46 = mutableInterval22.isBefore(1606267372991L);
        boolean boolean48 = mutableInterval22.isAfter(1606267423901L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    @Ignore
  public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology17);
        boolean boolean19 = mutableInterval9.isAfter((org.joda.time.ReadableInterval) mutableInterval18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        mutableInterval23.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        long long32 = interval31.getEndMillis();
        boolean boolean34 = interval31.isAfter((long) (byte) 100);
        boolean boolean35 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) interval31);
        mutableInterval18.setInterval((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        mutableInterval40.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        long long49 = interval48.getEndMillis();
        boolean boolean51 = interval48.isAfter((long) (byte) 100);
        boolean boolean52 = mutableInterval40.overlaps((org.joda.time.ReadableInterval) interval48);
        org.joda.time.Duration duration53 = mutableInterval40.toDuration();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        mutableInterval57.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        long long66 = interval65.getEndMillis();
        boolean boolean68 = interval65.isAfter((long) (byte) 100);
        boolean boolean69 = mutableInterval57.overlaps((org.joda.time.ReadableInterval) interval65);
        org.joda.time.Duration duration70 = mutableInterval57.toDuration();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(0L, 1L, chronology73);
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        org.joda.time.DateTime dateTime76 = mutableInterval74.getStart();
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(readableInstant77, readablePeriod78);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        org.joda.time.DateTime dateTime85 = mutableInterval83.getStart();
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval(0L, 1L, chronology88);
        org.joda.time.Interval interval90 = mutableInterval89.toInterval();
        org.joda.time.DateTime dateTime91 = mutableInterval89.getStart();
        mutableInterval79.setInterval((org.joda.time.ReadableInstant) dateTime85, (org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.MutableInterval mutableInterval93 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration70, (org.joda.time.ReadableInstant) dateTime91);
        mutableInterval40.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration70);
        mutableInterval18.setDurationAfterStart((org.joda.time.ReadableDuration) duration70);
        org.joda.time.MutableInterval mutableInterval97 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration70);
        org.joda.time.MutableInterval mutableInterval98 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval97);
        org.joda.time.MutableInterval mutableInterval99 = mutableInterval97.copy();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(mutableInterval99);
    }

    @Test
    @Ignore
  public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.DateTime dateTime25 = mutableInterval23.getStart();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(readableInstant26, readablePeriod27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        mutableInterval28.setInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime40);
        boolean boolean43 = mutableInterval9.isAfter((org.joda.time.ReadableInstant) dateTime40);
        mutableInterval9.setDurationBeforeEnd(1606267376989L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    @Ignore
  public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.copy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        java.lang.Object obj16 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        mutableInterval20.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        mutableInterval27.setDurationAfterStart((long) (byte) 1);
        boolean boolean32 = mutableInterval27.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology33 = mutableInterval27.getChronology();
        mutableInterval20.setChronology(chronology33);
        mutableInterval20.setEndMillis((long) '#');
        org.joda.time.Duration duration37 = mutableInterval20.toDuration();
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval9.copy();
        org.joda.time.Interval interval41 = mutableInterval9.toInterval();
        org.joda.time.DateTime dateTime42 = interval41.getStart();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    @Ignore
  public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setDurationAfterStart((long) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((java.lang.Object) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    @Ignore
  public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        java.lang.Object obj35 = mutableInterval33.clone();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(obj35, chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutableInterval37.setPeriodBeforeEnd(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readableInstant40, readablePeriod41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        mutableInterval42.setInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        java.lang.Object obj61 = mutableInterval59.clone();
        org.joda.time.Interval interval62 = mutableInterval59.toInterval();
        org.joda.time.ReadableInterval readableInterval63 = null;
        boolean boolean64 = mutableInterval59.isBefore(readableInterval63);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology67);
        boolean boolean69 = mutableInterval59.isAfter((org.joda.time.ReadableInterval) mutableInterval68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        boolean boolean76 = mutableInterval59.isBefore((org.joda.time.ReadableInstant) dateTime75);
        mutableInterval37.setInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime75);
        boolean boolean78 = mutableInterval28.isAfter((org.joda.time.ReadableInstant) dateTime48);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval28.setStartMillis(10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str29, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    @Ignore
  public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology20 = mutableInterval9.getChronology();
        long long21 = mutableInterval9.toDurationMillis();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        mutableInterval25.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        long long34 = interval33.getEndMillis();
        boolean boolean36 = interval33.isAfter((long) (byte) 100);
        boolean boolean37 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) interval33);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        mutableInterval41.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        long long50 = interval49.getEndMillis();
        boolean boolean52 = interval49.isAfter((long) (byte) 100);
        boolean boolean53 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) interval49);
        org.joda.time.Duration duration54 = mutableInterval41.toDuration();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(readableInstant61, readablePeriod62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        org.joda.time.DateTime dateTime69 = mutableInterval67.getStart();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        mutableInterval63.setInterval((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration54, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(readableInstant79, readablePeriod80);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(0L, 1L, chronology84);
        org.joda.time.Interval interval86 = mutableInterval85.toInterval();
        org.joda.time.DateTime dateTime87 = mutableInterval85.getStart();
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval(0L, 1L, chronology90);
        org.joda.time.Interval interval92 = mutableInterval91.toInterval();
        org.joda.time.DateTime dateTime93 = mutableInterval91.getStart();
        mutableInterval81.setInterval((org.joda.time.ReadableInstant) dateTime87, (org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.MutableInterval mutableInterval95 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration54, (org.joda.time.ReadableInstant) dateTime87);
        boolean boolean96 = interval33.overlaps((org.joda.time.ReadableInterval) mutableInterval95);
        org.joda.time.PeriodType periodType97 = null;
        org.joda.time.Period period98 = interval33.toPeriod(periodType97);
        boolean boolean99 = mutableInterval9.contains((org.joda.time.ReadableInterval) interval33);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1606267284827L + "'", long21 == 1606267284827L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(period98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    @Ignore
  public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableInterval3.setDurationAfterStart(readableDuration6);
        org.joda.time.Duration duration8 = mutableInterval3.toDuration();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration8);
    }

    @Test
    @Ignore
  public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        boolean boolean10 = mutableInterval3.containsNow();
        mutableInterval3.setDurationBeforeEnd(1606267352998L);
        boolean boolean14 = mutableInterval3.contains(1606267425530L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        boolean boolean9 = mutableInterval3.isBefore((long) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod10);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    @Ignore
  public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = mutableInterval10.isBefore(readableInterval14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology18);
        boolean boolean20 = mutableInterval10.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        boolean boolean27 = mutableInterval10.isBefore((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime26);
        mutableInterval3.setDurationAfterStart(1606267324130L);
        org.joda.time.MutableInterval mutableInterval31 = mutableInterval3.toMutableInterval();
        boolean boolean33 = mutableInterval31.isBefore(1606267462358L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        mutableInterval3.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        long long11 = mutableInterval10.getEndMillis();
        boolean boolean12 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        boolean boolean13 = mutableInterval10.isAfterNow();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(readableInstant14, readablePeriod15);
        mutableInterval16.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval16.toMutableInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval19.getEnd();
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval19.toMutableInterval();
        boolean boolean22 = mutableInterval10.equals((java.lang.Object) mutableInterval19);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutableInterval19.setPeriodAfterStart(readablePeriod23);
        boolean boolean25 = mutableInterval19.isAfterNow();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutableInterval29.setPeriodBeforeEnd(readablePeriod30);
        mutableInterval29.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readableInstant34, readablePeriod35);
        long long37 = mutableInterval36.getEndMillis();
        boolean boolean38 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        boolean boolean39 = mutableInterval36.isAfterNow();
        boolean boolean41 = mutableInterval36.isBefore((long) (byte) 10);
        boolean boolean42 = mutableInterval19.isAfter((org.joda.time.ReadableInterval) mutableInterval36);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1606267511565L + "'", long11 == 1606267511565L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1606267511565L + "'", long37 == 1606267511565L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    @Ignore
  public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        mutableInterval12.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology17 = mutableInterval12.getChronology();
        mutableInterval3.setChronology(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(readableInstant19, readablePeriod20);
        mutableInterval21.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        java.lang.Object obj29 = mutableInterval27.clone();
        mutableInterval27.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology32 = mutableInterval27.getChronology();
        mutableInterval21.setChronology(chronology32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology32);
        org.joda.time.Interval interval35 = mutableInterval3.toInterval();
        long long36 = mutableInterval3.getEndMillis();
        boolean boolean37 = mutableInterval3.isBeforeNow();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        java.lang.Object obj43 = mutableInterval41.clone();
        java.lang.Object obj44 = mutableInterval41.clone();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        mutableInterval48.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        mutableInterval55.setDurationAfterStart((long) (byte) 1);
        boolean boolean60 = mutableInterval55.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology61 = mutableInterval55.getChronology();
        mutableInterval48.setChronology(chronology61);
        mutableInterval48.setEndMillis((long) '#');
        org.joda.time.Duration duration65 = mutableInterval48.toDuration();
        mutableInterval41.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration65);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration65);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(duration65);
    }

    @Test
    @Ignore
  public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = mutableInterval10.isBefore(readableInterval14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology18);
        boolean boolean20 = mutableInterval10.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        boolean boolean27 = mutableInterval10.isBefore((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime26);
        mutableInterval3.setDurationAfterStart(1606267324130L);
        org.joda.time.MutableInterval mutableInterval31 = mutableInterval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval32 = mutableInterval31.copy();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertNotNull(mutableInterval32);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        java.lang.Object obj0 = new java.lang.Object();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval(obj0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Object");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableInterval25.setPeriodAfterStart(readablePeriod26);
        org.joda.time.Period period28 = mutableInterval25.toPeriod();
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval25.copy();
        boolean boolean30 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Interval interval31 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        java.lang.Object obj37 = mutableInterval35.clone();
        org.joda.time.Interval interval38 = mutableInterval35.toInterval();
        mutableInterval35.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        java.lang.Object obj46 = mutableInterval44.clone();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(obj46, chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        mutableInterval48.setPeriodBeforeEnd(readablePeriod49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        mutableInterval54.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        long long63 = interval62.getEndMillis();
        boolean boolean65 = interval62.isAfter((long) (byte) 100);
        boolean boolean66 = mutableInterval54.overlaps((org.joda.time.ReadableInterval) interval62);
        org.joda.time.Duration duration67 = mutableInterval54.toDuration();
        boolean boolean68 = mutableInterval48.isBefore((org.joda.time.ReadableInterval) mutableInterval54);
        org.joda.time.MutableInterval mutableInterval69 = mutableInterval54.toMutableInterval();
        boolean boolean70 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval69);
        boolean boolean71 = mutableInterval3.isBefore((org.joda.time.ReadableInterval) mutableInterval69);
        org.joda.time.MutableInterval mutableInterval73 = org.joda.time.MutableInterval.parse("2020-11-25T01:21:41.245Z/2020-11-25T01:21:41.246Z");
        boolean boolean74 = mutableInterval69.overlaps((org.joda.time.ReadableInterval) mutableInterval73);
        java.lang.String str75 = mutableInterval73.toString();
        org.joda.time.Interval interval76 = mutableInterval73.toInterval();
        java.lang.String str77 = interval76.toString();
        java.lang.String str78 = interval76.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(mutableInterval69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(mutableInterval73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2020-11-25T01:21:41.245Z/2020-11-25T01:21:41.246Z" + "'", str75, "2020-11-25T01:21:41.245Z/2020-11-25T01:21:41.246Z");
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2020-11-25T01:21:41.245Z/2020-11-25T01:21:41.246Z" + "'", str77, "2020-11-25T01:21:41.245Z/2020-11-25T01:21:41.246Z");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2020-11-25T01:21:41.245Z/2020-11-25T01:21:41.246Z" + "'", str78, "2020-11-25T01:21:41.245Z/2020-11-25T01:21:41.246Z");
    }

    @Test
    @Ignore
  public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime48 = mutableInterval13.getEnd();
        org.joda.time.Interval interval49 = mutableInterval13.toInterval();
        long long50 = mutableInterval13.getEndMillis();
        org.joda.time.MutableInterval mutableInterval51 = mutableInterval13.toMutableInterval();
        org.joda.time.DateTime dateTime52 = mutableInterval51.getStart();
        mutableInterval51.setDurationAfterStart(1606267383242L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(mutableInterval51);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:23:53.898Z/2020-11-25T01:23:53.898Z");
        org.junit.Assert.assertNotNull(mutableInterval1);
    }

    @Test
    @Ignore
  public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = mutableInterval2.toPeriod(periodType3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableInstant5, readablePeriod6);
        long long8 = mutableInterval7.getEndMillis();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        mutableInterval11.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval14 = mutableInterval11.toMutableInterval();
        org.joda.time.DateTime dateTime15 = mutableInterval14.getEnd();
        boolean boolean16 = mutableInterval7.isAfter((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period4, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableInterval25.setPeriodAfterStart(readablePeriod26);
        org.joda.time.Period period28 = mutableInterval25.toPeriod();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(obj34, chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        mutableInterval36.setPeriodAfterStart(readablePeriod37);
        org.joda.time.Period period39 = mutableInterval36.toPeriod();
        mutableInterval25.setPeriodAfterStart((org.joda.time.ReadablePeriod) period39);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) period39);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readableInstant42, readablePeriod43);
        mutableInterval44.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        java.lang.Object obj52 = mutableInterval50.clone();
        mutableInterval50.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology55 = mutableInterval50.getChronology();
        mutableInterval44.setChronology(chronology55);
        mutableInterval44.setStartMillis(1L);
        org.joda.time.MutableInterval mutableInterval59 = mutableInterval44.copy();
        long long60 = mutableInterval59.getEndMillis();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1606267512111L + "'", long8 == 1606267512111L);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(mutableInterval59);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1606267512111L + "'", long60 == 1606267512111L);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    @Ignore
  public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = mutableInterval10.isBefore(readableInterval14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology18);
        boolean boolean20 = mutableInterval10.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        boolean boolean27 = mutableInterval10.isBefore((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        boolean boolean35 = mutableInterval32.contains((long) ' ');
        boolean boolean36 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval32);
        java.lang.Class<?> wildcardClass37 = mutableInterval32.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    @Ignore
  public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology20 = mutableInterval9.getChronology();
        boolean boolean21 = mutableInterval9.isBeforeNow();
        long long22 = mutableInterval9.getStartMillis();
        org.joda.time.Interval interval23 = mutableInterval9.toInterval();
        mutableInterval9.setEndMillis(1606267433898L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 35L + "'", long22 == 35L);
        org.junit.Assert.assertNotNull(interval23);
    }

    @Test
    @Ignore
  public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        java.lang.String str6 = mutableInterval2.toString();
        long long7 = mutableInterval2.getStartMillis();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        mutableInterval11.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        long long20 = interval19.getEndMillis();
        boolean boolean22 = interval19.isAfter((long) (byte) 100);
        boolean boolean23 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Duration duration24 = mutableInterval11.toDuration();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.DateTime dateTime30 = mutableInterval28.getStart();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        mutableInterval33.setInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        java.lang.Object obj60 = mutableInterval58.clone();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(obj60, chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        mutableInterval62.setPeriodAfterStart(readablePeriod63);
        org.joda.time.Period period65 = mutableInterval62.toPeriod();
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadablePeriod) period65);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        java.lang.Object obj72 = mutableInterval70.clone();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(obj72, chronology73);
        org.joda.time.Duration duration75 = mutableInterval74.toDuration();
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration75);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        java.lang.Object obj83 = mutableInterval81.clone();
        org.joda.time.Interval interval84 = mutableInterval81.toInterval();
        org.joda.time.ReadableInterval readableInterval85 = null;
        boolean boolean86 = mutableInterval81.isBefore(readableInterval85);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology89);
        boolean boolean91 = mutableInterval81.isAfter((org.joda.time.ReadableInterval) mutableInterval90);
        org.joda.time.Interval interval92 = mutableInterval81.toInterval();
        org.joda.time.Period period93 = mutableInterval81.toPeriod();
        org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadablePeriod) period93);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval94);
        mutableInterval2.setDurationBeforeEnd(1606267432863L);
        org.joda.time.MutableInterval mutableInterval98 = mutableInterval2.toMutableInterval();
        org.junit.Assert.assertNotNull(mutableInterval5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2020-11-25T01:25:12.247Z/2020-11-25T01:25:12.248Z" + "'", str6, "2020-11-25T01:25:12.247Z/2020-11-25T01:25:12.248Z");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1606267512247L + "'", long7 == 1606267512247L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertEquals(obj83.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(mutableInterval98);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        mutableInterval3.setEndMillis((long) '#');
        org.joda.time.Duration duration20 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readablePeriod26, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readablePeriod25, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(readableInstant45, readablePeriod46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.DateTime dateTime59 = mutableInterval57.getStart();
        mutableInterval47.setInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime62 = mutableInterval61.getStart();
        mutableInterval61.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean66 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(readablePeriod67, (org.joda.time.ReadableInstant) dateTime73);
        mutableInterval61.setStart((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Period period77 = mutableInterval76.toPeriod();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        boolean boolean84 = mutableInterval81.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval85 = mutableInterval81.copy();
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration89 = null;
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval(readableDuration89, readableInstant90);
        org.joda.time.PeriodType periodType92 = null;
        org.joda.time.Period period93 = mutableInterval91.toPeriod(periodType92);
        mutableInterval88.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period93);
        mutableInterval85.setPeriodAfterStart((org.joda.time.ReadablePeriod) period93);
        boolean boolean96 = mutableInterval76.isBefore((org.joda.time.ReadableInterval) mutableInterval85);
        mutableInterval76.setDurationAfterStart(1606267321599L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(mutableInterval85);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.MutableInterval mutableInterval3 = mutableInterval2.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.toMutableInterval();
        boolean boolean6 = mutableInterval2.isBefore(1606267376989L);
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, 1L, chronology5);
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.DateTime dateTime8 = mutableInterval6.getStart();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        mutableInterval2.setInterval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime14);
        boolean boolean16 = mutableInterval2.isBeforeNow();
        long long17 = mutableInterval2.getStartMillis();
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    @Ignore
  public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readableInstant16, readablePeriod17);
        mutableInterval18.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval18.toMutableInterval();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        long long26 = mutableInterval25.toDurationMillis();
        mutableInterval18.setInterval((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Duration duration28 = mutableInterval25.toDuration();
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        java.lang.Object obj35 = mutableInterval33.clone();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(obj35, chronology36);
        org.joda.time.DateTime dateTime38 = mutableInterval37.getEnd();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval39.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval40.setStartMillis(1606267400528L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableInterval40);
    }

    @Test
    @Ignore
  public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.copy();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval3.toMutableInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableInterval15.setDurationBeforeEnd(readableDuration16);
        long long18 = mutableInterval15.getEndMillis();
        boolean boolean19 = mutableInterval11.equals((java.lang.Object) long18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        mutableInterval23.setDurationAfterStart((long) (byte) 1);
        boolean boolean28 = mutableInterval23.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        mutableInterval32.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology37 = mutableInterval32.getChronology();
        mutableInterval23.setChronology(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(readableInstant39, readablePeriod40);
        mutableInterval41.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        java.lang.Object obj49 = mutableInterval47.clone();
        mutableInterval47.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology52 = mutableInterval47.getChronology();
        mutableInterval41.setChronology(chronology52);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval23, chronology52);
        org.joda.time.DateTime dateTime55 = mutableInterval54.getEnd();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        boolean boolean63 = mutableInterval59.isAfterNow();
        long long64 = mutableInterval59.toDurationMillis();
        org.joda.time.DateTime dateTime65 = mutableInterval59.getEnd();
        mutableInterval11.setInterval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime65);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    @Ignore
  public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        boolean boolean10 = mutableInterval3.contains((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableInstant11, readablePeriod12);
        mutableInterval13.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval16 = mutableInterval13.toMutableInterval();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval16);
        org.joda.time.Duration duration18 = mutableInterval16.toDuration();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        org.joda.time.Interval interval25 = mutableInterval22.toInterval();
        mutableInterval22.setDurationBeforeEnd(0L);
        boolean boolean29 = mutableInterval22.contains((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        mutableInterval32.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval35 = mutableInterval32.toMutableInterval();
        mutableInterval22.setInterval((org.joda.time.ReadableInterval) mutableInterval35);
        org.joda.time.Duration duration37 = mutableInterval35.toDuration();
        boolean boolean38 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval35);
        long long39 = mutableInterval16.getEndMillis();
        mutableInterval16.setDurationAfterStart(1606267484749L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1606267512679L + "'", long39 == 1606267512679L);
    }

    @Test
    @Ignore
  public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        mutableInterval5.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology10 = mutableInterval5.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        long long23 = interval22.getEndMillis();
        boolean boolean25 = interval22.isAfter((long) (byte) 100);
        boolean boolean26 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Duration duration27 = mutableInterval14.toDuration();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getStart();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readableInstant34, readablePeriod35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        mutableInterval36.setInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime48);
        mutableInterval5.setEnd((org.joda.time.ReadableInstant) dateTime48);
        java.lang.Object obj53 = mutableInterval5.clone();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        mutableInterval64.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        mutableInterval71.setDurationAfterStart((long) (byte) 1);
        boolean boolean76 = mutableInterval71.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology77 = mutableInterval71.getChronology();
        mutableInterval64.setChronology(chronology77);
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology77);
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((java.lang.Object) interval58, chronology77);
        mutableInterval5.setChronology(chronology77);
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(1606267295857L, 1606267425962L, chronology77);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(chronology77);
    }

    @Test
    @Ignore
  public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval3.copy();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableInterval3.setPeriodAfterStart(readablePeriod6);
        java.lang.Object obj8 = mutableInterval3.clone();
        org.joda.time.DateTime dateTime9 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableInterval13.setPeriodAfterStart(readablePeriod14);
        org.joda.time.MutableInterval mutableInterval16 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval17 = null;
        boolean boolean18 = mutableInterval13.overlaps(readableInterval17);
        mutableInterval13.setStartMillis((long) 0);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        mutableInterval24.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getStart();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readableInstant34, readablePeriod35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        mutableInterval36.setInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime48);
        boolean boolean51 = mutableInterval24.isBefore((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        mutableInterval55.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        long long64 = interval63.getEndMillis();
        boolean boolean66 = interval63.isAfter((long) (byte) 100);
        boolean boolean67 = mutableInterval55.overlaps((org.joda.time.ReadableInterval) interval63);
        org.joda.time.Duration duration68 = mutableInterval55.toDuration();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        org.joda.time.DateTime dateTime74 = mutableInterval72.getStart();
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(readableInstant75, readablePeriod76);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        org.joda.time.DateTime dateTime83 = mutableInterval81.getStart();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval(0L, 1L, chronology86);
        org.joda.time.Interval interval88 = mutableInterval87.toInterval();
        org.joda.time.DateTime dateTime89 = mutableInterval87.getStart();
        mutableInterval77.setInterval((org.joda.time.ReadableInstant) dateTime83, (org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime74, (org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration68, (org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.MutableInterval mutableInterval93 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration68);
        org.joda.time.Duration duration94 = mutableInterval93.toDuration();
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration94);
        mutableInterval3.setDurationAfterStart((org.joda.time.ReadableDuration) duration94);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(duration94);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        long long5 = interval4.getEndMillis();
        org.joda.time.DateTime dateTime6 = interval4.getEnd();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        boolean boolean22 = mutableInterval17.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology23 = mutableInterval17.getChronology();
        mutableInterval10.setChronology(chronology23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = mutableInterval10.toPeriod(periodType25);
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadablePeriod) period26);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(period26);
    }

    @Test
    @Ignore
  public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval5 = null;
        boolean boolean6 = mutableInterval3.isAfter(readableInterval5);
        mutableInterval3.setDurationAfterStart(1606267294649L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        long long15 = mutableInterval12.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant18, readablePeriod19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        mutableInterval20.setInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readablePeriod17, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(readablePeriod16, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(readableInstant36, readablePeriod37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        mutableInterval38.setInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime44);
        boolean boolean53 = mutableInterval12.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        mutableInterval57.setDurationAfterStart((long) (byte) 1);
        boolean boolean62 = mutableInterval57.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        java.lang.Object obj68 = mutableInterval66.clone();
        mutableInterval66.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology71 = mutableInterval66.getChronology();
        mutableInterval57.setChronology(chronology71);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval12, chronology71);
        mutableInterval12.setEndMillis(1606267363870L);
        boolean boolean76 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutableInterval mutableInterval77 = mutableInterval12.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        mutableInterval12.setPeriodAfterStart(readablePeriod78);
        org.joda.time.Interval interval80 = mutableInterval12.toInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(mutableInterval77);
        org.junit.Assert.assertNotNull(interval80);
    }

    @Test
    @Ignore
  public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval5 = null;
        boolean boolean6 = mutableInterval3.isAfter(readableInterval5);
        mutableInterval3.setDurationAfterStart(1606267294649L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        long long15 = mutableInterval12.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant18, readablePeriod19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        mutableInterval20.setInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readablePeriod17, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(readablePeriod16, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(readableInstant36, readablePeriod37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        mutableInterval38.setInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime44);
        boolean boolean53 = mutableInterval12.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        mutableInterval57.setDurationAfterStart((long) (byte) 1);
        boolean boolean62 = mutableInterval57.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        java.lang.Object obj68 = mutableInterval66.clone();
        mutableInterval66.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology71 = mutableInterval66.getChronology();
        mutableInterval57.setChronology(chronology71);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval12, chronology71);
        mutableInterval12.setEndMillis(1606267363870L);
        boolean boolean76 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutableInterval mutableInterval77 = mutableInterval12.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        mutableInterval12.setPeriodAfterStart(readablePeriod78);
        java.lang.Class<?> wildcardClass80 = mutableInterval12.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(mutableInterval77);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    @Ignore
  public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.copy();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.DateTime dateTime12 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableInterval16.setPeriodAfterStart(readablePeriod17);
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval16.toMutableInterval();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = mutableInterval23.copy();
        org.joda.time.Period period26 = mutableInterval23.toPeriod();
        mutableInterval16.setPeriodAfterStart((org.joda.time.ReadablePeriod) period26);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadablePeriod) period26);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        boolean boolean35 = mutableInterval32.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval36 = mutableInterval32.copy();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readableDuration40, readableInstant41);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = mutableInterval42.toPeriod(periodType43);
        mutableInterval39.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period44);
        mutableInterval36.setPeriodAfterStart((org.joda.time.ReadablePeriod) period44);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadablePeriod) period44);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        java.lang.Object obj53 = mutableInterval51.clone();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(obj53, chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutableInterval55.setPeriodBeforeEnd(readablePeriod56);
        mutableInterval55.setDurationBeforeEnd((long) 100);
        mutableInterval55.setStartMillis(1L);
        org.joda.time.MutableInterval mutableInterval62 = mutableInterval55.toMutableInterval();
        org.joda.time.DateTime dateTime63 = mutableInterval62.getStart();
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period44, (org.joda.time.ReadableInstant) dateTime63);
        boolean boolean66 = mutableInterval64.isAfter(10L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    @Ignore
  public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        java.lang.Object obj10 = mutableInterval8.clone();
        mutableInterval8.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology13 = mutableInterval8.getChronology();
        mutableInterval2.setChronology(chronology13);
        mutableInterval2.setStartMillis(1L);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval2.copy();
        long long18 = mutableInterval17.getEndMillis();
        org.joda.time.DateTime dateTime19 = mutableInterval17.getStart();
        java.lang.Class<?> wildcardClass20 = mutableInterval17.getClass();
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(mutableInterval17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1606267513465L + "'", long18 == 1606267513465L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    @Ignore
  public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.copy();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.Duration duration12 = mutableInterval3.toDuration();
        org.joda.time.Period period13 = mutableInterval3.toPeriod();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        long long10 = mutableInterval3.getStartMillis();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        long long24 = interval23.getEndMillis();
        boolean boolean26 = interval23.isAfter((long) (byte) 100);
        boolean boolean27 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Duration duration28 = mutableInterval15.toDuration();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        long long35 = interval34.getEndMillis();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(readableInstant36, readablePeriod37);
        mutableInterval38.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval41 = mutableInterval38.toMutableInterval();
        boolean boolean42 = interval34.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        org.joda.time.Period period43 = interval34.toPeriod();
        long long44 = interval34.getEndMillis();
        boolean boolean45 = mutableInterval3.isBefore((org.joda.time.ReadableInterval) interval34);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    @Ignore
  public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval5.isAfterNow();
        org.joda.time.MutableInterval mutableInterval8 = mutableInterval5.toMutableInterval();
        org.joda.time.DateTime dateTime9 = mutableInterval5.getStart();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        long long18 = mutableInterval17.getStartMillis();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        long long25 = mutableInterval22.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(readableInstant28, readablePeriod29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        mutableInterval30.setInterval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readablePeriod27, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(readablePeriod26, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(readableInstant46, readablePeriod47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        mutableInterval48.setInterval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime54);
        boolean boolean63 = mutableInterval22.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        mutableInterval67.setDurationAfterStart((long) (byte) 1);
        boolean boolean72 = mutableInterval67.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        java.lang.Object obj78 = mutableInterval76.clone();
        mutableInterval76.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology81 = mutableInterval76.getChronology();
        mutableInterval67.setChronology(chronology81);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval22, chronology81);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval17, chronology81);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval5, chronology81);
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(1606267424816L, 1606267436243L, chronology81);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology81);
    }

    @Test
    @Ignore
  public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.MutableInterval mutableInterval22 = mutableInterval3.toMutableInterval();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableDuration23, readableInstant24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = mutableInterval25.toPeriod(periodType26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(readableInstant28, readablePeriod29);
        long long31 = mutableInterval30.getEndMillis();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableInstant32, readablePeriod33);
        mutableInterval34.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval37 = mutableInterval34.toMutableInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval37.getEnd();
        boolean boolean39 = mutableInterval30.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period27, (org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Interval interval42 = mutableInterval40.toInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(period27);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1606267513696L + "'", long31 == 1606267513696L);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(interval42);
    }

    @Test
    @Ignore
  public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        java.lang.Object obj27 = mutableInterval25.clone();
        org.joda.time.Interval interval28 = mutableInterval25.toInterval();
        org.joda.time.ReadableInterval readableInterval29 = null;
        boolean boolean30 = mutableInterval25.isBefore(readableInterval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology33);
        boolean boolean35 = mutableInterval25.isAfter((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        boolean boolean42 = mutableInterval25.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period20, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        java.lang.Object obj49 = mutableInterval47.clone();
        long long50 = mutableInterval47.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(readableInstant53, readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        mutableInterval55.setInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(readablePeriod52, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(readablePeriod51, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(readableInstant71, readablePeriod72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval77.getStart();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        org.joda.time.DateTime dateTime85 = mutableInterval83.getStart();
        mutableInterval73.setInterval((org.joda.time.ReadableInstant) dateTime79, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime79);
        boolean boolean88 = mutableInterval47.isBefore((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period20, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval90 = mutableInterval89.toMutableInterval();
        org.joda.time.DateTime dateTime91 = mutableInterval90.getStart();
        boolean boolean93 = mutableInterval90.isAfter(1606267481500L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(mutableInterval90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval3.toMutableInterval();
        org.joda.time.Duration duration7 = mutableInterval3.toDuration();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(duration7);
    }

    @Test
    @Ignore
  public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        org.joda.time.ReadableInterval readableInterval9 = null;
        boolean boolean10 = mutableInterval5.isBefore(readableInterval9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        boolean boolean26 = mutableInterval21.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        mutableInterval14.setChronology(chronology27);
        mutableInterval5.setChronology(chronology27);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(1L, 1606267294649L, chronology27);
        long long31 = mutableInterval30.getStartMillis();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = mutableInterval30.toPeriod(periodType32);
        long long34 = mutableInterval30.toDurationMillis();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1606267294648L + "'", long34 == 1606267294648L);
    }

    @Test
    @Ignore
  public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setDurationAfterStart((long) 1);
        org.joda.time.MutableInterval mutableInterval33 = mutableInterval12.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval34 = mutableInterval33.toMutableInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval34.getStart();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        java.lang.Object obj42 = mutableInterval40.clone();
        mutableInterval40.setStartMillis((long) 1);
        org.joda.time.DateTime dateTime45 = mutableInterval40.getStart();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval51 = mutableInterval49.copy();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        mutableInterval49.setPeriodAfterStart(readablePeriod52);
        java.lang.Object obj54 = mutableInterval49.clone();
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = mutableInterval49.toPeriod(periodType55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadablePeriod) period56);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadablePeriod) period56);
        long long59 = mutableInterval58.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval51);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
    }

    @Test
    @Ignore
  public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.copy();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.DateTime dateTime12 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableInterval16.setPeriodAfterStart(readablePeriod17);
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval16.toMutableInterval();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = mutableInterval23.copy();
        org.joda.time.Period period26 = mutableInterval23.toPeriod();
        mutableInterval16.setPeriodAfterStart((org.joda.time.ReadablePeriod) period26);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadablePeriod) period26);
        org.joda.time.Chronology chronology29 = mutableInterval28.getChronology();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        mutableInterval32.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval35 = mutableInterval32.toMutableInterval();
        boolean boolean36 = mutableInterval35.containsNow();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(readableInstant38, readablePeriod39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.DateTime dateTime52 = mutableInterval50.getStart();
        mutableInterval40.setInterval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(readablePeriod37, (org.joda.time.ReadableInstant) dateTime46);
        boolean boolean55 = mutableInterval35.isAfter((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        long long68 = interval67.getEndMillis();
        boolean boolean70 = interval67.isAfter((long) (byte) 100);
        boolean boolean71 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) interval67);
        long long72 = mutableInterval59.toDurationMillis();
        org.joda.time.DateTime dateTime73 = mutableInterval59.getStart();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime73);
        boolean boolean75 = mutableInterval28.isBefore((org.joda.time.ReadableInstant) dateTime73);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    @Ignore
  public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(readableInstant4, readablePeriod5);
        mutableInterval6.setDurationBeforeEnd(1L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        long long12 = mutableInterval11.getEndMillis();
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval11.copy();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(readableDuration14, readableInstant15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = mutableInterval16.toPeriod(periodType17);
        mutableInterval11.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period18);
        org.joda.time.DateTime dateTime20 = mutableInterval11.getStart();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        java.lang.Object obj26 = mutableInterval24.clone();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(obj26, chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutableInterval28.setPeriodBeforeEnd(readablePeriod29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        mutableInterval33.setInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        java.lang.Object obj52 = mutableInterval50.clone();
        org.joda.time.Interval interval53 = mutableInterval50.toInterval();
        org.joda.time.ReadableInterval readableInterval54 = null;
        boolean boolean55 = mutableInterval50.isBefore(readableInterval54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology58);
        boolean boolean60 = mutableInterval50.isAfter((org.joda.time.ReadableInterval) mutableInterval59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        boolean boolean67 = mutableInterval50.isBefore((org.joda.time.ReadableInstant) dateTime66);
        mutableInterval28.setInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime66);
        boolean boolean69 = mutableInterval11.isAfter((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean70 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval11);
        org.joda.time.Chronology chronology71 = mutableInterval6.getChronology();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((long) (short) 1, 1606267332182L, chronology71);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(1606267351858L, 1606267509630L, chronology71);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1606267514202L + "'", long12 == 1606267514202L);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
    }

    @Test
    @Ignore
  public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        org.joda.time.ReadableInterval readableInterval9 = null;
        boolean boolean10 = mutableInterval5.isBefore(readableInterval9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        boolean boolean26 = mutableInterval21.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        mutableInterval14.setChronology(chronology27);
        mutableInterval5.setChronology(chronology27);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(1L, 1606267382508L, chronology27);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        mutableInterval33.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval36 = mutableInterval33.toMutableInterval();
        org.joda.time.Period period37 = mutableInterval33.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readableInstant40, readablePeriod41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        mutableInterval42.setInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readablePeriod39, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(readablePeriod38, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(readableInstant58, readablePeriod59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        org.joda.time.DateTime dateTime72 = mutableInterval70.getStart();
        mutableInterval60.setInterval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime66);
        boolean boolean75 = mutableInterval33.isAfter((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime66, readableInstant76);
        boolean boolean78 = mutableInterval30.isAfter((org.joda.time.ReadableInstant) dateTime66);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    @Ignore
  public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(obj11, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableInterval13.setPeriodAfterStart(readablePeriod14);
        org.joda.time.Period period16 = mutableInterval13.toPeriod();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period16);
        org.joda.time.Chronology chronology18 = mutableInterval17.getChronology();
        java.lang.Object obj19 = mutableInterval17.clone();
        org.joda.time.Interval interval20 = mutableInterval17.toInterval();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval17);
        org.joda.time.Period period22 = mutableInterval21.toPeriod();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period22);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(readableDuration3, readableInstant4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = mutableInterval5.toPeriod(periodType6);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        long long21 = interval20.getEndMillis();
        boolean boolean23 = interval20.isAfter((long) (byte) 100);
        boolean boolean24 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Duration duration25 = mutableInterval12.toDuration();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(readableInstant26, readablePeriod27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        mutableInterval28.setInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period7, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readableInstant44, readablePeriod45);
        mutableInterval46.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval49 = mutableInterval46.toMutableInterval();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        long long54 = mutableInterval53.toDurationMillis();
        mutableInterval46.setInterval((org.joda.time.ReadableInterval) mutableInterval53);
        mutableInterval46.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        mutableInterval65.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        mutableInterval72.setDurationAfterStart((long) (byte) 1);
        boolean boolean77 = mutableInterval72.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology78 = mutableInterval72.getChronology();
        mutableInterval65.setChronology(chronology78);
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology78);
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology78);
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval46, chronology78);
        org.joda.time.Duration duration83 = mutableInterval46.toDuration();
        mutableInterval43.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration83);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(duration83);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        mutableInterval7.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        boolean boolean19 = mutableInterval14.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        mutableInterval7.setChronology(chronology20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology20);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology20);
        boolean boolean25 = mutableInterval23.contains((long) (short) 100);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        boolean boolean32 = mutableInterval29.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval33 = mutableInterval29.copy();
        org.joda.time.Duration duration34 = mutableInterval29.toDuration();
        boolean boolean35 = mutableInterval23.isBefore((org.joda.time.ReadableInterval) mutableInterval29);
        long long36 = mutableInterval23.getStartMillis();
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
    }

    @Test
    @Ignore
  public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = mutableInterval2.getStart();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(readableInstant12, readablePeriod13);
        mutableInterval14.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval14.toMutableInterval();
        org.joda.time.DateTime dateTime18 = mutableInterval17.getEnd();
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval17.toMutableInterval();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        mutableInterval23.setDurationAfterStart((long) (byte) 1);
        mutableInterval23.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        java.lang.Object obj40 = mutableInterval38.clone();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(obj40, chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        mutableInterval42.setPeriodAfterStart(readablePeriod43);
        org.joda.time.Period period45 = mutableInterval42.toPeriod();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadablePeriod) period45);
        boolean boolean47 = mutableInterval23.isBefore((org.joda.time.ReadableInstant) dateTime34);
        boolean boolean48 = mutableInterval19.contains((org.joda.time.ReadableInstant) dateTime34);
        boolean boolean49 = mutableInterval2.contains((org.joda.time.ReadableInstant) dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267514458L + "'", long3 == 1606267514458L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.035Z/2020-11-25T01:22:18.812Z");
        org.junit.Assert.assertNotNull(mutableInterval1);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        mutableInterval3.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        long long11 = mutableInterval10.getEndMillis();
        boolean boolean12 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        boolean boolean13 = mutableInterval10.isAfterNow();
        boolean boolean15 = mutableInterval10.isBefore((long) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        mutableInterval19.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(readableInstant29, readablePeriod30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        org.joda.time.DateTime dateTime43 = mutableInterval41.getStart();
        mutableInterval31.setInterval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime43);
        boolean boolean46 = mutableInterval19.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        mutableInterval50.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        long long59 = interval58.getEndMillis();
        boolean boolean61 = interval58.isAfter((long) (byte) 100);
        boolean boolean62 = mutableInterval50.overlaps((org.joda.time.ReadableInterval) interval58);
        org.joda.time.Duration duration63 = mutableInterval50.toDuration();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        org.joda.time.DateTime dateTime69 = mutableInterval67.getStart();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(readableInstant70, readablePeriod71);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        org.joda.time.DateTime dateTime78 = mutableInterval76.getStart();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(0L, 1L, chronology81);
        org.joda.time.Interval interval83 = mutableInterval82.toInterval();
        org.joda.time.DateTime dateTime84 = mutableInterval82.getStart();
        mutableInterval72.setInterval((org.joda.time.ReadableInstant) dateTime78, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration63, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration63);
        org.joda.time.Duration duration89 = mutableInterval88.toDuration();
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration89);
        java.lang.Class<?> wildcardClass91 = mutableInterval10.getClass();
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1606267514513L + "'", long11 == 1606267514513L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    @Ignore
  public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        boolean boolean8 = interval6.contains(1606267332182L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(readableInstant15, readablePeriod16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval21.getStart();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        org.joda.time.DateTime dateTime29 = mutableInterval27.getStart();
        mutableInterval17.setInterval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = mutableInterval31.getStart();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getEnd();
        boolean boolean34 = interval6.contains((org.joda.time.ReadableInstant) dateTime33);
        long long35 = interval6.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267379890L, 1606267456653L);
    }

    @Test
    @Ignore
  public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readablePeriod5, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readablePeriod4, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        mutableInterval26.setInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime41 = mutableInterval40.getStart();
        mutableInterval40.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean45 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        java.lang.Object obj51 = mutableInterval49.clone();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(obj51, chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutableInterval53.setPeriodBeforeEnd(readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        long long68 = interval67.getEndMillis();
        boolean boolean70 = interval67.isAfter((long) (byte) 100);
        boolean boolean71 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Duration duration72 = mutableInterval59.toDuration();
        boolean boolean73 = mutableInterval53.isBefore((org.joda.time.ReadableInterval) mutableInterval59);
        org.joda.time.MutableInterval mutableInterval74 = mutableInterval59.toMutableInterval();
        java.lang.String str75 = mutableInterval74.toString();
        java.lang.String str76 = mutableInterval74.toString();
        boolean boolean77 = mutableInterval40.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        org.joda.time.ReadableInterval readableInterval78 = null;
        boolean boolean79 = mutableInterval74.isAfter(readableInterval78);
        org.joda.time.Interval interval80 = mutableInterval74.toInterval();
        org.joda.time.Interval interval81 = mutableInterval74.toInterval();
        long long82 = mutableInterval74.getStartMillis();
        boolean boolean83 = mutableInterval74.isAfterNow();
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str75, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str76, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        mutableInterval7.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        boolean boolean19 = mutableInterval14.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        mutableInterval7.setChronology(chronology20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology20);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology20);
        boolean boolean25 = mutableInterval23.contains((long) (short) 100);
        boolean boolean26 = mutableInterval23.isAfterNow();
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    @Ignore
  public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        mutableInterval13.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology18 = mutableInterval13.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval13.toMutableInterval();
        boolean boolean20 = mutableInterval7.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        java.lang.Object obj26 = mutableInterval24.clone();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(obj26, chronology27);
        org.joda.time.Duration duration29 = mutableInterval28.toDuration();
        mutableInterval19.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        long long36 = interval35.getEndMillis();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readableInstant37, readablePeriod38);
        mutableInterval39.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval42 = mutableInterval39.toMutableInterval();
        boolean boolean43 = interval35.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.Period period44 = interval35.toPeriod();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        java.lang.Object obj50 = mutableInterval48.clone();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(obj50, chronology51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        mutableInterval52.setPeriodAfterStart(readablePeriod53);
        org.joda.time.Period period55 = mutableInterval52.toPeriod();
        org.joda.time.MutableInterval mutableInterval56 = mutableInterval52.copy();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(readableInstant63, readablePeriod64);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, 1L, chronology68);
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        org.joda.time.DateTime dateTime71 = mutableInterval69.getStart();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        org.joda.time.DateTime dateTime77 = mutableInterval75.getStart();
        mutableInterval65.setInterval((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime77);
        boolean boolean80 = mutableInterval56.isBefore((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period44, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime77);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(mutableInterval56);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    @Ignore
  public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        boolean boolean71 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Period period72 = mutableInterval13.toPeriod();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        java.lang.Object obj78 = mutableInterval76.clone();
        mutableInterval76.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology81 = mutableInterval76.getChronology();
        org.joda.time.MutableInterval mutableInterval82 = mutableInterval76.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval83 = mutableInterval76.copy();
        boolean boolean84 = mutableInterval76.isAfterNow();
        boolean boolean85 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval76);
        long long86 = mutableInterval76.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(mutableInterval82);
        org.junit.Assert.assertNotNull(mutableInterval83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 2L + "'", long86 == 2L);
    }

    @Test
    @Ignore
  public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableInterval25.setPeriodAfterStart(readablePeriod26);
        org.joda.time.Period period28 = mutableInterval25.toPeriod();
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval25.copy();
        boolean boolean30 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(obj36, chronology37);
        boolean boolean39 = mutableInterval3.equals((java.lang.Object) mutableInterval38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        java.lang.Object obj45 = mutableInterval43.clone();
        org.joda.time.Interval interval46 = mutableInterval43.toInterval();
        org.joda.time.ReadableInterval readableInterval47 = null;
        boolean boolean48 = mutableInterval43.isBefore(readableInterval47);
        org.joda.time.MutableInterval mutableInterval49 = mutableInterval43.copy();
        boolean boolean51 = mutableInterval43.contains(1606267286325L);
        org.joda.time.DateTime dateTime52 = mutableInterval43.getStart();
        boolean boolean53 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval43);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        mutableInterval22.setDurationAfterStart((long) 10);
        long long26 = mutableInterval22.getEndMillis();
        mutableInterval22.setDurationAfterStart(1606267385730L);
        org.joda.time.Period period29 = mutableInterval22.toPeriod();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodAfterStart(readablePeriod4);
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval3.toMutableInterval();
        long long7 = mutableInterval3.toDurationMillis();
        org.joda.time.Duration duration8 = mutableInterval3.toDuration();
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration8);
    }

    @Test
    @Ignore
  public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        java.lang.Object obj9 = mutableInterval7.clone();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(obj9, chronology10);
        org.joda.time.DateTime dateTime12 = mutableInterval11.getEnd();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        mutableInterval16.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology21 = mutableInterval16.getChronology();
        org.joda.time.MutableInterval mutableInterval22 = mutableInterval16.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval23 = mutableInterval16.copy();
        org.joda.time.Duration duration24 = mutableInterval16.toDuration();
        org.joda.time.DateTime dateTime25 = mutableInterval16.getStart();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        mutableInterval29.setDurationAfterStart((long) (byte) 1);
        boolean boolean34 = mutableInterval29.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        java.lang.Object obj40 = mutableInterval38.clone();
        mutableInterval38.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology43 = mutableInterval38.getChronology();
        mutableInterval29.setChronology(chronology43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        mutableInterval48.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        java.lang.Object obj57 = mutableInterval55.clone();
        org.joda.time.Interval interval58 = mutableInterval55.toInterval();
        org.joda.time.ReadableInterval readableInterval59 = null;
        boolean boolean60 = mutableInterval55.isBefore(readableInterval59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology63);
        boolean boolean65 = mutableInterval55.isAfter((org.joda.time.ReadableInterval) mutableInterval64);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, 1L, chronology68);
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        org.joda.time.DateTime dateTime71 = mutableInterval69.getStart();
        boolean boolean72 = mutableInterval55.isBefore((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean73 = mutableInterval48.contains((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean74 = mutableInterval29.isAfter((org.joda.time.ReadableInstant) dateTime71);
        mutableInterval11.setInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(readableInstant76, readablePeriod77);
        mutableInterval78.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval81 = mutableInterval78.toMutableInterval();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(0L, 1L, chronology84);
        long long86 = mutableInterval85.toDurationMillis();
        mutableInterval78.setInterval((org.joda.time.ReadableInterval) mutableInterval85);
        org.joda.time.DateTime dateTime88 = mutableInterval78.getStart();
        mutableInterval2.setInterval((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableInstant) dateTime88);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval2.setStartMillis(1606267381298L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267515552L + "'", long3 == 1606267515552L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(mutableInterval81);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1L + "'", long86 == 1L);
        org.junit.Assert.assertNotNull(dateTime88);
    }

    @Test
    @Ignore
  public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime48 = mutableInterval13.getEnd();
        org.joda.time.Interval interval49 = mutableInterval13.toInterval();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutableInterval53.setPeriodBeforeEnd(readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        boolean boolean64 = mutableInterval59.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology65 = mutableInterval59.getChronology();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, 1L, chronology68);
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        java.lang.Object obj71 = mutableInterval69.clone();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(obj71, chronology72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        mutableInterval73.setPeriodAfterStart(readablePeriod74);
        org.joda.time.Period period76 = mutableInterval73.toPeriod();
        mutableInterval59.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period76);
        mutableInterval53.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period76);
        org.joda.time.Period period79 = mutableInterval53.toPeriod();
        boolean boolean80 = mutableInterval53.isBeforeNow();
        org.joda.time.DateTime dateTime81 = mutableInterval53.getEnd();
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean84 = mutableInterval13.contains(1606267481500L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    @Ignore
  public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        java.lang.Object obj0 = null;
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval(obj0);
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, 1L, chronology5);
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.DateTime dateTime8 = mutableInterval6.getStart();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        org.joda.time.Interval interval15 = mutableInterval12.toInterval();
        org.joda.time.ReadableInterval readableInterval16 = null;
        boolean boolean17 = mutableInterval12.isBefore(readableInterval16);
        org.joda.time.MutableInterval mutableInterval18 = mutableInterval12.copy();
        boolean boolean19 = mutableInterval6.contains((org.joda.time.ReadableInterval) mutableInterval12);
        mutableInterval12.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology23 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(obj2, chronology23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutableInterval28.setPeriodBeforeEnd(readablePeriod29);
        mutableInterval28.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(readableInstant33, readablePeriod34);
        long long36 = mutableInterval35.getEndMillis();
        boolean boolean37 = mutableInterval28.overlaps((org.joda.time.ReadableInterval) mutableInterval35);
        boolean boolean38 = mutableInterval35.isAfterNow();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        java.lang.Object obj50 = mutableInterval48.clone();
        org.joda.time.Interval interval51 = mutableInterval48.toInterval();
        org.joda.time.ReadableInterval readableInterval52 = null;
        boolean boolean53 = mutableInterval48.isBefore(readableInterval52);
        org.joda.time.MutableInterval mutableInterval54 = mutableInterval48.copy();
        boolean boolean55 = mutableInterval42.contains((org.joda.time.ReadableInterval) mutableInterval48);
        mutableInterval48.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology59 = mutableInterval48.getChronology();
        boolean boolean60 = mutableInterval48.isBeforeNow();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        mutableInterval64.setPeriodBeforeEnd(readablePeriod65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(readableInstant67, readablePeriod68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(0L, 1L, chronology78);
        org.joda.time.Interval interval80 = mutableInterval79.toInterval();
        org.joda.time.DateTime dateTime81 = mutableInterval79.getStart();
        mutableInterval69.setInterval((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime81);
        boolean boolean83 = mutableInterval64.isAfter((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean84 = mutableInterval48.isAfter((org.joda.time.ReadableInstant) dateTime81);
        mutableInterval35.setStart((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean86 = mutableInterval24.equals((java.lang.Object) dateTime81);
        mutableInterval1.setStart((org.joda.time.ReadableInstant) dateTime81);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval((java.lang.Object) dateTime81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology23);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1606267515726L + "'", long36 == 1606267515726L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(mutableInterval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    @Ignore
  public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime48 = mutableInterval13.getEnd();
        org.joda.time.Interval interval49 = mutableInterval13.toInterval();
        long long50 = interval49.getEndMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
    }

    @Test
    @Ignore
  public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.copy();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(readableInstant14, readablePeriod15);
        mutableInterval16.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval16.toMutableInterval();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        long long24 = mutableInterval23.toDurationMillis();
        mutableInterval16.setInterval((org.joda.time.ReadableInterval) mutableInterval23);
        mutableInterval16.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        mutableInterval35.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        mutableInterval42.setDurationAfterStart((long) (byte) 1);
        boolean boolean47 = mutableInterval42.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology48 = mutableInterval42.getChronology();
        mutableInterval35.setChronology(chronology48);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology48);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology48);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval16, chronology48);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology48);
        mutableInterval3.setChronology(chronology48);
        org.joda.time.MutableInterval mutableInterval55 = mutableInterval3.toMutableInterval();
        mutableInterval3.setInterval(1606267284827L, 1606267327298L);
        long long59 = mutableInterval3.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableInterval55);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1606267284827L + "'", long59 == 1606267284827L);
    }

    @Test
    @Ignore
  public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        boolean boolean8 = interval6.contains(1606267332182L);
        org.joda.time.Duration duration9 = interval6.toDuration();
        boolean boolean11 = interval6.isAfter(0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        boolean boolean11 = mutableInterval2.isBefore(1606267286325L);
        long long12 = mutableInterval2.getEndMillis();
        long long13 = mutableInterval2.getEndMillis();
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
    }

    @Test
    @Ignore
  public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.MutableInterval mutableInterval8 = mutableInterval3.toMutableInterval();
        org.joda.time.Period period9 = mutableInterval8.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval8.setInterval(1606267417134L, 1606267376890L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    @Ignore
  public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval17.copy();
        long long22 = mutableInterval17.getEndMillis();
        boolean boolean23 = mutableInterval7.isAfter((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        org.joda.time.DateTime dateTime29 = mutableInterval27.getStart();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        java.lang.Object obj35 = mutableInterval33.clone();
        org.joda.time.Interval interval36 = mutableInterval33.toInterval();
        org.joda.time.ReadableInterval readableInterval37 = null;
        boolean boolean38 = mutableInterval33.isBefore(readableInterval37);
        org.joda.time.MutableInterval mutableInterval39 = mutableInterval33.copy();
        boolean boolean40 = mutableInterval27.contains((org.joda.time.ReadableInterval) mutableInterval33);
        mutableInterval33.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology44 = mutableInterval33.getChronology();
        boolean boolean45 = mutableInterval33.isBeforeNow();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = mutableInterval33.toPeriod(periodType46);
        mutableInterval33.setInterval((long) (byte) -1, (long) '4');
        boolean boolean51 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval33);
        java.lang.Object obj52 = mutableInterval7.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    @Ignore
  public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = mutableInterval2.getStart();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean18 = mutableInterval15.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval15.copy();
        boolean boolean20 = mutableInterval2.equals((java.lang.Object) mutableInterval19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableInterval2.setDurationBeforeEnd(readableDuration21);
        long long23 = mutableInterval2.getStartMillis();
        boolean boolean25 = mutableInterval2.isAfter(1606267403061L);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        java.lang.Object obj31 = mutableInterval29.clone();
        java.lang.Object obj32 = mutableInterval29.clone();
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = mutableInterval29.contains(readableInstant33);
        boolean boolean35 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval29);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267516326L + "'", long3 == 1606267516326L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1606267516326L + "'", long23 == 1606267516326L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    @Ignore
  public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.copy();
        boolean boolean11 = mutableInterval3.contains(1606267286325L);
        org.joda.time.DateTime dateTime12 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        mutableInterval16.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        long long25 = interval24.getEndMillis();
        boolean boolean27 = interval24.isAfter((long) (byte) 100);
        boolean boolean28 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) interval24);
        org.joda.time.Duration duration29 = mutableInterval16.toDuration();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(readableInstant36, readablePeriod37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        mutableInterval38.setInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readableInstant54, readablePeriod55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        mutableInterval56.setInterval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(readableInstant71, readablePeriod72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval77.getStart();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        org.joda.time.DateTime dateTime85 = mutableInterval83.getStart();
        mutableInterval73.setInterval((org.joda.time.ReadableInstant) dateTime79, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime85);
        mutableInterval87.setEndMillis((long) ' ');
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval87);
        org.joda.time.Duration duration91 = mutableInterval3.toDuration();
        java.lang.Object obj92 = mutableInterval3.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertNotNull(obj92);
        org.junit.Assert.assertEquals(obj92.toString(), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.032Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj92), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.032Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj92), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.032Z");
    }

    @Test
    @Ignore
  public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.copy();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.DateTime dateTime12 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableInterval16.setPeriodAfterStart(readablePeriod17);
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval16.toMutableInterval();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = mutableInterval23.copy();
        org.joda.time.Period period26 = mutableInterval23.toPeriod();
        mutableInterval16.setPeriodAfterStart((org.joda.time.ReadablePeriod) period26);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadablePeriod) period26);
        boolean boolean29 = mutableInterval28.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    @Ignore
  public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        mutableInterval3.setStartMillis((long) (byte) 0);
        java.lang.Object obj12 = mutableInterval3.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        java.lang.Object obj12 = mutableInterval9.clone();
        boolean boolean13 = mutableInterval3.equals((java.lang.Object) mutableInterval9);
        mutableInterval9.setDurationAfterStart(1606267353228L);
        boolean boolean17 = mutableInterval9.isAfter(1606267387514L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        mutableInterval21.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology26 = mutableInterval21.getChronology();
        org.joda.time.MutableInterval mutableInterval27 = mutableInterval21.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval21.copy();
        org.joda.time.Duration duration29 = mutableInterval21.toDuration();
        org.joda.time.Duration duration30 = mutableInterval21.toDuration();
        mutableInterval9.setDurationAfterStart((org.joda.time.ReadableDuration) duration30);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval9.setStartMillis(1606267430362L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(readableInstant47, readablePeriod48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        mutableInterval49.setInterval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime64 = mutableInterval63.getStart();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.MutableInterval mutableInterval66 = mutableInterval65.toMutableInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(mutableInterval66);
    }

    @Test
    @Ignore
  public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        boolean boolean10 = mutableInterval3.contains((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableInstant11, readablePeriod12);
        mutableInterval13.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval16 = mutableInterval13.toMutableInterval();
        long long17 = mutableInterval13.toDurationMillis();
        boolean boolean18 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval13);
        mutableInterval13.setInterval(1606267436446L, 1606267449462L);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        mutableInterval25.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        org.joda.time.Interval interval35 = mutableInterval32.toInterval();
        org.joda.time.ReadableInterval readableInterval36 = null;
        boolean boolean37 = mutableInterval32.isBefore(readableInterval36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology40);
        boolean boolean42 = mutableInterval32.isAfter((org.joda.time.ReadableInterval) mutableInterval41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        boolean boolean49 = mutableInterval32.isBefore((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = mutableInterval25.contains((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        boolean boolean57 = mutableInterval54.contains((long) ' ');
        boolean boolean58 = mutableInterval25.contains((org.joda.time.ReadableInterval) mutableInterval54);
        org.joda.time.MutableInterval mutableInterval59 = mutableInterval25.toMutableInterval();
        boolean boolean60 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval59);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(mutableInterval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    @Ignore
  public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((java.lang.Object) str29);
        org.joda.time.Chronology chronology31 = mutableInterval30.getChronology();
        boolean boolean33 = mutableInterval30.contains(1606267376890L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str29, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    @Ignore
  public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean14 = mutableInterval12.isAfterNow();
        org.joda.time.Interval interval15 = mutableInterval12.toInterval();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readableInstant16, readablePeriod17);
        long long19 = mutableInterval18.getEndMillis();
        org.joda.time.MutableInterval mutableInterval20 = mutableInterval18.copy();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readableDuration21, readableInstant22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = mutableInterval23.toPeriod(periodType24);
        mutableInterval18.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateTime dateTime27 = mutableInterval18.getStart();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean34 = mutableInterval31.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval35 = mutableInterval31.copy();
        boolean boolean36 = mutableInterval18.equals((java.lang.Object) mutableInterval35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableInterval18.setDurationBeforeEnd(readableDuration37);
        long long39 = mutableInterval18.getStartMillis();
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval18);
        java.lang.Class<?> wildcardClass41 = mutableInterval12.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(interval15);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1606267516954L + "'", long19 == 1606267516954L);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1606267516954L + "'", long39 == 1606267516954L);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    @Ignore
  public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        boolean boolean25 = mutableInterval22.isBefore((long) (short) 10);
        org.joda.time.Interval interval26 = mutableInterval22.toInterval();
        org.joda.time.MutableInterval mutableInterval27 = mutableInterval22.copy();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getStart();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        java.lang.Object obj39 = mutableInterval37.clone();
        org.joda.time.Interval interval40 = mutableInterval37.toInterval();
        org.joda.time.ReadableInterval readableInterval41 = null;
        boolean boolean42 = mutableInterval37.isBefore(readableInterval41);
        org.joda.time.MutableInterval mutableInterval43 = mutableInterval37.copy();
        boolean boolean44 = mutableInterval31.contains((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.MutableInterval mutableInterval45 = mutableInterval37.toMutableInterval();
        org.joda.time.Period period46 = mutableInterval37.toPeriod();
        mutableInterval27.setPeriodAfterStart((org.joda.time.ReadablePeriod) period46);
        mutableInterval27.setDurationAfterStart(1606267321599L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertNotNull(period46);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval5 = null;
        boolean boolean6 = mutableInterval3.isAfter(readableInterval5);
        mutableInterval3.setEndMillis(1606267308130L);
        boolean boolean10 = mutableInterval3.isBefore(1606267332182L);
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval3.copy();
        org.joda.time.Chronology chronology12 = mutableInterval11.getChronology();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        org.joda.time.DateTime dateTime12 = mutableInterval10.getStart();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(readableInstant13, readablePeriod14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.DateTime dateTime21 = mutableInterval19.getStart();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval25.getStart();
        mutableInterval15.setInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        mutableInterval34.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        long long43 = interval42.getEndMillis();
        boolean boolean45 = interval42.isAfter((long) (byte) 100);
        boolean boolean46 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Duration duration47 = mutableInterval34.toDuration();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readableInstant54, readablePeriod55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        mutableInterval56.setInterval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(readableInstant72, readablePeriod73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        org.joda.time.DateTime dateTime80 = mutableInterval78.getStart();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(0L, 1L, chronology83);
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        org.joda.time.DateTime dateTime86 = mutableInterval84.getStart();
        mutableInterval74.setInterval((org.joda.time.ReadableInstant) dateTime80, (org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration47);
        long long90 = mutableInterval89.getStartMillis();
        org.joda.time.PeriodType periodType91 = null;
        org.joda.time.Period period92 = mutableInterval89.toPeriod(periodType91);
        long long93 = mutableInterval89.getEndMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
    }

    @Test
    @Ignore
  public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableInterval5.setDurationAfterStart(readableDuration8);
        boolean boolean10 = mutableInterval5.isAfterNow();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean17 = mutableInterval14.contains((long) ' ');
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.DateTime dateTime30 = mutableInterval28.getStart();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        mutableInterval33.setInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime45);
        boolean boolean48 = mutableInterval21.isBefore((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        mutableInterval52.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        long long61 = interval60.getEndMillis();
        boolean boolean63 = interval60.isAfter((long) (byte) 100);
        boolean boolean64 = mutableInterval52.overlaps((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Duration duration65 = mutableInterval52.toDuration();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, 1L, chronology68);
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        org.joda.time.DateTime dateTime71 = mutableInterval69.getStart();
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(readableInstant72, readablePeriod73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        org.joda.time.DateTime dateTime80 = mutableInterval78.getStart();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(0L, 1L, chronology83);
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        org.joda.time.DateTime dateTime86 = mutableInterval84.getStart();
        mutableInterval74.setInterval((org.joda.time.ReadableInstant) dateTime80, (org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration65, (org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration65);
        mutableInterval14.setEnd((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean92 = mutableInterval5.isBefore((org.joda.time.ReadableInstant) dateTime30);
        java.lang.String str93 = mutableInterval5.toString();
        org.joda.time.Chronology chronology94 = mutableInterval5.getChronology();
        org.joda.time.MutableInterval mutableInterval95 = new org.joda.time.MutableInterval(1606267391118L, 1606267503441L, chronology94);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z" + "'", str93, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology94);
    }

    @Test
    @Ignore
  public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        boolean boolean10 = mutableInterval3.contains((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableInstant11, readablePeriod12);
        mutableInterval13.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval16 = mutableInterval13.toMutableInterval();
        long long17 = mutableInterval13.toDurationMillis();
        boolean boolean18 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        java.lang.Object obj32 = mutableInterval30.clone();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(obj32, chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        mutableInterval34.setPeriodAfterStart(readablePeriod35);
        org.joda.time.Period period37 = mutableInterval34.toPeriod();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadablePeriod) period37);
        org.joda.time.Chronology chronology39 = mutableInterval38.getChronology();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(1606267372833L, 1606267382508L, chronology39);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology39);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(chronology39);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267395245L, 1606267503441L);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean6 = mutableInterval3.contains((long) ' ');
        org.joda.time.DateTime dateTime7 = mutableInterval3.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setStartMillis(1606267401730L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    @Ignore
  public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(readableInstant2, readablePeriod3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.DateTime dateTime10 = mutableInterval8.getStart();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        mutableInterval4.setInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readablePeriod1, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readableInstant20, readablePeriod21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        mutableInterval22.setInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        java.lang.Object obj42 = mutableInterval40.clone();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(obj42, chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        mutableInterval44.setPeriodAfterStart(readablePeriod45);
        org.joda.time.Period period47 = mutableInterval44.toPeriod();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        java.lang.Object obj53 = mutableInterval51.clone();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(obj53, chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutableInterval55.setPeriodAfterStart(readablePeriod56);
        org.joda.time.Period period58 = mutableInterval55.toPeriod();
        mutableInterval44.setPeriodAfterStart((org.joda.time.ReadablePeriod) period58);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadablePeriod) period58);
        org.joda.time.Chronology chronology61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((java.lang.Object) dateTime10, chronology61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period58);
    }

    @Test
    @Ignore
  public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.copy();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval3.toMutableInterval();
        boolean boolean13 = mutableInterval11.isBefore(1606267310105L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(readableDuration22, readableInstant23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = mutableInterval24.toPeriod(periodType25);
        mutableInterval21.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period26);
        boolean boolean28 = interval18.contains((org.joda.time.ReadableInterval) mutableInterval21);
        org.joda.time.DateTime dateTime29 = mutableInterval21.getStart();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval21);
        mutableInterval11.setInterval((org.joda.time.ReadableInterval) mutableInterval30);
        boolean boolean33 = mutableInterval11.contains(1606267370953L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    @Ignore
  public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval5 = null;
        boolean boolean6 = mutableInterval3.isAfter(readableInterval5);
        mutableInterval3.setDurationAfterStart(1606267294649L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        long long15 = mutableInterval12.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant18, readablePeriod19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        mutableInterval20.setInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readablePeriod17, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(readablePeriod16, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(readableInstant36, readablePeriod37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        mutableInterval38.setInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime44);
        boolean boolean53 = mutableInterval12.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        mutableInterval57.setDurationAfterStart((long) (byte) 1);
        boolean boolean62 = mutableInterval57.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        java.lang.Object obj68 = mutableInterval66.clone();
        mutableInterval66.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology71 = mutableInterval66.getChronology();
        mutableInterval57.setChronology(chronology71);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval12, chronology71);
        mutableInterval12.setEndMillis(1606267363870L);
        boolean boolean76 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        mutableInterval12.setEndMillis(1606267456653L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        mutableInterval3.setEnd(readableInstant7);
        mutableInterval3.setEndMillis((long) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean17 = mutableInterval14.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval18 = mutableInterval14.copy();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(readableDuration22, readableInstant23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = mutableInterval24.toPeriod(periodType25);
        mutableInterval21.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period26);
        mutableInterval18.setPeriodAfterStart((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Interval interval29 = mutableInterval18.toInterval();
        long long30 = mutableInterval18.getStartMillis();
        boolean boolean31 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval18);
        boolean boolean32 = mutableInterval3.isBeforeNow();
        long long33 = mutableInterval3.getEndMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
    }

    @Test
    @Ignore
  public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (-1), (long) (byte) 100);
        org.joda.time.MutableInterval mutableInterval3 = mutableInterval2.copy();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        java.lang.Object obj9 = mutableInterval7.clone();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(obj9, chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutableInterval11.setPeriodBeforeEnd(readablePeriod12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Duration duration30 = mutableInterval17.toDuration();
        boolean boolean31 = mutableInterval11.isBefore((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.MutableInterval mutableInterval32 = mutableInterval17.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readableInstant34, readablePeriod35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        mutableInterval36.setInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(readablePeriod33, (org.joda.time.ReadableInstant) dateTime42);
        mutableInterval17.setEnd((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        mutableInterval55.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        long long64 = interval63.getEndMillis();
        boolean boolean66 = interval63.isAfter((long) (byte) 100);
        boolean boolean67 = mutableInterval55.overlaps((org.joda.time.ReadableInterval) interval63);
        boolean boolean68 = mutableInterval17.contains((org.joda.time.ReadableInterval) mutableInterval55);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        org.joda.time.DateTime dateTime74 = mutableInterval72.getStart();
        boolean boolean75 = mutableInterval17.contains((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Period period76 = mutableInterval17.toPeriod();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        java.lang.Object obj82 = mutableInterval80.clone();
        mutableInterval80.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology85 = mutableInterval80.getChronology();
        org.joda.time.MutableInterval mutableInterval86 = mutableInterval80.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval87 = mutableInterval80.copy();
        boolean boolean88 = mutableInterval80.isAfterNow();
        boolean boolean89 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) mutableInterval80);
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval80);
        org.joda.time.ReadableInstant readableInstant91 = null;
        mutableInterval3.setEnd(readableInstant91);
        org.joda.time.Interval interval93 = mutableInterval3.toInterval();
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(mutableInterval86);
        org.junit.Assert.assertNotNull(mutableInterval87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(interval93);
    }

    @Test
    @Ignore
  public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        long long13 = mutableInterval10.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readableInstant16, readablePeriod17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.DateTime dateTime24 = mutableInterval22.getStart();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.DateTime dateTime30 = mutableInterval28.getStart();
        mutableInterval18.setInterval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readablePeriod15, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readablePeriod14, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readableInstant34, readablePeriod35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        mutableInterval36.setInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime42);
        boolean boolean51 = mutableInterval10.isBefore((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean52 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.MutableInterval mutableInterval53 = interval6.toMutableInterval();
        boolean boolean55 = interval6.isAfter(1606267500278L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(mutableInterval53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    @Ignore
  public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        mutableInterval25.setDurationBeforeEnd(1L);
        boolean boolean28 = mutableInterval22.contains((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval25);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        mutableInterval32.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval35 = mutableInterval32.toMutableInterval();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        long long40 = mutableInterval39.toDurationMillis();
        mutableInterval32.setInterval((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.Duration duration42 = mutableInterval39.toDuration();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        java.lang.Object obj48 = mutableInterval46.clone();
        org.joda.time.Interval interval49 = mutableInterval46.toInterval();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutableInterval46.setPeriodAfterStart(readablePeriod50);
        mutableInterval46.setEndMillis((long) 100);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        mutableInterval57.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        java.lang.Object obj66 = mutableInterval64.clone();
        org.joda.time.Interval interval67 = mutableInterval64.toInterval();
        org.joda.time.ReadableInterval readableInterval68 = null;
        boolean boolean69 = mutableInterval64.isBefore(readableInterval68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology72);
        boolean boolean74 = mutableInterval64.isAfter((org.joda.time.ReadableInterval) mutableInterval73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        org.joda.time.DateTime dateTime80 = mutableInterval78.getStart();
        boolean boolean81 = mutableInterval64.isBefore((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean82 = mutableInterval57.contains((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean83 = mutableInterval46.isBefore((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) dateTime80);
        mutableInterval29.setDurationAfterStart((org.joda.time.ReadableDuration) duration42);
        boolean boolean87 = mutableInterval29.isBefore(1606267327298L);
        java.lang.String str88 = mutableInterval29.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "2020-11-25T01:25:18.224Z/2020-11-25T01:25:18.225Z" + "'", str88, "2020-11-25T01:25:18.224Z/2020-11-25T01:25:18.225Z");
    }

    @Test
    @Ignore
  public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology20 = mutableInterval9.getChronology();
        boolean boolean21 = mutableInterval9.isBeforeNow();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(readableInstant22, readablePeriod23);
        mutableInterval24.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval27 = mutableInterval24.toMutableInterval();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        long long32 = mutableInterval31.toDurationMillis();
        mutableInterval24.setInterval((org.joda.time.ReadableInterval) mutableInterval31);
        boolean boolean34 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.String str35 = mutableInterval31.toString();
        mutableInterval31.setEndMillis(1606267488384L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str35, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        mutableInterval3.setEndMillis((long) '#');
        org.joda.time.Duration duration20 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readablePeriod26, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readablePeriod25, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(readableInstant45, readablePeriod46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.DateTime dateTime59 = mutableInterval57.getStart();
        mutableInterval47.setInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime62 = mutableInterval61.getStart();
        mutableInterval61.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean66 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(readablePeriod67, (org.joda.time.ReadableInstant) dateTime73);
        mutableInterval61.setStart((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Period period77 = mutableInterval76.toPeriod();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        boolean boolean84 = mutableInterval81.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval85 = mutableInterval81.copy();
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration89 = null;
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval(readableDuration89, readableInstant90);
        org.joda.time.PeriodType periodType92 = null;
        org.joda.time.Period period93 = mutableInterval91.toPeriod(periodType92);
        mutableInterval88.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period93);
        mutableInterval85.setPeriodAfterStart((org.joda.time.ReadablePeriod) period93);
        boolean boolean96 = mutableInterval76.isBefore((org.joda.time.ReadableInterval) mutableInterval85);
        org.joda.time.Interval interval97 = mutableInterval85.toInterval();
        boolean boolean98 = interval97.isBeforeNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(mutableInterval85);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(interval97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    @Ignore
  public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = mutableInterval3.toPeriod(periodType9);
        mutableInterval3.setEndMillis(1606267331417L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean59 = mutableInterval57.isBefore((long) (byte) 1);
        boolean boolean61 = mutableInterval57.isBefore((long) (byte) 100);
        org.joda.time.MutableInterval mutableInterval62 = mutableInterval57.toMutableInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(mutableInterval62);
    }

    @Test
    @Ignore
  public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        org.joda.time.Chronology chronology43 = mutableInterval40.getChronology();
        long long44 = mutableInterval40.getStartMillis();
        org.joda.time.MutableInterval mutableInterval45 = mutableInterval40.copy();
        java.lang.String str46 = mutableInterval40.toString();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(readableDuration47, readableInstant48);
        org.joda.time.MutableInterval mutableInterval50 = mutableInterval49.toMutableInterval();
        org.joda.time.Interval interval51 = mutableInterval49.toInterval();
        org.joda.time.Duration duration52 = interval51.toDuration();
        boolean boolean53 = mutableInterval40.equals((java.lang.Object) duration52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration52, readableInstant54);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z" + "'", str46, "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(mutableInterval50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    @Ignore
  public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        mutableInterval2.setDurationAfterStart(1606267295857L);
        boolean boolean12 = mutableInterval2.containsNow();
        long long13 = mutableInterval2.toDurationMillis();
        mutableInterval2.setEndMillis(1606267462358L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        java.lang.Object obj21 = mutableInterval19.clone();
        java.lang.Object obj22 = mutableInterval19.clone();
        org.joda.time.MutableInterval mutableInterval23 = mutableInterval19.copy();
        org.joda.time.DateTime dateTime24 = mutableInterval19.getStart();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        java.lang.Object obj32 = mutableInterval30.clone();
        org.joda.time.Interval interval33 = mutableInterval30.toInterval();
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = mutableInterval30.isBefore(readableInterval34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        mutableInterval39.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        mutableInterval46.setDurationAfterStart((long) (byte) 1);
        boolean boolean51 = mutableInterval46.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology52 = mutableInterval46.getChronology();
        mutableInterval39.setChronology(chronology52);
        mutableInterval30.setChronology(chronology52);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(1L, 1606267294649L, chronology52);
        mutableInterval19.setChronology(chronology52);
        mutableInterval2.setChronology(chronology52);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1606267295857L + "'", long13 == 1606267295857L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(chronology52);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval3.copy();
        mutableInterval3.setDurationBeforeEnd(1606267387150L);
        long long8 = mutableInterval3.toDurationMillis();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1606267387150L + "'", long8 == 1606267387150L);
    }

    @Test
    @Ignore
  public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval3.copy();
        org.joda.time.Period period6 = mutableInterval3.toPeriod();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(readableInstant7, readablePeriod8);
        mutableInterval9.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval12 = mutableInterval9.toMutableInterval();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        long long17 = mutableInterval16.toDurationMillis();
        mutableInterval9.setInterval((org.joda.time.ReadableInterval) mutableInterval16);
        org.joda.time.Duration duration19 = mutableInterval16.toDuration();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        java.lang.Object obj25 = mutableInterval23.clone();
        org.joda.time.Interval interval26 = mutableInterval23.toInterval();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableInterval23.setPeriodAfterStart(readablePeriod27);
        mutableInterval23.setEndMillis((long) 100);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        mutableInterval34.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        java.lang.Object obj43 = mutableInterval41.clone();
        org.joda.time.Interval interval44 = mutableInterval41.toInterval();
        org.joda.time.ReadableInterval readableInterval45 = null;
        boolean boolean46 = mutableInterval41.isBefore(readableInterval45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology49);
        boolean boolean51 = mutableInterval41.isAfter((org.joda.time.ReadableInterval) mutableInterval50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        boolean boolean58 = mutableInterval41.isBefore((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = mutableInterval34.contains((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean60 = mutableInterval23.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period6, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        long long67 = mutableInterval66.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval68 = mutableInterval66.copy();
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        mutableInterval66.setPeriodAfterStart(readablePeriod69);
        java.lang.Object obj71 = mutableInterval66.clone();
        org.joda.time.DateTime dateTime72 = mutableInterval66.getStart();
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period6, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        long long78 = mutableInterval77.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval80 = org.joda.time.MutableInterval.parse("2020-11-25T01:22:16.732Z/2020-11-25T01:22:16.733Z");
        boolean boolean81 = mutableInterval77.contains((org.joda.time.ReadableInterval) mutableInterval80);
        boolean boolean82 = mutableInterval73.equals((java.lang.Object) mutableInterval80);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval68);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    @Ignore
  public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.copy();
        org.joda.time.DateTime dateTime10 = mutableInterval3.getEnd();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        java.lang.Object obj16 = mutableInterval14.clone();
        org.joda.time.Interval interval17 = mutableInterval14.toInterval();
        org.joda.time.ReadableInterval readableInterval18 = null;
        boolean boolean19 = mutableInterval14.isBefore(readableInterval18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        mutableInterval23.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        mutableInterval30.setDurationAfterStart((long) (byte) 1);
        boolean boolean35 = mutableInterval30.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology36 = mutableInterval30.getChronology();
        mutableInterval23.setChronology(chronology36);
        mutableInterval14.setChronology(chronology36);
        long long39 = mutableInterval14.getEndMillis();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        java.lang.Object obj45 = mutableInterval43.clone();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(obj45, chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        mutableInterval47.setPeriodBeforeEnd(readablePeriod48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        mutableInterval53.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        long long62 = interval61.getEndMillis();
        boolean boolean64 = interval61.isAfter((long) (byte) 100);
        boolean boolean65 = mutableInterval53.overlaps((org.joda.time.ReadableInterval) interval61);
        org.joda.time.Duration duration66 = mutableInterval53.toDuration();
        boolean boolean67 = mutableInterval47.isBefore((org.joda.time.ReadableInterval) mutableInterval53);
        org.joda.time.MutableInterval mutableInterval68 = mutableInterval53.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(readableInstant70, readablePeriod71);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        org.joda.time.DateTime dateTime78 = mutableInterval76.getStart();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(0L, 1L, chronology81);
        org.joda.time.Interval interval83 = mutableInterval82.toInterval();
        org.joda.time.DateTime dateTime84 = mutableInterval82.getStart();
        mutableInterval72.setInterval((org.joda.time.ReadableInstant) dateTime78, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(readablePeriod69, (org.joda.time.ReadableInstant) dateTime78);
        mutableInterval53.setEnd((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean88 = mutableInterval14.isAfter((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean89 = mutableInterval3.isAfter((org.joda.time.ReadableInstant) dateTime78);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(mutableInterval68);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    @Ignore
  public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(obj24, chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableInterval26.setPeriodAfterStart(readablePeriod27);
        org.joda.time.Period period29 = mutableInterval26.toPeriod();
        mutableInterval12.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        mutableInterval35.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        long long44 = interval43.getEndMillis();
        boolean boolean46 = interval43.isAfter((long) (byte) 100);
        boolean boolean47 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) interval43);
        org.joda.time.Duration duration48 = mutableInterval35.toDuration();
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration48);
        org.joda.time.MutableInterval mutableInterval50 = mutableInterval3.toMutableInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(mutableInterval50);
    }

    @Test
    @Ignore
  public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(obj24, chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableInterval26.setPeriodAfterStart(readablePeriod27);
        org.joda.time.Period period29 = mutableInterval26.toPeriod();
        mutableInterval12.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        mutableInterval35.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        long long44 = interval43.getEndMillis();
        boolean boolean46 = interval43.isAfter((long) (byte) 100);
        boolean boolean47 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) interval43);
        org.joda.time.Duration duration48 = mutableInterval35.toDuration();
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(readableInstant50, readablePeriod51);
        mutableInterval52.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval55 = mutableInterval52.toMutableInterval();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        long long60 = mutableInterval59.toDurationMillis();
        mutableInterval52.setInterval((org.joda.time.ReadableInterval) mutableInterval59);
        mutableInterval52.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        mutableInterval71.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        mutableInterval78.setDurationAfterStart((long) (byte) 1);
        boolean boolean83 = mutableInterval78.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology84 = mutableInterval78.getChronology();
        mutableInterval71.setChronology(chronology84);
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology84);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology84);
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval52, chronology84);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology84);
        org.joda.time.DateTime dateTime90 = mutableInterval89.getEnd();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(mutableInterval55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTime90);
    }

    @Test
    @Ignore
  public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        boolean boolean25 = mutableInterval22.isBefore((long) (short) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        java.lang.Object obj37 = mutableInterval35.clone();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(obj37, chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutableInterval39.setPeriodAfterStart(readablePeriod40);
        org.joda.time.Period period42 = mutableInterval39.toPeriod();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadablePeriod) period42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        java.lang.Object obj49 = mutableInterval47.clone();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(obj49, chronology50);
        org.joda.time.Duration duration52 = mutableInterval51.toDuration();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableDuration) duration52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readableDuration54, readableInstant55);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = mutableInterval56.toPeriod(periodType57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(readableInstant59, readablePeriod60);
        long long62 = mutableInterval61.getEndMillis();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(readableInstant63, readablePeriod64);
        mutableInterval65.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval68 = mutableInterval65.toMutableInterval();
        org.joda.time.DateTime dateTime69 = mutableInterval68.getEnd();
        boolean boolean70 = mutableInterval61.isAfter((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period58, (org.joda.time.ReadableInstant) dateTime69);
        mutableInterval22.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime69);
        boolean boolean73 = mutableInterval22.isAfterNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period58);
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1606267519371L + "'", long62 == 1606267519371L);
        org.junit.Assert.assertNotNull(mutableInterval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    @Ignore
  public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        mutableInterval9.setDurationAfterStart((long) (byte) 1);
        boolean boolean14 = mutableInterval9.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology15 = mutableInterval9.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        java.lang.Object obj21 = mutableInterval19.clone();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(obj21, chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutableInterval23.setPeriodAfterStart(readablePeriod24);
        org.joda.time.Period period26 = mutableInterval23.toPeriod();
        mutableInterval9.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period26);
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period29 = mutableInterval3.toPeriod();
        boolean boolean30 = mutableInterval3.isBeforeNow();
        org.joda.time.DateTime dateTime31 = mutableInterval3.getEnd();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableInstant32, readablePeriod33);
        mutableInterval34.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval37 = mutableInterval34.toMutableInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval37.getEnd();
        org.joda.time.MutableInterval mutableInterval39 = mutableInterval37.toMutableInterval();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        mutableInterval43.setDurationAfterStart((long) (byte) 1);
        mutableInterval43.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        java.lang.Object obj60 = mutableInterval58.clone();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(obj60, chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        mutableInterval62.setPeriodAfterStart(readablePeriod63);
        org.joda.time.Period period65 = mutableInterval62.toPeriod();
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadablePeriod) period65);
        boolean boolean67 = mutableInterval43.isBefore((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean68 = mutableInterval39.contains((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean70 = mutableInterval39.isBefore(1606267300789L);
        mutableInterval39.setStartMillis((long) 0);
        org.joda.time.MutableInterval mutableInterval73 = mutableInterval39.toMutableInterval();
        boolean boolean74 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.DateTime dateTime75 = mutableInterval3.getEnd();
        org.joda.time.MutableInterval mutableInterval76 = mutableInterval3.toMutableInterval();
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(mutableInterval73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(mutableInterval76);
    }

    @Test
    @Ignore
  public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) interval25);
        org.joda.time.MutableInterval mutableInterval31 = mutableInterval12.copy();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableInstant32, readablePeriod33);
        mutableInterval34.setDurationBeforeEnd((long) 10);
        org.joda.time.ReadableInterval readableInterval37 = null;
        boolean boolean38 = mutableInterval34.isBefore(readableInterval37);
        org.joda.time.Chronology chronology39 = mutableInterval34.getChronology();
        boolean boolean40 = mutableInterval31.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    @Ignore
  public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.copy();
        boolean boolean11 = mutableInterval3.contains(1606267286325L);
        org.joda.time.DateTime dateTime12 = mutableInterval3.getStart();
        java.lang.Class<?> wildcardClass13 = dateTime12.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Period period6 = mutableInterval2.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval21.getStart();
        mutableInterval11.setInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readablePeriod8, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readablePeriod7, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean44 = mutableInterval2.isAfter((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime35, readableInstant45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(readableDuration48, readableInstant49);
        org.joda.time.MutableInterval mutableInterval51 = mutableInterval50.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval52 = mutableInterval50.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval53 = mutableInterval52.copy();
        org.joda.time.Duration duration54 = mutableInterval52.toDuration();
        boolean boolean55 = interval47.isBefore((org.joda.time.ReadableInterval) mutableInterval52);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(mutableInterval51);
        org.junit.Assert.assertNotNull(mutableInterval52);
        org.junit.Assert.assertNotNull(mutableInterval53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    @Ignore
  public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        mutableInterval5.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        boolean boolean19 = mutableInterval14.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        java.lang.Object obj26 = mutableInterval24.clone();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(obj26, chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutableInterval28.setPeriodAfterStart(readablePeriod29);
        org.joda.time.Period period31 = mutableInterval28.toPeriod();
        mutableInterval14.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period31);
        mutableInterval5.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        mutableInterval37.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        long long46 = interval45.getEndMillis();
        boolean boolean48 = interval45.isAfter((long) (byte) 100);
        boolean boolean49 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) interval45);
        org.joda.time.Duration duration50 = mutableInterval37.toDuration();
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(readableInstant52, readablePeriod53);
        mutableInterval54.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval57 = mutableInterval54.toMutableInterval();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        long long62 = mutableInterval61.toDurationMillis();
        mutableInterval54.setInterval((org.joda.time.ReadableInterval) mutableInterval61);
        mutableInterval54.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        mutableInterval73.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        mutableInterval80.setDurationAfterStart((long) (byte) 1);
        boolean boolean85 = mutableInterval80.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology86 = mutableInterval80.getChronology();
        mutableInterval73.setChronology(chronology86);
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology86);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology86);
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval54, chronology86);
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval5, chronology86);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval(1606267453805L, 1606267320112L, chronology86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(mutableInterval57);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(chronology86);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        mutableInterval3.setStartMillis((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant12 = null;
        mutableInterval3.setEnd(readableInstant12);
        long long14 = mutableInterval3.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267440002L, 1606267373313L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        long long6 = mutableInterval3.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval21.getStart();
        mutableInterval11.setInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readablePeriod8, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readablePeriod7, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean44 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        java.lang.Object obj50 = mutableInterval48.clone();
        org.joda.time.Interval interval51 = mutableInterval48.toInterval();
        org.joda.time.ReadableInterval readableInterval52 = null;
        boolean boolean53 = mutableInterval48.isBefore(readableInterval52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology56);
        boolean boolean58 = mutableInterval48.isAfter((org.joda.time.ReadableInterval) mutableInterval57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.DateTime dateTime64 = mutableInterval62.getStart();
        boolean boolean65 = mutableInterval48.isBefore((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Period period66 = mutableInterval48.toPeriod();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadablePeriod) period66);
        boolean boolean68 = mutableInterval67.isAfterNow();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval67, chronology69);
        mutableInterval70.setDurationBeforeEnd(1606267485023L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    @Ignore
  public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        long long21 = interval20.getEndMillis();
        boolean boolean23 = interval20.isAfter((long) (byte) 100);
        boolean boolean24 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Duration duration25 = mutableInterval12.toDuration();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableInstant32, readablePeriod33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        mutableInterval34.setInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime46);
        mutableInterval3.setEnd((org.joda.time.ReadableInstant) dateTime46);
        java.lang.Object obj51 = mutableInterval3.clone();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        mutableInterval62.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, 1L, chronology68);
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        mutableInterval69.setDurationAfterStart((long) (byte) 1);
        boolean boolean74 = mutableInterval69.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology75 = mutableInterval69.getChronology();
        mutableInterval62.setChronology(chronology75);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology75);
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((java.lang.Object) interval56, chronology75);
        mutableInterval3.setChronology(chronology75);
        org.joda.time.DateTime dateTime80 = mutableInterval3.getEnd();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(0L, 1L, chronology83);
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        mutableInterval84.setDurationBeforeEnd(1606267445889L);
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology90);
        org.joda.time.ReadablePeriod readablePeriod92 = null;
        mutableInterval91.setPeriodBeforeEnd(readablePeriod92);
        org.joda.time.Period period94 = mutableInterval91.toPeriod();
        mutableInterval84.setPeriodAfterStart((org.joda.time.ReadablePeriod) period94);
        org.joda.time.MutableInterval mutableInterval96 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime80, (org.joda.time.ReadablePeriod) period94);
        boolean boolean97 = mutableInterval96.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    @Ignore
  public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableInterval25.setPeriodAfterStart(readablePeriod26);
        org.joda.time.Period period28 = mutableInterval25.toPeriod();
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval25.copy();
        boolean boolean30 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Interval interval31 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        java.lang.Object obj37 = mutableInterval35.clone();
        org.joda.time.Interval interval38 = mutableInterval35.toInterval();
        mutableInterval35.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        java.lang.Object obj46 = mutableInterval44.clone();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(obj46, chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        mutableInterval48.setPeriodBeforeEnd(readablePeriod49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        mutableInterval54.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        long long63 = interval62.getEndMillis();
        boolean boolean65 = interval62.isAfter((long) (byte) 100);
        boolean boolean66 = mutableInterval54.overlaps((org.joda.time.ReadableInterval) interval62);
        org.joda.time.Duration duration67 = mutableInterval54.toDuration();
        boolean boolean68 = mutableInterval48.isBefore((org.joda.time.ReadableInterval) mutableInterval54);
        org.joda.time.MutableInterval mutableInterval69 = mutableInterval54.toMutableInterval();
        boolean boolean70 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval69);
        boolean boolean71 = mutableInterval3.isBefore((org.joda.time.ReadableInterval) mutableInterval69);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        mutableInterval75.setDurationAfterStart((long) (byte) 1);
        boolean boolean80 = mutableInterval75.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology81 = mutableInterval75.getChronology();
        org.joda.time.MutableInterval mutableInterval82 = mutableInterval75.toMutableInterval();
        org.joda.time.DateTime dateTime83 = mutableInterval82.getStart();
        mutableInterval3.setStart((org.joda.time.ReadableInstant) dateTime83);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(mutableInterval69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(mutableInterval82);
        org.junit.Assert.assertNotNull(dateTime83);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (-1), (long) (byte) 100);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, 1L, chronology5);
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.DateTime dateTime8 = mutableInterval6.getStart();
        org.joda.time.Interval interval9 = mutableInterval6.toInterval();
        boolean boolean10 = mutableInterval2.isAfter((org.joda.time.ReadableInterval) mutableInterval6);
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval6.copy();
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mutableInterval11);
    }

    @Test
    @Ignore
  public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Duration duration12 = mutableInterval9.toDuration();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(readableInstant13, readablePeriod14);
        mutableInterval15.setDurationBeforeEnd(1L);
        boolean boolean18 = mutableInterval15.isAfterNow();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(obj24, chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableInterval26.setPeriodBeforeEnd(readablePeriod27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        mutableInterval32.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        long long41 = interval40.getEndMillis();
        boolean boolean43 = interval40.isAfter((long) (byte) 100);
        boolean boolean44 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Duration duration45 = mutableInterval32.toDuration();
        boolean boolean46 = mutableInterval26.isBefore((org.joda.time.ReadableInterval) mutableInterval32);
        org.joda.time.MutableInterval mutableInterval47 = mutableInterval32.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(readableInstant49, readablePeriod50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        org.joda.time.DateTime dateTime63 = mutableInterval61.getStart();
        mutableInterval51.setInterval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(readablePeriod48, (org.joda.time.ReadableInstant) dateTime57);
        mutableInterval32.setEnd((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean67 = mutableInterval15.contains((org.joda.time.ReadableInterval) mutableInterval32);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(readableInstant68, readablePeriod69);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(0L, 1L, chronology73);
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        org.joda.time.DateTime dateTime76 = mutableInterval74.getStart();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        org.joda.time.DateTime dateTime82 = mutableInterval80.getStart();
        mutableInterval70.setInterval((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) dateTime82);
        mutableInterval15.setStart((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.PeriodType periodType85 = null;
        org.joda.time.Period period86 = mutableInterval15.toPeriod(periodType85);
        mutableInterval9.setPeriodAfterStart((org.joda.time.ReadablePeriod) period86);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(period86);
    }

    @Test
    @Ignore
  public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setEndMillis((long) '4');
        mutableInterval3.setInterval(35L, 1606267378593L);
        org.joda.time.DateTime dateTime11 = mutableInterval3.getStart();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    @Ignore
  public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        mutableInterval5.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        mutableInterval5.setChronology(chronology18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) '4', (long) 'a', chronology18);
        boolean boolean21 = mutableInterval20.isBeforeNow();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((long) (-1), (long) (byte) 100);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.DateTime dateTime30 = mutableInterval28.getStart();
        org.joda.time.Interval interval31 = mutableInterval28.toInterval();
        boolean boolean32 = mutableInterval24.isAfter((org.joda.time.ReadableInterval) mutableInterval28);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(readableDuration33, readableInstant34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutableInterval39.setPeriodBeforeEnd(readablePeriod40);
        mutableInterval35.setInterval((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        java.lang.Object obj48 = mutableInterval46.clone();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(obj48, chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        mutableInterval50.setPeriodAfterStart(readablePeriod51);
        org.joda.time.Period period53 = mutableInterval50.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(readableInstant56, readablePeriod57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.DateTime dateTime64 = mutableInterval62.getStart();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        mutableInterval58.setInterval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(readablePeriod55, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(readablePeriod54, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(readableInstant74, readablePeriod75);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        org.joda.time.DateTime dateTime82 = mutableInterval80.getStart();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.DateTime dateTime88 = mutableInterval86.getStart();
        mutableInterval76.setInterval((org.joda.time.ReadableInstant) dateTime82, (org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period53, (org.joda.time.ReadableInstant) dateTime82);
        mutableInterval35.setPeriodAfterStart((org.joda.time.ReadablePeriod) period53);
        mutableInterval24.setPeriodAfterStart((org.joda.time.ReadablePeriod) period53);
        mutableInterval20.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period53);
        org.joda.time.MutableInterval mutableInterval95 = mutableInterval20.copy();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(mutableInterval95);
    }

    @Test
    @Ignore
  public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        boolean boolean71 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Period period72 = mutableInterval13.toPeriod();
        boolean boolean74 = mutableInterval13.isBefore(1606267328717L);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(readableInstant75, readablePeriod76);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        org.joda.time.DateTime dateTime83 = mutableInterval81.getStart();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval(0L, 1L, chronology86);
        org.joda.time.Interval interval88 = mutableInterval87.toInterval();
        org.joda.time.DateTime dateTime89 = mutableInterval87.getStart();
        mutableInterval77.setInterval((org.joda.time.ReadableInstant) dateTime83, (org.joda.time.ReadableInstant) dateTime89);
        boolean boolean91 = mutableInterval13.isAfter((org.joda.time.ReadableInstant) dateTime83);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    @Ignore
  public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology20 = mutableInterval9.getChronology();
        long long21 = mutableInterval9.toDurationMillis();
        mutableInterval9.setDurationAfterStart(1606267331417L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        mutableInterval26.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        mutableInterval32.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology37 = mutableInterval32.getChronology();
        mutableInterval26.setChronology(chronology37);
        mutableInterval9.setChronology(chronology37);
        boolean boolean41 = mutableInterval9.isAfter(1606267300789L);
        long long42 = mutableInterval9.getEndMillis();
        org.joda.time.MutableInterval mutableInterval43 = mutableInterval9.copy();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1606267284827L + "'", long21 == 1606267284827L);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1606267331452L + "'", long42 == 1606267331452L);
        org.junit.Assert.assertNotNull(mutableInterval43);
    }

    @Test
    @Ignore
  public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableInstant5, readablePeriod6);
        long long8 = mutableInterval7.getEndMillis();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval7.copy();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(readableDuration10, readableInstant11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = mutableInterval12.toPeriod(periodType13);
        mutableInterval7.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTime dateTime16 = mutableInterval7.getStart();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(obj22, chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutableInterval24.setPeriodBeforeEnd(readablePeriod25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        java.lang.Object obj48 = mutableInterval46.clone();
        org.joda.time.Interval interval49 = mutableInterval46.toInterval();
        org.joda.time.ReadableInterval readableInterval50 = null;
        boolean boolean51 = mutableInterval46.isBefore(readableInterval50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology54);
        boolean boolean56 = mutableInterval46.isAfter((org.joda.time.ReadableInterval) mutableInterval55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        boolean boolean63 = mutableInterval46.isBefore((org.joda.time.ReadableInstant) dateTime62);
        mutableInterval24.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime62);
        boolean boolean65 = mutableInterval7.isAfter((org.joda.time.ReadableInstant) dateTime62);
        boolean boolean66 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        org.joda.time.Chronology chronology67 = mutableInterval2.getChronology();
        java.lang.Object obj68 = mutableInterval2.clone();
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1606267520930L + "'", long8 == 1606267520930L);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(obj68);
// flaky:         org.junit.Assert.assertEquals(obj68.toString(), "2020-11-25T01:25:20.929Z/2020-11-25T01:25:20.930Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "2020-11-25T01:25:20.929Z/2020-11-25T01:25:20.930Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "2020-11-25T01:25:20.929Z/2020-11-25T01:25:20.930Z");
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodAfterStart(readablePeriod4);
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval3.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.overlaps(readableInterval7);
        mutableInterval3.setStartMillis((long) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval21.getStart();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        mutableInterval26.setInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = mutableInterval14.isBefore((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        mutableInterval45.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        long long54 = interval53.getEndMillis();
        boolean boolean56 = interval53.isAfter((long) (byte) 100);
        boolean boolean57 = mutableInterval45.overlaps((org.joda.time.ReadableInterval) interval53);
        org.joda.time.Duration duration58 = mutableInterval45.toDuration();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.DateTime dateTime64 = mutableInterval62.getStart();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(readableInstant65, readablePeriod66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval77.getStart();
        mutableInterval67.setInterval((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration58, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.Duration duration84 = mutableInterval83.toDuration();
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration84);
        org.joda.time.DateTime dateTime86 = mutableInterval3.getEnd();
        mutableInterval3.setDurationAfterStart(1606267381298L);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    @Ignore
  public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval5 = null;
        boolean boolean6 = mutableInterval3.isAfter(readableInterval5);
        boolean boolean8 = mutableInterval3.isBefore(1606267308130L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        mutableInterval11.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval14 = mutableInterval11.toMutableInterval();
        org.joda.time.DateTime dateTime15 = mutableInterval14.getEnd();
        org.joda.time.MutableInterval mutableInterval16 = mutableInterval14.toMutableInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        mutableInterval20.setDurationAfterStart((long) (byte) 1);
        mutableInterval20.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        java.lang.Object obj37 = mutableInterval35.clone();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(obj37, chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutableInterval39.setPeriodAfterStart(readablePeriod40);
        org.joda.time.Period period42 = mutableInterval39.toPeriod();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadablePeriod) period42);
        boolean boolean44 = mutableInterval20.isBefore((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean45 = mutableInterval16.contains((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean46 = mutableInterval3.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime47 = mutableInterval3.getEnd();
        long long48 = mutableInterval3.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
    }

    @Test
    @Ignore
  public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        boolean boolean8 = interval6.contains(1606267332182L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(readableInstant15, readablePeriod16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval21.getStart();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        org.joda.time.DateTime dateTime29 = mutableInterval27.getStart();
        mutableInterval17.setInterval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = mutableInterval31.getStart();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getEnd();
        boolean boolean34 = interval6.contains((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        java.lang.Object obj46 = mutableInterval44.clone();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(obj46, chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        mutableInterval48.setPeriodAfterStart(readablePeriod49);
        org.joda.time.Period period51 = mutableInterval48.toPeriod();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadablePeriod) period51);
        org.joda.time.Chronology chronology53 = mutableInterval52.getChronology();
        boolean boolean54 = interval6.isAfter((org.joda.time.ReadableInterval) mutableInterval52);
        long long55 = mutableInterval52.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
    }

    @Test
    @Ignore
  public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.copy();
        mutableInterval3.setDurationAfterStart(1606267383956L);
        org.joda.time.Chronology chronology12 = mutableInterval3.getChronology();
        mutableInterval3.setDurationBeforeEnd(1606267482758L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    @Ignore
  public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        mutableInterval22.setDurationAfterStart((long) (byte) 1);
        boolean boolean27 = mutableInterval22.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology28 = mutableInterval22.getChronology();
        mutableInterval15.setChronology(chronology28);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = mutableInterval15.toPeriod(periodType30);
        mutableInterval9.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(readableInstant33, readablePeriod34);
        mutableInterval35.setDurationBeforeEnd(1L);
        boolean boolean38 = mutableInterval35.isAfterNow();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        java.lang.Object obj44 = mutableInterval42.clone();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(obj44, chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableInterval46.setPeriodBeforeEnd(readablePeriod47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        mutableInterval52.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        long long61 = interval60.getEndMillis();
        boolean boolean63 = interval60.isAfter((long) (byte) 100);
        boolean boolean64 = mutableInterval52.overlaps((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Duration duration65 = mutableInterval52.toDuration();
        boolean boolean66 = mutableInterval46.isBefore((org.joda.time.ReadableInterval) mutableInterval52);
        org.joda.time.MutableInterval mutableInterval67 = mutableInterval52.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(readableInstant69, readablePeriod70);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        org.joda.time.DateTime dateTime77 = mutableInterval75.getStart();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        org.joda.time.DateTime dateTime83 = mutableInterval81.getStart();
        mutableInterval71.setInterval((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(readablePeriod68, (org.joda.time.ReadableInstant) dateTime77);
        mutableInterval52.setEnd((org.joda.time.ReadableInstant) dateTime77);
        boolean boolean87 = mutableInterval35.contains((org.joda.time.ReadableInterval) mutableInterval52);
        org.joda.time.DateTime dateTime88 = mutableInterval52.getEnd();
        boolean boolean89 = mutableInterval9.contains((org.joda.time.ReadableInstant) dateTime88);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(mutableInterval67);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    @Ignore
  public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Period period28 = mutableInterval7.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((java.lang.Object) period28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period28);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267331452L, 1606267377694L);
    }

    @Test
    @Ignore
  public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        boolean boolean25 = mutableInterval22.isBefore((long) (short) 10);
        org.joda.time.Interval interval26 = mutableInterval22.toInterval();
        mutableInterval22.setDurationAfterStart(1606267286325L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        java.lang.Object obj40 = mutableInterval38.clone();
        java.lang.Object obj41 = mutableInterval38.clone();
        boolean boolean42 = mutableInterval32.equals((java.lang.Object) mutableInterval38);
        org.joda.time.Interval interval43 = mutableInterval38.toInterval();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        java.lang.Object obj49 = mutableInterval47.clone();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(obj49, chronology50);
        org.joda.time.DateTime dateTime52 = mutableInterval51.getEnd();
        boolean boolean53 = interval43.contains((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = mutableInterval22.isBefore((org.joda.time.ReadableInstant) dateTime52);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    @Ignore
  public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        mutableInterval3.setEndMillis((long) '#');
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = mutableInterval3.toPeriod(periodType20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        mutableInterval25.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        long long34 = interval33.getEndMillis();
        boolean boolean36 = interval33.isAfter((long) (byte) 100);
        boolean boolean37 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) interval33);
        org.joda.time.Duration duration38 = mutableInterval25.toDuration();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(readableInstant45, readablePeriod46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.DateTime dateTime59 = mutableInterval57.getStart();
        mutableInterval47.setInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(readableInstant63, readablePeriod64);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, 1L, chronology68);
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        org.joda.time.DateTime dateTime71 = mutableInterval69.getStart();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        org.joda.time.DateTime dateTime77 = mutableInterval75.getStart();
        mutableInterval65.setInterval((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime71);
        java.lang.Object obj80 = mutableInterval79.clone();
        org.joda.time.Period period81 = mutableInterval79.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period81);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period81);
    }

    @Test
    @Ignore
  public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        java.lang.Object obj27 = mutableInterval25.clone();
        org.joda.time.Interval interval28 = mutableInterval25.toInterval();
        org.joda.time.ReadableInterval readableInterval29 = null;
        boolean boolean30 = mutableInterval25.isBefore(readableInterval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology33);
        boolean boolean35 = mutableInterval25.isAfter((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        boolean boolean42 = mutableInterval25.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period20, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration44 = mutableInterval43.toDuration();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
    }

    @Test
    @Ignore
  public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.MutableInterval mutableInterval8 = mutableInterval3.toMutableInterval();
        org.joda.time.Period period9 = mutableInterval8.toPeriod();
        long long10 = mutableInterval8.getEndMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    @Ignore
  public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        boolean boolean9 = mutableInterval3.isAfter(1606267352998L);
        boolean boolean11 = mutableInterval3.contains(1606267433818L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    @Ignore
  public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(readableInstant2, readablePeriod3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.DateTime dateTime10 = mutableInterval8.getStart();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        mutableInterval4.setInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readablePeriod1, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readableInstant20, readablePeriod21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        mutableInterval22.setInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        java.lang.Object obj42 = mutableInterval40.clone();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(obj42, chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        mutableInterval44.setPeriodAfterStart(readablePeriod45);
        org.joda.time.Period period47 = mutableInterval44.toPeriod();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        java.lang.Object obj53 = mutableInterval51.clone();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(obj53, chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutableInterval55.setPeriodAfterStart(readablePeriod56);
        org.joda.time.Period period58 = mutableInterval55.toPeriod();
        mutableInterval44.setPeriodAfterStart((org.joda.time.ReadablePeriod) period58);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadablePeriod) period58);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period58, readableInstant61);
        boolean boolean63 = mutableInterval62.containsNow();
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    @Ignore
  public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableInterval3.contains(readableInstant7);
        java.lang.Class<?> wildcardClass9 = mutableInterval3.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval5.toMutableInterval();
        org.joda.time.DateTime dateTime8 = mutableInterval7.getStart();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        long long21 = interval20.getEndMillis();
        boolean boolean23 = interval20.isAfter((long) (byte) 100);
        boolean boolean24 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Duration duration25 = mutableInterval12.toDuration();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableInstant32, readablePeriod33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        mutableInterval34.setInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutableInterval49.setPeriodAfterStart(readablePeriod50);
        org.joda.time.Chronology chronology52 = mutableInterval49.getChronology();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval7, chronology52);
        boolean boolean54 = mutableInterval7.isBeforeNow();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval7.setEndMillis(1606267477158L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    @Ignore
  public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableInterval3.setDurationAfterStart(readableDuration6);
        boolean boolean8 = mutableInterval3.isAfterNow();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        java.lang.Object obj21 = mutableInterval19.clone();
        org.joda.time.Interval interval22 = mutableInterval19.toInterval();
        org.joda.time.ReadableInterval readableInterval23 = null;
        boolean boolean24 = mutableInterval19.isBefore(readableInterval23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology27);
        boolean boolean29 = mutableInterval19.isAfter((org.joda.time.ReadableInterval) mutableInterval28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        boolean boolean36 = mutableInterval19.isBefore((org.joda.time.ReadableInstant) dateTime35);
        boolean boolean37 = mutableInterval12.contains((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        java.lang.Object obj43 = mutableInterval41.clone();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(obj43, chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        mutableInterval45.setPeriodAfterStart(readablePeriod46);
        org.joda.time.Period period48 = mutableInterval45.toPeriod();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        java.lang.Object obj54 = mutableInterval52.clone();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(obj54, chronology55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        mutableInterval56.setPeriodAfterStart(readablePeriod57);
        org.joda.time.Period period59 = mutableInterval56.toPeriod();
        mutableInterval45.setPeriodAfterStart((org.joda.time.ReadablePeriod) period59);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadablePeriod) period59);
        boolean boolean62 = mutableInterval3.equals((java.lang.Object) period59);
        boolean boolean64 = mutableInterval3.isAfter((long) (byte) 10);
        org.joda.time.MutableInterval mutableInterval65 = mutableInterval3.toMutableInterval();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, 1L, chronology68);
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        org.joda.time.DateTime dateTime71 = mutableInterval69.getStart();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        java.lang.Object obj77 = mutableInterval75.clone();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(obj77, chronology78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        mutableInterval79.setPeriodAfterStart(readablePeriod80);
        org.joda.time.Period period82 = mutableInterval79.toPeriod();
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadablePeriod) period82);
        org.joda.time.Chronology chronology84 = mutableInterval83.getChronology();
        java.lang.Object obj85 = mutableInterval83.clone();
        org.joda.time.ReadableInstant readableInstant86 = null;
        boolean boolean87 = mutableInterval83.isBefore(readableInstant86);
        org.joda.time.MutableInterval mutableInterval88 = mutableInterval83.copy();
        boolean boolean89 = mutableInterval65.isAfter((org.joda.time.ReadableInterval) mutableInterval88);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(mutableInterval65);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertEquals(obj85.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj85), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj85), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(mutableInterval88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    @Ignore
  public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.copy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableInterval13.setDurationBeforeEnd(readableDuration14);
        long long16 = mutableInterval13.getEndMillis();
        long long17 = mutableInterval13.getStartMillis();
        mutableInterval13.setEndMillis(1606267286325L);
        mutableInterval9.setInterval((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        java.lang.Object obj28 = mutableInterval26.clone();
        org.joda.time.Interval interval29 = mutableInterval26.toInterval();
        org.joda.time.ReadableInterval readableInterval30 = null;
        boolean boolean31 = mutableInterval26.isBefore(readableInterval30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        mutableInterval35.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        mutableInterval42.setDurationAfterStart((long) (byte) 1);
        boolean boolean47 = mutableInterval42.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology48 = mutableInterval42.getChronology();
        mutableInterval35.setChronology(chronology48);
        mutableInterval26.setChronology(chronology48);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(1L, 1606267294649L, chronology48);
        long long52 = mutableInterval51.getStartMillis();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = mutableInterval51.toPeriod(periodType53);
        mutableInterval13.setPeriodAfterStart((org.joda.time.ReadablePeriod) period54);
        boolean boolean56 = mutableInterval13.containsNow();
        mutableInterval13.setEndMillis(1606267420273L);
        org.joda.time.MutableInterval mutableInterval59 = mutableInterval13.copy();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(mutableInterval59);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean59 = mutableInterval57.isBefore((long) (byte) 1);
        long long60 = mutableInterval57.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
    }

    @Test
    @Ignore
  public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        java.lang.Object obj10 = mutableInterval8.clone();
        mutableInterval8.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology13 = mutableInterval8.getChronology();
        mutableInterval2.setChronology(chronology13);
        mutableInterval2.setStartMillis(1L);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval2.copy();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Interval interval24 = mutableInterval21.toInterval();
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = mutableInterval21.isBefore(readableInterval25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        mutableInterval30.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        mutableInterval37.setDurationAfterStart((long) (byte) 1);
        boolean boolean42 = mutableInterval37.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        mutableInterval30.setChronology(chronology43);
        mutableInterval21.setChronology(chronology43);
        long long46 = mutableInterval21.getEndMillis();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        java.lang.Object obj52 = mutableInterval50.clone();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(obj52, chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutableInterval54.setPeriodBeforeEnd(readablePeriod55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        mutableInterval60.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        long long69 = interval68.getEndMillis();
        boolean boolean71 = interval68.isAfter((long) (byte) 100);
        boolean boolean72 = mutableInterval60.overlaps((org.joda.time.ReadableInterval) interval68);
        org.joda.time.Duration duration73 = mutableInterval60.toDuration();
        boolean boolean74 = mutableInterval54.isBefore((org.joda.time.ReadableInterval) mutableInterval60);
        org.joda.time.MutableInterval mutableInterval75 = mutableInterval60.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(readableInstant77, readablePeriod78);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        org.joda.time.DateTime dateTime85 = mutableInterval83.getStart();
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval(0L, 1L, chronology88);
        org.joda.time.Interval interval90 = mutableInterval89.toInterval();
        org.joda.time.DateTime dateTime91 = mutableInterval89.getStart();
        mutableInterval79.setInterval((org.joda.time.ReadableInstant) dateTime85, (org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.MutableInterval mutableInterval93 = new org.joda.time.MutableInterval(readablePeriod76, (org.joda.time.ReadableInstant) dateTime85);
        mutableInterval60.setEnd((org.joda.time.ReadableInstant) dateTime85);
        boolean boolean95 = mutableInterval21.isAfter((org.joda.time.ReadableInstant) dateTime85);
        boolean boolean96 = mutableInterval2.isBefore((org.joda.time.ReadableInterval) mutableInterval21);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(mutableInterval75);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.joda.time.Chronology chronology2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(1606267405917L, (long) (short) -1, chronology2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(readableInstant2, readablePeriod3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.DateTime dateTime10 = mutableInterval8.getStart();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        mutableInterval4.setInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readablePeriod1, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        java.lang.Object obj26 = mutableInterval24.clone();
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableInterval24.setDurationAfterStart(readableDuration27);
        boolean boolean29 = mutableInterval24.isAfterNow();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        mutableInterval33.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        java.lang.Object obj42 = mutableInterval40.clone();
        org.joda.time.Interval interval43 = mutableInterval40.toInterval();
        org.joda.time.ReadableInterval readableInterval44 = null;
        boolean boolean45 = mutableInterval40.isBefore(readableInterval44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology48);
        boolean boolean50 = mutableInterval40.isAfter((org.joda.time.ReadableInterval) mutableInterval49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        org.joda.time.DateTime dateTime56 = mutableInterval54.getStart();
        boolean boolean57 = mutableInterval40.isBefore((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean58 = mutableInterval33.contains((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        java.lang.Object obj64 = mutableInterval62.clone();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(obj64, chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        mutableInterval66.setPeriodAfterStart(readablePeriod67);
        org.joda.time.Period period69 = mutableInterval66.toPeriod();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        java.lang.Object obj75 = mutableInterval73.clone();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(obj75, chronology76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        mutableInterval77.setPeriodAfterStart(readablePeriod78);
        org.joda.time.Period period80 = mutableInterval77.toPeriod();
        mutableInterval66.setPeriodAfterStart((org.joda.time.ReadablePeriod) period80);
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadablePeriod) period80);
        boolean boolean83 = mutableInterval24.equals((java.lang.Object) period80);
        mutableInterval20.setPeriodAfterStart((org.joda.time.ReadablePeriod) period80);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    @Ignore
  public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        mutableInterval22.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        long long31 = interval30.getEndMillis();
        boolean boolean33 = interval30.isAfter((long) (byte) 100);
        boolean boolean34 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) interval30);
        org.joda.time.Duration duration35 = mutableInterval22.toDuration();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readableInstant42, readablePeriod43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        org.joda.time.DateTime dateTime56 = mutableInterval54.getStart();
        mutableInterval44.setInterval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) dateTime56);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        mutableInterval3.setDurationBeforeEnd(1606267439263L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:23:52.779Z/2020-11-25T01:23:52.779Z");
        org.junit.Assert.assertNotNull(mutableInterval1);
    }

    @Test
    @Ignore
  public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        long long20 = mutableInterval17.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readablePeriod22, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(readablePeriod21, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean58 = mutableInterval17.isBefore((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        mutableInterval62.setDurationAfterStart((long) (byte) 1);
        boolean boolean67 = mutableInterval62.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        java.lang.Object obj73 = mutableInterval71.clone();
        mutableInterval71.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology76 = mutableInterval71.getChronology();
        mutableInterval62.setChronology(chronology76);
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval17, chronology76);
        mutableInterval3.setChronology(chronology76);
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((long) (-1), (long) (byte) 100);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.DateTime dateTime88 = mutableInterval86.getStart();
        org.joda.time.Interval interval89 = mutableInterval86.toInterval();
        boolean boolean90 = mutableInterval82.isAfter((org.joda.time.ReadableInterval) mutableInterval86);
        boolean boolean91 = mutableInterval86.isAfterNow();
        mutableInterval86.setDurationAfterStart(1606267332576L);
        boolean boolean94 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval86);
        long long95 = mutableInterval86.getEndMillis();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval86.setStartMillis(1606267521089L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 1606267332576L + "'", long95 == 1606267332576L);
    }

    @Test
    @Ignore
  public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        boolean boolean22 = mutableInterval17.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology23 = mutableInterval17.getChronology();
        mutableInterval10.setChronology(chronology23);
        mutableInterval10.setEndMillis((long) '#');
        org.joda.time.Duration duration27 = mutableInterval10.toDuration();
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setStartMillis(97L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(duration27);
    }

    @Test
    @Ignore
  public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        boolean boolean20 = interval13.isBefore((org.joda.time.ReadableInterval) mutableInterval17);
        boolean boolean22 = mutableInterval17.isAfter((long) (short) 1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableInterval26.setPeriodAfterStart(readablePeriod27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(readableInstant29, readablePeriod30);
        mutableInterval31.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        mutableInterval37.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        long long46 = interval45.getEndMillis();
        boolean boolean48 = interval45.isAfter((long) (byte) 100);
        boolean boolean49 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) interval45);
        org.joda.time.Duration duration50 = mutableInterval37.toDuration();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        mutableInterval54.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        long long63 = interval62.getEndMillis();
        boolean boolean65 = interval62.isAfter((long) (byte) 100);
        boolean boolean66 = mutableInterval54.overlaps((org.joda.time.ReadableInterval) interval62);
        org.joda.time.Duration duration67 = mutableInterval54.toDuration();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(readableInstant74, readablePeriod75);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        org.joda.time.DateTime dateTime82 = mutableInterval80.getStart();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.DateTime dateTime88 = mutableInterval86.getStart();
        mutableInterval76.setInterval((org.joda.time.ReadableInstant) dateTime82, (org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration67, (org.joda.time.ReadableInstant) dateTime88);
        mutableInterval37.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration67);
        mutableInterval31.setInterval((org.joda.time.ReadableInterval) mutableInterval37);
        boolean boolean94 = mutableInterval26.contains((org.joda.time.ReadableInterval) mutableInterval37);
        boolean boolean95 = mutableInterval17.contains((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.DateTime dateTime96 = mutableInterval37.getEnd();
        boolean boolean97 = mutableInterval3.equals((java.lang.Object) mutableInterval37);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        mutableInterval3.setEndMillis((long) '#');
        org.joda.time.Duration duration20 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readablePeriod26, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readablePeriod25, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(readableInstant45, readablePeriod46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.DateTime dateTime59 = mutableInterval57.getStart();
        mutableInterval47.setInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime62 = mutableInterval61.getStart();
        mutableInterval61.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean66 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(readablePeriod67, (org.joda.time.ReadableInstant) dateTime73);
        mutableInterval61.setStart((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Period period77 = mutableInterval76.toPeriod();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        boolean boolean84 = mutableInterval81.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval85 = mutableInterval81.copy();
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration89 = null;
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval(readableDuration89, readableInstant90);
        org.joda.time.PeriodType periodType92 = null;
        org.joda.time.Period period93 = mutableInterval91.toPeriod(periodType92);
        mutableInterval88.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period93);
        mutableInterval85.setPeriodAfterStart((org.joda.time.ReadablePeriod) period93);
        boolean boolean96 = mutableInterval76.isBefore((org.joda.time.ReadableInterval) mutableInterval85);
        org.joda.time.MutableInterval mutableInterval97 = mutableInterval76.copy();
        boolean boolean98 = mutableInterval97.isAfterNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(mutableInterval85);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(mutableInterval97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    @Ignore
  public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, 1L, chronology5);
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.DateTime dateTime8 = mutableInterval6.getStart();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        org.joda.time.Interval interval15 = mutableInterval12.toInterval();
        org.joda.time.ReadableInterval readableInterval16 = null;
        boolean boolean17 = mutableInterval12.isBefore(readableInterval16);
        org.joda.time.MutableInterval mutableInterval18 = mutableInterval12.copy();
        boolean boolean19 = mutableInterval6.contains((org.joda.time.ReadableInterval) mutableInterval12);
        mutableInterval12.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology23 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(obj2, chronology23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(1606267420449L, 1606267420273L, chronology23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology23);
    }

    @Test
    @Ignore
  public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.copy();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(interval10);
    }

    @Test
    @Ignore
  public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(obj7, chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        mutableInterval9.setPeriodBeforeEnd(readablePeriod10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        long long24 = interval23.getEndMillis();
        boolean boolean26 = interval23.isAfter((long) (byte) 100);
        boolean boolean27 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Duration duration28 = mutableInterval15.toDuration();
        boolean boolean29 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.MutableInterval mutableInterval30 = mutableInterval15.toMutableInterval();
        java.lang.String str31 = mutableInterval30.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        java.lang.Object obj37 = mutableInterval35.clone();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(obj37, chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutableInterval39.setPeriodBeforeEnd(readablePeriod40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readableInstant42, readablePeriod43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        org.joda.time.DateTime dateTime56 = mutableInterval54.getStart();
        mutableInterval44.setInterval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        java.lang.Object obj63 = mutableInterval61.clone();
        org.joda.time.Interval interval64 = mutableInterval61.toInterval();
        org.joda.time.ReadableInterval readableInterval65 = null;
        boolean boolean66 = mutableInterval61.isBefore(readableInterval65);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology69);
        boolean boolean71 = mutableInterval61.isAfter((org.joda.time.ReadableInterval) mutableInterval70);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        org.joda.time.DateTime dateTime77 = mutableInterval75.getStart();
        boolean boolean78 = mutableInterval61.isBefore((org.joda.time.ReadableInstant) dateTime77);
        mutableInterval39.setInterval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime77);
        boolean boolean80 = mutableInterval30.isAfter((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology81 = mutableInterval30.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(1606267504289L, 1606267385730L, chronology81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str31, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(chronology81);
    }

    @Test
    @Ignore
  public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology20 = mutableInterval9.getChronology();
        boolean boolean21 = mutableInterval9.isBeforeNow();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = mutableInterval9.toPeriod(periodType22);
        boolean boolean25 = mutableInterval9.contains(1606267328092L);
        mutableInterval9.setDurationBeforeEnd(1606267503551L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        mutableInterval3.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        long long11 = mutableInterval10.getEndMillis();
        boolean boolean12 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        boolean boolean13 = mutableInterval10.isAfterNow();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(readableInstant14, readablePeriod15);
        mutableInterval16.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval16.toMutableInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval19.getEnd();
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval19.toMutableInterval();
        boolean boolean22 = mutableInterval10.equals((java.lang.Object) mutableInterval19);
        org.joda.time.Period period23 = mutableInterval10.toPeriod();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        mutableInterval31.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        mutableInterval38.setDurationAfterStart((long) (byte) 1);
        boolean boolean43 = mutableInterval38.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology44 = mutableInterval38.getChronology();
        mutableInterval31.setChronology(chronology44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology44);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(1606267320112L, 1606267327298L, chronology44);
        boolean boolean48 = mutableInterval10.contains((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.MutableInterval mutableInterval49 = mutableInterval10.toMutableInterval();
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1606267523195L + "'", long11 == 1606267523195L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mutableInterval49);
    }

    @Test
    @Ignore
  public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readablePeriod5, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readablePeriod4, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        mutableInterval26.setInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime41 = mutableInterval40.getStart();
        mutableInterval40.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean45 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        java.lang.Object obj51 = mutableInterval49.clone();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(obj51, chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutableInterval53.setPeriodBeforeEnd(readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        long long68 = interval67.getEndMillis();
        boolean boolean70 = interval67.isAfter((long) (byte) 100);
        boolean boolean71 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Duration duration72 = mutableInterval59.toDuration();
        boolean boolean73 = mutableInterval53.isBefore((org.joda.time.ReadableInterval) mutableInterval59);
        org.joda.time.MutableInterval mutableInterval74 = mutableInterval59.toMutableInterval();
        java.lang.String str75 = mutableInterval74.toString();
        java.lang.String str76 = mutableInterval74.toString();
        boolean boolean77 = mutableInterval40.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        org.joda.time.ReadableInterval readableInterval78 = null;
        boolean boolean79 = mutableInterval74.isAfter(readableInterval78);
        org.joda.time.Interval interval80 = mutableInterval74.toInterval();
        boolean boolean82 = interval80.isBefore(1606267324058L);
        org.joda.time.ReadableInterval readableInterval83 = null;
        boolean boolean84 = interval80.isAfter(readableInterval83);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str75, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str76, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    @Ignore
  public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(readableInstant4, readablePeriod5);
        mutableInterval6.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval6.toMutableInterval();
        org.joda.time.DateTime dateTime10 = mutableInterval9.getEnd();
        boolean boolean11 = mutableInterval2.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(readableDuration12, readableInstant13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        mutableInterval18.setPeriodBeforeEnd(readablePeriod19);
        mutableInterval14.setInterval((org.joda.time.ReadableInterval) mutableInterval18);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        java.lang.Object obj27 = mutableInterval25.clone();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(obj27, chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutableInterval29.setPeriodAfterStart(readablePeriod30);
        org.joda.time.Period period32 = mutableInterval29.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(readableInstant35, readablePeriod36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        org.joda.time.DateTime dateTime43 = mutableInterval41.getStart();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        mutableInterval37.setInterval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(readablePeriod34, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(readablePeriod33, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(readableInstant53, readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        mutableInterval55.setInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period32, (org.joda.time.ReadableInstant) dateTime61);
        mutableInterval14.setPeriodAfterStart((org.joda.time.ReadablePeriod) period32);
        mutableInterval2.setPeriodAfterStart((org.joda.time.ReadablePeriod) period32);
        java.lang.String str73 = mutableInterval2.toString();
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267523331L + "'", long3 == 1606267523331L);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2020-11-25T01:25:23.331Z/2020-11-25T01:25:23.331Z" + "'", str73, "2020-11-25T01:25:23.331Z/2020-11-25T01:25:23.331Z");
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(readableInstant2, readablePeriod3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.DateTime dateTime10 = mutableInterval8.getStart();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        mutableInterval4.setInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readablePeriod1, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = mutableInterval19.toPeriod(periodType20);
        boolean boolean22 = mutableInterval19.containsNow();
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    @Ignore
  public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = mutableInterval10.isBefore(readableInterval14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology18);
        boolean boolean20 = mutableInterval10.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        boolean boolean27 = mutableInterval10.isBefore((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(obj34, chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        mutableInterval36.setPeriodAfterStart(readablePeriod37);
        org.joda.time.Period period39 = mutableInterval36.toPeriod();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        java.lang.Object obj45 = mutableInterval43.clone();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(obj45, chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        mutableInterval47.setPeriodAfterStart(readablePeriod48);
        org.joda.time.Period period50 = mutableInterval47.toPeriod();
        mutableInterval36.setPeriodAfterStart((org.joda.time.ReadablePeriod) period50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadablePeriod) period50);
        boolean boolean54 = mutableInterval52.contains((long) (byte) 10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        long long59 = mutableInterval58.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval60 = mutableInterval58.copy();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        java.lang.Object obj66 = mutableInterval64.clone();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(obj66, chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        mutableInterval68.setPeriodBeforeEnd(readablePeriod69);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(0L, 1L, chronology73);
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        mutableInterval74.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        long long83 = interval82.getEndMillis();
        boolean boolean85 = interval82.isAfter((long) (byte) 100);
        boolean boolean86 = mutableInterval74.overlaps((org.joda.time.ReadableInterval) interval82);
        org.joda.time.Duration duration87 = mutableInterval74.toDuration();
        boolean boolean88 = mutableInterval68.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        org.joda.time.MutableInterval mutableInterval89 = mutableInterval74.toMutableInterval();
        java.lang.String str90 = mutableInterval89.toString();
        boolean boolean91 = mutableInterval89.containsNow();
        org.joda.time.Duration duration92 = mutableInterval89.toDuration();
        mutableInterval60.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration92);
        mutableInterval52.setInterval((org.joda.time.ReadableInterval) mutableInterval60);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval60);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(mutableInterval89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str90, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(duration92);
    }

    @Test
    @Ignore
  public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval5.isAfterNow();
        org.joda.time.MutableInterval mutableInterval8 = mutableInterval5.toMutableInterval();
        org.joda.time.DateTime dateTime9 = mutableInterval5.getStart();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        long long18 = mutableInterval17.getStartMillis();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        long long25 = mutableInterval22.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(readableInstant28, readablePeriod29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        mutableInterval30.setInterval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readablePeriod27, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(readablePeriod26, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(readableInstant46, readablePeriod47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        mutableInterval48.setInterval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime54);
        boolean boolean63 = mutableInterval22.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        mutableInterval67.setDurationAfterStart((long) (byte) 1);
        boolean boolean72 = mutableInterval67.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        java.lang.Object obj78 = mutableInterval76.clone();
        mutableInterval76.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology81 = mutableInterval76.getChronology();
        mutableInterval67.setChronology(chronology81);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval22, chronology81);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval17, chronology81);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval5, chronology81);
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(1606267324058L, 1606267414694L, chronology81);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology81);
    }

    @Test
    @Ignore
  public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.DateTime dateTime25 = mutableInterval23.getStart();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(readableInstant26, readablePeriod27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        mutableInterval28.setInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime40);
        boolean boolean43 = mutableInterval9.isAfter((org.joda.time.ReadableInstant) dateTime40);
        long long44 = mutableInterval9.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 35L + "'", long44 == 35L);
    }

    @Test
    @Ignore
  public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        boolean boolean10 = mutableInterval3.contains((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableInstant11, readablePeriod12);
        mutableInterval13.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval16 = mutableInterval13.toMutableInterval();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval16);
        long long18 = mutableInterval3.getEndMillis();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        mutableInterval26.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        mutableInterval33.setDurationAfterStart((long) (byte) 1);
        boolean boolean38 = mutableInterval33.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology39 = mutableInterval33.getChronology();
        mutableInterval26.setChronology(chronology39);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology39);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology39);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        java.lang.Object obj48 = mutableInterval46.clone();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(obj48, chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        mutableInterval50.setPeriodAfterStart(readablePeriod51);
        org.joda.time.Period period53 = mutableInterval50.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(readableInstant56, readablePeriod57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.DateTime dateTime64 = mutableInterval62.getStart();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        mutableInterval58.setInterval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(readablePeriod55, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(readablePeriod54, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(readableInstant74, readablePeriod75);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        org.joda.time.DateTime dateTime82 = mutableInterval80.getStart();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.DateTime dateTime88 = mutableInterval86.getStart();
        mutableInterval76.setInterval((org.joda.time.ReadableInstant) dateTime82, (org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period53, (org.joda.time.ReadableInstant) dateTime82);
        boolean boolean92 = mutableInterval42.isBefore((org.joda.time.ReadableInstant) dateTime82);
        mutableInterval42.setInterval(1L, (long) '#');
        boolean boolean96 = mutableInterval3.isBefore((org.joda.time.ReadableInterval) mutableInterval42);
        org.joda.time.DateTime dateTime97 = mutableInterval42.getEnd();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mutableInterval16);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1606267523963L + "'", long18 == 1606267523963L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    @Ignore
  public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        long long9 = mutableInterval3.toDurationMillis();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(readableInstant10, readablePeriod11);
        mutableInterval12.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval12.toMutableInterval();
        org.joda.time.Period period16 = mutableInterval12.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(readableInstant19, readablePeriod20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval25.getStart();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getStart();
        mutableInterval21.setInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(readablePeriod18, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readablePeriod17, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readableInstant37, readablePeriod38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        mutableInterval39.setInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime45);
        boolean boolean54 = mutableInterval12.isAfter((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean55 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean56 = mutableInterval3.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    @Ignore
  public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.DateTime dateTime8 = mutableInterval7.getEnd();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        mutableInterval12.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology17 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval18 = mutableInterval12.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval12.copy();
        org.joda.time.Duration duration20 = mutableInterval12.toDuration();
        org.joda.time.DateTime dateTime21 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        mutableInterval25.setDurationAfterStart((long) (byte) 1);
        boolean boolean30 = mutableInterval25.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        mutableInterval34.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology39 = mutableInterval34.getChronology();
        mutableInterval25.setChronology(chronology39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        java.lang.Object obj53 = mutableInterval51.clone();
        org.joda.time.Interval interval54 = mutableInterval51.toInterval();
        org.joda.time.ReadableInterval readableInterval55 = null;
        boolean boolean56 = mutableInterval51.isBefore(readableInterval55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology59);
        boolean boolean61 = mutableInterval51.isAfter((org.joda.time.ReadableInterval) mutableInterval60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        boolean boolean68 = mutableInterval51.isBefore((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean69 = mutableInterval44.contains((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean70 = mutableInterval25.isAfter((org.joda.time.ReadableInstant) dateTime67);
        mutableInterval7.setInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.ReadableInstant readableInstant72 = null;
        mutableInterval7.setEnd(readableInstant72);
        mutableInterval7.setStartMillis(1606267501929L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    @Ignore
  public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean6 = mutableInterval3.contains((long) ' ');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.DateTime dateTime19 = mutableInterval17.getStart();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readableInstant20, readablePeriod21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        mutableInterval22.setInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime34);
        boolean boolean37 = mutableInterval10.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        mutableInterval41.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        long long50 = interval49.getEndMillis();
        boolean boolean52 = interval49.isAfter((long) (byte) 100);
        boolean boolean53 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) interval49);
        org.joda.time.Duration duration54 = mutableInterval41.toDuration();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(readableInstant61, readablePeriod62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        org.joda.time.DateTime dateTime69 = mutableInterval67.getStart();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        mutableInterval63.setInterval((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration54, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration54);
        mutableInterval3.setEnd((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(0L, 1L, chronology83);
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        java.lang.Object obj86 = mutableInterval84.clone();
        mutableInterval84.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology89 = mutableInterval84.getChronology();
        org.joda.time.PeriodType periodType90 = null;
        org.joda.time.Period period91 = mutableInterval84.toPeriod(periodType90);
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadablePeriod) period91);
        org.joda.time.PeriodType periodType93 = null;
        org.joda.time.Period period94 = mutableInterval92.toPeriod(periodType93);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertEquals(obj86.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj86), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj86), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(period94);
    }

    @Test
    @Ignore
  public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        org.joda.time.DateTime dateTime12 = mutableInterval10.getStart();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(obj18, chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        mutableInterval20.setPeriodAfterStart(readablePeriod21);
        org.joda.time.Period period23 = mutableInterval20.toPeriod();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadablePeriod) period23);
        boolean boolean25 = interval6.equals((java.lang.Object) dateTime12);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    @Ignore
  public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.copy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableInterval13.setDurationBeforeEnd(readableDuration14);
        long long16 = mutableInterval13.getEndMillis();
        long long17 = mutableInterval13.getStartMillis();
        mutableInterval13.setEndMillis(1606267286325L);
        mutableInterval9.setInterval((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        java.lang.Object obj28 = mutableInterval26.clone();
        org.joda.time.Interval interval29 = mutableInterval26.toInterval();
        org.joda.time.ReadableInterval readableInterval30 = null;
        boolean boolean31 = mutableInterval26.isBefore(readableInterval30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        mutableInterval35.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        mutableInterval42.setDurationAfterStart((long) (byte) 1);
        boolean boolean47 = mutableInterval42.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology48 = mutableInterval42.getChronology();
        mutableInterval35.setChronology(chronology48);
        mutableInterval26.setChronology(chronology48);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(1L, 1606267294649L, chronology48);
        long long52 = mutableInterval51.getStartMillis();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = mutableInterval51.toPeriod(periodType53);
        mutableInterval13.setPeriodAfterStart((org.joda.time.ReadablePeriod) period54);
        org.joda.time.ReadableInterval readableInterval56 = null;
        boolean boolean57 = mutableInterval13.overlaps(readableInterval56);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    @Ignore
  public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        mutableInterval5.setDurationAfterStart((long) (byte) 1);
        boolean boolean10 = mutableInterval5.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(10L, 1606267424102L, chronology11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        mutableInterval16.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        long long25 = interval24.getEndMillis();
        boolean boolean27 = interval24.isAfter((long) (byte) 100);
        boolean boolean28 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) interval24);
        org.joda.time.Duration duration29 = mutableInterval16.toDuration();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(readableInstant36, readablePeriod37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        mutableInterval38.setInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        mutableInterval57.setDurationAfterStart((long) (byte) 1);
        mutableInterval57.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        java.lang.Object obj74 = mutableInterval72.clone();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(obj74, chronology75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        mutableInterval76.setPeriodAfterStart(readablePeriod77);
        org.joda.time.Period period79 = mutableInterval76.toPeriod();
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadablePeriod) period79);
        boolean boolean81 = mutableInterval57.isBefore((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime68);
        mutableInterval12.setDurationAfterStart((org.joda.time.ReadableDuration) duration29);
        org.joda.time.MutableInterval mutableInterval84 = mutableInterval12.copy();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(mutableInterval84);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267284862L, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        mutableInterval22.setDurationAfterStart((long) 10);
        long long26 = mutableInterval22.getEndMillis();
        mutableInterval22.setDurationAfterStart(1606267385730L);
        mutableInterval22.setDurationAfterStart((long) (short) 0);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
    }

    @Test
    @Ignore
  public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(obj12, chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableInterval14.setPeriodAfterStart(readablePeriod15);
        org.joda.time.Period period17 = mutableInterval14.toPeriod();
        org.joda.time.MutableInterval mutableInterval18 = mutableInterval14.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.DateTime dateTime24 = mutableInterval22.getStart();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(readableInstant25, readablePeriod26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getStart();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        mutableInterval27.setInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime39);
        boolean boolean42 = mutableInterval18.isBefore((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime43 = mutableInterval18.getEnd();
        boolean boolean44 = interval6.contains((org.joda.time.ReadableInstant) dateTime43);
        long long45 = interval6.getEndMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
    }

    @Test
    @Ignore
  public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval5.toMutableInterval();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        mutableInterval11.setDurationAfterStart((long) (byte) 1);
        mutableInterval11.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        java.lang.Object obj28 = mutableInterval26.clone();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(obj28, chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutableInterval30.setPeriodAfterStart(readablePeriod31);
        org.joda.time.Period period33 = mutableInterval30.toPeriod();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadablePeriod) period33);
        boolean boolean35 = mutableInterval11.isBefore((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean36 = mutableInterval7.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean38 = mutableInterval7.isBefore(1606267300789L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        mutableInterval42.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        long long51 = interval50.getEndMillis();
        boolean boolean53 = interval50.isAfter((long) (byte) 100);
        boolean boolean54 = mutableInterval42.overlaps((org.joda.time.ReadableInterval) interval50);
        org.joda.time.Duration duration55 = mutableInterval42.toDuration();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(readableInstant56, readablePeriod57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.DateTime dateTime64 = mutableInterval62.getStart();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        mutableInterval58.setInterval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) dateTime70);
        boolean boolean73 = mutableInterval7.isAfter((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Period period74 = mutableInterval7.toPeriod();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(period74);
    }

    @Test
    @Ignore
  public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        mutableInterval5.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology10 = mutableInterval5.getChronology();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval5.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval12 = mutableInterval5.copy();
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval5.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readableInstant16, readablePeriod17);
        mutableInterval18.setDurationBeforeEnd(1L);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readableInstant21, readablePeriod22);
        long long24 = mutableInterval23.getEndMillis();
        org.joda.time.MutableInterval mutableInterval25 = mutableInterval23.copy();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(readableDuration26, readableInstant27);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = mutableInterval28.toPeriod(periodType29);
        mutableInterval23.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period30);
        org.joda.time.DateTime dateTime32 = mutableInterval23.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        java.lang.Object obj38 = mutableInterval36.clone();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(obj38, chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodBeforeEnd(readablePeriod41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(readableInstant43, readablePeriod44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        mutableInterval45.setInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        java.lang.Object obj64 = mutableInterval62.clone();
        org.joda.time.Interval interval65 = mutableInterval62.toInterval();
        org.joda.time.ReadableInterval readableInterval66 = null;
        boolean boolean67 = mutableInterval62.isBefore(readableInterval66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology70);
        boolean boolean72 = mutableInterval62.isAfter((org.joda.time.ReadableInterval) mutableInterval71);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        org.joda.time.DateTime dateTime78 = mutableInterval76.getStart();
        boolean boolean79 = mutableInterval62.isBefore((org.joda.time.ReadableInstant) dateTime78);
        mutableInterval40.setInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime78);
        boolean boolean81 = mutableInterval23.isAfter((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean82 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.Chronology chronology83 = mutableInterval18.getChronology();
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((long) (short) 1, 1606267332182L, chronology83);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval13, chronology83);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(1606267513696L, 1606267332182L, chronology83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(mutableInterval13);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1606267524921L + "'", long24 == 1606267524921L);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(chronology83);
    }

    @Test
    @Ignore
  public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology20 = mutableInterval9.getChronology();
        boolean boolean21 = mutableInterval9.isBeforeNow();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = mutableInterval9.toPeriod(periodType22);
        boolean boolean25 = mutableInterval9.contains(1606267328092L);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(readableInstant26, readablePeriod27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        mutableInterval28.setInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime40);
        boolean boolean42 = mutableInterval9.isBefore((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Period period43 = mutableInterval9.toPeriod();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period43);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        mutableInterval3.setEndMillis((long) '#');
        org.joda.time.Duration duration20 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readablePeriod26, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readablePeriod25, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(readableInstant45, readablePeriod46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.DateTime dateTime59 = mutableInterval57.getStart();
        mutableInterval47.setInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime62 = mutableInterval61.getStart();
        mutableInterval61.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean66 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(readablePeriod67, (org.joda.time.ReadableInstant) dateTime73);
        mutableInterval61.setStart((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Period period77 = mutableInterval76.toPeriod();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        boolean boolean84 = mutableInterval81.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval85 = mutableInterval81.copy();
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration89 = null;
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval(readableDuration89, readableInstant90);
        org.joda.time.PeriodType periodType92 = null;
        org.joda.time.Period period93 = mutableInterval91.toPeriod(periodType92);
        mutableInterval88.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period93);
        mutableInterval85.setPeriodAfterStart((org.joda.time.ReadablePeriod) period93);
        boolean boolean96 = mutableInterval76.isBefore((org.joda.time.ReadableInterval) mutableInterval85);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval76.setStartMillis(1606267523845L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(mutableInterval85);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    @Ignore
  public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableInstant5, readablePeriod6);
        long long8 = mutableInterval7.getEndMillis();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval7.copy();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(readableDuration10, readableInstant11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = mutableInterval12.toPeriod(periodType13);
        mutableInterval7.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTime dateTime16 = mutableInterval7.getStart();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(obj22, chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutableInterval24.setPeriodBeforeEnd(readablePeriod25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        java.lang.Object obj48 = mutableInterval46.clone();
        org.joda.time.Interval interval49 = mutableInterval46.toInterval();
        org.joda.time.ReadableInterval readableInterval50 = null;
        boolean boolean51 = mutableInterval46.isBefore(readableInterval50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology54);
        boolean boolean56 = mutableInterval46.isAfter((org.joda.time.ReadableInterval) mutableInterval55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        boolean boolean63 = mutableInterval46.isBefore((org.joda.time.ReadableInstant) dateTime62);
        mutableInterval24.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime62);
        boolean boolean65 = mutableInterval7.isAfter((org.joda.time.ReadableInstant) dateTime62);
        boolean boolean66 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        org.joda.time.Chronology chronology67 = mutableInterval2.getChronology();
        org.joda.time.Duration duration68 = mutableInterval2.toDuration();
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1606267525150L + "'", long8 == 1606267525150L);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(duration68);
    }

    @Test
    @Ignore
  public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (byte) 10, 1606267374606L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(readableInstant3, readablePeriod4);
        mutableInterval5.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval8 = mutableInterval5.toMutableInterval();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        long long13 = mutableInterval12.toDurationMillis();
        mutableInterval5.setInterval((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Duration duration15 = mutableInterval12.toDuration();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        java.lang.Object obj21 = mutableInterval19.clone();
        org.joda.time.Interval interval22 = mutableInterval19.toInterval();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutableInterval19.setPeriodAfterStart(readablePeriod23);
        mutableInterval19.setEndMillis((long) 100);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        mutableInterval30.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        java.lang.Object obj39 = mutableInterval37.clone();
        org.joda.time.Interval interval40 = mutableInterval37.toInterval();
        org.joda.time.ReadableInterval readableInterval41 = null;
        boolean boolean42 = mutableInterval37.isBefore(readableInterval41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology45);
        boolean boolean47 = mutableInterval37.isAfter((org.joda.time.ReadableInterval) mutableInterval46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        boolean boolean54 = mutableInterval37.isBefore((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean55 = mutableInterval30.contains((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean56 = mutableInterval19.isBefore((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval63 = mutableInterval61.copy();
        mutableInterval57.setInterval((org.joda.time.ReadableInterval) mutableInterval63);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval63);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval63);
    }

    @Test
    @Ignore
  public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval2.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        mutableInterval28.setDurationAfterStart((long) (byte) 1);
        boolean boolean33 = mutableInterval28.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology34 = mutableInterval28.getChronology();
        mutableInterval21.setChronology(chronology34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology34);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology34);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval2, chronology34);
        java.lang.String str39 = mutableInterval38.toString();
        boolean boolean40 = mutableInterval38.isBeforeNow();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.100Z" + "'", str39, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    @Ignore
  public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Period period10 = mutableInterval7.toPeriod();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        java.lang.Object obj16 = mutableInterval14.clone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(obj16, chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        mutableInterval18.setPeriodAfterStart(readablePeriod19);
        org.joda.time.Period period21 = mutableInterval18.toPeriod();
        mutableInterval7.setPeriodAfterStart((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        org.joda.time.Interval interval35 = mutableInterval32.toInterval();
        org.joda.time.ReadableInterval readableInterval36 = null;
        boolean boolean37 = mutableInterval32.isBefore(readableInterval36);
        org.joda.time.MutableInterval mutableInterval38 = mutableInterval32.copy();
        boolean boolean39 = mutableInterval26.contains((org.joda.time.ReadableInterval) mutableInterval32);
        mutableInterval32.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology43 = mutableInterval32.getChronology();
        boolean boolean44 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval32);
        boolean boolean45 = mutableInterval7.isAfterNow();
        boolean boolean46 = mutableInterval7.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        long long5 = interval4.getEndMillis();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        mutableInterval8.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval8.toMutableInterval();
        boolean boolean12 = interval4.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.ReadableInterval readableInterval18 = null;
        boolean boolean19 = mutableInterval16.isAfter(readableInterval18);
        org.joda.time.Duration duration20 = mutableInterval16.toDuration();
        mutableInterval8.setDurationAfterStart((org.joda.time.ReadableDuration) duration20);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(duration20);
    }

    @Test
    @Ignore
  public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        java.lang.Object obj10 = mutableInterval8.clone();
        mutableInterval8.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology13 = mutableInterval8.getChronology();
        mutableInterval2.setChronology(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(readableInstant15, readablePeriod16);
        mutableInterval17.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval20 = mutableInterval17.toMutableInterval();
        org.joda.time.Period period21 = mutableInterval17.toPeriod();
        mutableInterval17.setDurationBeforeEnd((long) '#');
        boolean boolean24 = mutableInterval2.isBefore((org.joda.time.ReadableInterval) mutableInterval17);
        boolean boolean26 = mutableInterval17.contains(1606267324130L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    @Ignore
  public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267332182L, 1606267424186L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, 1L, chronology5);
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        java.lang.Object obj8 = mutableInterval6.clone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(obj8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutableInterval10.setPeriodAfterStart(readablePeriod11);
        org.joda.time.Period period13 = mutableInterval10.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readableInstant16, readablePeriod17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.DateTime dateTime24 = mutableInterval22.getStart();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.DateTime dateTime30 = mutableInterval28.getStart();
        mutableInterval18.setInterval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readablePeriod15, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readablePeriod14, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readableInstant34, readablePeriod35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        mutableInterval36.setInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period13, (org.joda.time.ReadableInstant) dateTime42);
        boolean boolean52 = mutableInterval2.equals((java.lang.Object) period13);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    @Ignore
  public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        org.joda.time.Chronology chronology43 = mutableInterval40.getChronology();
        long long44 = mutableInterval40.getStartMillis();
        org.joda.time.MutableInterval mutableInterval45 = mutableInterval40.copy();
        java.lang.String str46 = mutableInterval40.toString();
        org.joda.time.MutableInterval mutableInterval47 = mutableInterval40.toMutableInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z" + "'", str46, "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(mutableInterval47);
    }

    @Test
    @Ignore
  public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        boolean boolean10 = mutableInterval3.contains((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        java.lang.Object obj16 = mutableInterval14.clone();
        org.joda.time.Interval interval17 = mutableInterval14.toInterval();
        boolean boolean19 = interval17.contains(1606267332182L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.DateTime dateTime25 = mutableInterval23.getStart();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(readableInstant26, readablePeriod27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        mutableInterval28.setInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime43 = mutableInterval42.getStart();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getEnd();
        boolean boolean45 = interval17.contains((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean46 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime44);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    @Ignore
  public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((java.lang.Object) str29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        java.lang.Object obj42 = mutableInterval40.clone();
        org.joda.time.Interval interval43 = mutableInterval40.toInterval();
        org.joda.time.ReadableInterval readableInterval44 = null;
        boolean boolean45 = mutableInterval40.isBefore(readableInterval44);
        org.joda.time.MutableInterval mutableInterval46 = mutableInterval40.copy();
        boolean boolean47 = mutableInterval34.contains((org.joda.time.ReadableInterval) mutableInterval40);
        mutableInterval40.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology51 = mutableInterval40.getChronology();
        long long52 = mutableInterval40.toDurationMillis();
        mutableInterval40.setDurationAfterStart(1606267331417L);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(readableInstant55, readablePeriod56);
        mutableInterval57.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        java.lang.Object obj65 = mutableInterval63.clone();
        mutableInterval63.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology68 = mutableInterval63.getChronology();
        mutableInterval57.setChronology(chronology68);
        mutableInterval40.setChronology(chronology68);
        boolean boolean71 = mutableInterval30.isBefore((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Chronology chronology72 = mutableInterval40.getChronology();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str29, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(mutableInterval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1606267284827L + "'", long52 == 1606267284827L);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(chronology72);
    }

    @Test
    @Ignore
  public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableInterval25.setPeriodAfterStart(readablePeriod26);
        org.joda.time.Period period28 = mutableInterval25.toPeriod();
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval25.copy();
        boolean boolean30 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(obj36, chronology37);
        boolean boolean39 = mutableInterval3.equals((java.lang.Object) mutableInterval38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        org.joda.time.MutableInterval mutableInterval42 = org.joda.time.MutableInterval.parse("1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z");
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        boolean boolean44 = mutableInterval3.isBefore((org.joda.time.ReadableInterval) mutableInterval42);
        mutableInterval42.setInterval(1606267375515L, 1606267396928L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267518870L, 1606267381215L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Duration duration12 = mutableInterval9.toDuration();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        java.lang.Object obj25 = mutableInterval22.clone();
        boolean boolean26 = mutableInterval16.equals((java.lang.Object) mutableInterval22);
        org.joda.time.Interval interval27 = mutableInterval22.toInterval();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        java.lang.Object obj33 = mutableInterval31.clone();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(obj33, chronology34);
        org.joda.time.DateTime dateTime36 = mutableInterval35.getEnd();
        boolean boolean37 = interval27.contains((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Period period39 = mutableInterval38.toPeriod();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readableDuration40, readableInstant41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(readableInstant43, readablePeriod44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        mutableInterval45.setInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = mutableInterval42.contains((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableInterval mutableInterval61 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        java.lang.Object obj67 = mutableInterval65.clone();
        org.joda.time.Interval interval68 = mutableInterval65.toInterval();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        java.lang.Object obj74 = mutableInterval72.clone();
        boolean boolean75 = interval68.isBefore((org.joda.time.ReadableInterval) mutableInterval72);
        boolean boolean76 = mutableInterval61.isAfter((org.joda.time.ReadableInterval) mutableInterval72);
        org.joda.time.MutableInterval mutableInterval77 = mutableInterval72.toMutableInterval();
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Period period79 = mutableInterval72.toPeriod(periodType78);
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadablePeriod) period79);
        boolean boolean81 = mutableInterval38.isAfter((org.joda.time.ReadableInstant) dateTime57);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(mutableInterval61);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(mutableInterval77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    @Ignore
  public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        mutableInterval5.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology10 = mutableInterval5.getChronology();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval5.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval12 = mutableInterval5.copy();
        org.joda.time.Duration duration13 = mutableInterval5.toDuration();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readableInstant16, readablePeriod17);
        mutableInterval18.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval18.toMutableInterval();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        long long26 = mutableInterval25.toDurationMillis();
        mutableInterval18.setInterval((org.joda.time.ReadableInterval) mutableInterval25);
        mutableInterval18.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        mutableInterval37.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        boolean boolean49 = mutableInterval44.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        mutableInterval37.setChronology(chronology50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology50);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology50);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval18, chronology50);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology50);
        mutableInterval5.setChronology(chronology50);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((long) ' ', (long) (short) 100, chronology50);
        org.joda.time.Chronology chronology58 = mutableInterval57.getChronology();
        long long59 = mutableInterval57.getEndMillis();
        boolean boolean60 = mutableInterval57.containsNow();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 100L + "'", long59 == 100L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    @Ignore
  public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.MutableInterval mutableInterval3 = mutableInterval2.toMutableInterval();
        org.joda.time.Interval interval4 = mutableInterval2.toInterval();
        mutableInterval2.setStartMillis((long) ' ');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        org.joda.time.DateTime dateTime12 = mutableInterval10.getStart();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        org.joda.time.Interval interval19 = mutableInterval16.toInterval();
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = mutableInterval16.isBefore(readableInterval20);
        org.joda.time.MutableInterval mutableInterval22 = mutableInterval16.copy();
        boolean boolean23 = mutableInterval10.contains((org.joda.time.ReadableInterval) mutableInterval16);
        mutableInterval16.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology27 = mutableInterval16.getChronology();
        long long28 = mutableInterval16.toDurationMillis();
        mutableInterval16.setDurationAfterStart(1606267331417L);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        mutableInterval33.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        java.lang.Object obj41 = mutableInterval39.clone();
        mutableInterval39.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology44 = mutableInterval39.getChronology();
        mutableInterval33.setChronology(chronology44);
        mutableInterval16.setChronology(chronology44);
        org.joda.time.DateTime dateTime47 = mutableInterval16.getEnd();
        long long48 = mutableInterval16.getEndMillis();
        org.joda.time.Period period49 = mutableInterval16.toPeriod();
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period49);
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1606267284827L + "'", long28 == 1606267284827L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1606267331452L + "'", long48 == 1606267331452L);
        org.junit.Assert.assertNotNull(period49);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodAfterStart(readablePeriod4);
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval3.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.overlaps(readableInterval7);
        mutableInterval3.setStartMillis((long) 0);
        org.joda.time.DateTime dateTime11 = mutableInterval3.getStart();
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    @Ignore
  public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        mutableInterval3.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        long long11 = mutableInterval10.getEndMillis();
        boolean boolean12 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        boolean boolean13 = mutableInterval10.isAfterNow();
        boolean boolean14 = mutableInterval10.isAfterNow();
        org.joda.time.Interval interval15 = mutableInterval10.toInterval();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readableInstant16, readablePeriod17);
        mutableInterval18.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval18.toMutableInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval21.getEnd();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        mutableInterval26.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        mutableInterval33.setDurationAfterStart((long) (byte) 1);
        boolean boolean38 = mutableInterval33.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology39 = mutableInterval33.getChronology();
        mutableInterval26.setChronology(chronology39);
        long long41 = mutableInterval26.getStartMillis();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        mutableInterval45.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        mutableInterval52.setDurationAfterStart((long) (byte) 1);
        boolean boolean57 = mutableInterval52.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology58 = mutableInterval52.getChronology();
        mutableInterval45.setChronology(chronology58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        java.lang.Object obj65 = mutableInterval63.clone();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(obj65, chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        mutableInterval67.setPeriodAfterStart(readablePeriod68);
        org.joda.time.Period period70 = mutableInterval67.toPeriod();
        org.joda.time.MutableInterval mutableInterval71 = mutableInterval67.copy();
        boolean boolean72 = mutableInterval45.isAfter((org.joda.time.ReadableInterval) mutableInterval67);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        java.lang.Object obj78 = mutableInterval76.clone();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(obj78, chronology79);
        boolean boolean81 = mutableInterval45.equals((java.lang.Object) mutableInterval80);
        boolean boolean82 = mutableInterval26.contains((org.joda.time.ReadableInterval) mutableInterval45);
        org.joda.time.Duration duration83 = mutableInterval26.toDuration();
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration83);
        mutableInterval10.setEnd((org.joda.time.ReadableInstant) dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1606267525962L + "'", long11 == 1606267525962L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(mutableInterval71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(duration83);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Period period6 = mutableInterval2.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval21.getStart();
        mutableInterval11.setInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readablePeriod8, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readablePeriod7, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean44 = mutableInterval2.isAfter((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime35, readableInstant45);
        boolean boolean48 = mutableInterval46.isAfter(1606267387514L);
        boolean boolean50 = mutableInterval46.isBefore(1606267419395L);
        org.joda.time.Chronology chronology51 = mutableInterval46.getChronology();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
    }

    @Test
    @Ignore
  public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        mutableInterval9.setDurationAfterStart((long) (byte) 1);
        boolean boolean14 = mutableInterval9.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology15 = mutableInterval9.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        java.lang.Object obj21 = mutableInterval19.clone();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(obj21, chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutableInterval23.setPeriodAfterStart(readablePeriod24);
        org.joda.time.Period period26 = mutableInterval23.toPeriod();
        mutableInterval9.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period26);
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period29 = mutableInterval3.toPeriod();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        mutableInterval32.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval35 = mutableInterval32.toMutableInterval();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        long long40 = mutableInterval39.toDurationMillis();
        mutableInterval32.setInterval((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.Duration duration42 = mutableInterval39.toDuration();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        java.lang.Object obj48 = mutableInterval46.clone();
        org.joda.time.Interval interval49 = mutableInterval46.toInterval();
        org.joda.time.ReadableInterval readableInterval50 = null;
        boolean boolean51 = mutableInterval46.isBefore(readableInterval50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology54);
        boolean boolean56 = mutableInterval46.isAfter((org.joda.time.ReadableInterval) mutableInterval55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        boolean boolean63 = mutableInterval46.isBefore((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = interval65.getEnd();
        mutableInterval3.setStart((org.joda.time.ReadableInstant) dateTime66);
        long long68 = mutableInterval3.getStartMillis();
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
    }

    @Test
    @Ignore
  public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.copy();
        boolean boolean11 = mutableInterval3.contains(1606267286325L);
        org.joda.time.DateTime dateTime12 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        mutableInterval16.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology21 = mutableInterval16.getChronology();
        org.joda.time.MutableInterval mutableInterval22 = mutableInterval16.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval23 = mutableInterval16.copy();
        org.joda.time.Duration duration24 = mutableInterval16.toDuration();
        org.joda.time.DateTime dateTime25 = mutableInterval16.getStart();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:24:52.102Z/2020-11-25T01:24:52.102Z");
        org.junit.Assert.assertNotNull(mutableInterval1);
    }

    @Test
    @Ignore
  public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.DateTime dateTime13 = mutableInterval11.getStart();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(readableInstant14, readablePeriod15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        mutableInterval16.setInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        mutableInterval33.setDurationBeforeEnd(1L);
        boolean boolean36 = mutableInterval30.contains((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval33);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(readableInstant38, readablePeriod39);
        mutableInterval40.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval43 = mutableInterval40.toMutableInterval();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        long long48 = mutableInterval47.toDurationMillis();
        mutableInterval40.setInterval((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.Duration duration50 = mutableInterval47.toDuration();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        java.lang.Object obj56 = mutableInterval54.clone();
        org.joda.time.Interval interval57 = mutableInterval54.toInterval();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        mutableInterval54.setPeriodAfterStart(readablePeriod58);
        mutableInterval54.setEndMillis((long) 100);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        mutableInterval65.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        java.lang.Object obj74 = mutableInterval72.clone();
        org.joda.time.Interval interval75 = mutableInterval72.toInterval();
        org.joda.time.ReadableInterval readableInterval76 = null;
        boolean boolean77 = mutableInterval72.isBefore(readableInterval76);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology80);
        boolean boolean82 = mutableInterval72.isAfter((org.joda.time.ReadableInterval) mutableInterval81);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.DateTime dateTime88 = mutableInterval86.getStart();
        boolean boolean89 = mutableInterval72.isBefore((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean90 = mutableInterval65.contains((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean91 = mutableInterval54.isBefore((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime88);
        mutableInterval37.setDurationAfterStart((org.joda.time.ReadableDuration) duration50);
        mutableInterval7.setDurationAfterStart((org.joda.time.ReadableDuration) duration50);
        org.joda.time.MutableInterval mutableInterval95 = mutableInterval7.copy();
        org.joda.time.Period period96 = mutableInterval7.toPeriod();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(mutableInterval95);
        org.junit.Assert.assertNotNull(period96);
    }

    @Test
    @Ignore
  public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval51);
        mutableInterval51.setEndMillis(0L);
        org.joda.time.MutableInterval mutableInterval67 = mutableInterval51.copy();
        org.joda.time.Period period68 = mutableInterval51.toPeriod();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(mutableInterval67);
        org.junit.Assert.assertNotNull(period68);
    }

    @Test
    @Ignore
  public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        mutableInterval3.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        org.joda.time.Interval interval15 = mutableInterval12.toInterval();
        mutableInterval12.setDurationBeforeEnd(0L);
        boolean boolean19 = mutableInterval12.contains((long) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        mutableInterval23.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        long long32 = interval31.getEndMillis();
        boolean boolean34 = interval31.isAfter((long) (byte) 100);
        boolean boolean35 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Duration duration36 = mutableInterval23.toDuration();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(readableInstant43, readablePeriod44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        mutableInterval45.setInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(readableInstant61, readablePeriod62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        org.joda.time.DateTime dateTime69 = mutableInterval67.getStart();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        mutableInterval63.setInterval((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime69);
        mutableInterval12.setDurationAfterStart((org.joda.time.ReadableDuration) duration36);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration36);
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        boolean boolean81 = mutableInterval3.isAfterNow();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(0L, 1L, chronology84);
        org.joda.time.Interval interval86 = mutableInterval85.toInterval();
        java.lang.Object obj87 = mutableInterval85.clone();
        org.joda.time.Interval interval88 = mutableInterval85.toInterval();
        org.joda.time.ReadableInterval readableInterval89 = null;
        boolean boolean90 = mutableInterval85.isBefore(readableInterval89);
        org.joda.time.MutableInterval mutableInterval91 = mutableInterval85.copy();
        boolean boolean93 = mutableInterval85.contains(1606267286325L);
        org.joda.time.DateTime dateTime94 = mutableInterval85.getStart();
        java.lang.Object obj95 = mutableInterval85.clone();
        org.joda.time.Duration duration96 = mutableInterval85.toDuration();
        boolean boolean97 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval85);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(mutableInterval91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(obj95);
        org.junit.Assert.assertEquals(obj95.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj95), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj95), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:22:01.599Z/2020-11-25T01:22:01.600Z");
        org.joda.time.Interval interval2 = mutableInterval1.toInterval();
        org.joda.time.MutableInterval mutableInterval3 = interval2.toMutableInterval();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setInterval(1606267371486L, 1606267324130L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(mutableInterval3);
    }

    @Test
    @Ignore
  public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval5 = null;
        boolean boolean6 = mutableInterval3.isAfter(readableInterval5);
        mutableInterval3.setEndMillis(1606267308130L);
        boolean boolean10 = mutableInterval3.isBefore(1606267332182L);
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval3.copy();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        long long24 = interval23.getEndMillis();
        boolean boolean26 = interval23.isAfter((long) (byte) 100);
        boolean boolean27 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Duration duration28 = mutableInterval15.toDuration();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(readableInstant35, readablePeriod36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        org.joda.time.DateTime dateTime43 = mutableInterval41.getStart();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        mutableInterval37.setInterval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(readableInstant53, readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        mutableInterval55.setInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        java.lang.Object obj75 = mutableInterval73.clone();
        org.joda.time.Interval interval76 = mutableInterval73.toInterval();
        org.joda.time.ReadableInterval readableInterval77 = null;
        boolean boolean78 = mutableInterval73.isBefore(readableInterval77);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology81);
        boolean boolean83 = mutableInterval73.isAfter((org.joda.time.ReadableInterval) mutableInterval82);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval(0L, 1L, chronology86);
        org.joda.time.Interval interval88 = mutableInterval87.toInterval();
        org.joda.time.DateTime dateTime89 = mutableInterval87.getStart();
        boolean boolean90 = mutableInterval73.isBefore((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime89);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    @Ignore
  public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        mutableInterval3.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        long long11 = mutableInterval10.getEndMillis();
        boolean boolean12 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.DateTime dateTime18 = mutableInterval16.getStart();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(obj24, chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableInterval26.setPeriodAfterStart(readablePeriod27);
        org.joda.time.Period period29 = mutableInterval26.toPeriod();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadablePeriod) period29);
        mutableInterval3.setStart((org.joda.time.ReadableInstant) dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1606267526624L + "'", long11 == 1606267526624L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        mutableInterval3.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        long long11 = mutableInterval10.getEndMillis();
        boolean boolean12 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        boolean boolean13 = mutableInterval10.isAfterNow();
        boolean boolean14 = mutableInterval10.isAfterNow();
        mutableInterval10.setInterval((long) (byte) 1, 1606267382508L);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = mutableInterval10.toPeriod(periodType18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readableInstant20, readablePeriod21);
        mutableInterval22.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval25 = mutableInterval22.toMutableInterval();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        long long30 = mutableInterval29.toDurationMillis();
        mutableInterval22.setInterval((org.joda.time.ReadableInterval) mutableInterval29);
        org.joda.time.DateTime dateTime32 = mutableInterval22.getStart();
        boolean boolean33 = mutableInterval10.contains((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.DateTime dateTime34 = mutableInterval22.getEnd();
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1606267526684L + "'", long11 == 1606267526684L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    @Ignore
  public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) 1);
        org.joda.time.DateTime dateTime8 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = mutableInterval12.copy();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableInterval12.setPeriodAfterStart(readablePeriod15);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = mutableInterval12.toPeriod(periodType18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadablePeriod) period19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        mutableInterval24.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getStart();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readableInstant34, readablePeriod35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        mutableInterval36.setInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime48);
        boolean boolean51 = mutableInterval24.isBefore((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        mutableInterval55.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        long long64 = interval63.getEndMillis();
        boolean boolean66 = interval63.isAfter((long) (byte) 100);
        boolean boolean67 = mutableInterval55.overlaps((org.joda.time.ReadableInterval) interval63);
        org.joda.time.Duration duration68 = mutableInterval55.toDuration();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        org.joda.time.DateTime dateTime74 = mutableInterval72.getStart();
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(readableInstant75, readablePeriod76);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        org.joda.time.DateTime dateTime83 = mutableInterval81.getStart();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval(0L, 1L, chronology86);
        org.joda.time.Interval interval88 = mutableInterval87.toInterval();
        org.joda.time.DateTime dateTime89 = mutableInterval87.getStart();
        mutableInterval77.setInterval((org.joda.time.ReadableInstant) dateTime83, (org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime74, (org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration68, (org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.MutableInterval mutableInterval93 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration68);
        boolean boolean94 = mutableInterval93.isBeforeNow();
        mutableInterval20.setInterval((org.joda.time.ReadableInterval) mutableInterval93);
        long long96 = mutableInterval20.getEndMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 1L + "'", long96 == 1L);
    }

    @Test
    @Ignore
  public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(obj7, chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        mutableInterval9.setPeriodBeforeEnd(readablePeriod10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(readableInstant12, readablePeriod13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        mutableInterval14.setInterval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        java.lang.Object obj33 = mutableInterval31.clone();
        org.joda.time.Interval interval34 = mutableInterval31.toInterval();
        org.joda.time.ReadableInterval readableInterval35 = null;
        boolean boolean36 = mutableInterval31.isBefore(readableInterval35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology39);
        boolean boolean41 = mutableInterval31.isAfter((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.joda.time.DateTime dateTime47 = mutableInterval45.getStart();
        boolean boolean48 = mutableInterval31.isBefore((org.joda.time.ReadableInstant) dateTime47);
        mutableInterval9.setInterval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Chronology chronology50 = mutableInterval9.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(1606267372991L, (long) ' ', chronology50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology50);
    }

    @Test
    @Ignore
  public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(obj11, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableInterval13.setPeriodAfterStart(readablePeriod14);
        org.joda.time.Period period16 = mutableInterval13.toPeriod();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant18, readablePeriod19);
        mutableInterval20.setDurationBeforeEnd(1L);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        long long26 = mutableInterval25.getEndMillis();
        org.joda.time.MutableInterval mutableInterval27 = mutableInterval25.copy();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(readableDuration28, readableInstant29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = mutableInterval30.toPeriod(periodType31);
        mutableInterval25.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTime dateTime34 = mutableInterval25.getStart();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        java.lang.Object obj40 = mutableInterval38.clone();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(obj40, chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        mutableInterval42.setPeriodBeforeEnd(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(readableInstant45, readablePeriod46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.DateTime dateTime59 = mutableInterval57.getStart();
        mutableInterval47.setInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        java.lang.Object obj66 = mutableInterval64.clone();
        org.joda.time.Interval interval67 = mutableInterval64.toInterval();
        org.joda.time.ReadableInterval readableInterval68 = null;
        boolean boolean69 = mutableInterval64.isBefore(readableInterval68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology72);
        boolean boolean74 = mutableInterval64.isAfter((org.joda.time.ReadableInterval) mutableInterval73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        org.joda.time.DateTime dateTime80 = mutableInterval78.getStart();
        boolean boolean81 = mutableInterval64.isBefore((org.joda.time.ReadableInstant) dateTime80);
        mutableInterval42.setInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime80);
        boolean boolean83 = mutableInterval25.isAfter((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean84 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology85 = mutableInterval20.getChronology();
        mutableInterval17.setChronology(chronology85);
        boolean boolean87 = mutableInterval17.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period16);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1606267526884L + "'", long26 == 1606267526884L);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:23:20.815Z/2020-11-25T01:23:20.815Z");
        long long2 = mutableInterval1.toDurationMillis();
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    @Ignore
  public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.Chronology chronology8 = mutableInterval7.getChronology();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(readableInstant15, readablePeriod16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval21.getStart();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        org.joda.time.DateTime dateTime29 = mutableInterval27.getStart();
        mutableInterval17.setInterval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(readablePeriod14, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readablePeriod13, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(readableInstant33, readablePeriod34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.joda.time.DateTime dateTime47 = mutableInterval45.getStart();
        mutableInterval35.setInterval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime50 = mutableInterval49.getStart();
        mutableInterval49.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean54 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval49);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        java.lang.Object obj60 = mutableInterval58.clone();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(obj60, chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        mutableInterval62.setPeriodBeforeEnd(readablePeriod63);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        mutableInterval68.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        long long77 = interval76.getEndMillis();
        boolean boolean79 = interval76.isAfter((long) (byte) 100);
        boolean boolean80 = mutableInterval68.overlaps((org.joda.time.ReadableInterval) interval76);
        org.joda.time.Duration duration81 = mutableInterval68.toDuration();
        boolean boolean82 = mutableInterval62.isBefore((org.joda.time.ReadableInterval) mutableInterval68);
        org.joda.time.MutableInterval mutableInterval83 = mutableInterval68.toMutableInterval();
        java.lang.String str84 = mutableInterval83.toString();
        java.lang.String str85 = mutableInterval83.toString();
        boolean boolean86 = mutableInterval49.isBefore((org.joda.time.ReadableInterval) mutableInterval83);
        boolean boolean87 = mutableInterval7.contains((org.joda.time.ReadableInterval) mutableInterval49);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval49.setStartMillis(1606267432779L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(mutableInterval83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str84, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str85, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    @Ignore
  public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (-1), (long) (byte) 100);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, 1L, chronology5);
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        java.lang.Object obj8 = mutableInterval6.clone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(obj8, chronology9);
        org.joda.time.DateTime dateTime11 = mutableInterval10.getEnd();
        boolean boolean12 = mutableInterval2.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        mutableInterval16.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology21 = mutableInterval16.getChronology();
        org.joda.time.MutableInterval mutableInterval22 = mutableInterval16.toMutableInterval();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        java.lang.Object obj28 = mutableInterval26.clone();
        java.lang.Object obj29 = mutableInterval26.clone();
        org.joda.time.MutableInterval mutableInterval30 = mutableInterval26.copy();
        org.joda.time.Duration duration31 = mutableInterval26.toDuration();
        boolean boolean32 = mutableInterval22.contains((org.joda.time.ReadableInterval) mutableInterval26);
        boolean boolean33 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.Interval interval34 = mutableInterval2.toInterval();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readableInstant37, readablePeriod38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        mutableInterval39.setInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(readablePeriod36, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(readablePeriod35, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(readableInstant55, readablePeriod56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        org.joda.time.DateTime dateTime63 = mutableInterval61.getStart();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        org.joda.time.DateTime dateTime69 = mutableInterval67.getStart();
        mutableInterval57.setInterval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        java.lang.Object obj77 = mutableInterval75.clone();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(obj77, chronology78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        mutableInterval79.setPeriodAfterStart(readablePeriod80);
        org.joda.time.Period period82 = mutableInterval79.toPeriod();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        java.lang.Object obj88 = mutableInterval86.clone();
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval(obj88, chronology89);
        org.joda.time.ReadablePeriod readablePeriod91 = null;
        mutableInterval90.setPeriodAfterStart(readablePeriod91);
        org.joda.time.Period period93 = mutableInterval90.toPeriod();
        mutableInterval79.setPeriodAfterStart((org.joda.time.ReadablePeriod) period93);
        org.joda.time.MutableInterval mutableInterval95 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadablePeriod) period93);
        boolean boolean96 = interval34.isBefore((org.joda.time.ReadableInstant) dateTime45);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    @Ignore
  public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setDurationAfterStart((long) 1);
        org.joda.time.MutableInterval mutableInterval33 = mutableInterval12.toMutableInterval();
        long long34 = mutableInterval33.getEndMillis();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(readableInstant35, readablePeriod36);
        mutableInterval37.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval37.toMutableInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        long long45 = mutableInterval44.toDurationMillis();
        mutableInterval37.setInterval((org.joda.time.ReadableInterval) mutableInterval44);
        org.joda.time.DateTime dateTime47 = mutableInterval37.getStart();
        org.joda.time.ReadableInstant readableInstant48 = null;
        mutableInterval33.setInterval((org.joda.time.ReadableInstant) dateTime47, readableInstant48);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        mutableInterval22.setDurationAfterStart((long) 10);
        org.joda.time.Interval interval26 = mutableInterval22.toInterval();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableDuration27, readableInstant28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        mutableInterval33.setPeriodBeforeEnd(readablePeriod34);
        mutableInterval29.setInterval((org.joda.time.ReadableInterval) mutableInterval33);
        mutableInterval22.setInterval((org.joda.time.ReadableInterval) mutableInterval29);
        boolean boolean39 = mutableInterval29.contains(1606267338812L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    @Ignore
  public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        java.lang.Object obj70 = mutableInterval68.clone();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(obj70, chronology71);
        org.joda.time.Duration duration73 = mutableInterval72.toDuration();
        mutableInterval13.setDurationAfterStart((org.joda.time.ReadableDuration) duration73);
        boolean boolean76 = mutableInterval13.isBefore(0L);
        org.joda.time.MutableInterval mutableInterval77 = mutableInterval13.toMutableInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(mutableInterval77);
    }

    @Test
    @Ignore
  public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.MutableInterval mutableInterval8 = mutableInterval7.toMutableInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(mutableInterval8);
    }

    @Test
    @Ignore
  public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval5 = null;
        boolean boolean6 = mutableInterval3.isAfter(readableInterval5);
        boolean boolean8 = mutableInterval3.isBefore(1606267308130L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        mutableInterval11.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval14 = mutableInterval11.toMutableInterval();
        org.joda.time.DateTime dateTime15 = mutableInterval14.getEnd();
        org.joda.time.MutableInterval mutableInterval16 = mutableInterval14.toMutableInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        mutableInterval20.setDurationAfterStart((long) (byte) 1);
        mutableInterval20.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        java.lang.Object obj37 = mutableInterval35.clone();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(obj37, chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutableInterval39.setPeriodAfterStart(readablePeriod40);
        org.joda.time.Period period42 = mutableInterval39.toPeriod();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadablePeriod) period42);
        boolean boolean44 = mutableInterval20.isBefore((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean45 = mutableInterval16.contains((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean46 = mutableInterval3.isAfter((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean47 = mutableInterval3.isBeforeNow();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.ReadableDuration readableDuration52 = null;
        mutableInterval51.setDurationBeforeEnd(readableDuration52);
        boolean boolean54 = mutableInterval51.isBeforeNow();
        org.joda.time.MutableInterval mutableInterval55 = mutableInterval51.toMutableInterval();
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.MutableInterval mutableInterval57 = mutableInterval55.toMutableInterval();
        boolean boolean58 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval55);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(mutableInterval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(mutableInterval57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    @Ignore
  public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        java.lang.Object obj70 = mutableInterval68.clone();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(obj70, chronology71);
        org.joda.time.Duration duration73 = mutableInterval72.toDuration();
        mutableInterval13.setDurationAfterStart((org.joda.time.ReadableDuration) duration73);
        boolean boolean75 = mutableInterval13.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        mutableInterval3.setEndMillis((long) '#');
        org.joda.time.Duration duration20 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readablePeriod26, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readablePeriod25, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(readableInstant45, readablePeriod46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.DateTime dateTime59 = mutableInterval57.getStart();
        mutableInterval47.setInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime62 = mutableInterval61.getStart();
        mutableInterval61.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean66 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(readablePeriod67, (org.joda.time.ReadableInstant) dateTime73);
        mutableInterval61.setStart((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Period period77 = mutableInterval76.toPeriod();
        org.joda.time.DateTime dateTime78 = mutableInterval76.getStart();
        boolean boolean79 = mutableInterval76.isAfterNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    @Ignore
  public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval3.setPeriodAfterStart(readablePeriod7);
        mutableInterval3.setEndMillis((long) 100);
        org.joda.time.Interval interval11 = mutableInterval3.toInterval();
        java.lang.String str12 = interval11.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.100Z" + "'", str12, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.100Z");
    }

    @Test
    @Ignore
  public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        java.lang.Object obj54 = mutableInterval52.clone();
        org.joda.time.Interval interval55 = mutableInterval52.toInterval();
        org.joda.time.ReadableInterval readableInterval56 = null;
        boolean boolean57 = mutableInterval52.isBefore(readableInterval56);
        org.joda.time.MutableInterval mutableInterval58 = mutableInterval52.copy();
        boolean boolean59 = mutableInterval46.contains((org.joda.time.ReadableInterval) mutableInterval52);
        mutableInterval52.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology63 = mutableInterval52.getChronology();
        boolean boolean64 = mutableInterval52.isBeforeNow();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(readableInstant65, readablePeriod66);
        mutableInterval67.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval70 = mutableInterval67.toMutableInterval();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(0L, 1L, chronology73);
        long long75 = mutableInterval74.toDurationMillis();
        mutableInterval67.setInterval((org.joda.time.ReadableInterval) mutableInterval74);
        boolean boolean77 = mutableInterval52.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Period period79 = mutableInterval52.toPeriod(periodType78);
        mutableInterval40.setPeriodAfterStart((org.joda.time.ReadablePeriod) period79);
        boolean boolean82 = mutableInterval40.equals((java.lang.Object) 0);
        org.joda.time.MutableInterval mutableInterval83 = mutableInterval40.copy();
        org.joda.time.DateTime dateTime84 = mutableInterval40.getStart();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(mutableInterval58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(mutableInterval70);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(mutableInterval83);
        org.junit.Assert.assertNotNull(dateTime84);
    }

    @Test
    @Ignore
  public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        boolean boolean71 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        java.lang.Object obj77 = mutableInterval75.clone();
        mutableInterval75.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology80 = mutableInterval75.getChronology();
        mutableInterval13.setChronology(chronology80);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(0L, 1L, chronology84);
        org.joda.time.Interval interval86 = mutableInterval85.toInterval();
        java.lang.Object obj87 = mutableInterval85.clone();
        org.joda.time.ReadableDuration readableDuration88 = null;
        mutableInterval85.setDurationAfterStart(readableDuration88);
        boolean boolean90 = mutableInterval85.isAfterNow();
        boolean boolean91 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval85);
        org.joda.time.Interval interval92 = mutableInterval85.toInterval();
        boolean boolean94 = mutableInterval85.isBefore(1606267286325L);
        java.lang.String str95 = mutableInterval85.toString();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval85.setStartMillis(1606267321599L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z" + "'", str95, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    @Ignore
  public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime48 = mutableInterval13.getEnd();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = mutableInterval13.toPeriod(periodType49);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(0L, 1L, chronology3);
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval4.getStart();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.MutableInterval mutableInterval8 = mutableInterval7.toMutableInterval();
        org.joda.time.Period period9 = mutableInterval7.toPeriod();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Period period6 = mutableInterval2.toPeriod();
        mutableInterval2.setDurationBeforeEnd((long) '#');
        boolean boolean10 = mutableInterval2.isBefore(1606267378593L);
        mutableInterval2.setDurationAfterStart(1606267403061L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    @Ignore
  public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval3.copy();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableInterval3.setPeriodAfterStart(readablePeriod6);
        java.lang.Object obj8 = mutableInterval3.clone();
        org.joda.time.DateTime dateTime9 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodBeforeEnd(readablePeriod18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readableInstant20, readablePeriod21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        mutableInterval22.setInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        java.lang.Object obj41 = mutableInterval39.clone();
        org.joda.time.Interval interval42 = mutableInterval39.toInterval();
        org.joda.time.ReadableInterval readableInterval43 = null;
        boolean boolean44 = mutableInterval39.isBefore(readableInterval43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology47);
        boolean boolean49 = mutableInterval39.isAfter((org.joda.time.ReadableInterval) mutableInterval48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        boolean boolean56 = mutableInterval39.isBefore((org.joda.time.ReadableInstant) dateTime55);
        mutableInterval17.setInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(readableInstant58, readablePeriod59);
        mutableInterval60.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval63 = mutableInterval60.toMutableInterval();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        long long68 = mutableInterval67.toDurationMillis();
        mutableInterval60.setInterval((org.joda.time.ReadableInterval) mutableInterval67);
        org.joda.time.Duration duration70 = mutableInterval67.toDuration();
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration70);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration70);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval72.setInterval(1606267477158L, 1606267422096L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(mutableInterval63);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertNotNull(duration70);
    }

    @Test
    @Ignore
  public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableInterval17.setDurationAfterStart(readableDuration20);
        boolean boolean22 = mutableInterval17.isAfterNow();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutableInterval27.setPeriodBeforeEnd(readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        mutableInterval33.setDurationAfterStart((long) (byte) 1);
        boolean boolean38 = mutableInterval33.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology39 = mutableInterval33.getChronology();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        java.lang.Object obj45 = mutableInterval43.clone();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(obj45, chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        mutableInterval47.setPeriodAfterStart(readablePeriod48);
        org.joda.time.Period period50 = mutableInterval47.toPeriod();
        mutableInterval33.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period50);
        mutableInterval27.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Period period53 = mutableInterval27.toPeriod();
        boolean boolean54 = mutableInterval27.isBeforeNow();
        org.joda.time.DateTime dateTime55 = mutableInterval27.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval17.setStart((org.joda.time.ReadableInstant) dateTime55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean6 = interval4.isAfter(1606267523963L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(0L, (long) 0);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, 1L, chronology5);
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.DateTime dateTime8 = mutableInterval6.getStart();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval21.getStart();
        mutableInterval11.setInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(readableInstant26, readablePeriod27);
        mutableInterval28.setDurationBeforeEnd(1L);
        boolean boolean31 = mutableInterval25.contains((org.joda.time.ReadableInterval) mutableInterval28);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval28);
        org.joda.time.Duration duration33 = mutableInterval28.toDuration();
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        java.lang.Class<?> wildcardClass35 = mutableInterval2.getClass();
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    @Ignore
  public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval3.isAfterNow();
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval3.toMutableInterval();
        org.joda.time.DateTime dateTime7 = mutableInterval3.getStart();
        java.lang.String str8 = mutableInterval3.toString();
        mutableInterval3.setDurationAfterStart(1606267430362L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str8, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setDurationAfterStart((long) 1);
        org.joda.time.MutableInterval mutableInterval33 = mutableInterval12.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval34 = mutableInterval33.toMutableInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval34.getStart();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        java.lang.Object obj42 = mutableInterval40.clone();
        mutableInterval40.setStartMillis((long) 1);
        org.joda.time.DateTime dateTime45 = mutableInterval40.getStart();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval51 = mutableInterval49.copy();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        mutableInterval49.setPeriodAfterStart(readablePeriod52);
        java.lang.Object obj54 = mutableInterval49.clone();
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = mutableInterval49.toPeriod(periodType55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadablePeriod) period56);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadablePeriod) period56);
        long long59 = mutableInterval58.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval51);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
    }

    @Test
    @Ignore
  public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval3.isAfterNow();
        java.lang.String str6 = mutableInterval3.toString();
        org.joda.time.Chronology chronology7 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval8 = mutableInterval3.copy();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Interval interval16 = mutableInterval13.toInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        long long23 = mutableInterval20.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(readableInstant26, readablePeriod27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        mutableInterval28.setInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readablePeriod25, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readablePeriod24, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readableInstant44, readablePeriod45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.DateTime dateTime52 = mutableInterval50.getStart();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(0L, 1L, chronology55);
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        org.joda.time.DateTime dateTime58 = mutableInterval56.getStart();
        mutableInterval46.setInterval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime52);
        boolean boolean61 = mutableInterval20.isBefore((org.joda.time.ReadableInstant) dateTime34);
        boolean boolean62 = interval16.isAfter((org.joda.time.ReadableInstant) dateTime34);
        boolean boolean63 = mutableInterval9.isBefore((org.joda.time.ReadableInstant) dateTime34);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str6, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    @Ignore
  public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        long long10 = mutableInterval3.getStartMillis();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        boolean boolean20 = mutableInterval15.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        java.lang.Object obj27 = mutableInterval25.clone();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(obj27, chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutableInterval29.setPeriodAfterStart(readablePeriod30);
        org.joda.time.Period period32 = mutableInterval29.toPeriod();
        mutableInterval15.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        java.lang.Object obj39 = mutableInterval37.clone();
        org.joda.time.Interval interval40 = mutableInterval37.toInterval();
        org.joda.time.ReadableInterval readableInterval41 = null;
        boolean boolean42 = mutableInterval37.isBefore(readableInterval41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology45);
        boolean boolean47 = mutableInterval37.isAfter((org.joda.time.ReadableInterval) mutableInterval46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        boolean boolean54 = mutableInterval37.isBefore((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period32, (org.joda.time.ReadableInstant) dateTime53);
        boolean boolean56 = mutableInterval3.equals((java.lang.Object) mutableInterval55);
        mutableInterval3.setDurationBeforeEnd(1606267486835L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    @Ignore
  public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        long long10 = mutableInterval3.getStartMillis();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        long long23 = interval22.getEndMillis();
        boolean boolean25 = interval22.isAfter((long) (byte) 100);
        boolean boolean26 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Duration duration27 = mutableInterval14.toDuration();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getStart();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readableInstant34, readablePeriod35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        mutableInterval36.setInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime48);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        java.lang.String str53 = mutableInterval3.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str53, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        long long10 = mutableInterval3.getStartMillis();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        long long24 = interval23.getEndMillis();
        boolean boolean26 = interval23.isAfter((long) (byte) 100);
        boolean boolean27 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Duration duration28 = mutableInterval15.toDuration();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        mutableInterval33.setInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(readablePeriod30, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        boolean boolean56 = mutableInterval51.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        java.lang.Object obj63 = mutableInterval61.clone();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(obj63, chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        mutableInterval65.setPeriodAfterStart(readablePeriod66);
        org.joda.time.Period period68 = mutableInterval65.toPeriod();
        mutableInterval51.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period68);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadablePeriod) period68);
        mutableInterval3.setPeriodAfterStart((org.joda.time.ReadablePeriod) period68);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        org.joda.time.DateTime dateTime77 = mutableInterval75.getStart();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        java.lang.Object obj83 = mutableInterval81.clone();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(obj83, chronology84);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        mutableInterval85.setPeriodAfterStart(readablePeriod86);
        org.joda.time.Period period88 = mutableInterval85.toPeriod();
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadablePeriod) period88);
        org.joda.time.Chronology chronology90 = mutableInterval89.getChronology();
        mutableInterval3.setChronology(chronology90);
        org.joda.time.ReadableDuration readableDuration92 = null;
        mutableInterval3.setDurationAfterStart(readableDuration92);
        org.joda.time.ReadableDuration readableDuration94 = null;
        org.joda.time.ReadableInstant readableInstant95 = null;
        org.joda.time.MutableInterval mutableInterval96 = new org.joda.time.MutableInterval(readableDuration94, readableInstant95);
        boolean boolean97 = mutableInterval3.equals((java.lang.Object) readableDuration94);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertEquals(obj83.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    @Ignore
  public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = mutableInterval2.toPeriod(periodType3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableInstant5, readablePeriod6);
        mutableInterval7.setDurationBeforeEnd(1L);
        boolean boolean10 = mutableInterval7.isAfterNow();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        java.lang.Object obj16 = mutableInterval14.clone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(obj16, chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        mutableInterval18.setPeriodBeforeEnd(readablePeriod19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        mutableInterval24.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        long long33 = interval32.getEndMillis();
        boolean boolean35 = interval32.isAfter((long) (byte) 100);
        boolean boolean36 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Duration duration37 = mutableInterval24.toDuration();
        boolean boolean38 = mutableInterval18.isBefore((org.joda.time.ReadableInterval) mutableInterval24);
        org.joda.time.MutableInterval mutableInterval39 = mutableInterval24.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(readablePeriod40, (org.joda.time.ReadableInstant) dateTime49);
        mutableInterval24.setEnd((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean59 = mutableInterval7.contains((org.joda.time.ReadableInterval) mutableInterval24);
        org.joda.time.DateTime dateTime60 = mutableInterval24.getEnd();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period4, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        java.lang.Object obj67 = mutableInterval65.clone();
        java.lang.Object obj68 = mutableInterval65.clone();
        org.joda.time.MutableInterval mutableInterval69 = mutableInterval65.copy();
        org.joda.time.Duration duration70 = mutableInterval65.toDuration();
        mutableInterval61.setDurationAfterStart((org.joda.time.ReadableDuration) duration70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration70, readableInstant72);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval69);
        org.junit.Assert.assertNotNull(duration70);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267378558L, 1606267372833L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology20 = mutableInterval9.getChronology();
        boolean boolean21 = mutableInterval9.isBeforeNow();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(readableInstant22, readablePeriod23);
        mutableInterval24.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval27 = mutableInterval24.toMutableInterval();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        long long32 = mutableInterval31.toDurationMillis();
        mutableInterval24.setInterval((org.joda.time.ReadableInterval) mutableInterval31);
        boolean boolean34 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval31);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval31);
        mutableInterval31.setDurationBeforeEnd(1606267526624L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    @Ignore
  public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval3.toPeriod(periodType8);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        mutableInterval17.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology22 = mutableInterval17.getChronology();
        org.joda.time.MutableInterval mutableInterval23 = mutableInterval17.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval24 = mutableInterval17.copy();
        org.joda.time.Duration duration25 = mutableInterval17.toDuration();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(readableInstant28, readablePeriod29);
        mutableInterval30.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval33 = mutableInterval30.toMutableInterval();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        long long38 = mutableInterval37.toDurationMillis();
        mutableInterval30.setInterval((org.joda.time.ReadableInterval) mutableInterval37);
        mutableInterval30.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        mutableInterval49.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(0L, 1L, chronology55);
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        mutableInterval56.setDurationAfterStart((long) (byte) 1);
        boolean boolean61 = mutableInterval56.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology62 = mutableInterval56.getChronology();
        mutableInterval49.setChronology(chronology62);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology62);
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology62);
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval30, chronology62);
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology62);
        mutableInterval17.setChronology(chronology62);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((long) ' ', (long) (short) 100, chronology62);
        org.joda.time.Chronology chronology70 = mutableInterval69.getChronology();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(1606267332182L, 1606267379890L, chronology70);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology70);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(chronology70);
    }

    @Test
    @Ignore
  public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        org.joda.time.Chronology chronology43 = mutableInterval40.getChronology();
        long long44 = mutableInterval40.getStartMillis();
        java.lang.String str45 = mutableInterval40.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        mutableInterval49.setDurationBeforeEnd(readableDuration50);
        boolean boolean52 = mutableInterval49.isBeforeNow();
        java.lang.Object obj53 = mutableInterval49.clone();
        boolean boolean54 = mutableInterval49.isBeforeNow();
        boolean boolean55 = mutableInterval40.contains((org.joda.time.ReadableInterval) mutableInterval49);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval49.setInterval(1606267439749L, 1606267390730L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z" + "'", str45, "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    @Ignore
  public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        java.lang.Object obj10 = mutableInterval8.clone();
        mutableInterval8.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology13 = mutableInterval8.getChronology();
        mutableInterval2.setChronology(chronology13);
        mutableInterval2.setStartMillis(1L);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval2.copy();
        long long18 = mutableInterval17.getEndMillis();
        boolean boolean19 = mutableInterval17.containsNow();
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(mutableInterval17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1606267529433L + "'", long18 == 1606267529433L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    @Ignore
  public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        java.lang.Object obj33 = mutableInterval31.clone();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(obj33, chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutableInterval35.setPeriodAfterStart(readablePeriod36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        java.lang.Object obj43 = mutableInterval41.clone();
        mutableInterval41.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology46 = mutableInterval41.getChronology();
        org.joda.time.MutableInterval mutableInterval47 = mutableInterval41.toMutableInterval();
        boolean boolean48 = mutableInterval35.isAfter((org.joda.time.ReadableInterval) mutableInterval47);
        mutableInterval13.setInterval((org.joda.time.ReadableInterval) mutableInterval35);
        boolean boolean50 = mutableInterval13.containsNow();
        boolean boolean51 = mutableInterval13.isBeforeNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    @Ignore
  public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(obj11, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableInterval13.setPeriodAfterStart(readablePeriod14);
        org.joda.time.Period period16 = mutableInterval13.toPeriod();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.Duration duration26 = mutableInterval25.toDuration();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(readableInstant28, readablePeriod29);
        long long31 = mutableInterval30.getEndMillis();
        org.joda.time.MutableInterval mutableInterval32 = mutableInterval30.copy();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(readableDuration33, readableInstant34);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = mutableInterval35.toPeriod(periodType36);
        mutableInterval30.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime39 = mutableInterval30.getStart();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        mutableInterval43.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval46 = mutableInterval43.toMutableInterval();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        long long51 = mutableInterval50.toDurationMillis();
        mutableInterval43.setInterval((org.joda.time.ReadableInterval) mutableInterval50);
        org.joda.time.Duration duration53 = mutableInterval50.toDuration();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        java.lang.Object obj59 = mutableInterval57.clone();
        org.joda.time.Interval interval60 = mutableInterval57.toInterval();
        org.joda.time.ReadableInterval readableInterval61 = null;
        boolean boolean62 = mutableInterval57.isBefore(readableInterval61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology65);
        boolean boolean67 = mutableInterval57.isAfter((org.joda.time.ReadableInterval) mutableInterval66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        boolean boolean74 = mutableInterval57.isBefore((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration53, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval75);
        mutableInterval76.setInterval(35L, 1606267414694L);
        boolean boolean80 = mutableInterval40.contains((org.joda.time.ReadableInterval) mutableInterval76);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration26);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1606267529688L + "'", long31 == 1606267529688L);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(mutableInterval46);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    @Ignore
  public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        java.lang.Object obj8 = mutableInterval5.clone();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval5.copy();
        org.joda.time.DateTime dateTime10 = mutableInterval5.getStart();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        java.lang.Object obj16 = mutableInterval14.clone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(obj16, chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        mutableInterval18.setPeriodAfterStart(readablePeriod19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        java.lang.Object obj26 = mutableInterval24.clone();
        mutableInterval24.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology29 = mutableInterval24.getChronology();
        org.joda.time.MutableInterval mutableInterval30 = mutableInterval24.toMutableInterval();
        boolean boolean31 = mutableInterval18.isAfter((org.joda.time.ReadableInterval) mutableInterval30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        java.lang.Object obj37 = mutableInterval35.clone();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(obj37, chronology38);
        org.joda.time.Duration duration40 = mutableInterval39.toDuration();
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration40);
        boolean boolean43 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(0L, 1L, chronology3);
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean7 = mutableInterval4.contains((long) ' ');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        mutableInterval11.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readableInstant21, readablePeriod22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        org.joda.time.DateTime dateTime29 = mutableInterval27.getStart();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        mutableInterval23.setInterval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean38 = mutableInterval11.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        mutableInterval42.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        long long51 = interval50.getEndMillis();
        boolean boolean53 = interval50.isAfter((long) (byte) 100);
        boolean boolean54 = mutableInterval42.overlaps((org.joda.time.ReadableInterval) interval50);
        org.joda.time.Duration duration55 = mutableInterval42.toDuration();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(readableInstant62, readablePeriod63);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(0L, 1L, chronology73);
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        org.joda.time.DateTime dateTime76 = mutableInterval74.getStart();
        mutableInterval64.setInterval((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration55);
        mutableInterval4.setEnd((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology82 = mutableInterval4.getChronology();
        mutableInterval4.setInterval(1606267363870L, 1606267372010L);
        org.joda.time.Period period86 = mutableInterval4.toPeriod();
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadablePeriod) period86);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(period86);
    }

    @Test
    @Ignore
  public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = mutableInterval10.isBefore(readableInterval14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology18);
        boolean boolean20 = mutableInterval10.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        boolean boolean27 = mutableInterval10.isBefore((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(readableInstant29, readablePeriod30);
        mutableInterval31.setDurationBeforeEnd(1L);
        boolean boolean34 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        org.joda.time.Period period35 = mutableInterval31.toPeriod();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        mutableInterval39.setDurationAfterStart((long) (byte) 1);
        boolean boolean43 = mutableInterval39.isAfterNow();
        long long44 = mutableInterval39.toDurationMillis();
        org.joda.time.DateTime dateTime45 = mutableInterval39.getEnd();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period35, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime45, readablePeriod47);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    @Ignore
  public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.joda.time.MutableInterval mutableInterval3 = org.joda.time.MutableInterval.parse("2020-11-25T01:21:51.925Z/2020-11-25T01:21:51.926Z");
        java.lang.Object obj4 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.DateTime dateTime10 = mutableInterval8.getStart();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        java.lang.Object obj16 = mutableInterval14.clone();
        org.joda.time.Interval interval17 = mutableInterval14.toInterval();
        org.joda.time.ReadableInterval readableInterval18 = null;
        boolean boolean19 = mutableInterval14.isBefore(readableInterval18);
        org.joda.time.MutableInterval mutableInterval20 = mutableInterval14.copy();
        boolean boolean21 = mutableInterval8.contains((org.joda.time.ReadableInterval) mutableInterval14);
        mutableInterval14.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology25 = mutableInterval14.getChronology();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(obj4, chronology25);
        mutableInterval3.setChronology(chronology25);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((long) (short) -1, 1606267405917L, chronology25);
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    @Ignore
  public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setDurationAfterStart((long) 1);
        org.joda.time.MutableInterval mutableInterval33 = mutableInterval12.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval34 = mutableInterval33.toMutableInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval34.getStart();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        mutableInterval34.setDurationAfterStart(1606267387150L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    @Ignore
  public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        mutableInterval5.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology10 = mutableInterval5.getChronology();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval5.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval12 = mutableInterval5.copy();
        org.joda.time.Duration duration13 = mutableInterval5.toDuration();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readableInstant16, readablePeriod17);
        mutableInterval18.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval18.toMutableInterval();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        long long26 = mutableInterval25.toDurationMillis();
        mutableInterval18.setInterval((org.joda.time.ReadableInterval) mutableInterval25);
        mutableInterval18.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        mutableInterval37.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        boolean boolean49 = mutableInterval44.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        mutableInterval37.setChronology(chronology50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology50);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology50);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval18, chronology50);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology50);
        mutableInterval5.setChronology(chronology50);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((long) (short) 0, 1606267308130L, chronology50);
        long long58 = mutableInterval57.toDurationMillis();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        mutableInterval62.setPeriodBeforeEnd(readablePeriod63);
        mutableInterval62.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(readableInstant67, readablePeriod68);
        long long70 = mutableInterval69.getEndMillis();
        boolean boolean71 = mutableInterval62.overlaps((org.joda.time.ReadableInterval) mutableInterval69);
        boolean boolean72 = mutableInterval69.isAfterNow();
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(readableInstant73, readablePeriod74);
        mutableInterval75.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval78 = mutableInterval75.toMutableInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval78.getEnd();
        org.joda.time.MutableInterval mutableInterval80 = mutableInterval78.toMutableInterval();
        boolean boolean81 = mutableInterval69.equals((java.lang.Object) mutableInterval78);
        boolean boolean82 = mutableInterval57.contains((org.joda.time.ReadableInterval) mutableInterval69);
        org.joda.time.Interval interval83 = mutableInterval69.toInterval();
        long long84 = mutableInterval69.getEndMillis();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1606267308130L + "'", long58 == 1606267308130L);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1606267530380L + "'", long70 == 1606267530380L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(mutableInterval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(mutableInterval80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(interval83);
// flaky:         org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1606267530380L + "'", long84 == 1606267530380L);
    }

    @Test
    @Ignore
  public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        boolean boolean22 = mutableInterval3.isAfter((org.joda.time.ReadableInstant) dateTime20);
        long long23 = mutableInterval3.getStartMillis();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        java.lang.Object obj29 = mutableInterval27.clone();
        mutableInterval27.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology32 = mutableInterval27.getChronology();
        org.joda.time.MutableInterval mutableInterval33 = mutableInterval27.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval34 = mutableInterval27.copy();
        org.joda.time.Duration duration35 = mutableInterval27.toDuration();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(readableInstant38, readablePeriod39);
        mutableInterval40.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval43 = mutableInterval40.toMutableInterval();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        long long48 = mutableInterval47.toDurationMillis();
        mutableInterval40.setInterval((org.joda.time.ReadableInterval) mutableInterval47);
        mutableInterval40.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        mutableInterval66.setDurationAfterStart((long) (byte) 1);
        boolean boolean71 = mutableInterval66.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology72 = mutableInterval66.getChronology();
        mutableInterval59.setChronology(chronology72);
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology72);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology72);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval40, chronology72);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology72);
        mutableInterval27.setChronology(chronology72);
        boolean boolean79 = mutableInterval3.equals((java.lang.Object) mutableInterval27);
        long long80 = mutableInterval27.getStartMillis();
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L + "'", long23 == 100L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
    }

    @Test
    @Ignore
  public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(0L, 1L, chronology3);
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval4.getStart();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = mutableInterval10.isBefore(readableInterval14);
        org.joda.time.MutableInterval mutableInterval16 = mutableInterval10.copy();
        boolean boolean17 = mutableInterval4.contains((org.joda.time.ReadableInterval) mutableInterval10);
        mutableInterval10.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology21 = mutableInterval10.getChronology();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(obj0, chronology21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableInterval26.setPeriodBeforeEnd(readablePeriod27);
        mutableInterval26.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        long long34 = mutableInterval33.getEndMillis();
        boolean boolean35 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval33);
        boolean boolean36 = mutableInterval33.isAfterNow();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        java.lang.Object obj48 = mutableInterval46.clone();
        org.joda.time.Interval interval49 = mutableInterval46.toInterval();
        org.joda.time.ReadableInterval readableInterval50 = null;
        boolean boolean51 = mutableInterval46.isBefore(readableInterval50);
        org.joda.time.MutableInterval mutableInterval52 = mutableInterval46.copy();
        boolean boolean53 = mutableInterval40.contains((org.joda.time.ReadableInterval) mutableInterval46);
        mutableInterval46.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology57 = mutableInterval46.getChronology();
        boolean boolean58 = mutableInterval46.isBeforeNow();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        mutableInterval62.setPeriodBeforeEnd(readablePeriod63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(readableInstant65, readablePeriod66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval77.getStart();
        mutableInterval67.setInterval((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime79);
        boolean boolean81 = mutableInterval62.isAfter((org.joda.time.ReadableInstant) dateTime79);
        boolean boolean82 = mutableInterval46.isAfter((org.joda.time.ReadableInstant) dateTime79);
        mutableInterval33.setStart((org.joda.time.ReadableInstant) dateTime79);
        boolean boolean84 = mutableInterval22.equals((java.lang.Object) dateTime79);
        boolean boolean86 = mutableInterval22.isBefore(1606267387150L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology21);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1606267530574L + "'", long34 == 1606267530574L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(mutableInterval52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    @Ignore
  public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval2.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        mutableInterval28.setDurationAfterStart((long) (byte) 1);
        boolean boolean33 = mutableInterval28.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology34 = mutableInterval28.getChronology();
        mutableInterval21.setChronology(chronology34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology34);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology34);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval2, chronology34);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        java.lang.Object obj44 = mutableInterval42.clone();
        java.lang.Object obj45 = mutableInterval42.clone();
        org.joda.time.MutableInterval mutableInterval46 = mutableInterval42.copy();
        org.joda.time.Duration duration47 = mutableInterval42.toDuration();
        org.joda.time.Period period48 = mutableInterval42.toPeriod();
        mutableInterval38.setPeriodAfterStart((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = mutableInterval38.getStart();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    @Ignore
  public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        mutableInterval13.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology18 = mutableInterval13.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval13.toMutableInterval();
        boolean boolean20 = mutableInterval7.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        mutableInterval7.setEndMillis(1606267286325L);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        mutableInterval25.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval25.toMutableInterval();
        org.joda.time.DateTime dateTime29 = mutableInterval28.getEnd();
        org.joda.time.MutableInterval mutableInterval30 = mutableInterval28.toMutableInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval30.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        mutableInterval35.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        long long44 = interval43.getEndMillis();
        boolean boolean46 = interval43.isAfter((long) (byte) 100);
        boolean boolean47 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) interval43);
        org.joda.time.Duration duration48 = mutableInterval35.toDuration();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(readableInstant55, readablePeriod56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        org.joda.time.DateTime dateTime63 = mutableInterval61.getStart();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        org.joda.time.DateTime dateTime69 = mutableInterval67.getStart();
        mutableInterval57.setInterval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        mutableInterval72.setPeriodAfterStart(readablePeriod73);
        org.joda.time.Chronology chronology75 = mutableInterval72.getChronology();
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval30, chronology75);
        boolean boolean77 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval76);
        mutableInterval7.setDurationBeforeEnd(1606267525150L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    @Ignore
  public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        boolean boolean3 = mutableInterval2.isBeforeNow();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        java.lang.Object obj9 = mutableInterval7.clone();
        org.joda.time.Interval interval10 = mutableInterval7.toInterval();
        org.joda.time.ReadableInterval readableInterval11 = null;
        boolean boolean12 = mutableInterval7.isBefore(readableInterval11);
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval7.copy();
        mutableInterval7.setDurationAfterStart(1606267383956L);
        org.joda.time.Chronology chronology16 = mutableInterval7.getChronology();
        boolean boolean17 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        mutableInterval28.setDurationAfterStart((long) (byte) 1);
        boolean boolean33 = mutableInterval28.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology34 = mutableInterval28.getChronology();
        mutableInterval21.setChronology(chronology34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        java.lang.Object obj41 = mutableInterval39.clone();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(obj41, chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        mutableInterval43.setPeriodAfterStart(readablePeriod44);
        org.joda.time.Period period46 = mutableInterval43.toPeriod();
        org.joda.time.MutableInterval mutableInterval47 = mutableInterval43.copy();
        boolean boolean48 = mutableInterval21.isAfter((org.joda.time.ReadableInterval) mutableInterval43);
        org.joda.time.Chronology chronology49 = mutableInterval43.getChronology();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        boolean boolean56 = mutableInterval43.contains((org.joda.time.ReadableInstant) dateTime55);
        mutableInterval7.setStart((org.joda.time.ReadableInstant) dateTime55);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    @Ignore
  public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        org.joda.time.Interval interval23 = mutableInterval20.toInterval();
        org.joda.time.ReadableInterval readableInterval24 = null;
        boolean boolean25 = mutableInterval20.isBefore(readableInterval24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology28);
        boolean boolean30 = mutableInterval20.isAfter((org.joda.time.ReadableInterval) mutableInterval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        boolean boolean37 = mutableInterval20.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Period period39 = mutableInterval38.toPeriod();
        org.joda.time.Duration duration40 = mutableInterval38.toDuration();
        java.lang.Object obj41 = mutableInterval38.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    @Ignore
  public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        mutableInterval3.setEndMillis((long) '#');
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        java.lang.Object obj25 = mutableInterval23.clone();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(obj25, chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutableInterval27.setPeriodBeforeEnd(readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        mutableInterval33.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        long long42 = interval41.getEndMillis();
        boolean boolean44 = interval41.isAfter((long) (byte) 100);
        boolean boolean45 = mutableInterval33.overlaps((org.joda.time.ReadableInterval) interval41);
        org.joda.time.Duration duration46 = mutableInterval33.toDuration();
        boolean boolean47 = mutableInterval27.isBefore((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.MutableInterval mutableInterval48 = mutableInterval33.toMutableInterval();
        java.lang.String str49 = mutableInterval48.toString();
        java.lang.String str50 = mutableInterval48.toString();
        boolean boolean51 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval48);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        java.lang.Object obj57 = mutableInterval55.clone();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        java.lang.Object obj63 = mutableInterval61.clone();
        java.lang.Object obj64 = mutableInterval61.clone();
        boolean boolean65 = mutableInterval55.equals((java.lang.Object) mutableInterval61);
        boolean boolean66 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval55);
        boolean boolean68 = mutableInterval55.isAfter(1606267312402L);
        org.joda.time.DateTime dateTime69 = mutableInterval55.getEnd();
        org.joda.time.Period period70 = mutableInterval55.toPeriod();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str49, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str50, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(period70);
    }

    @Test
    @Ignore
  public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Period period6 = mutableInterval2.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval21.getStart();
        mutableInterval11.setInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readablePeriod8, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readablePeriod7, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean44 = mutableInterval2.isAfter((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Interval interval45 = mutableInterval2.toInterval();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(readableDuration46, readableInstant47);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = mutableInterval48.toPeriod(periodType49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(readableInstant51, readablePeriod52);
        long long54 = mutableInterval53.getEndMillis();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(readableInstant55, readablePeriod56);
        mutableInterval57.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval60 = mutableInterval57.toMutableInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval60.getEnd();
        boolean boolean62 = mutableInterval53.isAfter((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period50, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        java.lang.Object obj69 = mutableInterval67.clone();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(obj69, chronology70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        mutableInterval71.setPeriodAfterStart(readablePeriod72);
        org.joda.time.Period period74 = mutableInterval71.toPeriod();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        java.lang.Object obj80 = mutableInterval78.clone();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(obj80, chronology81);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        mutableInterval82.setPeriodAfterStart(readablePeriod83);
        org.joda.time.Period period85 = mutableInterval82.toPeriod();
        mutableInterval71.setPeriodAfterStart((org.joda.time.ReadablePeriod) period85);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadablePeriod) period85);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval87);
        org.joda.time.ReadableDuration readableDuration89 = null;
        mutableInterval2.setDurationAfterStart(readableDuration89);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(period50);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1606267531152L + "'", long54 == 1606267531152L);
        org.junit.Assert.assertNotNull(mutableInterval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period85);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        long long5 = interval4.getEndMillis();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        mutableInterval8.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval8.toMutableInterval();
        boolean boolean12 = interval4.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        boolean boolean13 = interval4.isAfterNow();
        long long14 = interval4.getEndMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    @Ignore
  public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        boolean boolean13 = interval6.isBefore((org.joda.time.ReadableInterval) mutableInterval10);
        boolean boolean15 = mutableInterval10.isAfter((long) (short) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        mutableInterval19.setPeriodAfterStart(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(readableInstant22, readablePeriod23);
        mutableInterval24.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        mutableInterval30.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        long long39 = interval38.getEndMillis();
        boolean boolean41 = interval38.isAfter((long) (byte) 100);
        boolean boolean42 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Duration duration43 = mutableInterval30.toDuration();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        mutableInterval47.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        long long56 = interval55.getEndMillis();
        boolean boolean58 = interval55.isAfter((long) (byte) 100);
        boolean boolean59 = mutableInterval47.overlaps((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Duration duration60 = mutableInterval47.toDuration();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(readableInstant67, readablePeriod68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(0L, 1L, chronology78);
        org.joda.time.Interval interval80 = mutableInterval79.toInterval();
        org.joda.time.DateTime dateTime81 = mutableInterval79.getStart();
        mutableInterval69.setInterval((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration60, (org.joda.time.ReadableInstant) dateTime81);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration60);
        mutableInterval24.setInterval((org.joda.time.ReadableInterval) mutableInterval30);
        boolean boolean87 = mutableInterval19.contains((org.joda.time.ReadableInterval) mutableInterval30);
        boolean boolean88 = mutableInterval10.contains((org.joda.time.ReadableInterval) mutableInterval30);
        org.joda.time.Period period89 = mutableInterval30.toPeriod();
        org.joda.time.Interval interval90 = mutableInterval30.toInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(interval90);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = mutableInterval2.getStart();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean18 = mutableInterval15.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval15.copy();
        boolean boolean20 = mutableInterval2.equals((java.lang.Object) mutableInterval19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableInterval2.setDurationBeforeEnd(readableDuration21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableInterval2.isBefore(readableInstant23);
        mutableInterval2.setDurationAfterStart(1606267395980L);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        mutableInterval29.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval32 = mutableInterval29.toMutableInterval();
        org.joda.time.Period period33 = mutableInterval29.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(readableInstant36, readablePeriod37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        mutableInterval38.setInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(readablePeriod35, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(readablePeriod34, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readableInstant54, readablePeriod55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        mutableInterval56.setInterval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime62);
        boolean boolean71 = mutableInterval29.isAfter((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime62, readableInstant72);
        boolean boolean74 = mutableInterval2.isAfter((org.joda.time.ReadableInterval) mutableInterval73);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267531478L + "'", long3 == 1606267531478L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval5.toMutableInterval();
        org.joda.time.DateTime dateTime8 = mutableInterval5.getEnd();
        mutableInterval5.setInterval((long) 'a', 1606267452783L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        long long11 = mutableInterval10.getEndMillis();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval10);
        boolean boolean14 = mutableInterval3.isAfter(1606267395980L);
        org.junit.Assert.assertNotNull(interval4);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1606267531930L + "'", long11 == 1606267531930L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        long long10 = mutableInterval3.getStartMillis();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableInterval3.contains(readableInstant12);
        long long14 = mutableInterval3.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    @Ignore
  public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        java.lang.Object obj35 = mutableInterval33.clone();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(obj35, chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutableInterval37.setPeriodBeforeEnd(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readableInstant40, readablePeriod41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        mutableInterval42.setInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        java.lang.Object obj61 = mutableInterval59.clone();
        org.joda.time.Interval interval62 = mutableInterval59.toInterval();
        org.joda.time.ReadableInterval readableInterval63 = null;
        boolean boolean64 = mutableInterval59.isBefore(readableInterval63);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology67);
        boolean boolean69 = mutableInterval59.isAfter((org.joda.time.ReadableInterval) mutableInterval68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        boolean boolean76 = mutableInterval59.isBefore((org.joda.time.ReadableInstant) dateTime75);
        mutableInterval37.setInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime75);
        boolean boolean78 = mutableInterval28.isAfter((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean79 = mutableInterval28.isAfterNow();
        org.joda.time.Duration duration80 = mutableInterval28.toDuration();
        org.joda.time.MutableInterval mutableInterval81 = mutableInterval28.copy();
        long long82 = mutableInterval81.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str29, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(mutableInterval81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
    }

    @Test
    @Ignore
  public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.copy();
        boolean boolean12 = mutableInterval10.isBefore((long) (short) -1);
        mutableInterval10.setDurationAfterStart(1606267324130L);
        boolean boolean15 = mutableInterval10.isBeforeNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval((java.lang.Object) "2020-11-25T01:23:02.887Z/2020-11-25T01:23:02.888Z");
    }

    @Test
    @Ignore
  public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        boolean boolean49 = mutableInterval44.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        java.lang.Object obj56 = mutableInterval54.clone();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(obj56, chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        mutableInterval58.setPeriodAfterStart(readablePeriod59);
        org.joda.time.Period period61 = mutableInterval58.toPeriod();
        mutableInterval44.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period61);
        mutableInterval40.setPeriodAfterStart((org.joda.time.ReadablePeriod) period61);
        boolean boolean65 = mutableInterval40.isAfter(1606267390976L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    @Ignore
  public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodAfterStart(readablePeriod4);
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval3.toMutableInterval();
        org.joda.time.Chronology chronology7 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        java.lang.Object obj13 = mutableInterval11.clone();
        mutableInterval11.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology16 = mutableInterval11.getChronology();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        mutableInterval20.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        long long29 = interval28.getEndMillis();
        boolean boolean31 = interval28.isAfter((long) (byte) 100);
        boolean boolean32 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Duration duration33 = mutableInterval20.toDuration();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readableInstant40, readablePeriod41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        mutableInterval42.setInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime54);
        mutableInterval11.setEnd((org.joda.time.ReadableInstant) dateTime54);
        java.lang.Object obj59 = mutableInterval11.clone();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        mutableInterval70.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        mutableInterval77.setDurationAfterStart((long) (byte) 1);
        boolean boolean82 = mutableInterval77.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology83 = mutableInterval77.getChronology();
        mutableInterval70.setChronology(chronology83);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology83);
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval((java.lang.Object) interval64, chronology83);
        mutableInterval11.setChronology(chronology83);
        org.joda.time.DateTime dateTime88 = mutableInterval11.getEnd();
        boolean boolean89 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime88);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    @Ignore
  public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setDurationAfterStart((long) 1);
        org.joda.time.MutableInterval mutableInterval33 = mutableInterval12.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval34 = mutableInterval33.toMutableInterval();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        mutableInterval38.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        long long47 = interval46.getEndMillis();
        boolean boolean49 = interval46.isAfter((long) (byte) 100);
        boolean boolean50 = mutableInterval38.overlaps((org.joda.time.ReadableInterval) interval46);
        org.joda.time.Duration duration51 = mutableInterval38.toDuration();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(readableInstant52, readablePeriod53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        mutableInterval54.setInterval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateTime66);
        boolean boolean69 = mutableInterval33.isAfter((org.joda.time.ReadableInstant) dateTime66);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(readableInstant10, readablePeriod11);
        long long13 = mutableInterval12.getEndMillis();
        org.joda.time.MutableInterval mutableInterval14 = mutableInterval12.copy();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(readableDuration15, readableInstant16);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = mutableInterval17.toPeriod(periodType18);
        mutableInterval12.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean28 = mutableInterval25.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval25.copy();
        boolean boolean30 = mutableInterval12.equals((java.lang.Object) mutableInterval29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableInterval12.setDurationBeforeEnd(readableDuration31);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        mutableInterval40.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        mutableInterval47.setDurationAfterStart((long) (byte) 1);
        boolean boolean52 = mutableInterval47.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology53 = mutableInterval47.getChronology();
        mutableInterval40.setChronology(chronology53);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology53);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(1606267320112L, 1606267327298L, chronology53);
        mutableInterval12.setChronology(chronology53);
        boolean boolean58 = mutableInterval2.isBefore((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean59 = mutableInterval2.isAfterNow();
        mutableInterval2.setInterval(1606267415841L, 1606267435590L);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1606267532577L + "'", long13 == 1606267532577L);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval2);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval2.setStartMillis(1606267419064L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval2);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableInstant11, readablePeriod12);
        mutableInterval13.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval16 = mutableInterval13.toMutableInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        long long21 = mutableInterval20.toDurationMillis();
        mutableInterval13.setInterval((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        mutableInterval26.setDurationAfterStart((long) (byte) 1);
        boolean boolean31 = mutableInterval26.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        java.lang.Object obj37 = mutableInterval35.clone();
        mutableInterval35.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology40 = mutableInterval35.getChronology();
        mutableInterval26.setChronology(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readableInstant42, readablePeriod43);
        mutableInterval44.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        java.lang.Object obj52 = mutableInterval50.clone();
        mutableInterval50.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology55 = mutableInterval50.getChronology();
        mutableInterval44.setChronology(chronology55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval26, chronology55);
        mutableInterval20.setChronology(chronology55);
        mutableInterval10.setChronology(chronology55);
        org.joda.time.MutableInterval mutableInterval60 = mutableInterval10.toMutableInterval();
        mutableInterval60.setDurationBeforeEnd(1606267482758L);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(mutableInterval60);
    }

    @Test
    @Ignore
  public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setEndMillis((long) '4');
        long long8 = mutableInterval3.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
    }

    @Test
    @Ignore
  public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        boolean boolean11 = mutableInterval2.isBefore(1606267286325L);
        java.lang.String str12 = mutableInterval2.toString();
        mutableInterval2.setEndMillis(1606267381215L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z" + "'", str12, "1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z");
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        org.joda.time.Duration duration43 = mutableInterval40.toDuration();
        boolean boolean45 = mutableInterval40.contains(1606267337765L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    @Ignore
  public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((java.lang.Object) str29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        org.joda.time.Interval interval37 = mutableInterval34.toInterval();
        mutableInterval34.setDurationBeforeEnd(0L);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval34.copy();
        boolean boolean41 = mutableInterval30.isBefore((org.joda.time.ReadableInterval) mutableInterval40);
        boolean boolean43 = mutableInterval30.isBefore(1606267475770L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str29, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    @Ignore
  public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = mutableInterval3.toPeriod(periodType9);
        org.joda.time.Interval interval11 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant18, readablePeriod19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        mutableInterval20.setInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime35 = mutableInterval34.getStart();
        mutableInterval34.setDurationAfterStart((long) 10);
        boolean boolean38 = interval11.isAfter((org.joda.time.ReadableInterval) mutableInterval34);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval34.setInterval(1606267492851L, 1606267395067L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    @Ignore
  public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = mutableInterval2.getStart();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        java.lang.Object obj17 = mutableInterval15.clone();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(obj17, chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        mutableInterval19.setPeriodBeforeEnd(readablePeriod20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        mutableInterval25.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        long long34 = interval33.getEndMillis();
        boolean boolean36 = interval33.isAfter((long) (byte) 100);
        boolean boolean37 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) interval33);
        org.joda.time.Duration duration38 = mutableInterval25.toDuration();
        boolean boolean39 = mutableInterval19.isBefore((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval25.toMutableInterval();
        java.lang.String str41 = mutableInterval40.toString();
        boolean boolean42 = mutableInterval40.containsNow();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(readableInstant49, readablePeriod50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        org.joda.time.DateTime dateTime63 = mutableInterval61.getStart();
        mutableInterval51.setInterval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime66 = mutableInterval65.getStart();
        boolean boolean67 = mutableInterval40.contains((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean68 = mutableInterval2.isBefore((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(1606267324130L, 1606267370546L);
        org.joda.time.DateTime dateTime72 = mutableInterval71.getStart();
        boolean boolean73 = mutableInterval2.isBefore((org.joda.time.ReadableInstant) dateTime72);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267533152L + "'", long3 == 1606267533152L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str41, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    @Ignore
  public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        mutableInterval3.setDurationAfterStart(1606267395980L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = mutableInterval14.copy();
        org.joda.time.Period period17 = mutableInterval14.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period17);
        java.lang.String str19 = mutableInterval3.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2020-11-25T01:23:15.979Z/2020-11-25T01:23:15.980Z" + "'", str19, "2020-11-25T01:23:15.979Z/2020-11-25T01:23:15.980Z");
    }

    @Test
    @Ignore
  public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval2.setDurationAfterStart(100L);
        mutableInterval2.setDurationBeforeEnd(1606267374222L);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readableInstant16, readablePeriod17);
        mutableInterval18.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval18.toMutableInterval();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        long long26 = mutableInterval25.toDurationMillis();
        mutableInterval18.setInterval((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.DateTime dateTime28 = mutableInterval18.getEnd();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        mutableInterval32.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        long long41 = interval40.getEndMillis();
        boolean boolean43 = interval40.isAfter((long) (byte) 100);
        boolean boolean44 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Duration duration45 = mutableInterval32.toDuration();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(readableInstant46, readablePeriod47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        mutableInterval48.setInterval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration45);
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((long) (-1), (long) (byte) 100);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        java.lang.Object obj72 = mutableInterval70.clone();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(obj72, chronology73);
        org.joda.time.DateTime dateTime75 = mutableInterval74.getEnd();
        boolean boolean76 = mutableInterval66.isBefore((org.joda.time.ReadableInstant) dateTime75);
        mutableInterval2.setInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableInterval mutableInterval78 = mutableInterval2.copy();
        org.joda.time.MutableInterval mutableInterval79 = mutableInterval2.copy();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(mutableInterval78);
        org.junit.Assert.assertNotNull(mutableInterval79);
    }

    @Test
    @Ignore
  public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        mutableInterval12.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology17 = mutableInterval12.getChronology();
        mutableInterval3.setChronology(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(readableInstant19, readablePeriod20);
        mutableInterval21.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        java.lang.Object obj29 = mutableInterval27.clone();
        mutableInterval27.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology32 = mutableInterval27.getChronology();
        mutableInterval21.setChronology(chronology32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology32);
        boolean boolean35 = mutableInterval34.isAfterNow();
        boolean boolean37 = mutableInterval34.equals((java.lang.Object) 1606267433898L);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        mutableInterval41.setDurationAfterStart((long) (byte) 1);
        boolean boolean45 = mutableInterval41.isAfterNow();
        long long46 = mutableInterval41.toDurationMillis();
        org.joda.time.DateTime dateTime47 = mutableInterval41.getEnd();
        mutableInterval34.setEnd((org.joda.time.ReadableInstant) dateTime47);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:22:16.732Z/2020-11-25T01:22:16.733Z");
        boolean boolean3 = mutableInterval1.isBefore(0L);
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((long) (byte) 0, (long) (short) 100);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutableInterval10.setPeriodBeforeEnd(readablePeriod11);
        mutableInterval10.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(readableInstant15, readablePeriod16);
        long long18 = mutableInterval17.getEndMillis();
        boolean boolean19 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        boolean boolean20 = mutableInterval17.isAfterNow();
        boolean boolean22 = mutableInterval17.isBefore((long) (byte) 10);
        org.joda.time.Period period23 = mutableInterval17.toPeriod();
        mutableInterval6.setPeriodAfterStart((org.joda.time.ReadablePeriod) period23);
        boolean boolean25 = mutableInterval1.equals((java.lang.Object) mutableInterval6);
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1606267533607L + "'", long18 == 1606267533607L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    @Ignore
  public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval2.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        mutableInterval28.setDurationAfterStart((long) (byte) 1);
        boolean boolean33 = mutableInterval28.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology34 = mutableInterval28.getChronology();
        mutableInterval21.setChronology(chronology34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology34);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology34);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval2, chronology34);
        boolean boolean40 = mutableInterval38.isAfter(1606267300789L);
        java.lang.Object obj41 = mutableInterval38.clone();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.100Z");
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, 1L, chronology5);
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.DateTime dateTime8 = mutableInterval6.getStart();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        mutableInterval2.setInterval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        mutableInterval24.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        long long33 = interval32.getEndMillis();
        boolean boolean35 = interval32.isAfter((long) (byte) 100);
        boolean boolean36 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Duration duration37 = mutableInterval24.toDuration();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        org.joda.time.DateTime dateTime43 = mutableInterval41.getStart();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readableInstant44, readablePeriod45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.DateTime dateTime52 = mutableInterval50.getStart();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(0L, 1L, chronology55);
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        org.joda.time.DateTime dateTime58 = mutableInterval56.getStart();
        mutableInterval46.setInterval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime58);
        mutableInterval19.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        org.joda.time.DateTime dateTime69 = mutableInterval67.getStart();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(readablePeriod63, (org.joda.time.ReadableInstant) dateTime69);
        mutableInterval19.setStart((org.joda.time.ReadableInstant) dateTime69);
        boolean boolean72 = mutableInterval2.contains((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime73 = mutableInterval2.getStart();
        long long74 = mutableInterval2.getEndMillis();
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableInterval3.setDurationBeforeEnd(readableDuration4);
        boolean boolean6 = mutableInterval3.isBeforeNow();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.toMutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean10 = interval8.isBefore(1606267516326L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    @Ignore
  public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        mutableInterval5.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        mutableInterval5.setChronology(chronology18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) '4', (long) 'a', chronology18);
        boolean boolean21 = mutableInterval20.isBeforeNow();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getEnd();
        java.lang.Object obj23 = mutableInterval20.clone();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.052Z/1970-01-01T00:00:00.097Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.052Z/1970-01-01T00:00:00.097Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.052Z/1970-01-01T00:00:00.097Z");
    }

    @Test
    @Ignore
  public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(0L, 1L, chronology3);
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        mutableInterval4.setDurationAfterStart((long) (byte) 1);
        boolean boolean9 = mutableInterval4.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        mutableInterval13.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology18 = mutableInterval13.getChronology();
        mutableInterval4.setChronology(chronology18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        java.lang.Object obj25 = mutableInterval23.clone();
        org.joda.time.Interval interval26 = mutableInterval23.toInterval();
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = mutableInterval23.isBefore(readableInterval27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology31);
        boolean boolean33 = mutableInterval23.isAfter((org.joda.time.ReadableInterval) mutableInterval32);
        org.joda.time.Interval interval34 = mutableInterval23.toInterval();
        org.joda.time.Period period35 = mutableInterval23.toPeriod();
        mutableInterval4.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period35);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadablePeriod) period35);
        java.lang.Object obj38 = mutableInterval37.clone();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "2020-11-25T01:25:33.977Z/2020-11-25T01:25:33.978Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "2020-11-25T01:25:33.977Z/2020-11-25T01:25:33.978Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "2020-11-25T01:25:33.977Z/2020-11-25T01:25:33.978Z");
    }

    @Test
    @Ignore
  public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableInterval25.setPeriodAfterStart(readablePeriod26);
        org.joda.time.Period period28 = mutableInterval25.toPeriod();
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval25.copy();
        boolean boolean30 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(obj36, chronology37);
        boolean boolean39 = mutableInterval3.equals((java.lang.Object) mutableInterval38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        org.joda.time.MutableInterval mutableInterval42 = org.joda.time.MutableInterval.parse("1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z");
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        boolean boolean44 = mutableInterval3.isBefore((org.joda.time.ReadableInterval) mutableInterval42);
        long long45 = mutableInterval42.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        org.joda.time.Chronology chronology43 = mutableInterval40.getChronology();
        long long44 = mutableInterval40.getStartMillis();
        org.joda.time.MutableInterval mutableInterval45 = mutableInterval40.copy();
        boolean boolean46 = mutableInterval40.containsNow();
        boolean boolean47 = mutableInterval40.isAfterNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    @Ignore
  public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.copy();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(readableInstant14, readablePeriod15);
        mutableInterval16.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval16.toMutableInterval();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        long long24 = mutableInterval23.toDurationMillis();
        mutableInterval16.setInterval((org.joda.time.ReadableInterval) mutableInterval23);
        mutableInterval16.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        mutableInterval35.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        mutableInterval42.setDurationAfterStart((long) (byte) 1);
        boolean boolean47 = mutableInterval42.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology48 = mutableInterval42.getChronology();
        mutableInterval35.setChronology(chronology48);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology48);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology48);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval16, chronology48);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology48);
        mutableInterval3.setChronology(chronology48);
        org.joda.time.ReadableInterval readableInterval55 = null;
        boolean boolean56 = mutableInterval3.isAfter(readableInterval55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        java.lang.Object obj62 = mutableInterval60.clone();
        mutableInterval60.setStartMillis((long) 1);
        boolean boolean65 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval60);
        long long66 = mutableInterval3.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
    }

    @Test
    @Ignore
  public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval11 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        java.lang.Object obj17 = mutableInterval15.clone();
        org.joda.time.Interval interval18 = mutableInterval15.toInterval();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        boolean boolean25 = interval18.isBefore((org.joda.time.ReadableInterval) mutableInterval22);
        boolean boolean26 = mutableInterval11.isAfter((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.MutableInterval mutableInterval27 = mutableInterval22.toMutableInterval();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = mutableInterval22.toPeriod(periodType28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        java.lang.Object obj35 = mutableInterval33.clone();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(obj35, chronology36);
        org.joda.time.DateTime dateTime38 = mutableInterval37.getEnd();
        boolean boolean39 = mutableInterval22.contains((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.DateTime dateTime40 = mutableInterval37.getStart();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval37);
        boolean boolean43 = mutableInterval37.contains(1606267467222L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    @Ignore
  public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Period period10 = mutableInterval7.toPeriod();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval7.copy();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        java.lang.Object obj17 = mutableInterval15.clone();
        mutableInterval15.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology20 = mutableInterval15.getChronology();
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval15.toMutableInterval();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        mutableInterval30.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        long long39 = interval38.getEndMillis();
        boolean boolean41 = interval38.isAfter((long) (byte) 100);
        boolean boolean42 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Duration duration43 = mutableInterval30.toDuration();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(readableInstant50, readablePeriod51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(0L, 1L, chronology55);
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        org.joda.time.DateTime dateTime58 = mutableInterval56.getStart();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.DateTime dateTime64 = mutableInterval62.getStart();
        mutableInterval52.setInterval((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime64);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration43);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration43);
        boolean boolean70 = mutableInterval7.contains((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval7.setDurationAfterStart(1606267401259L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    @Ignore
  public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableInterval17.setDurationAfterStart(readableDuration20);
        boolean boolean22 = mutableInterval17.isAfterNow();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        org.joda.time.DateTime dateTime29 = mutableInterval27.getStart();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = mutableInterval46.getStart();
        boolean boolean49 = mutableInterval46.isBefore((long) (short) 10);
        mutableInterval17.setInterval((org.joda.time.ReadableInterval) mutableInterval46);
        boolean boolean51 = mutableInterval46.isAfterNow();
        java.lang.Object obj52 = mutableInterval46.clone();
        boolean boolean54 = mutableInterval46.contains(1606267419395L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    @Ignore
  public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableInterval17.setDurationAfterStart(readableDuration20);
        boolean boolean22 = mutableInterval17.isAfterNow();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        org.joda.time.DateTime dateTime29 = mutableInterval27.getStart();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = mutableInterval46.getStart();
        boolean boolean49 = mutableInterval46.isBefore((long) (short) 10);
        mutableInterval17.setInterval((org.joda.time.ReadableInterval) mutableInterval46);
        boolean boolean51 = mutableInterval46.isAfterNow();
        long long52 = mutableInterval46.getStartMillis();
        java.lang.String str53 = mutableInterval46.toString();
        org.joda.time.Chronology chronology54 = mutableInterval46.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval46.setInterval(1606267407051L, 1606267294649L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z" + "'", str53, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology54);
    }

    @Test
    @Ignore
  public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        long long21 = interval20.getEndMillis();
        boolean boolean23 = interval20.isAfter((long) (byte) 100);
        boolean boolean24 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Duration duration25 = mutableInterval12.toDuration();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableInstant32, readablePeriod33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        mutableInterval34.setInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime46);
        mutableInterval3.setEnd((org.joda.time.ReadableInstant) dateTime46);
        java.lang.Object obj51 = mutableInterval3.clone();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        mutableInterval57.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        mutableInterval64.setDurationAfterStart((long) (byte) 1);
        boolean boolean69 = mutableInterval64.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology70 = mutableInterval64.getChronology();
        mutableInterval57.setChronology(chronology70);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((long) '4', (long) 'a', chronology70);
        boolean boolean73 = mutableInterval72.isBeforeNow();
        boolean boolean74 = mutableInterval72.containsNow();
        boolean boolean75 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval72);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(readableInstant76, readablePeriod77);
        mutableInterval78.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval81 = mutableInterval78.toMutableInterval();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(0L, 1L, chronology84);
        long long86 = mutableInterval85.toDurationMillis();
        mutableInterval78.setInterval((org.joda.time.ReadableInterval) mutableInterval85);
        org.joda.time.DateTime dateTime88 = mutableInterval78.getStart();
        boolean boolean89 = mutableInterval72.equals((java.lang.Object) dateTime88);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(mutableInterval81);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1L + "'", long86 == 1L);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    @Ignore
  public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, 1L, chronology5);
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.DateTime dateTime8 = mutableInterval6.getStart();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        mutableInterval2.setInterval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        java.lang.Object obj21 = mutableInterval19.clone();
        org.joda.time.Interval interval22 = mutableInterval19.toInterval();
        org.joda.time.ReadableInterval readableInterval23 = null;
        boolean boolean24 = mutableInterval19.isBefore(readableInterval23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology27);
        boolean boolean29 = mutableInterval19.isAfter((org.joda.time.ReadableInterval) mutableInterval28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        mutableInterval33.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        long long42 = interval41.getEndMillis();
        boolean boolean44 = interval41.isAfter((long) (byte) 100);
        boolean boolean45 = mutableInterval33.overlaps((org.joda.time.ReadableInterval) interval41);
        mutableInterval28.setInterval((org.joda.time.ReadableInterval) interval41);
        mutableInterval28.setDurationAfterStart((long) 1);
        org.joda.time.MutableInterval mutableInterval49 = mutableInterval28.toMutableInterval();
        long long50 = mutableInterval28.toDurationMillis();
        boolean boolean51 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        java.lang.Object obj52 = mutableInterval2.clone();
        boolean boolean53 = mutableInterval2.isBeforeNow();
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    @Ignore
  public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        mutableInterval20.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        java.lang.Object obj29 = mutableInterval27.clone();
        org.joda.time.Interval interval30 = mutableInterval27.toInterval();
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = mutableInterval27.isBefore(readableInterval31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology35);
        boolean boolean37 = mutableInterval27.isAfter((org.joda.time.ReadableInterval) mutableInterval36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        org.joda.time.DateTime dateTime43 = mutableInterval41.getStart();
        boolean boolean44 = mutableInterval27.isBefore((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean45 = mutableInterval20.contains((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        java.lang.Object obj51 = mutableInterval49.clone();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(obj51, chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutableInterval53.setPeriodAfterStart(readablePeriod54);
        org.joda.time.Period period56 = mutableInterval53.toPeriod();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        java.lang.Object obj62 = mutableInterval60.clone();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(obj62, chronology63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        mutableInterval64.setPeriodAfterStart(readablePeriod65);
        org.joda.time.Period period67 = mutableInterval64.toPeriod();
        mutableInterval53.setPeriodAfterStart((org.joda.time.ReadablePeriod) period67);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadablePeriod) period67);
        boolean boolean70 = mutableInterval3.equals((java.lang.Object) mutableInterval69);
        org.joda.time.Period period71 = mutableInterval3.toPeriod();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(period71);
    }

    @Test
    @Ignore
  public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readableInstant17, readablePeriod18);
        mutableInterval19.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval22 = mutableInterval19.toMutableInterval();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        long long27 = mutableInterval26.toDurationMillis();
        mutableInterval19.setInterval((org.joda.time.ReadableInterval) mutableInterval26);
        org.joda.time.Duration duration29 = mutableInterval26.toDuration();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        java.lang.Object obj35 = mutableInterval33.clone();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        java.lang.Object obj41 = mutableInterval39.clone();
        java.lang.Object obj42 = mutableInterval39.clone();
        boolean boolean43 = mutableInterval33.equals((java.lang.Object) mutableInterval39);
        org.joda.time.Interval interval44 = mutableInterval39.toInterval();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        java.lang.Object obj50 = mutableInterval48.clone();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(obj50, chronology51);
        org.joda.time.DateTime dateTime53 = mutableInterval52.getEnd();
        boolean boolean54 = interval44.contains((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime53);
        boolean boolean56 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval55);
        boolean boolean58 = mutableInterval55.contains(1L);
        boolean boolean59 = mutableInterval55.isBeforeNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    @Ignore
  public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readablePeriod5, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readablePeriod4, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        mutableInterval26.setInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime41 = mutableInterval40.getStart();
        mutableInterval40.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean45 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        java.lang.Object obj51 = mutableInterval49.clone();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(obj51, chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutableInterval53.setPeriodBeforeEnd(readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        long long68 = interval67.getEndMillis();
        boolean boolean70 = interval67.isAfter((long) (byte) 100);
        boolean boolean71 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Duration duration72 = mutableInterval59.toDuration();
        boolean boolean73 = mutableInterval53.isBefore((org.joda.time.ReadableInterval) mutableInterval59);
        org.joda.time.MutableInterval mutableInterval74 = mutableInterval59.toMutableInterval();
        java.lang.String str75 = mutableInterval74.toString();
        java.lang.String str76 = mutableInterval74.toString();
        boolean boolean77 = mutableInterval40.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        org.joda.time.ReadableInterval readableInterval78 = null;
        boolean boolean79 = mutableInterval74.isAfter(readableInterval78);
        org.joda.time.Interval interval80 = mutableInterval74.toInterval();
        org.joda.time.MutableInterval mutableInterval81 = mutableInterval74.copy();
        boolean boolean82 = mutableInterval81.isAfterNow();
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str75, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str76, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(mutableInterval81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Period period6 = mutableInterval2.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval21.getStart();
        mutableInterval11.setInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readablePeriod8, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readablePeriod7, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean44 = mutableInterval2.isAfter((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime35, readableInstant45);
        boolean boolean48 = mutableInterval46.isAfter(1606267387514L);
        mutableInterval46.setStartMillis(1606267467222L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    @Ignore
  public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        boolean boolean15 = interval8.isBefore((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean16 = mutableInterval1.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        java.lang.Object obj17 = mutableInterval1.clone();
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean14 = mutableInterval12.containsNow();
        org.joda.time.Interval interval15 = mutableInterval12.toInterval();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.DateTime dateTime21 = mutableInterval19.getStart();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(readableInstant22, readablePeriod23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.DateTime dateTime30 = mutableInterval28.getStart();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        mutableInterval24.setInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime39 = mutableInterval38.getStart();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        mutableInterval43.setDurationAfterStart((long) (byte) 1);
        boolean boolean48 = mutableInterval43.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        java.lang.Object obj54 = mutableInterval52.clone();
        mutableInterval52.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology57 = mutableInterval52.getChronology();
        mutableInterval43.setChronology(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(readableInstant59, readablePeriod60);
        mutableInterval61.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        java.lang.Object obj69 = mutableInterval67.clone();
        mutableInterval67.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology72 = mutableInterval67.getChronology();
        mutableInterval61.setChronology(chronology72);
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval43, chronology72);
        boolean boolean75 = mutableInterval38.contains((org.joda.time.ReadableInterval) mutableInterval74);
        org.joda.time.MutableInterval mutableInterval76 = mutableInterval74.toMutableInterval();
        boolean boolean77 = interval15.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        boolean boolean78 = mutableInterval74.isAfterNow();
        mutableInterval74.setEndMillis(1606267420449L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(mutableInterval76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    @Ignore
  public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        java.lang.Object obj8 = mutableInterval7.clone();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        mutableInterval11.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval14 = mutableInterval11.toMutableInterval();
        org.joda.time.Period period15 = mutableInterval11.toPeriod();
        mutableInterval7.setPeriodAfterStart((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        org.joda.time.Interval interval23 = mutableInterval20.toInterval();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutableInterval20.setPeriodAfterStart(readablePeriod24);
        boolean boolean26 = mutableInterval7.isAfter((org.joda.time.ReadableInterval) mutableInterval20);
        boolean boolean27 = mutableInterval7.isAfterNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    @Ignore
  public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        mutableInterval3.setEnd(readableInstant7);
        mutableInterval3.setEndMillis((long) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readableInstant17, readablePeriod18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.DateTime dateTime25 = mutableInterval23.getStart();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        mutableInterval19.setInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = mutableInterval33.getStart();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getEnd();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        mutableInterval39.setDurationAfterStart((long) (byte) 1);
        boolean boolean44 = mutableInterval39.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        java.lang.Object obj50 = mutableInterval48.clone();
        mutableInterval48.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology53 = mutableInterval48.getChronology();
        mutableInterval39.setChronology(chronology53);
        mutableInterval33.setChronology(chronology53);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology53);
        boolean boolean57 = mutableInterval3.isAfterNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        long long10 = mutableInterval3.getStartMillis();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = mutableInterval3.toPeriod(periodType12);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(readableInstant2, readablePeriod3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.DateTime dateTime10 = mutableInterval8.getStart();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        mutableInterval4.setInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readablePeriod1, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval19);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval19);
        boolean boolean22 = mutableInterval19.isAfterNow();
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    @Ignore
  public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.copy();
        org.joda.time.Duration duration10 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        org.joda.time.Interval interval23 = mutableInterval20.toInterval();
        org.joda.time.ReadableInterval readableInterval24 = null;
        boolean boolean25 = mutableInterval20.isBefore(readableInterval24);
        org.joda.time.MutableInterval mutableInterval26 = mutableInterval20.copy();
        boolean boolean27 = mutableInterval14.contains((org.joda.time.ReadableInterval) mutableInterval20);
        mutableInterval20.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology31 = mutableInterval20.getChronology();
        boolean boolean32 = mutableInterval20.isBeforeNow();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(readableInstant33, readablePeriod34);
        mutableInterval35.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval38 = mutableInterval35.toMutableInterval();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        long long43 = mutableInterval42.toDurationMillis();
        mutableInterval35.setInterval((org.joda.time.ReadableInterval) mutableInterval42);
        boolean boolean45 = mutableInterval20.isBefore((org.joda.time.ReadableInterval) mutableInterval42);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval42);
        boolean boolean47 = mutableInterval3.isBefore((org.joda.time.ReadableInterval) mutableInterval46);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(mutableInterval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267395067L, 1606267440990L);
        org.joda.time.MutableInterval mutableInterval3 = mutableInterval2.toMutableInterval();
        org.junit.Assert.assertNotNull(mutableInterval3);
    }

    @Test
    @Ignore
  public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        org.joda.time.Chronology chronology43 = mutableInterval40.getChronology();
        long long44 = mutableInterval40.getStartMillis();
        org.joda.time.MutableInterval mutableInterval45 = mutableInterval40.copy();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        mutableInterval50.setDurationAfterStart((long) (byte) 1);
        boolean boolean55 = mutableInterval50.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology56 = mutableInterval50.getChronology();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        java.lang.Object obj62 = mutableInterval60.clone();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(obj62, chronology63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        mutableInterval64.setPeriodAfterStart(readablePeriod65);
        org.joda.time.Period period67 = mutableInterval64.toPeriod();
        mutableInterval50.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period67);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        java.lang.Object obj74 = mutableInterval72.clone();
        org.joda.time.Interval interval75 = mutableInterval72.toInterval();
        org.joda.time.ReadableInterval readableInterval76 = null;
        boolean boolean77 = mutableInterval72.isBefore(readableInterval76);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology80);
        boolean boolean82 = mutableInterval72.isAfter((org.joda.time.ReadableInterval) mutableInterval81);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.DateTime dateTime88 = mutableInterval86.getStart();
        boolean boolean89 = mutableInterval72.isBefore((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period67, (org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval(readableInstant46, (org.joda.time.ReadablePeriod) period67);
        boolean boolean92 = mutableInterval45.overlaps((org.joda.time.ReadableInterval) mutableInterval91);
        boolean boolean94 = mutableInterval45.isBefore(1606267331452L);
        mutableInterval45.setDurationAfterStart(1606267431044L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    @Ignore
  public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(0L, 1L, chronology3);
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval4.getStart();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(obj12, chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableInterval14.setPeriodAfterStart(readablePeriod15);
        org.joda.time.Period period17 = mutableInterval14.toPeriod();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadablePeriod) period17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(obj24, chronology25);
        org.joda.time.Duration duration27 = mutableInterval26.toDuration();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(readableInstant29, readablePeriod30);
        mutableInterval31.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval34 = mutableInterval31.toMutableInterval();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        long long39 = mutableInterval38.toDurationMillis();
        mutableInterval31.setInterval((org.joda.time.ReadableInterval) mutableInterval38);
        org.joda.time.Duration duration41 = mutableInterval38.toDuration();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        java.lang.Object obj47 = mutableInterval45.clone();
        org.joda.time.Interval interval48 = mutableInterval45.toInterval();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        mutableInterval45.setPeriodAfterStart(readablePeriod49);
        mutableInterval45.setEndMillis((long) 100);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(0L, 1L, chronology55);
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        mutableInterval56.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        java.lang.Object obj65 = mutableInterval63.clone();
        org.joda.time.Interval interval66 = mutableInterval63.toInterval();
        org.joda.time.ReadableInterval readableInterval67 = null;
        boolean boolean68 = mutableInterval63.isBefore(readableInterval67);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology71);
        boolean boolean73 = mutableInterval63.isAfter((org.joda.time.ReadableInterval) mutableInterval72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval77.getStart();
        boolean boolean80 = mutableInterval63.isBefore((org.joda.time.ReadableInstant) dateTime79);
        boolean boolean81 = mutableInterval56.contains((org.joda.time.ReadableInstant) dateTime79);
        boolean boolean82 = mutableInterval45.isBefore((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime79);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:23:02.887Z/2020-11-25T01:23:02.888Z");
        org.junit.Assert.assertNotNull(mutableInterval1);
    }

    @Test
    @Ignore
  public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = mutableInterval10.isBefore(readableInterval14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology18);
        boolean boolean20 = mutableInterval10.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        boolean boolean27 = mutableInterval10.isBefore((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(readableInstant29, readablePeriod30);
        mutableInterval31.setDurationBeforeEnd(1L);
        boolean boolean34 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime55);
        mutableInterval31.setStart((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean60 = mutableInterval31.isBefore(1606267410535L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    @Ignore
  public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableInterval3.setDurationBeforeEnd(readableDuration4);
        boolean boolean6 = mutableInterval3.isBeforeNow();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(readableInstant7, readablePeriod8);
        long long10 = mutableInterval9.getEndMillis();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval9.copy();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        java.lang.Object obj17 = mutableInterval15.clone();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(obj17, chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        mutableInterval19.setPeriodAfterStart(readablePeriod20);
        org.joda.time.Period period22 = mutableInterval19.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(readableInstant25, readablePeriod26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getStart();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        mutableInterval27.setInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(readablePeriod24, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readablePeriod23, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(readableInstant43, readablePeriod44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        mutableInterval45.setInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period22, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((long) (-1), (long) (byte) 100);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        java.lang.Object obj69 = mutableInterval67.clone();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(obj69, chronology70);
        org.joda.time.DateTime dateTime72 = mutableInterval71.getEnd();
        boolean boolean73 = mutableInterval63.isBefore((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime72);
        boolean boolean75 = mutableInterval11.contains((org.joda.time.ReadableInstant) dateTime72);
        boolean boolean76 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime72);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1606267536262L + "'", long10 == 1606267536262L);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    @Ignore
  public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:22:04.058Z/2020-11-25T01:22:04.058Z");
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        mutableInterval8.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval8.toMutableInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        long long16 = mutableInterval15.toDurationMillis();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) mutableInterval15);
        mutableInterval8.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        mutableInterval27.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        mutableInterval34.setDurationAfterStart((long) (byte) 1);
        boolean boolean39 = mutableInterval34.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        mutableInterval27.setChronology(chronology40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology40);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology40);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval8, chronology40);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology40);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(1606267323901L, 1606267324058L, chronology40);
        mutableInterval1.setChronology(chronology40);
        org.joda.time.MutableInterval mutableInterval48 = mutableInterval1.copy();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((long) 100, 1606267358686L);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(readableInstant52, readablePeriod53);
        mutableInterval54.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval57 = mutableInterval54.toMutableInterval();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        long long62 = mutableInterval61.toDurationMillis();
        mutableInterval54.setInterval((org.joda.time.ReadableInterval) mutableInterval61);
        org.joda.time.Duration duration64 = mutableInterval61.toDuration();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        java.lang.Object obj70 = mutableInterval68.clone();
        org.joda.time.Interval interval71 = mutableInterval68.toInterval();
        org.joda.time.ReadableInterval readableInterval72 = null;
        boolean boolean73 = mutableInterval68.isBefore(readableInterval72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology76);
        boolean boolean78 = mutableInterval68.isAfter((org.joda.time.ReadableInterval) mutableInterval77);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(0L, 1L, chronology81);
        org.joda.time.Interval interval83 = mutableInterval82.toInterval();
        org.joda.time.DateTime dateTime84 = mutableInterval82.getStart();
        boolean boolean85 = mutableInterval68.isBefore((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration64, (org.joda.time.ReadableInstant) dateTime84);
        mutableInterval51.setStart((org.joda.time.ReadableInstant) dateTime84);
        boolean boolean88 = mutableInterval48.contains((org.joda.time.ReadableInstant) dateTime84);
        mutableInterval48.setDurationBeforeEnd(1606267397396L);
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertNotNull(mutableInterval57);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:22:01.599Z/2020-11-25T01:22:01.600Z");
        org.joda.time.Interval interval2 = mutableInterval1.toInterval();
        boolean boolean4 = mutableInterval1.contains(1606267358686L);
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    @Ignore
  public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        long long6 = mutableInterval3.getStartMillis();
        mutableInterval3.setDurationBeforeEnd(1606267284862L);
        java.lang.String str9 = mutableInterval3.toString();
        mutableInterval3.setDurationBeforeEnd((long) (byte) 10);
        org.joda.time.MutableInterval mutableInterval12 = mutableInterval3.copy();
        org.joda.time.Chronology chronology13 = mutableInterval12.getChronology();
        long long14 = mutableInterval12.getEndMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1919-02-06T22:38:35.139Z/1970-01-01T00:00:00.001Z" + "'", str9, "1919-02-06T22:38:35.139Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(97L, 1606267376890L);
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = mutableInterval2.toPeriod(periodType3);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    @Ignore
  public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval11 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        java.lang.Object obj17 = mutableInterval15.clone();
        org.joda.time.Interval interval18 = mutableInterval15.toInterval();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        boolean boolean25 = interval18.isBefore((org.joda.time.ReadableInterval) mutableInterval22);
        boolean boolean26 = mutableInterval11.isAfter((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.MutableInterval mutableInterval27 = mutableInterval22.toMutableInterval();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = mutableInterval22.toPeriod(periodType28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        java.lang.Object obj35 = mutableInterval33.clone();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(obj35, chronology36);
        org.joda.time.DateTime dateTime38 = mutableInterval37.getEnd();
        boolean boolean39 = mutableInterval22.contains((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.DateTime dateTime40 = mutableInterval37.getStart();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval37);
        long long42 = mutableInterval3.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
    }

    @Test
    @Ignore
  public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        boolean boolean25 = mutableInterval22.isBefore((long) (short) 10);
        org.joda.time.Interval interval26 = mutableInterval22.toInterval();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        java.lang.Object obj32 = mutableInterval30.clone();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(obj32, chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        mutableInterval34.setPeriodBeforeEnd(readablePeriod35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readableInstant37, readablePeriod38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        mutableInterval39.setInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(0L, 1L, chronology55);
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        java.lang.Object obj58 = mutableInterval56.clone();
        org.joda.time.Interval interval59 = mutableInterval56.toInterval();
        org.joda.time.ReadableInterval readableInterval60 = null;
        boolean boolean61 = mutableInterval56.isBefore(readableInterval60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology64);
        boolean boolean66 = mutableInterval56.isAfter((org.joda.time.ReadableInterval) mutableInterval65);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        org.joda.time.DateTime dateTime72 = mutableInterval70.getStart();
        boolean boolean73 = mutableInterval56.isBefore((org.joda.time.ReadableInstant) dateTime72);
        mutableInterval34.setInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime72);
        boolean boolean75 = mutableInterval22.contains((org.joda.time.ReadableInstant) dateTime72);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    @Ignore
  public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(0L, 1L, chronology3);
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        java.lang.Object obj6 = mutableInterval4.clone();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(obj6, chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableInterval8.setPeriodBeforeEnd(readablePeriod9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableInstant11, readablePeriod12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.DateTime dateTime19 = mutableInterval17.getStart();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.DateTime dateTime25 = mutableInterval23.getStart();
        mutableInterval13.setInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        java.lang.Object obj32 = mutableInterval30.clone();
        org.joda.time.Interval interval33 = mutableInterval30.toInterval();
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = mutableInterval30.isBefore(readableInterval34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology38);
        boolean boolean40 = mutableInterval30.isAfter((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        boolean boolean47 = mutableInterval30.isBefore((org.joda.time.ReadableInstant) dateTime46);
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        java.lang.Object obj55 = mutableInterval53.clone();
        java.lang.Object obj56 = mutableInterval53.clone();
        org.joda.time.MutableInterval mutableInterval57 = mutableInterval53.copy();
        org.joda.time.Duration duration58 = mutableInterval53.toDuration();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(readableInstant60, readablePeriod61);
        long long63 = mutableInterval62.getEndMillis();
        org.joda.time.MutableInterval mutableInterval64 = mutableInterval62.copy();
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(readableDuration65, readableInstant66);
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Period period69 = mutableInterval67.toPeriod(periodType68);
        mutableInterval62.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period69);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadablePeriod) period69);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval57);
        org.junit.Assert.assertNotNull(duration58);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1606267536960L + "'", long63 == 1606267536960L);
        org.junit.Assert.assertNotNull(mutableInterval64);
        org.junit.Assert.assertNotNull(period69);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(0L, 1606267375515L);
    }

    @Test
    @Ignore
  public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        long long8 = mutableInterval3.toDurationMillis();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        mutableInterval12.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Interval interval24 = mutableInterval21.toInterval();
        mutableInterval21.setDurationBeforeEnd(0L);
        boolean boolean28 = mutableInterval21.contains((long) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        mutableInterval32.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        long long41 = interval40.getEndMillis();
        boolean boolean43 = interval40.isAfter((long) (byte) 100);
        boolean boolean44 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Duration duration45 = mutableInterval32.toDuration();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(readableInstant52, readablePeriod53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        mutableInterval54.setInterval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(readableInstant70, readablePeriod71);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        org.joda.time.DateTime dateTime78 = mutableInterval76.getStart();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(0L, 1L, chronology81);
        org.joda.time.Interval interval83 = mutableInterval82.toInterval();
        org.joda.time.DateTime dateTime84 = mutableInterval82.getStart();
        mutableInterval72.setInterval((org.joda.time.ReadableInstant) dateTime78, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) dateTime78);
        mutableInterval21.setDurationAfterStart((org.joda.time.ReadableDuration) duration45);
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration45);
        org.joda.time.PeriodType periodType89 = null;
        org.joda.time.Period period90 = mutableInterval12.toPeriod(periodType89);
        mutableInterval3.setPeriodAfterStart((org.joda.time.ReadablePeriod) period90);
        long long92 = mutableInterval3.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1L + "'", long92 == 1L);
    }

    @Test
    @Ignore
  public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = mutableInterval10.toPeriod(periodType11);
        mutableInterval7.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period12);
        boolean boolean14 = interval4.contains((org.joda.time.ReadableInterval) mutableInterval7);
        org.joda.time.DateTime dateTime15 = mutableInterval7.getStart();
        java.lang.Object obj16 = mutableInterval7.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z");
    }

    @Test
    @Ignore
  public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        java.lang.Object obj8 = mutableInterval7.clone();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        mutableInterval11.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval14 = mutableInterval11.toMutableInterval();
        org.joda.time.Period period15 = mutableInterval11.toPeriod();
        mutableInterval7.setPeriodAfterStart((org.joda.time.ReadablePeriod) period15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = mutableInterval7.toPeriod(periodType17);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    @Ignore
  public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableInterval17.setDurationAfterStart(readableDuration20);
        boolean boolean22 = mutableInterval17.isAfterNow();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        java.lang.Object obj29 = mutableInterval27.clone();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(obj29, chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        mutableInterval31.setPeriodBeforeEnd(readablePeriod32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        mutableInterval37.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        long long46 = interval45.getEndMillis();
        boolean boolean48 = interval45.isAfter((long) (byte) 100);
        boolean boolean49 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) interval45);
        org.joda.time.Duration duration50 = mutableInterval37.toDuration();
        boolean boolean51 = mutableInterval31.isBefore((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.MutableInterval mutableInterval52 = mutableInterval37.toMutableInterval();
        java.lang.String str53 = mutableInterval52.toString();
        boolean boolean54 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval52);
        boolean boolean56 = mutableInterval3.isBefore(1606267409149L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(mutableInterval52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str53, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    @Ignore
  public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval3.isAfterNow();
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval3.toMutableInterval();
        org.joda.time.DateTime dateTime7 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        mutableInterval11.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        long long20 = interval19.getEndMillis();
        boolean boolean22 = interval19.isAfter((long) (byte) 100);
        boolean boolean23 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Duration duration24 = mutableInterval11.toDuration();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.DateTime dateTime30 = mutableInterval28.getStart();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        mutableInterval33.setInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        mutableInterval52.setDurationAfterStart((long) (byte) 1);
        mutableInterval52.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        org.joda.time.DateTime dateTime63 = mutableInterval61.getStart();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        java.lang.Object obj69 = mutableInterval67.clone();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(obj69, chronology70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        mutableInterval71.setPeriodAfterStart(readablePeriod72);
        org.joda.time.Period period74 = mutableInterval71.toPeriod();
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadablePeriod) period74);
        boolean boolean76 = mutableInterval52.isBefore((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime63);
        mutableInterval77.setInterval(1606267358686L, 1606267374222L);
        long long81 = mutableInterval77.getStartMillis();
        boolean boolean82 = mutableInterval3.isBefore((org.joda.time.ReadableInterval) mutableInterval77);
        boolean boolean84 = mutableInterval77.isAfter(1606267372991L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1606267358686L + "'", long81 == 1606267358686L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    @Ignore
  public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        org.joda.time.ReadableInterval readableInterval9 = null;
        boolean boolean10 = mutableInterval5.isBefore(readableInterval9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        boolean boolean26 = mutableInterval21.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        mutableInterval14.setChronology(chronology27);
        mutableInterval5.setChronology(chronology27);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(1L, 1606267294649L, chronology27);
        org.joda.time.MutableInterval mutableInterval32 = org.joda.time.MutableInterval.parse("2020-11-25T01:22:16.732Z/2020-11-25T01:22:16.733Z");
        boolean boolean33 = mutableInterval32.isBeforeNow();
        boolean boolean34 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) mutableInterval32);
        mutableInterval32.setInterval(0L, 1606267375410L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval2);
        mutableInterval10.setDurationBeforeEnd(1606267326786L);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = mutableInterval2.getStart();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = mutableInterval2.toPeriod(periodType12);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267537810L + "'", long3 == 1606267537810L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(readableInstant10, readablePeriod11);
        long long13 = mutableInterval12.getEndMillis();
        org.joda.time.MutableInterval mutableInterval14 = mutableInterval12.copy();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(readableDuration15, readableInstant16);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = mutableInterval17.toPeriod(periodType18);
        mutableInterval12.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean28 = mutableInterval25.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval25.copy();
        boolean boolean30 = mutableInterval12.equals((java.lang.Object) mutableInterval29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableInterval12.setDurationBeforeEnd(readableDuration31);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        mutableInterval40.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        mutableInterval47.setDurationAfterStart((long) (byte) 1);
        boolean boolean52 = mutableInterval47.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology53 = mutableInterval47.getChronology();
        mutableInterval40.setChronology(chronology53);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology53);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(1606267320112L, 1606267327298L, chronology53);
        mutableInterval12.setChronology(chronology53);
        boolean boolean58 = mutableInterval2.isBefore((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean59 = mutableInterval2.isAfterNow();
        mutableInterval2.setDurationBeforeEnd(1606267464801L);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1606267537850L + "'", long13 == 1606267537850L);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    @Ignore
  public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = mutableInterval2.getStart();
        mutableInterval2.setDurationBeforeEnd((long) (short) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(obj19, chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        mutableInterval21.setPeriodBeforeEnd(readablePeriod22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        mutableInterval27.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        long long36 = interval35.getEndMillis();
        boolean boolean38 = interval35.isAfter((long) (byte) 100);
        boolean boolean39 = mutableInterval27.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration40 = mutableInterval27.toDuration();
        boolean boolean41 = mutableInterval21.isBefore((org.joda.time.ReadableInterval) mutableInterval27);
        org.joda.time.MutableInterval mutableInterval42 = mutableInterval27.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readableInstant44, readablePeriod45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.DateTime dateTime52 = mutableInterval50.getStart();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(0L, 1L, chronology55);
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        org.joda.time.DateTime dateTime58 = mutableInterval56.getStart();
        mutableInterval46.setInterval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(readablePeriod43, (org.joda.time.ReadableInstant) dateTime52);
        mutableInterval27.setEnd((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        mutableInterval65.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        long long74 = interval73.getEndMillis();
        boolean boolean76 = interval73.isAfter((long) (byte) 100);
        boolean boolean77 = mutableInterval65.overlaps((org.joda.time.ReadableInterval) interval73);
        boolean boolean78 = mutableInterval27.contains((org.joda.time.ReadableInterval) mutableInterval65);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(0L, 1L, chronology81);
        org.joda.time.Interval interval83 = mutableInterval82.toInterval();
        java.lang.Object obj84 = mutableInterval82.clone();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(obj84, chronology85);
        org.joda.time.Duration duration87 = mutableInterval86.toDuration();
        mutableInterval27.setDurationAfterStart((org.joda.time.ReadableDuration) duration87);
        mutableInterval2.setDurationAfterStart((org.joda.time.ReadableDuration) duration87);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267537937L + "'", long3 == 1606267537937L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertEquals(obj84.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj84), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj84), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration87);
    }

    @Test
    @Ignore
  public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = mutableInterval10.isBefore(readableInterval14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology18);
        boolean boolean20 = mutableInterval10.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        boolean boolean27 = mutableInterval10.isBefore((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(readableInstant29, readablePeriod30);
        mutableInterval31.setDurationBeforeEnd(1L);
        boolean boolean34 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = mutableInterval3.toPeriod(periodType35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval42 = mutableInterval40.copy();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod43);
        java.lang.Object obj45 = mutableInterval40.clone();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = mutableInterval40.toPeriod(periodType46);
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period47);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period47);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Period period6 = mutableInterval2.toPeriod();
        org.joda.time.Interval interval7 = mutableInterval2.toInterval();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval7);
    }

    @Test
    @Ignore
  public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        java.lang.Object obj10 = mutableInterval8.clone();
        java.lang.Object obj11 = mutableInterval8.clone();
        org.joda.time.MutableInterval mutableInterval12 = mutableInterval8.copy();
        org.joda.time.Chronology chronology13 = mutableInterval12.getChronology();
        mutableInterval12.setInterval(1606267323901L, 1606267346678L);
        boolean boolean17 = interval4.isBefore((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant18, readablePeriod19);
        mutableInterval20.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval23 = mutableInterval20.toMutableInterval();
        org.joda.time.DateTime dateTime24 = mutableInterval23.getEnd();
        org.joda.time.MutableInterval mutableInterval25 = mutableInterval23.toMutableInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval25.getStart();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval32 = mutableInterval30.copy();
        org.joda.time.Period period33 = mutableInterval30.toPeriod();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readableInstant34, readablePeriod35);
        mutableInterval36.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval39 = mutableInterval36.toMutableInterval();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        long long44 = mutableInterval43.toDurationMillis();
        mutableInterval36.setInterval((org.joda.time.ReadableInterval) mutableInterval43);
        org.joda.time.Duration duration46 = mutableInterval43.toDuration();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        java.lang.Object obj52 = mutableInterval50.clone();
        org.joda.time.Interval interval53 = mutableInterval50.toInterval();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutableInterval50.setPeriodAfterStart(readablePeriod54);
        mutableInterval50.setEndMillis((long) 100);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        mutableInterval61.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        java.lang.Object obj70 = mutableInterval68.clone();
        org.joda.time.Interval interval71 = mutableInterval68.toInterval();
        org.joda.time.ReadableInterval readableInterval72 = null;
        boolean boolean73 = mutableInterval68.isBefore(readableInterval72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology76);
        boolean boolean78 = mutableInterval68.isAfter((org.joda.time.ReadableInterval) mutableInterval77);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(0L, 1L, chronology81);
        org.joda.time.Interval interval83 = mutableInterval82.toInterval();
        org.joda.time.DateTime dateTime84 = mutableInterval82.getStart();
        boolean boolean85 = mutableInterval68.isBefore((org.joda.time.ReadableInstant) dateTime84);
        boolean boolean86 = mutableInterval61.contains((org.joda.time.ReadableInstant) dateTime84);
        boolean boolean87 = mutableInterval50.isBefore((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration46, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period33, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadablePeriod) period33);
        mutableInterval12.setPeriodAfterStart((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period92 = mutableInterval12.toPeriod();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(period92);
    }

    @Test
    @Ignore
  public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        long long9 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.toMutableInterval();
        mutableInterval3.setEndMillis(1606267537850L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval10);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) 10, 1606267503441L);
    }

    @Test
    @Ignore
  public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean14 = mutableInterval12.containsNow();
        org.joda.time.Duration duration15 = mutableInterval12.toDuration();
        mutableInterval12.setDurationBeforeEnd(1606267477158L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration15);
    }

    @Test
    @Ignore
  public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, 1L, chronology5);
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.DateTime dateTime8 = mutableInterval6.getStart();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        mutableInterval2.setInterval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        java.lang.Object obj21 = mutableInterval19.clone();
        org.joda.time.Interval interval22 = mutableInterval19.toInterval();
        org.joda.time.ReadableInterval readableInterval23 = null;
        boolean boolean24 = mutableInterval19.isBefore(readableInterval23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology27);
        boolean boolean29 = mutableInterval19.isAfter((org.joda.time.ReadableInterval) mutableInterval28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        mutableInterval33.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        long long42 = interval41.getEndMillis();
        boolean boolean44 = interval41.isAfter((long) (byte) 100);
        boolean boolean45 = mutableInterval33.overlaps((org.joda.time.ReadableInterval) interval41);
        mutableInterval28.setInterval((org.joda.time.ReadableInterval) interval41);
        mutableInterval28.setDurationAfterStart((long) 1);
        org.joda.time.MutableInterval mutableInterval49 = mutableInterval28.toMutableInterval();
        long long50 = mutableInterval28.toDurationMillis();
        boolean boolean51 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        java.lang.Object obj52 = mutableInterval2.clone();
        org.joda.time.Period period53 = mutableInterval2.toPeriod();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readableDuration54, readableInstant55);
        org.joda.time.MutableInterval mutableInterval57 = mutableInterval56.toMutableInterval();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        java.lang.Object obj63 = mutableInterval61.clone();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(obj63, chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        mutableInterval65.setPeriodBeforeEnd(readablePeriod66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        mutableInterval71.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        long long80 = interval79.getEndMillis();
        boolean boolean82 = interval79.isAfter((long) (byte) 100);
        boolean boolean83 = mutableInterval71.overlaps((org.joda.time.ReadableInterval) interval79);
        org.joda.time.Duration duration84 = mutableInterval71.toDuration();
        boolean boolean85 = mutableInterval65.isBefore((org.joda.time.ReadableInterval) mutableInterval71);
        org.joda.time.MutableInterval mutableInterval86 = mutableInterval71.toMutableInterval();
        java.lang.String str87 = mutableInterval86.toString();
        boolean boolean88 = mutableInterval86.containsNow();
        org.joda.time.Duration duration89 = mutableInterval86.toDuration();
        mutableInterval57.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration89);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration89);
        boolean boolean93 = mutableInterval2.contains(1606267432779L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval((java.lang.Object) 1606267432779L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(mutableInterval57);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(mutableInterval86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str87, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    @Ignore
  public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        mutableInterval3.setEnd(readableInstant7);
        mutableInterval3.setEndMillis((long) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean17 = mutableInterval14.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval18 = mutableInterval14.copy();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(readableDuration22, readableInstant23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = mutableInterval24.toPeriod(periodType25);
        mutableInterval21.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period26);
        mutableInterval18.setPeriodAfterStart((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Interval interval29 = mutableInterval18.toInterval();
        long long30 = mutableInterval18.getStartMillis();
        boolean boolean31 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval18);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        java.lang.Object obj37 = mutableInterval35.clone();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(obj37, chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutableInterval39.setPeriodAfterStart(readablePeriod40);
        org.joda.time.Period period42 = mutableInterval39.toPeriod();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        mutableInterval46.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        mutableInterval53.setDurationAfterStart((long) (byte) 1);
        boolean boolean58 = mutableInterval53.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology59 = mutableInterval53.getChronology();
        mutableInterval46.setChronology(chronology59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        java.lang.Object obj66 = mutableInterval64.clone();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(obj66, chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        mutableInterval68.setPeriodAfterStart(readablePeriod69);
        org.joda.time.Period period71 = mutableInterval68.toPeriod();
        org.joda.time.MutableInterval mutableInterval72 = mutableInterval68.copy();
        boolean boolean73 = mutableInterval46.isAfter((org.joda.time.ReadableInterval) mutableInterval68);
        boolean boolean74 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval46);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        org.joda.time.DateTime dateTime80 = mutableInterval78.getStart();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(0L, 1L, chronology83);
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        java.lang.Object obj86 = mutableInterval84.clone();
        org.joda.time.Interval interval87 = mutableInterval84.toInterval();
        org.joda.time.ReadableInterval readableInterval88 = null;
        boolean boolean89 = mutableInterval84.isBefore(readableInterval88);
        org.joda.time.MutableInterval mutableInterval90 = mutableInterval84.copy();
        boolean boolean91 = mutableInterval78.contains((org.joda.time.ReadableInterval) mutableInterval84);
        mutableInterval84.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology95 = mutableInterval84.getChronology();
        mutableInterval46.setChronology(chronology95);
        mutableInterval18.setChronology(chronology95);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(mutableInterval72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertEquals(obj86.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj86), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj86), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(mutableInterval90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(chronology95);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        long long10 = mutableInterval3.getStartMillis();
        org.joda.time.DateTime dateTime11 = mutableInterval3.getStart();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    @Ignore
  public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.MutableInterval mutableInterval3 = mutableInterval2.copy();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        java.lang.Object obj9 = mutableInterval7.clone();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(obj9, chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutableInterval11.setPeriodBeforeEnd(readablePeriod12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(readableInstant14, readablePeriod15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        mutableInterval16.setInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        java.lang.Object obj35 = mutableInterval33.clone();
        org.joda.time.Interval interval36 = mutableInterval33.toInterval();
        org.joda.time.ReadableInterval readableInterval37 = null;
        boolean boolean38 = mutableInterval33.isBefore(readableInterval37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology41);
        boolean boolean43 = mutableInterval33.isAfter((org.joda.time.ReadableInterval) mutableInterval42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        boolean boolean50 = mutableInterval33.isBefore((org.joda.time.ReadableInstant) dateTime49);
        mutableInterval11.setInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean52 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime53 = mutableInterval3.getStart();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setStartMillis(1606267385067L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.MutableInterval mutableInterval3 = mutableInterval2.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.toMutableInterval();
        java.lang.String str5 = mutableInterval2.toString();
        org.joda.time.Duration duration6 = mutableInterval2.toDuration();
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(mutableInterval4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2020-11-25T01:25:38.941Z/2020-11-25T01:25:38.941Z" + "'", str5, "2020-11-25T01:25:38.941Z/2020-11-25T01:25:38.941Z");
        org.junit.Assert.assertNotNull(duration6);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(readableInstant4, readablePeriod5);
        mutableInterval6.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval6.toMutableInterval();
        org.joda.time.DateTime dateTime10 = mutableInterval9.getEnd();
        boolean boolean11 = mutableInterval2.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime10, readablePeriod12);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267539009L + "'", long3 == 1606267539009L);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    @Ignore
  public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        boolean boolean22 = mutableInterval17.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology23 = mutableInterval17.getChronology();
        mutableInterval10.setChronology(chronology23);
        long long25 = mutableInterval10.getStartMillis();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        mutableInterval29.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        mutableInterval36.setDurationAfterStart((long) (byte) 1);
        boolean boolean41 = mutableInterval36.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology42 = mutableInterval36.getChronology();
        mutableInterval29.setChronology(chronology42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        java.lang.Object obj49 = mutableInterval47.clone();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(obj49, chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        mutableInterval51.setPeriodAfterStart(readablePeriod52);
        org.joda.time.Period period54 = mutableInterval51.toPeriod();
        org.joda.time.MutableInterval mutableInterval55 = mutableInterval51.copy();
        boolean boolean56 = mutableInterval29.isAfter((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        java.lang.Object obj62 = mutableInterval60.clone();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(obj62, chronology63);
        boolean boolean65 = mutableInterval29.equals((java.lang.Object) mutableInterval64);
        boolean boolean66 = mutableInterval10.contains((org.joda.time.ReadableInterval) mutableInterval29);
        org.joda.time.Duration duration67 = mutableInterval10.toDuration();
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration67);
        long long69 = mutableInterval68.getEndMillis();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(mutableInterval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(duration67);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1606267539099L + "'", long69 == 1606267539099L);
    }

    @Test
    @Ignore
  public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        mutableInterval10.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        mutableInterval19.setDurationAfterStart((long) (byte) 1);
        boolean boolean24 = mutableInterval19.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        java.lang.Object obj31 = mutableInterval29.clone();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(obj31, chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        mutableInterval33.setPeriodAfterStart(readablePeriod34);
        org.joda.time.Period period36 = mutableInterval33.toPeriod();
        mutableInterval19.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period36);
        mutableInterval10.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        mutableInterval42.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        long long51 = interval50.getEndMillis();
        boolean boolean53 = interval50.isAfter((long) (byte) 100);
        boolean boolean54 = mutableInterval42.overlaps((org.joda.time.ReadableInterval) interval50);
        org.joda.time.Duration duration55 = mutableInterval42.toDuration();
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(readableInstant57, readablePeriod58);
        mutableInterval59.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval62 = mutableInterval59.toMutableInterval();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        long long67 = mutableInterval66.toDurationMillis();
        mutableInterval59.setInterval((org.joda.time.ReadableInterval) mutableInterval66);
        mutableInterval59.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        mutableInterval78.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(0L, 1L, chronology84);
        org.joda.time.Interval interval86 = mutableInterval85.toInterval();
        mutableInterval85.setDurationAfterStart((long) (byte) 1);
        boolean boolean90 = mutableInterval85.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology91 = mutableInterval85.getChronology();
        mutableInterval78.setChronology(chronology91);
        org.joda.time.MutableInterval mutableInterval93 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology91);
        org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology91);
        org.joda.time.MutableInterval mutableInterval95 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval59, chronology91);
        org.joda.time.MutableInterval mutableInterval96 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval10, chronology91);
        org.joda.time.MutableInterval mutableInterval97 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology91);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(mutableInterval62);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(chronology91);
    }

    @Test
    @Ignore
  public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.MutableInterval mutableInterval22 = mutableInterval3.toMutableInterval();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableDuration23, readableInstant24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = mutableInterval25.toPeriod(periodType26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(readableInstant28, readablePeriod29);
        long long31 = mutableInterval30.getEndMillis();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableInstant32, readablePeriod33);
        mutableInterval34.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval37 = mutableInterval34.toMutableInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval37.getEnd();
        boolean boolean39 = mutableInterval30.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period27, (org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval40);
        long long42 = mutableInterval3.getEndMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(period27);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1606267539672L + "'", long31 == 1606267539672L);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
    }

    @Test
    @Ignore
  public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.Period period7 = mutableInterval3.toPeriod();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    @Ignore
  public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology20 = mutableInterval9.getChronology();
        boolean boolean21 = mutableInterval9.isBeforeNow();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = mutableInterval9.toPeriod(periodType22);
        boolean boolean25 = mutableInterval9.contains(1606267328092L);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(readableInstant26, readablePeriod27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        mutableInterval28.setInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime40);
        boolean boolean42 = mutableInterval9.isBefore((org.joda.time.ReadableInstant) dateTime34);
        mutableInterval9.setEndMillis(1606267458577L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    @Ignore
  public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        long long6 = mutableInterval3.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval21.getStart();
        mutableInterval11.setInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readablePeriod8, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readablePeriod7, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean44 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str45 = mutableInterval3.toString();
        java.lang.String str46 = mutableInterval3.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str45, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str46, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(readableInstant2, readablePeriod3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.DateTime dateTime10 = mutableInterval8.getStart();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        mutableInterval4.setInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readablePeriod1, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readableInstant20, readablePeriod21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        mutableInterval22.setInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime37 = mutableInterval36.getStart();
        org.joda.time.Period period38 = mutableInterval36.toPeriod();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        mutableInterval42.setDurationAfterStart((long) (byte) 1);
        boolean boolean47 = mutableInterval42.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        java.lang.Object obj53 = mutableInterval51.clone();
        mutableInterval51.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology56 = mutableInterval51.getChronology();
        mutableInterval42.setChronology(chronology56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        mutableInterval61.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        java.lang.Object obj70 = mutableInterval68.clone();
        org.joda.time.Interval interval71 = mutableInterval68.toInterval();
        org.joda.time.ReadableInterval readableInterval72 = null;
        boolean boolean73 = mutableInterval68.isBefore(readableInterval72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology76);
        boolean boolean78 = mutableInterval68.isAfter((org.joda.time.ReadableInterval) mutableInterval77);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(0L, 1L, chronology81);
        org.joda.time.Interval interval83 = mutableInterval82.toInterval();
        org.joda.time.DateTime dateTime84 = mutableInterval82.getStart();
        boolean boolean85 = mutableInterval68.isBefore((org.joda.time.ReadableInstant) dateTime84);
        boolean boolean86 = mutableInterval61.contains((org.joda.time.ReadableInstant) dateTime84);
        boolean boolean87 = mutableInterval42.isAfter((org.joda.time.ReadableInstant) dateTime84);
        boolean boolean88 = mutableInterval36.isAfter((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.MutableInterval mutableInterval89 = mutableInterval36.copy();
        java.lang.Object obj90 = mutableInterval36.clone();
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(mutableInterval89);
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertEquals(obj90.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj90), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj90), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    @Ignore
  public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        boolean boolean15 = interval8.isBefore((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean16 = mutableInterval1.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        java.lang.Object obj28 = mutableInterval26.clone();
        org.joda.time.Interval interval29 = mutableInterval26.toInterval();
        org.joda.time.ReadableInterval readableInterval30 = null;
        boolean boolean31 = mutableInterval26.isBefore(readableInterval30);
        org.joda.time.MutableInterval mutableInterval32 = mutableInterval26.copy();
        boolean boolean33 = mutableInterval20.contains((org.joda.time.ReadableInterval) mutableInterval26);
        mutableInterval26.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology37 = mutableInterval26.getChronology();
        long long38 = mutableInterval26.toDurationMillis();
        mutableInterval26.setDurationAfterStart(1606267331417L);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        mutableInterval43.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        java.lang.Object obj51 = mutableInterval49.clone();
        mutableInterval49.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology54 = mutableInterval49.getChronology();
        mutableInterval43.setChronology(chronology54);
        mutableInterval26.setChronology(chronology54);
        org.joda.time.DateTime dateTime57 = mutableInterval26.getEnd();
        boolean boolean58 = mutableInterval1.contains((org.joda.time.ReadableInstant) dateTime57);
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1606267284827L + "'", long38 == 1606267284827L);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    @Ignore
  public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(obj12, chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableInterval14.setPeriodBeforeEnd(readablePeriod15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        mutableInterval20.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        long long29 = interval28.getEndMillis();
        boolean boolean31 = interval28.isAfter((long) (byte) 100);
        boolean boolean32 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Duration duration33 = mutableInterval20.toDuration();
        boolean boolean34 = mutableInterval14.isBefore((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.MutableInterval mutableInterval35 = mutableInterval20.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readableInstant37, readablePeriod38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        mutableInterval39.setInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(readablePeriod36, (org.joda.time.ReadableInstant) dateTime45);
        mutableInterval20.setEnd((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime55 = mutableInterval20.getEnd();
        boolean boolean56 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime57 = mutableInterval3.getEnd();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(readableInstant58, readablePeriod59);
        mutableInterval60.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval63 = mutableInterval60.toMutableInterval();
        org.joda.time.DateTime dateTime64 = mutableInterval63.getEnd();
        org.joda.time.MutableInterval mutableInterval65 = mutableInterval63.toMutableInterval();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, 1L, chronology68);
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        mutableInterval69.setDurationAfterStart((long) (byte) 1);
        mutableInterval69.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        org.joda.time.DateTime dateTime80 = mutableInterval78.getStart();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(0L, 1L, chronology83);
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        java.lang.Object obj86 = mutableInterval84.clone();
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval(obj86, chronology87);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        mutableInterval88.setPeriodAfterStart(readablePeriod89);
        org.joda.time.Period period91 = mutableInterval88.toPeriod();
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime80, (org.joda.time.ReadablePeriod) period91);
        boolean boolean93 = mutableInterval69.isBefore((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean94 = mutableInterval65.contains((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Chronology chronology95 = mutableInterval65.getChronology();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval65);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(mutableInterval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(mutableInterval65);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertEquals(obj86.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj86), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj86), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(chronology95);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = mutableInterval2.getStart();
        mutableInterval2.setDurationBeforeEnd((long) (short) 10);
        boolean boolean15 = mutableInterval2.contains(10L);
        org.joda.time.Period period16 = mutableInterval2.toPeriod();
        org.joda.time.Interval interval17 = mutableInterval2.toInterval();
        org.joda.time.DateTime dateTime18 = mutableInterval2.getStart();
        boolean boolean20 = mutableInterval2.contains(1606267464801L);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutableInterval24.setPeriodBeforeEnd(readablePeriod25);
        mutableInterval24.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(readableInstant29, readablePeriod30);
        long long32 = mutableInterval31.getEndMillis();
        boolean boolean33 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        long long34 = mutableInterval24.getStartMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval24);
        long long36 = mutableInterval24.toDurationMillis();
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267540496L + "'", long3 == 1606267540496L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1606267540496L + "'", long32 == 1606267540496L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 101L + "'", long36 == 101L);
    }

    @Test
    @Ignore
  public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval5.toMutableInterval();
        org.joda.time.DateTime dateTime8 = mutableInterval5.getEnd();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        long long21 = interval20.getEndMillis();
        boolean boolean23 = interval20.isAfter((long) (byte) 100);
        boolean boolean24 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) interval20);
        long long25 = mutableInterval12.toDurationMillis();
        long long26 = mutableInterval12.toDurationMillis();
        java.lang.String str27 = mutableInterval12.toString();
        boolean boolean28 = mutableInterval5.contains((org.joda.time.ReadableInterval) mutableInterval12);
        mutableInterval5.setDurationBeforeEnd(1606267439749L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str27, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:22:04.058Z/2020-11-25T01:22:04.058Z");
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        mutableInterval8.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval8.toMutableInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        long long16 = mutableInterval15.toDurationMillis();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) mutableInterval15);
        mutableInterval8.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        mutableInterval27.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        mutableInterval34.setDurationAfterStart((long) (byte) 1);
        boolean boolean39 = mutableInterval34.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        mutableInterval27.setChronology(chronology40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology40);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology40);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval8, chronology40);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology40);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(1606267323901L, 1606267324058L, chronology40);
        mutableInterval1.setChronology(chronology40);
        org.joda.time.MutableInterval mutableInterval48 = mutableInterval1.copy();
        org.joda.time.ReadableInterval readableInterval49 = null;
        boolean boolean50 = mutableInterval1.contains(readableInterval49);
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    @Ignore
  public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        mutableInterval13.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology18 = mutableInterval13.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval13.toMutableInterval();
        boolean boolean20 = mutableInterval7.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        java.lang.Object obj26 = mutableInterval24.clone();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(obj26, chronology27);
        org.joda.time.Duration duration29 = mutableInterval28.toDuration();
        mutableInterval19.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        boolean boolean32 = mutableInterval19.isAfter(1606267387514L);
        mutableInterval19.setEndMillis(1606267419395L);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        mutableInterval38.setPeriodAfterStart(readablePeriod39);
        org.joda.time.MutableInterval mutableInterval41 = mutableInterval38.toMutableInterval();
        boolean boolean42 = mutableInterval19.isAfter((org.joda.time.ReadableInterval) mutableInterval38);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    @Ignore
  public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.MutableInterval mutableInterval3 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        java.lang.Object obj9 = mutableInterval7.clone();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(obj9, chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutableInterval11.setPeriodBeforeEnd(readablePeriod12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Duration duration30 = mutableInterval17.toDuration();
        boolean boolean31 = mutableInterval11.isBefore((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.MutableInterval mutableInterval32 = mutableInterval17.toMutableInterval();
        java.lang.String str33 = mutableInterval32.toString();
        boolean boolean34 = mutableInterval32.containsNow();
        org.joda.time.Duration duration35 = mutableInterval32.toDuration();
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = mutableInterval3.toPeriod(periodType37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        mutableInterval42.setPeriodAfterStart(readablePeriod43);
        org.joda.time.MutableInterval mutableInterval45 = mutableInterval42.toMutableInterval();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval51 = mutableInterval49.copy();
        org.joda.time.Period period52 = mutableInterval49.toPeriod();
        mutableInterval42.setPeriodAfterStart((org.joda.time.ReadablePeriod) period52);
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period52);
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str33, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval51);
        org.junit.Assert.assertNotNull(period52);
    }

    @Test
    @Ignore
  public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        boolean boolean30 = mutableInterval28.containsNow();
        long long31 = mutableInterval28.getEndMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str29, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
    }

    @Test
    @Ignore
  public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(obj24, chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableInterval26.setPeriodAfterStart(readablePeriod27);
        org.joda.time.Period period29 = mutableInterval26.toPeriod();
        mutableInterval12.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        mutableInterval35.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        long long44 = interval43.getEndMillis();
        boolean boolean46 = interval43.isAfter((long) (byte) 100);
        boolean boolean47 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) interval43);
        org.joda.time.Duration duration48 = mutableInterval35.toDuration();
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(readableInstant50, readablePeriod51);
        mutableInterval52.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval55 = mutableInterval52.toMutableInterval();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        long long60 = mutableInterval59.toDurationMillis();
        mutableInterval52.setInterval((org.joda.time.ReadableInterval) mutableInterval59);
        mutableInterval52.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        mutableInterval71.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        mutableInterval78.setDurationAfterStart((long) (byte) 1);
        boolean boolean83 = mutableInterval78.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology84 = mutableInterval78.getChronology();
        mutableInterval71.setChronology(chronology84);
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology84);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology84);
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval52, chronology84);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology84);
        boolean boolean91 = mutableInterval89.contains(1606267335210L);
        org.joda.time.ReadableInterval readableInterval92 = null;
        boolean boolean93 = mutableInterval89.overlaps(readableInterval92);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(mutableInterval55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    @Ignore
  public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readableInstant16, readablePeriod17);
        mutableInterval18.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval18.toMutableInterval();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        long long26 = mutableInterval25.toDurationMillis();
        mutableInterval18.setInterval((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Duration duration28 = mutableInterval25.toDuration();
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        java.lang.Object obj35 = mutableInterval33.clone();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(obj35, chronology36);
        org.joda.time.DateTime dateTime38 = mutableInterval37.getEnd();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval39.copy();
        org.joda.time.Chronology chronology41 = null;
        mutableInterval40.setChronology(chronology41);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableInterval40);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readableInstant17, readablePeriod18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.DateTime dateTime25 = mutableInterval23.getStart();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        mutableInterval19.setInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration34 = mutableInterval33.toDuration();
        boolean boolean36 = mutableInterval33.contains(1606267374113L);
        boolean boolean38 = mutableInterval33.isBefore(1606267376989L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    @Ignore
  public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Period period10 = mutableInterval7.toPeriod();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        boolean boolean26 = mutableInterval21.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        mutableInterval14.setChronology(chronology27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(obj34, chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        mutableInterval36.setPeriodAfterStart(readablePeriod37);
        org.joda.time.Period period39 = mutableInterval36.toPeriod();
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval36.copy();
        boolean boolean41 = mutableInterval14.isAfter((org.joda.time.ReadableInterval) mutableInterval36);
        boolean boolean42 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        boolean boolean44 = mutableInterval7.isAfter(1606267373313L);
        org.joda.time.Duration duration45 = mutableInterval7.toDuration();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(duration45);
    }

    @Test
    @Ignore
  public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(readableInstant3, readablePeriod4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.DateTime dateTime11 = mutableInterval9.getStart();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        mutableInterval5.setInterval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean19 = mutableInterval2.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval21 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        java.lang.Object obj27 = mutableInterval25.clone();
        org.joda.time.Interval interval28 = mutableInterval25.toInterval();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        boolean boolean35 = interval28.isBefore((org.joda.time.ReadableInterval) mutableInterval32);
        boolean boolean36 = mutableInterval21.isAfter((org.joda.time.ReadableInterval) mutableInterval32);
        org.joda.time.MutableInterval mutableInterval37 = mutableInterval32.toMutableInterval();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = mutableInterval32.toPeriod(periodType38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadablePeriod) period39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        java.lang.Object obj52 = mutableInterval50.clone();
        org.joda.time.Interval interval53 = mutableInterval50.toInterval();
        org.joda.time.ReadableInterval readableInterval54 = null;
        boolean boolean55 = mutableInterval50.isBefore(readableInterval54);
        org.joda.time.MutableInterval mutableInterval56 = mutableInterval50.copy();
        boolean boolean57 = mutableInterval44.contains((org.joda.time.ReadableInterval) mutableInterval50);
        mutableInterval50.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(readableInstant67, readablePeriod68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(0L, 1L, chronology78);
        org.joda.time.Interval interval80 = mutableInterval79.toInterval();
        org.joda.time.DateTime dateTime81 = mutableInterval79.getStart();
        mutableInterval69.setInterval((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime81);
        boolean boolean84 = mutableInterval50.isAfter((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period39, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval86 = mutableInterval85.toMutableInterval();
        long long87 = mutableInterval86.getStartMillis();
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(mutableInterval56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(mutableInterval86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.MutableInterval mutableInterval3 = mutableInterval2.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.toMutableInterval();
        long long5 = mutableInterval4.toDurationMillis();
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    @Ignore
  public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        org.joda.time.DateTime dateTime12 = mutableInterval10.getStart();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(readableInstant13, readablePeriod14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.DateTime dateTime21 = mutableInterval19.getStart();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval25.getStart();
        mutableInterval15.setInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        mutableInterval34.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        long long43 = interval42.getEndMillis();
        boolean boolean45 = interval42.isAfter((long) (byte) 100);
        boolean boolean46 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Duration duration47 = mutableInterval34.toDuration();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readableInstant54, readablePeriod55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        mutableInterval56.setInterval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration73 = mutableInterval72.toDuration();
        org.joda.time.Interval interval74 = mutableInterval72.toInterval();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval78);
        java.lang.Object obj81 = mutableInterval78.clone();
        boolean boolean82 = interval74.equals(obj81);
        org.joda.time.Chronology chronology83 = interval74.getChronology();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(chronology83);
    }

    @Test
    @Ignore
  public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(readableInstant2, readablePeriod3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.DateTime dateTime10 = mutableInterval8.getStart();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        mutableInterval4.setInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readablePeriod1, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval19);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval19);
        java.lang.Object obj22 = mutableInterval21.clone();
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    @Ignore
  public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        long long8 = mutableInterval7.getStartMillis();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(obj14, chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableInterval16.setPeriodBeforeEnd(readablePeriod17);
        mutableInterval16.setDurationBeforeEnd((long) 100);
        mutableInterval16.setStartMillis(1L);
        org.joda.time.MutableInterval mutableInterval23 = mutableInterval16.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval24 = mutableInterval23.toMutableInterval();
        boolean boolean25 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    @Ignore
  public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = mutableInterval10.isBefore(readableInterval14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology18);
        boolean boolean20 = mutableInterval10.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        boolean boolean27 = mutableInterval10.isBefore((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(readableInstant29, readablePeriod30);
        mutableInterval31.setDurationBeforeEnd(1L);
        boolean boolean34 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime55);
        mutableInterval31.setStart((org.joda.time.ReadableInstant) dateTime40);
        long long59 = mutableInterval31.toDurationMillis();
        java.lang.String str60 = mutableInterval31.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1606267541948L + "'", long59 == 1606267541948L);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1970-01-01T00:00:00.000Z/2020-11-25T01:25:41.948Z" + "'", str60, "1970-01-01T00:00:00.000Z/2020-11-25T01:25:41.948Z");
    }

    @Test
    @Ignore
  public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        long long21 = interval20.getEndMillis();
        boolean boolean23 = interval20.isAfter((long) (byte) 100);
        boolean boolean24 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Duration duration25 = mutableInterval12.toDuration();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableInstant32, readablePeriod33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        mutableInterval34.setInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime46);
        mutableInterval3.setEnd((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(readableDuration56, readableInstant57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        mutableInterval62.setPeriodBeforeEnd(readablePeriod63);
        mutableInterval58.setInterval((org.joda.time.ReadableInterval) mutableInterval62);
        mutableInterval58.setDurationAfterStart(1606267295857L);
        boolean boolean68 = interval55.contains((org.joda.time.ReadableInterval) mutableInterval58);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        java.lang.Object obj74 = mutableInterval72.clone();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(obj74, chronology75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        mutableInterval76.setPeriodBeforeEnd(readablePeriod77);
        mutableInterval76.setDurationBeforeEnd((long) 100);
        mutableInterval58.setInterval((org.joda.time.ReadableInterval) mutableInterval76);
        org.joda.time.DateTime dateTime82 = mutableInterval76.getStart();
        boolean boolean83 = mutableInterval3.isAfter((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(readableDuration84, readableInstant85);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology89);
        org.joda.time.ReadablePeriod readablePeriod91 = null;
        mutableInterval90.setPeriodBeforeEnd(readablePeriod91);
        mutableInterval86.setInterval((org.joda.time.ReadableInterval) mutableInterval90);
        boolean boolean95 = mutableInterval86.isBefore(1606267286325L);
        java.lang.String str96 = mutableInterval86.toString();
        org.joda.time.Chronology chronology97 = mutableInterval86.getChronology();
        mutableInterval3.setChronology(chronology97);
        org.joda.time.MutableInterval mutableInterval99 = mutableInterval3.toMutableInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z" + "'", str96, "1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertNotNull(chronology97);
        org.junit.Assert.assertNotNull(mutableInterval99);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        mutableInterval22.setDurationAfterStart((long) 10);
        long long26 = mutableInterval22.getEndMillis();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        long long30 = mutableInterval29.getEndMillis();
        org.joda.time.MutableInterval mutableInterval31 = mutableInterval29.copy();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableDuration32, readableInstant33);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = mutableInterval34.toPeriod(periodType35);
        mutableInterval29.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime38 = mutableInterval29.getStart();
        mutableInterval29.setDurationBeforeEnd((long) (short) 10);
        boolean boolean42 = mutableInterval29.contains(10L);
        org.joda.time.Period period43 = mutableInterval29.toPeriod();
        org.joda.time.Interval interval44 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime45 = interval44.getEnd();
        boolean boolean46 = mutableInterval22.isAfter((org.joda.time.ReadableInterval) interval44);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1606267542305L + "'", long30 == 1606267542305L);
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readableInstant17, readablePeriod18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.DateTime dateTime25 = mutableInterval23.getStart();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        mutableInterval19.setInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration34 = mutableInterval33.toDuration();
        long long35 = mutableInterval33.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
    }

    @Test
    @Ignore
  public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = mutableInterval2.toPeriod(periodType3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableInstant5, readablePeriod6);
        mutableInterval7.setDurationBeforeEnd(1L);
        boolean boolean10 = mutableInterval7.isAfterNow();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        java.lang.Object obj16 = mutableInterval14.clone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(obj16, chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        mutableInterval18.setPeriodBeforeEnd(readablePeriod19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        mutableInterval24.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        long long33 = interval32.getEndMillis();
        boolean boolean35 = interval32.isAfter((long) (byte) 100);
        boolean boolean36 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Duration duration37 = mutableInterval24.toDuration();
        boolean boolean38 = mutableInterval18.isBefore((org.joda.time.ReadableInterval) mutableInterval24);
        org.joda.time.MutableInterval mutableInterval39 = mutableInterval24.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(readablePeriod40, (org.joda.time.ReadableInstant) dateTime49);
        mutableInterval24.setEnd((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean59 = mutableInterval7.contains((org.joda.time.ReadableInterval) mutableInterval24);
        org.joda.time.DateTime dateTime60 = mutableInterval24.getEnd();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period4, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        java.lang.Object obj67 = mutableInterval65.clone();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(obj67, chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        mutableInterval69.setPeriodBeforeEnd(readablePeriod70);
        mutableInterval69.setDurationBeforeEnd((long) 100);
        mutableInterval69.setStartMillis(1L);
        boolean boolean76 = mutableInterval61.isAfter((org.joda.time.ReadableInterval) mutableInterval69);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        java.lang.Object obj82 = mutableInterval80.clone();
        org.joda.time.Interval interval83 = mutableInterval80.toInterval();
        org.joda.time.ReadableInterval readableInterval84 = null;
        boolean boolean85 = mutableInterval80.isBefore(readableInterval84);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology88);
        boolean boolean90 = mutableInterval80.isAfter((org.joda.time.ReadableInterval) mutableInterval89);
        org.joda.time.Chronology chronology93 = null;
        org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval(0L, 1L, chronology93);
        org.joda.time.Interval interval95 = mutableInterval94.toInterval();
        org.joda.time.DateTime dateTime96 = mutableInterval94.getStart();
        boolean boolean97 = mutableInterval80.isBefore((org.joda.time.ReadableInstant) dateTime96);
        org.joda.time.Period period98 = mutableInterval80.toPeriod();
        boolean boolean99 = mutableInterval69.isBefore((org.joda.time.ReadableInterval) mutableInterval80);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(interval95);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(period98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    @Ignore
  public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableInterval25.setPeriodAfterStart(readablePeriod26);
        org.joda.time.Period period28 = mutableInterval25.toPeriod();
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval25.copy();
        boolean boolean30 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Interval interval31 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        java.lang.Object obj37 = mutableInterval35.clone();
        org.joda.time.Interval interval38 = mutableInterval35.toInterval();
        mutableInterval35.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        java.lang.Object obj46 = mutableInterval44.clone();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(obj46, chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        mutableInterval48.setPeriodBeforeEnd(readablePeriod49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        mutableInterval54.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        long long63 = interval62.getEndMillis();
        boolean boolean65 = interval62.isAfter((long) (byte) 100);
        boolean boolean66 = mutableInterval54.overlaps((org.joda.time.ReadableInterval) interval62);
        org.joda.time.Duration duration67 = mutableInterval54.toDuration();
        boolean boolean68 = mutableInterval48.isBefore((org.joda.time.ReadableInterval) mutableInterval54);
        org.joda.time.MutableInterval mutableInterval69 = mutableInterval54.toMutableInterval();
        boolean boolean70 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval69);
        boolean boolean71 = mutableInterval3.isBefore((org.joda.time.ReadableInterval) mutableInterval69);
        mutableInterval3.setInterval((long) 'a', 1606267403061L);
        org.joda.time.Chronology chronology75 = mutableInterval3.getChronology();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(mutableInterval69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology75);
    }

    @Test
    @Ignore
  public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Duration duration12 = mutableInterval9.toDuration();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        org.joda.time.Interval interval19 = mutableInterval16.toInterval();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        mutableInterval16.setPeriodAfterStart(readablePeriod20);
        mutableInterval16.setEndMillis((long) 100);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        mutableInterval27.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        org.joda.time.Interval interval37 = mutableInterval34.toInterval();
        org.joda.time.ReadableInterval readableInterval38 = null;
        boolean boolean39 = mutableInterval34.isBefore(readableInterval38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology42);
        boolean boolean44 = mutableInterval34.isAfter((org.joda.time.ReadableInterval) mutableInterval43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        boolean boolean51 = mutableInterval34.isBefore((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean52 = mutableInterval27.contains((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean53 = mutableInterval16.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime50);
        mutableInterval54.setInterval((long) (byte) 1, 1606267401730L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    @Ignore
  public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        mutableInterval10.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval10.toMutableInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        long long18 = mutableInterval17.toDurationMillis();
        mutableInterval10.setInterval((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Duration duration20 = mutableInterval17.toDuration();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        java.lang.Object obj26 = mutableInterval24.clone();
        org.joda.time.Interval interval27 = mutableInterval24.toInterval();
        org.joda.time.ReadableInterval readableInterval28 = null;
        boolean boolean29 = mutableInterval24.isBefore(readableInterval28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology32);
        boolean boolean34 = mutableInterval24.isAfter((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        boolean boolean41 = mutableInterval24.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime40);
        boolean boolean43 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean45 = mutableInterval3.contains(1606267312402L);
        org.joda.time.DateTime dateTime46 = mutableInterval3.getEnd();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime46, readableInstant47);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableInterval3.setDurationBeforeEnd(readableDuration4);
        boolean boolean6 = mutableInterval3.isBeforeNow();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.toMutableInterval();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.DateTime dateTime13 = mutableInterval11.getStart();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(readableInstant14, readablePeriod15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        mutableInterval16.setInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime31 = mutableInterval30.getStart();
        boolean boolean33 = mutableInterval30.isBefore((long) (short) 10);
        org.joda.time.Interval interval34 = mutableInterval30.toInterval();
        boolean boolean35 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval34);
        boolean boolean37 = mutableInterval3.contains((long) (byte) 100);
        boolean boolean38 = mutableInterval3.isAfterNow();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.MutableInterval mutableInterval3 = mutableInterval2.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.toMutableInterval();
        mutableInterval4.setStartMillis(1606267429948L);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval4);
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(mutableInterval4);
    }

    @Test
    @Ignore
  public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        java.lang.Object obj8 = mutableInterval7.clone();
        boolean boolean9 = mutableInterval7.isAfterNow();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(readableInstant33, readablePeriod34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.joda.time.DateTime dateTime47 = mutableInterval45.getStart();
        mutableInterval35.setInterval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        org.joda.time.DateTime dateTime56 = mutableInterval54.getStart();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        java.lang.Object obj62 = mutableInterval60.clone();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(obj62, chronology63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        mutableInterval64.setPeriodAfterStart(readablePeriod65);
        org.joda.time.Period period67 = mutableInterval64.toPeriod();
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadablePeriod) period67);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        java.lang.Object obj74 = mutableInterval72.clone();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(obj74, chronology75);
        org.joda.time.Duration duration77 = mutableInterval76.toDuration();
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableDuration) duration77);
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        java.lang.Object obj85 = mutableInterval83.clone();
        org.joda.time.Interval interval86 = mutableInterval83.toInterval();
        org.joda.time.ReadableInterval readableInterval87 = null;
        boolean boolean88 = mutableInterval83.isBefore(readableInterval87);
        org.joda.time.Chronology chronology91 = null;
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology91);
        boolean boolean93 = mutableInterval83.isAfter((org.joda.time.ReadableInterval) mutableInterval92);
        org.joda.time.Interval interval94 = mutableInterval83.toInterval();
        org.joda.time.Period period95 = mutableInterval83.toPeriod();
        org.joda.time.MutableInterval mutableInterval96 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadablePeriod) period95);
        mutableInterval7.setEnd((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean99 = mutableInterval7.isBefore(1606267514202L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertEquals(obj85.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj85), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj85), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(interval94);
        org.junit.Assert.assertNotNull(period95);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267401259L, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = mutableInterval10.toPeriod(periodType11);
        mutableInterval7.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period12);
        boolean boolean14 = interval4.contains((org.joda.time.ReadableInterval) mutableInterval7);
        org.joda.time.DateTime dateTime15 = mutableInterval7.getStart();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval7);
        mutableInterval16.setEndMillis(1606267396928L);
        long long19 = mutableInterval16.getStartMillis();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval16.setStartMillis(1606267511565L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
    }

    @Test
    @Ignore
  public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.copy();
        mutableInterval3.setDurationAfterStart(1606267383956L);
        org.joda.time.Chronology chronology12 = mutableInterval3.getChronology();
        org.joda.time.Period period13 = mutableInterval3.toPeriod();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    @Ignore
  public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        long long6 = mutableInterval3.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval21.getStart();
        mutableInterval11.setInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readablePeriod8, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readablePeriod7, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean44 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        java.lang.Object obj50 = mutableInterval48.clone();
        org.joda.time.Interval interval51 = mutableInterval48.toInterval();
        org.joda.time.ReadableInterval readableInterval52 = null;
        boolean boolean53 = mutableInterval48.isBefore(readableInterval52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology56);
        boolean boolean58 = mutableInterval48.isAfter((org.joda.time.ReadableInterval) mutableInterval57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.DateTime dateTime64 = mutableInterval62.getStart();
        boolean boolean65 = mutableInterval48.isBefore((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Period period66 = mutableInterval48.toPeriod();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadablePeriod) period66);
        boolean boolean68 = mutableInterval67.isAfterNow();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval67, chronology69);
        org.joda.time.Chronology chronology71 = mutableInterval70.getChronology();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology71);
    }

    @Test
    @Ignore
  public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval9.toMutableInterval();
        org.joda.time.Period period18 = mutableInterval9.toPeriod();
        org.joda.time.Duration duration19 = mutableInterval9.toDuration();
        mutableInterval9.setDurationAfterStart(1606267403061L);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean28 = mutableInterval25.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval25.copy();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        java.lang.Object obj35 = mutableInterval33.clone();
        mutableInterval33.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology38 = mutableInterval33.getChronology();
        org.joda.time.MutableInterval mutableInterval39 = mutableInterval33.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval33.copy();
        org.joda.time.Duration duration41 = mutableInterval33.toDuration();
        org.joda.time.DateTime dateTime42 = mutableInterval33.getStart();
        mutableInterval25.setStart((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = mutableInterval25.getStart();
        boolean boolean45 = mutableInterval9.isBefore((org.joda.time.ReadableInstant) dateTime44);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    @Ignore
  public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) 1);
        org.joda.time.Period period8 = mutableInterval3.toPeriod();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(obj24, chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableInterval26.setPeriodAfterStart(readablePeriod27);
        org.joda.time.Period period29 = mutableInterval26.toPeriod();
        mutableInterval12.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        org.joda.time.Interval interval37 = mutableInterval34.toInterval();
        org.joda.time.ReadableInterval readableInterval38 = null;
        boolean boolean39 = mutableInterval34.isBefore(readableInterval38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology42);
        boolean boolean44 = mutableInterval34.isAfter((org.joda.time.ReadableInterval) mutableInterval43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        boolean boolean51 = mutableInterval34.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period29, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.DateTime dateTime59 = mutableInterval57.getStart();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        java.lang.Object obj65 = mutableInterval63.clone();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(obj65, chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        mutableInterval67.setPeriodAfterStart(readablePeriod68);
        org.joda.time.Period period70 = mutableInterval67.toPeriod();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadablePeriod) period70);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        java.lang.Object obj77 = mutableInterval75.clone();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(obj77, chronology78);
        org.joda.time.Duration duration80 = mutableInterval79.toDuration();
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableDuration) duration80);
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateTime59);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration80);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267434033L, 1606267375515L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableInterval17.setDurationAfterStart(readableDuration20);
        boolean boolean22 = mutableInterval17.isAfterNow();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        org.joda.time.DateTime dateTime29 = mutableInterval27.getStart();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = mutableInterval46.getStart();
        boolean boolean49 = mutableInterval46.isBefore((long) (short) 10);
        mutableInterval17.setInterval((org.joda.time.ReadableInterval) mutableInterval46);
        org.joda.time.MutableInterval mutableInterval51 = mutableInterval17.toMutableInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(mutableInterval51);
    }

    @Test
    @Ignore
  public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.DateTime dateTime7 = mutableInterval5.getStart();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        java.lang.Object obj13 = mutableInterval11.clone();
        org.joda.time.Interval interval14 = mutableInterval11.toInterval();
        org.joda.time.ReadableInterval readableInterval15 = null;
        boolean boolean16 = mutableInterval11.isBefore(readableInterval15);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval11.copy();
        boolean boolean18 = mutableInterval5.contains((org.joda.time.ReadableInterval) mutableInterval11);
        mutableInterval11.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology22 = mutableInterval11.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(1606267425962L, 1606267377694L, chronology22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    @Ignore
  public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        mutableInterval3.setStartMillis((long) (byte) 0);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Interval interval24 = mutableInterval21.toInterval();
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = mutableInterval21.isBefore(readableInterval25);
        org.joda.time.MutableInterval mutableInterval27 = mutableInterval21.copy();
        boolean boolean28 = mutableInterval15.contains((org.joda.time.ReadableInterval) mutableInterval21);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        mutableInterval32.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        long long41 = interval40.getEndMillis();
        boolean boolean43 = interval40.isAfter((long) (byte) 100);
        boolean boolean44 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Duration duration45 = mutableInterval32.toDuration();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(readableInstant52, readablePeriod53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        mutableInterval54.setInterval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        mutableInterval69.setPeriodAfterStart(readablePeriod70);
        org.joda.time.Chronology chronology72 = mutableInterval69.getChronology();
        long long73 = mutableInterval69.getStartMillis();
        org.joda.time.MutableInterval mutableInterval74 = mutableInterval69.copy();
        org.joda.time.DateTime dateTime75 = mutableInterval74.getEnd();
        mutableInterval15.setStart((org.joda.time.ReadableInstant) dateTime75);
        boolean boolean77 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        long long78 = mutableInterval3.toDurationMillis();
        boolean boolean79 = mutableInterval3.isAfterNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    @Ignore
  public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval9.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval18 = mutableInterval9.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval18.setInterval(1606267511565L, 1606267388854L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(mutableInterval18);
    }

    @Test
    @Ignore
  public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean6 = mutableInterval3.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        mutableInterval11.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        mutableInterval18.setDurationAfterStart((long) (byte) 1);
        boolean boolean23 = mutableInterval18.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        mutableInterval11.setChronology(chronology24);
        long long26 = mutableInterval11.getStartMillis();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        mutableInterval30.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        mutableInterval37.setDurationAfterStart((long) (byte) 1);
        boolean boolean42 = mutableInterval37.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        mutableInterval30.setChronology(chronology43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        java.lang.Object obj50 = mutableInterval48.clone();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(obj50, chronology51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        mutableInterval52.setPeriodAfterStart(readablePeriod53);
        org.joda.time.Period period55 = mutableInterval52.toPeriod();
        org.joda.time.MutableInterval mutableInterval56 = mutableInterval52.copy();
        boolean boolean57 = mutableInterval30.isAfter((org.joda.time.ReadableInterval) mutableInterval52);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        java.lang.Object obj63 = mutableInterval61.clone();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(obj63, chronology64);
        boolean boolean66 = mutableInterval30.equals((java.lang.Object) mutableInterval65);
        boolean boolean67 = mutableInterval11.contains((org.joda.time.ReadableInterval) mutableInterval30);
        org.joda.time.MutableInterval mutableInterval68 = mutableInterval30.copy();
        mutableInterval7.setInterval((org.joda.time.ReadableInterval) mutableInterval30);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(mutableInterval56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(mutableInterval68);
    }

    @Test
    @Ignore
  public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readableInstant16, readablePeriod17);
        mutableInterval18.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval18.toMutableInterval();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        long long26 = mutableInterval25.toDurationMillis();
        mutableInterval18.setInterval((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Duration duration28 = mutableInterval25.toDuration();
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        java.lang.Object obj44 = mutableInterval42.clone();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(obj44, chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableInterval46.setPeriodAfterStart(readablePeriod47);
        org.joda.time.Period period49 = mutableInterval46.toPeriod();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadablePeriod) period49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        java.lang.Object obj56 = mutableInterval54.clone();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(obj56, chronology57);
        org.joda.time.Duration duration59 = mutableInterval58.toDuration();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration59);
        boolean boolean61 = mutableInterval32.isBefore((org.joda.time.ReadableInstant) dateTime38);
        mutableInterval3.setStart((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        long long67 = mutableInterval66.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval68 = mutableInterval66.copy();
        org.joda.time.Period period69 = mutableInterval66.toPeriod();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadablePeriod) period69);
        long long71 = mutableInterval70.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    @Ignore
  public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.copy();
        org.joda.time.DateTime dateTime10 = mutableInterval3.getEnd();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval3.toMutableInterval();
        mutableInterval11.setDurationAfterStart(1606267451129L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableInterval11);
    }

    @Test
    @Ignore
  public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readablePeriod5, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readablePeriod4, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        mutableInterval26.setInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime41 = mutableInterval40.getStart();
        mutableInterval40.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean45 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        java.lang.Object obj51 = mutableInterval49.clone();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(obj51, chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutableInterval53.setPeriodBeforeEnd(readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        long long68 = interval67.getEndMillis();
        boolean boolean70 = interval67.isAfter((long) (byte) 100);
        boolean boolean71 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Duration duration72 = mutableInterval59.toDuration();
        boolean boolean73 = mutableInterval53.isBefore((org.joda.time.ReadableInterval) mutableInterval59);
        org.joda.time.MutableInterval mutableInterval74 = mutableInterval59.toMutableInterval();
        java.lang.String str75 = mutableInterval74.toString();
        java.lang.String str76 = mutableInterval74.toString();
        boolean boolean77 = mutableInterval40.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        org.joda.time.ReadableInterval readableInterval78 = null;
        boolean boolean79 = mutableInterval74.isAfter(readableInterval78);
        org.joda.time.Interval interval80 = mutableInterval74.toInterval();
        org.joda.time.MutableInterval mutableInterval81 = mutableInterval74.copy();
        long long82 = mutableInterval81.toDurationMillis();
        org.joda.time.Duration duration83 = mutableInterval81.toDuration();
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval81);
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str75, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str76, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(mutableInterval81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(interval85);
    }

    @Test
    @Ignore
  public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        boolean boolean5 = mutableInterval2.isAfterNow();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(obj11, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableInterval13.setPeriodBeforeEnd(readablePeriod14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        mutableInterval19.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        long long28 = interval27.getEndMillis();
        boolean boolean30 = interval27.isAfter((long) (byte) 100);
        boolean boolean31 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) interval27);
        org.joda.time.Duration duration32 = mutableInterval19.toDuration();
        boolean boolean33 = mutableInterval13.isBefore((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.MutableInterval mutableInterval34 = mutableInterval19.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(readableInstant36, readablePeriod37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        mutableInterval38.setInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(readablePeriod35, (org.joda.time.ReadableInstant) dateTime44);
        mutableInterval19.setEnd((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean54 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(readableInstant55, readablePeriod56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        org.joda.time.DateTime dateTime63 = mutableInterval61.getStart();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        org.joda.time.DateTime dateTime69 = mutableInterval67.getStart();
        mutableInterval57.setInterval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime69);
        mutableInterval2.setStart((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Period period73 = mutableInterval2.toPeriod(periodType72);
        mutableInterval2.setEndMillis(1606267312402L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(period73);
    }

    @Test
    @Ignore
  public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(obj24, chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableInterval26.setPeriodAfterStart(readablePeriod27);
        org.joda.time.Period period29 = mutableInterval26.toPeriod();
        mutableInterval12.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        mutableInterval35.setDurationAfterStart((long) (byte) 1);
        boolean boolean40 = mutableInterval35.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        java.lang.Object obj47 = mutableInterval45.clone();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(obj47, chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutableInterval49.setPeriodAfterStart(readablePeriod50);
        org.joda.time.Period period52 = mutableInterval49.toPeriod();
        mutableInterval35.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        java.lang.Object obj59 = mutableInterval57.clone();
        org.joda.time.Interval interval60 = mutableInterval57.toInterval();
        org.joda.time.ReadableInterval readableInterval61 = null;
        boolean boolean62 = mutableInterval57.isBefore(readableInterval61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology65);
        boolean boolean67 = mutableInterval57.isAfter((org.joda.time.ReadableInterval) mutableInterval66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        boolean boolean74 = mutableInterval57.isBefore((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period52, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period29, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval76.setStartMillis(1606267429948L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(interval77);
    }

    @Test
    @Ignore
  public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        java.lang.Object obj35 = mutableInterval33.clone();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(obj35, chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutableInterval37.setPeriodBeforeEnd(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readableInstant40, readablePeriod41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        mutableInterval42.setInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        java.lang.Object obj61 = mutableInterval59.clone();
        org.joda.time.Interval interval62 = mutableInterval59.toInterval();
        org.joda.time.ReadableInterval readableInterval63 = null;
        boolean boolean64 = mutableInterval59.isBefore(readableInterval63);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology67);
        boolean boolean69 = mutableInterval59.isAfter((org.joda.time.ReadableInterval) mutableInterval68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        boolean boolean76 = mutableInterval59.isBefore((org.joda.time.ReadableInstant) dateTime75);
        mutableInterval37.setInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime75);
        boolean boolean78 = mutableInterval28.isAfter((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = mutableInterval28.toPeriod(periodType79);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(0L, 1L, chronology83);
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        org.joda.time.DateTime dateTime86 = mutableInterval84.getStart();
        org.joda.time.Interval interval87 = mutableInterval84.toInterval();
        boolean boolean88 = mutableInterval28.contains((org.joda.time.ReadableInterval) interval87);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str29, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (byte) 0, (long) (short) 100);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval6.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableInstant11, readablePeriod12);
        long long14 = mutableInterval13.getEndMillis();
        boolean boolean15 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        boolean boolean16 = mutableInterval13.isAfterNow();
        boolean boolean18 = mutableInterval13.isBefore((long) (byte) 10);
        org.joda.time.Period period19 = mutableInterval13.toPeriod();
        mutableInterval2.setPeriodAfterStart((org.joda.time.ReadablePeriod) period19);
        boolean boolean22 = mutableInterval2.contains(1606267514458L);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1606267545978L + "'", long14 == 1606267545978L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    @Ignore
  public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(obj24, chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableInterval26.setPeriodAfterStart(readablePeriod27);
        org.joda.time.Period period29 = mutableInterval26.toPeriod();
        mutableInterval12.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        mutableInterval35.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        long long44 = interval43.getEndMillis();
        boolean boolean46 = interval43.isAfter((long) (byte) 100);
        boolean boolean47 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) interval43);
        org.joda.time.Duration duration48 = mutableInterval35.toDuration();
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(readableInstant50, readablePeriod51);
        mutableInterval52.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval55 = mutableInterval52.toMutableInterval();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        long long60 = mutableInterval59.toDurationMillis();
        mutableInterval52.setInterval((org.joda.time.ReadableInterval) mutableInterval59);
        mutableInterval52.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        mutableInterval71.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        mutableInterval78.setDurationAfterStart((long) (byte) 1);
        boolean boolean83 = mutableInterval78.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology84 = mutableInterval78.getChronology();
        mutableInterval71.setChronology(chronology84);
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology84);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology84);
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval52, chronology84);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology84);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval((java.lang.Object) chronology84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(mutableInterval55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(chronology84);
    }

    @Test
    @Ignore
  public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        boolean boolean15 = interval8.isBefore((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean16 = mutableInterval1.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval12.toMutableInterval();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = mutableInterval12.toPeriod(periodType18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        java.lang.Object obj25 = mutableInterval23.clone();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(obj25, chronology26);
        org.joda.time.DateTime dateTime28 = mutableInterval27.getEnd();
        boolean boolean29 = mutableInterval12.contains((org.joda.time.ReadableInterval) mutableInterval27);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = mutableInterval12.toPeriod(periodType30);
        java.lang.Class<?> wildcardClass32 = mutableInterval12.getClass();
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    @Ignore
  public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        long long20 = mutableInterval17.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readablePeriod22, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(readablePeriod21, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean58 = mutableInterval17.isBefore((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        mutableInterval62.setDurationAfterStart((long) (byte) 1);
        boolean boolean67 = mutableInterval62.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        java.lang.Object obj73 = mutableInterval71.clone();
        mutableInterval71.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology76 = mutableInterval71.getChronology();
        mutableInterval62.setChronology(chronology76);
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval17, chronology76);
        mutableInterval3.setChronology(chronology76);
        org.joda.time.Chronology chronology80 = mutableInterval3.getChronology();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(chronology80);
    }

    @Test
    @Ignore
  public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        mutableInterval5.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology10 = mutableInterval5.getChronology();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval5.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval12 = mutableInterval5.copy();
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval5.toMutableInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableInterval17.setDurationBeforeEnd(readableDuration18);
        long long20 = mutableInterval17.getEndMillis();
        boolean boolean21 = mutableInterval13.equals((java.lang.Object) long20);
        mutableInterval1.setInterval((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        mutableInterval26.setDurationAfterStart((long) (byte) 1);
        boolean boolean31 = mutableInterval26.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology32 = mutableInterval26.getChronology();
        long long33 = mutableInterval26.getStartMillis();
        org.joda.time.Duration duration34 = mutableInterval26.toDuration();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        mutableInterval38.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        long long47 = interval46.getEndMillis();
        boolean boolean49 = interval46.isAfter((long) (byte) 100);
        boolean boolean50 = mutableInterval38.overlaps((org.joda.time.ReadableInterval) interval46);
        org.joda.time.Duration duration51 = mutableInterval38.toDuration();
        mutableInterval26.setInterval((org.joda.time.ReadableInterval) mutableInterval38);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readableInstant54, readablePeriod55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        mutableInterval56.setInterval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(readablePeriod53, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(0L, 1L, chronology73);
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        mutableInterval74.setDurationAfterStart((long) (byte) 1);
        boolean boolean79 = mutableInterval74.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology80 = mutableInterval74.getChronology();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(0L, 1L, chronology83);
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        java.lang.Object obj86 = mutableInterval84.clone();
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval(obj86, chronology87);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        mutableInterval88.setPeriodAfterStart(readablePeriod89);
        org.joda.time.Period period91 = mutableInterval88.toPeriod();
        mutableInterval74.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period91);
        org.joda.time.MutableInterval mutableInterval93 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadablePeriod) period91);
        mutableInterval26.setPeriodAfterStart((org.joda.time.ReadablePeriod) period91);
        mutableInterval1.setPeriodAfterStart((org.joda.time.ReadablePeriod) period91);
        org.joda.time.Interval interval96 = mutableInterval1.toInterval();
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertEquals(obj86.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj86), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj86), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(interval96);
    }

    @Test
    @Ignore
  public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Period period6 = mutableInterval2.toPeriod();
        mutableInterval2.setDurationBeforeEnd((long) '#');
        org.joda.time.MutableInterval mutableInterval10 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        java.lang.Object obj16 = mutableInterval14.clone();
        org.joda.time.Interval interval17 = mutableInterval14.toInterval();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        boolean boolean24 = interval17.isBefore((org.joda.time.ReadableInterval) mutableInterval21);
        boolean boolean25 = mutableInterval10.isAfter((org.joda.time.ReadableInterval) mutableInterval21);
        org.joda.time.MutableInterval mutableInterval26 = mutableInterval21.toMutableInterval();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = mutableInterval21.toPeriod(periodType27);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval21);
        boolean boolean31 = mutableInterval21.isBefore((long) '4');
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readableInstant34, readablePeriod35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        mutableInterval36.setInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(readablePeriod33, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(readablePeriod32, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = mutableInterval51.toPeriod(periodType52);
        boolean boolean54 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = mutableInterval51.toPeriod(periodType55);
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mutableInterval26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(chronology57);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        mutableInterval7.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        boolean boolean19 = mutableInterval14.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        mutableInterval7.setChronology(chronology20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology20);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology20);
        boolean boolean25 = mutableInterval23.contains((long) (short) 100);
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableInterval23.setDurationAfterStart(readableDuration26);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    @Ignore
  public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(0L, 1L, chronology3);
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        java.lang.Object obj6 = mutableInterval4.clone();
        mutableInterval4.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology9 = mutableInterval4.getChronology();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval4.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval4.copy();
        org.joda.time.MutableInterval mutableInterval12 = mutableInterval4.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(readableInstant15, readablePeriod16);
        mutableInterval17.setDurationBeforeEnd(1L);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readableInstant20, readablePeriod21);
        long long23 = mutableInterval22.getEndMillis();
        org.joda.time.MutableInterval mutableInterval24 = mutableInterval22.copy();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(readableDuration25, readableInstant26);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = mutableInterval27.toPeriod(periodType28);
        mutableInterval22.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        org.joda.time.DateTime dateTime31 = mutableInterval22.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        java.lang.Object obj37 = mutableInterval35.clone();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(obj37, chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutableInterval39.setPeriodBeforeEnd(readablePeriod40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readableInstant42, readablePeriod43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        org.joda.time.DateTime dateTime56 = mutableInterval54.getStart();
        mutableInterval44.setInterval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        java.lang.Object obj63 = mutableInterval61.clone();
        org.joda.time.Interval interval64 = mutableInterval61.toInterval();
        org.joda.time.ReadableInterval readableInterval65 = null;
        boolean boolean66 = mutableInterval61.isBefore(readableInterval65);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology69);
        boolean boolean71 = mutableInterval61.isAfter((org.joda.time.ReadableInterval) mutableInterval70);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        org.joda.time.DateTime dateTime77 = mutableInterval75.getStart();
        boolean boolean78 = mutableInterval61.isBefore((org.joda.time.ReadableInstant) dateTime77);
        mutableInterval39.setInterval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime77);
        boolean boolean80 = mutableInterval22.isAfter((org.joda.time.ReadableInstant) dateTime77);
        boolean boolean81 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.Chronology chronology82 = mutableInterval17.getChronology();
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((long) (short) 1, 1606267332182L, chronology82);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval12, chronology82);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(obj0, chronology82);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(mutableInterval12);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1606267547124L + "'", long23 == 1606267547124L);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(chronology82);
    }

    @Test
    @Ignore
  public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        long long10 = mutableInterval3.getStartMillis();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        long long24 = interval23.getEndMillis();
        boolean boolean26 = interval23.isAfter((long) (byte) 100);
        boolean boolean27 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Duration duration28 = mutableInterval15.toDuration();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        mutableInterval33.setInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(readablePeriod30, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        boolean boolean56 = mutableInterval51.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        java.lang.Object obj63 = mutableInterval61.clone();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(obj63, chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        mutableInterval65.setPeriodAfterStart(readablePeriod66);
        org.joda.time.Period period68 = mutableInterval65.toPeriod();
        mutableInterval51.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period68);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadablePeriod) period68);
        mutableInterval3.setPeriodAfterStart((org.joda.time.ReadablePeriod) period68);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        org.joda.time.DateTime dateTime77 = mutableInterval75.getStart();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        java.lang.Object obj83 = mutableInterval81.clone();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(obj83, chronology84);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        mutableInterval85.setPeriodAfterStart(readablePeriod86);
        org.joda.time.Period period88 = mutableInterval85.toPeriod();
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadablePeriod) period88);
        org.joda.time.Chronology chronology90 = mutableInterval89.getChronology();
        mutableInterval3.setChronology(chronology90);
        org.joda.time.ReadableDuration readableDuration92 = null;
        mutableInterval3.setDurationAfterStart(readableDuration92);
        boolean boolean94 = mutableInterval3.isBeforeNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertEquals(obj83.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    @Ignore
  public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        long long20 = mutableInterval17.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readablePeriod22, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(readablePeriod21, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean58 = mutableInterval17.isBefore((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        mutableInterval62.setDurationAfterStart((long) (byte) 1);
        boolean boolean67 = mutableInterval62.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        java.lang.Object obj73 = mutableInterval71.clone();
        mutableInterval71.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology76 = mutableInterval71.getChronology();
        mutableInterval62.setChronology(chronology76);
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval17, chronology76);
        mutableInterval3.setChronology(chronology76);
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((long) (-1), (long) (byte) 100);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.DateTime dateTime88 = mutableInterval86.getStart();
        org.joda.time.Interval interval89 = mutableInterval86.toInterval();
        boolean boolean90 = mutableInterval82.isAfter((org.joda.time.ReadableInterval) mutableInterval86);
        boolean boolean91 = mutableInterval86.isAfterNow();
        mutableInterval86.setDurationAfterStart(1606267332576L);
        boolean boolean94 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval86);
        long long95 = mutableInterval86.getEndMillis();
        java.lang.String str96 = mutableInterval86.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 1606267332576L + "'", long95 == 1606267332576L);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "1970-01-01T00:00:00.000Z/2020-11-25T01:22:12.576Z" + "'", str96, "1970-01-01T00:00:00.000Z/2020-11-25T01:22:12.576Z");
    }

    @Test
    @Ignore
  public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(obj24, chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableInterval26.setPeriodAfterStart(readablePeriod27);
        org.joda.time.Period period29 = mutableInterval26.toPeriod();
        mutableInterval12.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        mutableInterval35.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        long long44 = interval43.getEndMillis();
        boolean boolean46 = interval43.isAfter((long) (byte) 100);
        boolean boolean47 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) interval43);
        org.joda.time.Duration duration48 = mutableInterval35.toDuration();
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(readableInstant50, readablePeriod51);
        mutableInterval52.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval55 = mutableInterval52.toMutableInterval();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        long long60 = mutableInterval59.toDurationMillis();
        mutableInterval52.setInterval((org.joda.time.ReadableInterval) mutableInterval59);
        mutableInterval52.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        mutableInterval71.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        mutableInterval78.setDurationAfterStart((long) (byte) 1);
        boolean boolean83 = mutableInterval78.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology84 = mutableInterval78.getChronology();
        mutableInterval71.setChronology(chronology84);
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology84);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology84);
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval52, chronology84);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology84);
        org.joda.time.Interval interval90 = mutableInterval89.toInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(mutableInterval55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(interval90);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        mutableInterval1.setDurationBeforeEnd(1606267320112L);
        mutableInterval1.setDurationBeforeEnd(1606267383956L);
        org.junit.Assert.assertNotNull(mutableInterval1);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:22:01.599Z/2020-11-25T01:22:01.600Z");
        org.joda.time.Interval interval2 = mutableInterval1.toInterval();
        org.joda.time.MutableInterval mutableInterval3 = interval2.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval3.copy();
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(mutableInterval4);
    }

    @Test
    @Ignore
  public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readablePeriod5, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readablePeriod4, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        mutableInterval26.setInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime41 = mutableInterval40.getStart();
        mutableInterval40.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean45 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        java.lang.Object obj51 = mutableInterval49.clone();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(obj51, chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutableInterval53.setPeriodBeforeEnd(readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        long long68 = interval67.getEndMillis();
        boolean boolean70 = interval67.isAfter((long) (byte) 100);
        boolean boolean71 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Duration duration72 = mutableInterval59.toDuration();
        boolean boolean73 = mutableInterval53.isBefore((org.joda.time.ReadableInterval) mutableInterval59);
        org.joda.time.MutableInterval mutableInterval74 = mutableInterval59.toMutableInterval();
        java.lang.String str75 = mutableInterval74.toString();
        java.lang.String str76 = mutableInterval74.toString();
        boolean boolean77 = mutableInterval40.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        org.joda.time.ReadableInterval readableInterval78 = null;
        boolean boolean79 = mutableInterval74.isAfter(readableInterval78);
        org.joda.time.Interval interval80 = mutableInterval74.toInterval();
        org.joda.time.MutableInterval mutableInterval81 = mutableInterval74.toMutableInterval();
        java.lang.Object obj82 = mutableInterval74.clone();
        org.joda.time.Chronology chronology83 = mutableInterval74.getChronology();
        long long84 = mutableInterval74.toDurationMillis();
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str75, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str76, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(mutableInterval81);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
    }

    @Test
    @Ignore
  public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Period period10 = mutableInterval7.toPeriod();
        org.joda.time.Interval interval11 = mutableInterval7.toInterval();
        boolean boolean13 = mutableInterval7.isAfter(1606267514458L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    @Ignore
  public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        boolean boolean8 = interval6.contains(1606267332182L);
        org.joda.time.Duration duration9 = interval6.toDuration();
        boolean boolean10 = interval6.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    @Ignore
  public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        java.lang.Object obj12 = mutableInterval9.clone();
        boolean boolean13 = mutableInterval3.equals((java.lang.Object) mutableInterval9);
        mutableInterval9.setDurationBeforeEnd((long) (byte) 1);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    @Ignore
  public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = mutableInterval10.isBefore(readableInterval14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology18);
        boolean boolean20 = mutableInterval10.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        boolean boolean27 = mutableInterval10.isBefore((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        boolean boolean35 = mutableInterval32.contains((long) ' ');
        boolean boolean36 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval32);
        boolean boolean37 = mutableInterval32.containsNow();
        java.lang.String str38 = mutableInterval32.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str38, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval3.toMutableInterval();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        long long19 = interval18.getEndMillis();
        boolean boolean21 = interval18.isAfter((long) (byte) 100);
        boolean boolean22 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Duration duration23 = mutableInterval10.toDuration();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        org.joda.time.DateTime dateTime29 = mutableInterval27.getStart();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        mutableInterval47.setPeriodAfterStart(readablePeriod48);
        org.joda.time.Chronology chronology50 = mutableInterval47.getChronology();
        long long51 = mutableInterval47.getStartMillis();
        org.joda.time.MutableInterval mutableInterval52 = mutableInterval47.copy();
        boolean boolean53 = mutableInterval6.equals((java.lang.Object) mutableInterval52);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertNotNull(mutableInterval52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    @Ignore
  public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        mutableInterval10.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval10.toMutableInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        long long18 = mutableInterval17.toDurationMillis();
        mutableInterval10.setInterval((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Duration duration20 = mutableInterval17.toDuration();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        java.lang.Object obj26 = mutableInterval24.clone();
        org.joda.time.Interval interval27 = mutableInterval24.toInterval();
        org.joda.time.ReadableInterval readableInterval28 = null;
        boolean boolean29 = mutableInterval24.isBefore(readableInterval28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology32);
        boolean boolean34 = mutableInterval24.isAfter((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        boolean boolean41 = mutableInterval24.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime40);
        boolean boolean43 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean45 = mutableInterval3.contains(1606267312402L);
        mutableInterval3.setInterval((long) '#', 1606267286325L);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        java.lang.Object obj54 = mutableInterval52.clone();
        org.joda.time.Interval interval55 = mutableInterval52.toInterval();
        org.joda.time.ReadableInterval readableInterval56 = null;
        boolean boolean57 = mutableInterval52.isBefore(readableInterval56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology60);
        boolean boolean62 = mutableInterval52.isAfter((org.joda.time.ReadableInterval) mutableInterval61);
        boolean boolean63 = mutableInterval61.isAfterNow();
        boolean boolean64 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval61.setStartMillis(1606267395245L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    @Ignore
  public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        mutableInterval10.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval10.toMutableInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        long long18 = mutableInterval17.toDurationMillis();
        mutableInterval10.setInterval((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Duration duration20 = mutableInterval17.toDuration();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        java.lang.Object obj26 = mutableInterval24.clone();
        org.joda.time.Interval interval27 = mutableInterval24.toInterval();
        org.joda.time.ReadableInterval readableInterval28 = null;
        boolean boolean29 = mutableInterval24.isBefore(readableInterval28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology32);
        boolean boolean34 = mutableInterval24.isAfter((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        boolean boolean41 = mutableInterval24.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime40);
        boolean boolean43 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean45 = mutableInterval3.contains(1606267312402L);
        org.joda.time.Interval interval46 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(readableDuration52, readableInstant53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        mutableInterval58.setPeriodBeforeEnd(readablePeriod59);
        mutableInterval54.setInterval((org.joda.time.ReadableInterval) mutableInterval58);
        mutableInterval54.setDurationAfterStart(1606267295857L);
        boolean boolean64 = interval51.contains((org.joda.time.ReadableInterval) mutableInterval54);
        org.joda.time.DateTime dateTime65 = mutableInterval54.getStart();
        boolean boolean66 = interval46.isAfter((org.joda.time.ReadableInstant) dateTime65);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    @Ignore
  public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval5.toMutableInterval();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        mutableInterval11.setDurationAfterStart((long) (byte) 1);
        mutableInterval11.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        java.lang.Object obj28 = mutableInterval26.clone();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(obj28, chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutableInterval30.setPeriodAfterStart(readablePeriod31);
        org.joda.time.Period period33 = mutableInterval30.toPeriod();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadablePeriod) period33);
        boolean boolean35 = mutableInterval11.isBefore((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean36 = mutableInterval7.contains((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period37 = mutableInterval7.toPeriod();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(period37);
    }

    @Test
    @Ignore
  public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        mutableInterval10.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval10.toMutableInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        long long18 = mutableInterval17.toDurationMillis();
        mutableInterval10.setInterval((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Duration duration20 = mutableInterval17.toDuration();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        java.lang.Object obj26 = mutableInterval24.clone();
        org.joda.time.Interval interval27 = mutableInterval24.toInterval();
        org.joda.time.ReadableInterval readableInterval28 = null;
        boolean boolean29 = mutableInterval24.isBefore(readableInterval28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology32);
        boolean boolean34 = mutableInterval24.isAfter((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        boolean boolean41 = mutableInterval24.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime40);
        boolean boolean43 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean45 = mutableInterval3.contains(1606267312402L);
        mutableInterval3.setInterval((long) '#', 1606267286325L);
        org.joda.time.MutableInterval mutableInterval50 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        java.lang.Object obj56 = mutableInterval54.clone();
        org.joda.time.Interval interval57 = mutableInterval54.toInterval();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        java.lang.Object obj63 = mutableInterval61.clone();
        boolean boolean64 = interval57.isBefore((org.joda.time.ReadableInterval) mutableInterval61);
        boolean boolean65 = mutableInterval50.isAfter((org.joda.time.ReadableInterval) mutableInterval61);
        org.joda.time.MutableInterval mutableInterval66 = mutableInterval61.toMutableInterval();
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.Period period68 = mutableInterval61.toPeriod(periodType67);
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period68);
        org.joda.time.DateTime dateTime70 = mutableInterval3.getStart();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(mutableInterval50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(mutableInterval66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(dateTime70);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval5 = null;
        boolean boolean6 = mutableInterval3.isAfter(readableInterval5);
        boolean boolean8 = mutableInterval3.isBefore(1606267308130L);
        mutableInterval3.setDurationBeforeEnd(1606267352998L);
        org.joda.time.Chronology chronology11 = mutableInterval3.getChronology();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    @Ignore
  public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval5.toMutableInterval();
        org.joda.time.DateTime dateTime8 = mutableInterval5.getEnd();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        long long21 = interval20.getEndMillis();
        boolean boolean23 = interval20.isAfter((long) (byte) 100);
        boolean boolean24 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) interval20);
        long long25 = mutableInterval12.toDurationMillis();
        long long26 = mutableInterval12.toDurationMillis();
        java.lang.String str27 = mutableInterval12.toString();
        boolean boolean28 = mutableInterval5.contains((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(readableInstant29, readablePeriod30);
        mutableInterval31.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval34 = mutableInterval31.toMutableInterval();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        long long39 = mutableInterval38.toDurationMillis();
        mutableInterval31.setInterval((org.joda.time.ReadableInterval) mutableInterval38);
        org.joda.time.DateTime dateTime41 = mutableInterval31.getEnd();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        mutableInterval45.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        long long54 = interval53.getEndMillis();
        boolean boolean56 = interval53.isAfter((long) (byte) 100);
        boolean boolean57 = mutableInterval45.overlaps((org.joda.time.ReadableInterval) interval53);
        org.joda.time.Duration duration58 = mutableInterval45.toDuration();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(readableInstant59, readablePeriod60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        mutableInterval61.setInterval((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration58, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration58);
        boolean boolean77 = mutableInterval12.equals((java.lang.Object) duration58);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str27, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    @Ignore
  public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(10L, 1606267346678L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, 1L, chronology5);
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        java.lang.Object obj8 = mutableInterval6.clone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(obj8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutableInterval10.setPeriodBeforeEnd(readablePeriod11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(readableInstant13, readablePeriod14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.DateTime dateTime21 = mutableInterval19.getStart();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval25.getStart();
        mutableInterval15.setInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        org.joda.time.Interval interval35 = mutableInterval32.toInterval();
        org.joda.time.ReadableInterval readableInterval36 = null;
        boolean boolean37 = mutableInterval32.isBefore(readableInterval36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology40);
        boolean boolean42 = mutableInterval32.isAfter((org.joda.time.ReadableInterval) mutableInterval41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        boolean boolean49 = mutableInterval32.isBefore((org.joda.time.ReadableInstant) dateTime48);
        mutableInterval10.setInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(readableDuration51, readableInstant52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        mutableInterval57.setPeriodBeforeEnd(readablePeriod58);
        mutableInterval53.setInterval((org.joda.time.ReadableInterval) mutableInterval57);
        mutableInterval53.setDurationAfterStart(1606267295857L);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(readableInstant69, readablePeriod70);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        org.joda.time.DateTime dateTime77 = mutableInterval75.getStart();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        org.joda.time.DateTime dateTime83 = mutableInterval81.getStart();
        mutableInterval71.setInterval((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime83);
        mutableInterval53.setStart((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime83);
        boolean boolean88 = mutableInterval2.isAfter((org.joda.time.ReadableInterval) mutableInterval87);
        org.joda.time.Period period89 = mutableInterval87.toPeriod();
        java.lang.Object obj90 = mutableInterval87.clone();
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertEquals(obj90.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj90), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj90), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    @Ignore
  public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = mutableInterval2.getStart();
        mutableInterval2.setDurationBeforeEnd((long) (short) 10);
        boolean boolean15 = mutableInterval2.contains(10L);
        org.joda.time.Period period16 = mutableInterval2.toPeriod();
        org.joda.time.Interval interval17 = mutableInterval2.toInterval();
        org.joda.time.DateTime dateTime18 = mutableInterval2.getStart();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        org.joda.time.Interval interval25 = mutableInterval22.toInterval();
        mutableInterval22.setDurationBeforeEnd(0L);
        boolean boolean29 = mutableInterval22.contains((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        mutableInterval32.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval35 = mutableInterval32.toMutableInterval();
        mutableInterval22.setInterval((org.joda.time.ReadableInterval) mutableInterval35);
        org.joda.time.Chronology chronology37 = mutableInterval35.getChronology();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval2, chronology37);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267550048L + "'", long3 == 1606267550048L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(chronology37);
    }

    @Test
    @Ignore
  public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        mutableInterval3.setEnd(readableInstant7);
        mutableInterval3.setDurationBeforeEnd(0L);
        long long11 = mutableInterval3.toDurationMillis();
        org.joda.time.Period period12 = mutableInterval3.toPeriod();
        mutableInterval3.setDurationBeforeEnd(1606267458577L);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        mutableInterval18.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval25.getStart();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(readableInstant28, readablePeriod29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        mutableInterval30.setInterval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime42);
        boolean boolean45 = mutableInterval18.isBefore((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        mutableInterval49.setDurationBeforeEnd(readableDuration50);
        long long52 = mutableInterval49.getEndMillis();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(0L, 1L, chronology55);
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        java.lang.Object obj58 = mutableInterval56.clone();
        org.joda.time.ReadableDuration readableDuration59 = null;
        mutableInterval56.setDurationAfterStart(readableDuration59);
        boolean boolean61 = mutableInterval56.isAfterNow();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        mutableInterval65.setDurationAfterStart((long) (byte) 1);
        boolean boolean70 = mutableInterval65.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology71 = mutableInterval65.getChronology();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        java.lang.Object obj77 = mutableInterval75.clone();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(obj77, chronology78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        mutableInterval79.setPeriodAfterStart(readablePeriod80);
        org.joda.time.Period period82 = mutableInterval79.toPeriod();
        mutableInterval65.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period82);
        mutableInterval56.setPeriodAfterStart((org.joda.time.ReadablePeriod) period82);
        mutableInterval49.setPeriodAfterStart((org.joda.time.ReadablePeriod) period82);
        mutableInterval18.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period82);
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period82);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period82);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval2.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        mutableInterval28.setDurationAfterStart((long) (byte) 1);
        boolean boolean33 = mutableInterval28.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology34 = mutableInterval28.getChronology();
        mutableInterval21.setChronology(chronology34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology34);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology34);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval2, chronology34);
        boolean boolean40 = mutableInterval2.contains(1606267431044L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    @Ignore
  public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        java.lang.Object obj27 = mutableInterval25.clone();
        org.joda.time.Interval interval28 = mutableInterval25.toInterval();
        org.joda.time.ReadableInterval readableInterval29 = null;
        boolean boolean30 = mutableInterval25.isBefore(readableInterval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology33);
        boolean boolean35 = mutableInterval25.isAfter((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        boolean boolean42 = mutableInterval25.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period20, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        mutableInterval47.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        java.lang.Object obj56 = mutableInterval54.clone();
        org.joda.time.Interval interval57 = mutableInterval54.toInterval();
        org.joda.time.ReadableInterval readableInterval58 = null;
        boolean boolean59 = mutableInterval54.isBefore(readableInterval58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology62);
        boolean boolean64 = mutableInterval54.isAfter((org.joda.time.ReadableInterval) mutableInterval63);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        boolean boolean71 = mutableInterval54.isBefore((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean72 = mutableInterval47.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period20, (org.joda.time.ReadableInstant) dateTime70);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    @Ignore
  public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        org.joda.time.Period period6 = mutableInterval3.toPeriod();
        java.lang.Object obj7 = mutableInterval3.clone();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z");
    }

    @Test
    @Ignore
  public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval11 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        java.lang.Object obj17 = mutableInterval15.clone();
        org.joda.time.Interval interval18 = mutableInterval15.toInterval();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        boolean boolean25 = interval18.isBefore((org.joda.time.ReadableInterval) mutableInterval22);
        boolean boolean26 = mutableInterval11.isAfter((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.MutableInterval mutableInterval27 = mutableInterval22.toMutableInterval();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = mutableInterval22.toPeriod(periodType28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        java.lang.Object obj35 = mutableInterval33.clone();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(obj35, chronology36);
        org.joda.time.DateTime dateTime38 = mutableInterval37.getEnd();
        boolean boolean39 = mutableInterval22.contains((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.DateTime dateTime40 = mutableInterval37.getStart();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.ReadableInterval readableInterval42 = null;
        boolean boolean43 = mutableInterval37.contains(readableInterval42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = mutableInterval37.toPeriod(periodType44);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period45);
    }

    @Test
    @Ignore
  public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean6 = mutableInterval3.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableDuration11, readableInstant12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = mutableInterval13.toPeriod(periodType14);
        mutableInterval10.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period15);
        mutableInterval7.setPeriodAfterStart((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Interval interval18 = mutableInterval7.toInterval();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        java.lang.Object obj32 = mutableInterval30.clone();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(obj32, chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        mutableInterval34.setPeriodAfterStart(readablePeriod35);
        org.joda.time.Period period37 = mutableInterval34.toPeriod();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadablePeriod) period37);
        org.joda.time.Chronology chronology39 = mutableInterval38.getChronology();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(1606267372833L, 1606267382508L, chronology39);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        java.lang.Object obj48 = mutableInterval46.clone();
        org.joda.time.Interval interval49 = mutableInterval46.toInterval();
        org.joda.time.ReadableInterval readableInterval50 = null;
        boolean boolean51 = mutableInterval46.isBefore(readableInterval50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        mutableInterval55.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        mutableInterval62.setDurationAfterStart((long) (byte) 1);
        boolean boolean67 = mutableInterval62.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology68 = mutableInterval62.getChronology();
        mutableInterval55.setChronology(chronology68);
        mutableInterval46.setChronology(chronology68);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(1L, 1606267294649L, chronology68);
        long long72 = mutableInterval71.getStartMillis();
        mutableInterval71.setEndMillis(1606267395245L);
        mutableInterval40.setInterval((org.joda.time.ReadableInterval) mutableInterval71);
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Period period77 = mutableInterval40.toPeriod(periodType76);
        mutableInterval7.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period77);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(period77);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        mutableInterval8.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        long long17 = interval16.getEndMillis();
        boolean boolean19 = interval16.isAfter((long) (byte) 100);
        boolean boolean20 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Duration duration21 = mutableInterval8.toDuration();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval25.getStart();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(readableInstant28, readablePeriod29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        mutableInterval30.setInterval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime42);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(readablePeriod47, (org.joda.time.ReadableInstant) dateTime53);
        mutableInterval3.setStart((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(readableDuration56, readableInstant57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        mutableInterval62.setPeriodBeforeEnd(readablePeriod63);
        mutableInterval58.setInterval((org.joda.time.ReadableInterval) mutableInterval62);
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval58);
        boolean boolean67 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval66);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval66.setStartMillis(1606267499151L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    @Ignore
  public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        long long6 = mutableInterval3.getStartMillis();
        mutableInterval3.setDurationBeforeEnd(1606267284862L);
        java.lang.String str9 = mutableInterval3.toString();
        mutableInterval3.setDurationBeforeEnd((long) (byte) 10);
        org.joda.time.MutableInterval mutableInterval12 = mutableInterval3.copy();
        org.joda.time.Chronology chronology13 = mutableInterval12.getChronology();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.DateTime dateTime19 = mutableInterval17.getStart();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        java.lang.Object obj25 = mutableInterval23.clone();
        org.joda.time.Interval interval26 = mutableInterval23.toInterval();
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = mutableInterval23.isBefore(readableInterval27);
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval23.copy();
        boolean boolean30 = mutableInterval17.contains((org.joda.time.ReadableInterval) mutableInterval23);
        mutableInterval23.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology34 = mutableInterval23.getChronology();
        long long35 = mutableInterval23.toDurationMillis();
        mutableInterval23.setDurationAfterStart(1606267331417L);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(readableInstant38, readablePeriod39);
        mutableInterval40.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        java.lang.Object obj48 = mutableInterval46.clone();
        mutableInterval46.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology51 = mutableInterval46.getChronology();
        mutableInterval40.setChronology(chronology51);
        mutableInterval23.setChronology(chronology51);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval12, chronology51);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1919-02-06T22:38:35.139Z/1970-01-01T00:00:00.001Z" + "'", str9, "1919-02-06T22:38:35.139Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1606267284827L + "'", long35 == 1606267284827L);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology51);
    }

    @Test
    @Ignore
  public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.DateTime dateTime7 = mutableInterval5.getStart();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        java.lang.Object obj13 = mutableInterval11.clone();
        org.joda.time.Interval interval14 = mutableInterval11.toInterval();
        org.joda.time.ReadableInterval readableInterval15 = null;
        boolean boolean16 = mutableInterval11.isBefore(readableInterval15);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval11.copy();
        boolean boolean18 = mutableInterval5.contains((org.joda.time.ReadableInterval) mutableInterval11);
        mutableInterval11.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology22 = mutableInterval11.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(1606267424816L, 1606267382994L, chronology22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267324058L, 1606267514458L);
    }

    @Test
    @Ignore
  public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        mutableInterval12.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology17 = mutableInterval12.getChronology();
        mutableInterval3.setChronology(chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        mutableInterval22.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        java.lang.Object obj31 = mutableInterval29.clone();
        org.joda.time.Interval interval32 = mutableInterval29.toInterval();
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = mutableInterval29.isBefore(readableInterval33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology37);
        boolean boolean39 = mutableInterval29.isAfter((org.joda.time.ReadableInterval) mutableInterval38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        boolean boolean46 = mutableInterval29.isBefore((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean47 = mutableInterval22.contains((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean48 = mutableInterval3.isAfter((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Interval interval49 = mutableInterval3.toInterval();
        java.lang.String str50 = mutableInterval3.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str50, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.MutableInterval mutableInterval3 = mutableInterval2.copy();
        boolean boolean4 = mutableInterval2.isAfterNow();
        boolean boolean6 = mutableInterval2.contains(1606267449462L);
        boolean boolean7 = mutableInterval2.isBeforeNow();
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        long long6 = mutableInterval5.toDurationMillis();
        long long7 = mutableInterval5.getEndMillis();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        mutableInterval11.setDurationAfterStart((long) (byte) 1);
        boolean boolean16 = mutableInterval11.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        long long18 = mutableInterval11.getStartMillis();
        org.joda.time.Duration duration19 = mutableInterval11.toDuration();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        mutableInterval23.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        long long32 = interval31.getEndMillis();
        boolean boolean34 = interval31.isAfter((long) (byte) 100);
        boolean boolean35 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Duration duration36 = mutableInterval23.toDuration();
        mutableInterval11.setInterval((org.joda.time.ReadableInterval) mutableInterval23);
        boolean boolean38 = mutableInterval5.contains((org.joda.time.ReadableInterval) mutableInterval23);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    @Ignore
  public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        boolean boolean10 = mutableInterval3.contains((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableInstant11, readablePeriod12);
        mutableInterval13.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval16 = mutableInterval13.toMutableInterval();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval16);
        long long18 = mutableInterval3.getEndMillis();
        mutableInterval3.setStartMillis(1606267377590L);
        boolean boolean21 = mutableInterval3.isAfterNow();
        long long22 = mutableInterval3.getEndMillis();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(readablePeriod28, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(readableInstant48, readablePeriod49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        org.joda.time.DateTime dateTime56 = mutableInterval54.getStart();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        mutableInterval50.setInterval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime65 = mutableInterval64.getStart();
        mutableInterval64.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean69 = mutableInterval27.overlaps((org.joda.time.ReadableInterval) mutableInterval64);
        mutableInterval64.setStartMillis(0L);
        org.joda.time.Period period72 = mutableInterval64.toPeriod();
        mutableInterval64.setDurationBeforeEnd(1606267351858L);
        boolean boolean75 = mutableInterval23.contains((org.joda.time.ReadableInterval) mutableInterval64);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mutableInterval16);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1606267551450L + "'", long18 == 1606267551450L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1606267551450L + "'", long22 == 1606267551450L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    @Ignore
  public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(readableInstant1, readablePeriod2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        org.joda.time.DateTime dateTime9 = mutableInterval7.getStart();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        org.joda.time.DateTime dateTime15 = mutableInterval13.getStart();
        mutableInterval3.setInterval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableDuration18, readableInstant19);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = mutableInterval20.toPeriod(periodType21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        long long26 = mutableInterval25.getEndMillis();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        mutableInterval29.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval32 = mutableInterval29.toMutableInterval();
        org.joda.time.DateTime dateTime33 = mutableInterval32.getEnd();
        boolean boolean34 = mutableInterval25.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period22, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        java.lang.Object obj41 = mutableInterval39.clone();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(obj41, chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        mutableInterval43.setPeriodAfterStart(readablePeriod44);
        org.joda.time.Period period46 = mutableInterval43.toPeriod();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        java.lang.Object obj52 = mutableInterval50.clone();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(obj52, chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutableInterval54.setPeriodAfterStart(readablePeriod55);
        org.joda.time.Period period57 = mutableInterval54.toPeriod();
        mutableInterval43.setPeriodAfterStart((org.joda.time.ReadablePeriod) period57);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadablePeriod) period57);
        mutableInterval17.setPeriodAfterStart((org.joda.time.ReadablePeriod) period57);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval17);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(period22);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1606267551615L + "'", long26 == 1606267551615L);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period57);
    }

    @Test
    @Ignore
  public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (-1), (long) (byte) 100);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, 1L, chronology5);
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.DateTime dateTime8 = mutableInterval6.getStart();
        org.joda.time.Interval interval9 = mutableInterval6.toInterval();
        boolean boolean10 = mutableInterval2.isAfter((org.joda.time.ReadableInterval) mutableInterval6);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        boolean boolean19 = mutableInterval14.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        long long21 = mutableInterval14.getStartMillis();
        org.joda.time.Duration duration22 = mutableInterval14.toDuration();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        mutableInterval26.setDurationAfterStart((long) (byte) 1);
        boolean boolean31 = mutableInterval26.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology32 = mutableInterval26.getChronology();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        java.lang.Object obj38 = mutableInterval36.clone();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(obj38, chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        org.joda.time.Period period43 = mutableInterval40.toPeriod();
        mutableInterval26.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        java.lang.Object obj50 = mutableInterval48.clone();
        org.joda.time.Interval interval51 = mutableInterval48.toInterval();
        org.joda.time.ReadableInterval readableInterval52 = null;
        boolean boolean53 = mutableInterval48.isBefore(readableInterval52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology56);
        boolean boolean58 = mutableInterval48.isAfter((org.joda.time.ReadableInterval) mutableInterval57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.DateTime dateTime64 = mutableInterval62.getStart();
        boolean boolean65 = mutableInterval48.isBefore((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period43, (org.joda.time.ReadableInstant) dateTime64);
        boolean boolean67 = mutableInterval14.equals((java.lang.Object) mutableInterval66);
        mutableInterval6.setInterval((org.joda.time.ReadableInterval) mutableInterval14);
        org.joda.time.ReadableInstant readableInstant69 = null;
        boolean boolean70 = mutableInterval14.isAfter(readableInstant69);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval5.toMutableInterval();
        org.joda.time.DateTime dateTime8 = mutableInterval7.getStart();
        org.joda.time.Period period9 = mutableInterval7.toPeriod();
        long long10 = mutableInterval7.getEndMillis();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(period9);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1606267551929L + "'", long10 == 1606267551929L);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        boolean boolean6 = mutableInterval2.containsNow();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    @Ignore
  public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        java.lang.Object obj35 = mutableInterval33.clone();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(obj35, chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutableInterval37.setPeriodBeforeEnd(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readableInstant40, readablePeriod41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        mutableInterval42.setInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        java.lang.Object obj61 = mutableInterval59.clone();
        org.joda.time.Interval interval62 = mutableInterval59.toInterval();
        org.joda.time.ReadableInterval readableInterval63 = null;
        boolean boolean64 = mutableInterval59.isBefore(readableInterval63);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology67);
        boolean boolean69 = mutableInterval59.isAfter((org.joda.time.ReadableInterval) mutableInterval68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        boolean boolean76 = mutableInterval59.isBefore((org.joda.time.ReadableInstant) dateTime75);
        mutableInterval37.setInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime75);
        boolean boolean78 = mutableInterval28.isAfter((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean79 = mutableInterval28.isAfterNow();
        org.joda.time.Duration duration80 = mutableInterval28.toDuration();
        org.joda.time.MutableInterval mutableInterval81 = mutableInterval28.toMutableInterval();
        org.joda.time.DateTime dateTime82 = mutableInterval28.getStart();
        mutableInterval28.setDurationBeforeEnd(1606267401730L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str29, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(mutableInterval81);
        org.junit.Assert.assertNotNull(dateTime82);
    }

    @Test
    @Ignore
  public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval3.isAfterNow();
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval3.toMutableInterval();
        org.joda.time.DateTime dateTime7 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        java.lang.Object obj13 = mutableInterval11.clone();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(obj13, chronology14);
        long long16 = mutableInterval15.getStartMillis();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        long long23 = mutableInterval20.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(readableInstant26, readablePeriod27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        mutableInterval28.setInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readablePeriod25, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readablePeriod24, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readableInstant44, readablePeriod45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.DateTime dateTime52 = mutableInterval50.getStart();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(0L, 1L, chronology55);
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        org.joda.time.DateTime dateTime58 = mutableInterval56.getStart();
        mutableInterval46.setInterval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime52);
        boolean boolean61 = mutableInterval20.isBefore((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        mutableInterval65.setDurationAfterStart((long) (byte) 1);
        boolean boolean70 = mutableInterval65.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(0L, 1L, chronology73);
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        java.lang.Object obj76 = mutableInterval74.clone();
        mutableInterval74.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology79 = mutableInterval74.getChronology();
        mutableInterval65.setChronology(chronology79);
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval20, chronology79);
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval15, chronology79);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology79);
        org.joda.time.Duration duration84 = mutableInterval3.toDuration();
        boolean boolean85 = mutableInterval3.isBeforeNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267453176L, 1606267497749L);
    }

    @Test
    @Ignore
  public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267284862L);
        org.joda.time.Interval interval20 = mutableInterval9.toInterval();
        org.joda.time.Duration duration21 = mutableInterval9.toDuration();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval25.getStart();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        java.lang.Object obj33 = mutableInterval31.clone();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(obj33, chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutableInterval35.setPeriodAfterStart(readablePeriod36);
        org.joda.time.Period period38 = mutableInterval35.toPeriod();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadablePeriod) period38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        java.lang.Object obj45 = mutableInterval43.clone();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(obj45, chronology46);
        org.joda.time.Duration duration48 = mutableInterval47.toDuration();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(readableInstant50, readablePeriod51);
        long long53 = mutableInterval52.getEndMillis();
        org.joda.time.MutableInterval mutableInterval54 = mutableInterval52.copy();
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(readableDuration55, readableInstant56);
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = mutableInterval57.toPeriod(periodType58);
        mutableInterval52.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DateTime dateTime61 = mutableInterval52.getStart();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval63 = mutableInterval62.toMutableInterval();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        java.lang.Object obj69 = mutableInterval67.clone();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(obj69, chronology70);
        org.joda.time.DateTime dateTime72 = mutableInterval71.getEnd();
        mutableInterval63.setStart((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        java.lang.Object obj79 = mutableInterval77.clone();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(obj79, chronology80);
        org.joda.time.Duration duration82 = mutableInterval81.toDuration();
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableDuration) duration82);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime72);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration48);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1606267552458L + "'", long53 == 1606267552458L);
        org.junit.Assert.assertNotNull(mutableInterval54);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(mutableInterval63);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration82);
    }

    @Test
    @Ignore
  public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        java.lang.String str6 = mutableInterval2.toString();
        long long7 = mutableInterval2.getStartMillis();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        mutableInterval11.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        long long20 = interval19.getEndMillis();
        boolean boolean22 = interval19.isAfter((long) (byte) 100);
        boolean boolean23 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Duration duration24 = mutableInterval11.toDuration();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.DateTime dateTime30 = mutableInterval28.getStart();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        mutableInterval33.setInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        java.lang.Object obj60 = mutableInterval58.clone();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(obj60, chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        mutableInterval62.setPeriodAfterStart(readablePeriod63);
        org.joda.time.Period period65 = mutableInterval62.toPeriod();
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadablePeriod) period65);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        java.lang.Object obj72 = mutableInterval70.clone();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(obj72, chronology73);
        org.joda.time.Duration duration75 = mutableInterval74.toDuration();
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration75);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        java.lang.Object obj83 = mutableInterval81.clone();
        org.joda.time.Interval interval84 = mutableInterval81.toInterval();
        org.joda.time.ReadableInterval readableInterval85 = null;
        boolean boolean86 = mutableInterval81.isBefore(readableInterval85);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology89);
        boolean boolean91 = mutableInterval81.isAfter((org.joda.time.ReadableInterval) mutableInterval90);
        org.joda.time.Interval interval92 = mutableInterval81.toInterval();
        org.joda.time.Period period93 = mutableInterval81.toPeriod();
        org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadablePeriod) period93);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval94);
        org.joda.time.MutableInterval mutableInterval96 = mutableInterval94.toMutableInterval();
        boolean boolean98 = mutableInterval94.isBefore(1606267490493L);
        org.junit.Assert.assertNotNull(mutableInterval5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2020-11-25T01:25:52.677Z/2020-11-25T01:25:52.678Z" + "'", str6, "2020-11-25T01:25:52.677Z/2020-11-25T01:25:52.678Z");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1606267552677L + "'", long7 == 1606267552677L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertEquals(obj83.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(mutableInterval96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    @Ignore
  public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        org.joda.time.Chronology chronology43 = mutableInterval40.getChronology();
        long long44 = mutableInterval40.getStartMillis();
        org.joda.time.MutableInterval mutableInterval45 = mutableInterval40.copy();
        java.lang.String str46 = mutableInterval40.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.ReadableInterval readableInterval52 = null;
        boolean boolean53 = mutableInterval50.isAfter(readableInterval52);
        boolean boolean55 = mutableInterval50.isBefore(1606267308130L);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(readableInstant56, readablePeriod57);
        mutableInterval58.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval61 = mutableInterval58.toMutableInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval61.getEnd();
        org.joda.time.MutableInterval mutableInterval63 = mutableInterval61.toMutableInterval();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        mutableInterval67.setDurationAfterStart((long) (byte) 1);
        mutableInterval67.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        org.joda.time.DateTime dateTime78 = mutableInterval76.getStart();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(0L, 1L, chronology81);
        org.joda.time.Interval interval83 = mutableInterval82.toInterval();
        java.lang.Object obj84 = mutableInterval82.clone();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(obj84, chronology85);
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        mutableInterval86.setPeriodAfterStart(readablePeriod87);
        org.joda.time.Period period89 = mutableInterval86.toPeriod();
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime78, (org.joda.time.ReadablePeriod) period89);
        boolean boolean91 = mutableInterval67.isBefore((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean92 = mutableInterval63.contains((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean93 = mutableInterval50.isAfter((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean94 = mutableInterval50.isBeforeNow();
        boolean boolean95 = mutableInterval40.overlaps((org.joda.time.ReadableInterval) mutableInterval50);
        java.lang.String str96 = mutableInterval40.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z" + "'", str46, "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(mutableInterval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(mutableInterval63);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertEquals(obj84.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj84), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj84), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z" + "'", str96, "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z");
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime49);
        mutableInterval57.setInterval(1606267324058L, 1606267352998L);
        org.joda.time.Duration duration61 = mutableInterval57.toDuration();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(duration61);
    }

    @Test
    @Ignore
  public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.Duration duration8 = mutableInterval3.toDuration();
        org.joda.time.Period period9 = mutableInterval3.toPeriod();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableInstant11, readablePeriod12);
        mutableInterval13.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval16 = mutableInterval13.toMutableInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        long long21 = mutableInterval20.toDurationMillis();
        mutableInterval13.setInterval((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.DateTime dateTime23 = mutableInterval13.getEnd();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        mutableInterval27.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        long long36 = interval35.getEndMillis();
        boolean boolean38 = interval35.isAfter((long) (byte) 100);
        boolean boolean39 = mutableInterval27.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration40 = mutableInterval27.toDuration();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration40, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration40);
        mutableInterval10.setEnd((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean60 = mutableInterval10.isBeforeNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    @Ignore
  public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(readableInstant47, readablePeriod48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        mutableInterval49.setInterval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime64 = mutableInterval63.getStart();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime64);
        java.lang.String str66 = mutableInterval65.toString();
        long long67 = mutableInterval65.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z" + "'", str66, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z");
        mutableInterval1.setDurationBeforeEnd(1606267510158L);
        org.junit.Assert.assertNotNull(mutableInterval1);
    }

    @Test
    @Ignore
  public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(0L, 1L, chronology3);
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        java.lang.Object obj6 = mutableInterval4.clone();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(obj6, chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableInterval8.setPeriodBeforeEnd(readablePeriod9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        long long23 = interval22.getEndMillis();
        boolean boolean25 = interval22.isAfter((long) (byte) 100);
        boolean boolean26 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Duration duration27 = mutableInterval14.toDuration();
        boolean boolean28 = mutableInterval8.isBefore((org.joda.time.ReadableInterval) mutableInterval14);
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval14.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        mutableInterval33.setInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(readablePeriod30, (org.joda.time.ReadableInstant) dateTime39);
        mutableInterval14.setEnd((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        mutableInterval52.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        long long61 = interval60.getEndMillis();
        boolean boolean63 = interval60.isAfter((long) (byte) 100);
        boolean boolean64 = mutableInterval52.overlaps((org.joda.time.ReadableInterval) interval60);
        boolean boolean65 = mutableInterval14.contains((org.joda.time.ReadableInterval) mutableInterval52);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, 1L, chronology68);
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        org.joda.time.DateTime dateTime71 = mutableInterval69.getStart();
        boolean boolean72 = mutableInterval14.contains((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        java.lang.Object obj78 = mutableInterval76.clone();
        mutableInterval76.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology81 = mutableInterval76.getChronology();
        mutableInterval14.setChronology(chronology81);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        java.lang.Object obj88 = mutableInterval86.clone();
        org.joda.time.ReadableDuration readableDuration89 = null;
        mutableInterval86.setDurationAfterStart(readableDuration89);
        boolean boolean91 = mutableInterval86.isAfterNow();
        boolean boolean92 = mutableInterval14.contains((org.joda.time.ReadableInterval) mutableInterval86);
        org.joda.time.Interval interval93 = mutableInterval86.toInterval();
        org.joda.time.Period period94 = mutableInterval86.toPeriod();
        org.joda.time.MutableInterval mutableInterval95 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadablePeriod) period94);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertNotNull(period94);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval5.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval5);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval7);
    }

    @Test
    @Ignore
  public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Period period10 = mutableInterval7.toPeriod();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        boolean boolean26 = mutableInterval21.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        mutableInterval14.setChronology(chronology27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(obj34, chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        mutableInterval36.setPeriodAfterStart(readablePeriod37);
        org.joda.time.Period period39 = mutableInterval36.toPeriod();
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval36.copy();
        boolean boolean41 = mutableInterval14.isAfter((org.joda.time.ReadableInterval) mutableInterval36);
        boolean boolean42 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        boolean boolean44 = mutableInterval14.isBefore((long) 'a');
        org.joda.time.MutableInterval mutableInterval45 = mutableInterval14.toMutableInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(mutableInterval45);
    }

    @Test
    @Ignore
  public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(readableDuration3, readableInstant4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = mutableInterval5.toPeriod(periodType6);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period7);
        boolean boolean9 = mutableInterval2.isAfterNow();
        boolean boolean11 = mutableInterval2.isBefore(1606267294649L);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = mutableInterval2.toPeriod(periodType12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        org.joda.time.Interval interval20 = mutableInterval17.toInterval();
        org.joda.time.ReadableInterval readableInterval21 = null;
        boolean boolean22 = mutableInterval17.isBefore(readableInterval21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology25);
        boolean boolean27 = mutableInterval17.isAfter((org.joda.time.ReadableInterval) mutableInterval26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        mutableInterval36.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        long long45 = interval44.getEndMillis();
        boolean boolean47 = interval44.isAfter((long) (byte) 100);
        boolean boolean48 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) interval44);
        org.joda.time.Duration duration49 = mutableInterval36.toDuration();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(readableInstant56, readablePeriod57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.DateTime dateTime64 = mutableInterval62.getStart();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        mutableInterval58.setInterval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration49, (org.joda.time.ReadableInstant) dateTime70);
        mutableInterval31.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration49);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration49);
        java.lang.Object obj76 = mutableInterval17.clone();
        org.joda.time.DateTime dateTime77 = mutableInterval17.getStart();
        mutableInterval2.setStart((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(readableInstant79, readablePeriod80);
        mutableInterval81.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval84 = mutableInterval81.toMutableInterval();
        boolean boolean85 = mutableInterval84.containsNow();
        org.joda.time.Duration duration86 = mutableInterval84.toDuration();
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadableDuration) duration86);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(mutableInterval84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(duration86);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:24:59.050Z/2020-11-25T01:24:59.050Z");
        org.joda.time.Period period2 = mutableInterval1.toPeriod();
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(period2);
    }

    @Test
    @Ignore
  public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableInterval25.setPeriodAfterStart(readablePeriod26);
        org.joda.time.Period period28 = mutableInterval25.toPeriod();
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval25.copy();
        boolean boolean30 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(obj36, chronology37);
        boolean boolean39 = mutableInterval3.equals((java.lang.Object) mutableInterval38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        org.joda.time.MutableInterval mutableInterval42 = org.joda.time.MutableInterval.parse("1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z");
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        boolean boolean44 = mutableInterval3.isBefore((org.joda.time.ReadableInterval) mutableInterval42);
        org.joda.time.DateTime dateTime45 = mutableInterval42.getEnd();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:23:20.815Z/2020-11-25T01:23:20.815Z");
        mutableInterval1.setEndMillis(1606267435590L);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval1.setDurationBeforeEnd((-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval1);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267456653L, 1606267382994L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval3.toPeriod(periodType8);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setInterval(1606267516954L, 1606267485023L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    @Ignore
  public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        java.lang.Object obj27 = mutableInterval25.clone();
        org.joda.time.Interval interval28 = mutableInterval25.toInterval();
        org.joda.time.ReadableInterval readableInterval29 = null;
        boolean boolean30 = mutableInterval25.isBefore(readableInterval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology33);
        boolean boolean35 = mutableInterval25.isAfter((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        boolean boolean42 = mutableInterval25.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period20, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        java.lang.Object obj49 = mutableInterval47.clone();
        long long50 = mutableInterval47.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(readableInstant53, readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        mutableInterval55.setInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(readablePeriod52, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(readablePeriod51, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(readableInstant71, readablePeriod72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval77.getStart();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        org.joda.time.DateTime dateTime85 = mutableInterval83.getStart();
        mutableInterval73.setInterval((org.joda.time.ReadableInstant) dateTime79, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime79);
        boolean boolean88 = mutableInterval47.isBefore((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period20, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval90 = mutableInterval89.toMutableInterval();
        boolean boolean92 = mutableInterval90.isBefore(1606267420273L);
        boolean boolean93 = mutableInterval90.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(mutableInterval90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    @Ignore
  public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        mutableInterval5.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology10 = mutableInterval5.getChronology();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval5.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval12 = mutableInterval5.copy();
        org.joda.time.Duration duration13 = mutableInterval5.toDuration();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readableInstant16, readablePeriod17);
        mutableInterval18.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval18.toMutableInterval();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        long long26 = mutableInterval25.toDurationMillis();
        mutableInterval18.setInterval((org.joda.time.ReadableInterval) mutableInterval25);
        mutableInterval18.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        mutableInterval37.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        boolean boolean49 = mutableInterval44.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        mutableInterval37.setChronology(chronology50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology50);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology50);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval18, chronology50);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology50);
        mutableInterval5.setChronology(chronology50);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((long) ' ', (long) (short) 100, chronology50);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        mutableInterval61.setDurationAfterStart((long) (byte) 1);
        boolean boolean66 = mutableInterval61.equals((java.lang.Object) 0);
        boolean boolean67 = mutableInterval57.equals((java.lang.Object) mutableInterval61);
        java.lang.String str68 = mutableInterval57.toString();
        org.joda.time.Period period69 = mutableInterval57.toPeriod();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1970-01-01T00:00:00.032Z/1970-01-01T00:00:00.100Z" + "'", str68, "1970-01-01T00:00:00.032Z/1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertNotNull(period69);
    }

    @Test
    @Ignore
  public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        long long5 = interval4.getEndMillis();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        mutableInterval8.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval8.toMutableInterval();
        boolean boolean12 = interval4.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        org.joda.time.Period period13 = interval4.toPeriod();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(obj19, chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        mutableInterval21.setPeriodAfterStart(readablePeriod22);
        org.joda.time.Period period24 = mutableInterval21.toPeriod();
        org.joda.time.MutableInterval mutableInterval25 = mutableInterval21.copy();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableInstant32, readablePeriod33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        mutableInterval34.setInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime46);
        boolean boolean49 = mutableInterval25.isBefore((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period13, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        java.lang.Object obj56 = mutableInterval54.clone();
        mutableInterval54.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology59 = mutableInterval54.getChronology();
        org.joda.time.MutableInterval mutableInterval60 = mutableInterval54.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval61 = mutableInterval54.copy();
        org.joda.time.Duration duration62 = mutableInterval54.toDuration();
        org.joda.time.DateTime dateTime63 = mutableInterval54.getStart();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        mutableInterval67.setPeriodAfterStart(readablePeriod68);
        org.joda.time.MutableInterval mutableInterval70 = mutableInterval67.toMutableInterval();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(0L, 1L, chronology73);
        long long75 = mutableInterval74.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval76 = mutableInterval74.copy();
        org.joda.time.Period period77 = mutableInterval74.toPeriod();
        mutableInterval67.setPeriodAfterStart((org.joda.time.ReadablePeriod) period77);
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadablePeriod) period77);
        org.joda.time.PeriodType periodType80 = null;
        org.joda.time.Period period81 = mutableInterval79.toPeriod(periodType80);
        mutableInterval50.setPeriodAfterStart((org.joda.time.ReadablePeriod) period81);
        boolean boolean84 = mutableInterval50.isBefore(1606267456653L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(mutableInterval60);
        org.junit.Assert.assertNotNull(mutableInterval61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(mutableInterval70);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    @Ignore
  public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Period period10 = mutableInterval7.toPeriod();
        org.joda.time.Interval interval11 = mutableInterval7.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        org.joda.time.Interval interval20 = mutableInterval17.toInterval();
        org.joda.time.ReadableInterval readableInterval21 = null;
        boolean boolean22 = mutableInterval17.isBefore(readableInterval21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        mutableInterval26.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        mutableInterval33.setDurationAfterStart((long) (byte) 1);
        boolean boolean38 = mutableInterval33.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology39 = mutableInterval33.getChronology();
        mutableInterval26.setChronology(chronology39);
        mutableInterval17.setChronology(chronology39);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(1L, 1606267294649L, chronology39);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((java.lang.Object) interval11, chronology39);
        long long44 = interval11.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }

    @Test
    @Ignore
  public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.DateTime dateTime8 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(obj24, chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableInterval26.setPeriodAfterStart(readablePeriod27);
        org.joda.time.Period period29 = mutableInterval26.toPeriod();
        mutableInterval12.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        boolean boolean37 = mutableInterval35.isAfterNow();
        org.joda.time.MutableInterval mutableInterval38 = mutableInterval35.toMutableInterval();
        org.joda.time.Duration duration39 = mutableInterval35.toDuration();
        mutableInterval31.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration39);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(duration39);
    }

    @Test
    @Ignore
  public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        mutableInterval3.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        org.joda.time.Interval interval15 = mutableInterval12.toInterval();
        mutableInterval12.setDurationBeforeEnd(0L);
        boolean boolean19 = mutableInterval12.contains((long) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        mutableInterval23.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        long long32 = interval31.getEndMillis();
        boolean boolean34 = interval31.isAfter((long) (byte) 100);
        boolean boolean35 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Duration duration36 = mutableInterval23.toDuration();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(readableInstant43, readablePeriod44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        mutableInterval45.setInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(readableInstant61, readablePeriod62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        org.joda.time.DateTime dateTime69 = mutableInterval67.getStart();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        mutableInterval63.setInterval((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime69);
        mutableInterval12.setDurationAfterStart((org.joda.time.ReadableDuration) duration36);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration36);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(readableInstant80, readablePeriod81);
        long long83 = mutableInterval82.getEndMillis();
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(readableInstant84, readablePeriod85);
        mutableInterval86.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval89 = mutableInterval86.toMutableInterval();
        org.joda.time.DateTime dateTime90 = mutableInterval89.getEnd();
        boolean boolean91 = mutableInterval82.isAfter((org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime90);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
// flaky:         org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1606267555224L + "'", long83 == 1606267555224L);
        org.junit.Assert.assertNotNull(mutableInterval89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        mutableInterval25.setDurationBeforeEnd(1L);
        boolean boolean28 = mutableInterval22.contains((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval25);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval29.setEndMillis(1606267310105L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    @Ignore
  public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        long long10 = mutableInterval3.getStartMillis();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(readableDuration12, readableInstant13);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = mutableInterval14.toPeriod(periodType15);
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        mutableInterval21.setPeriodBeforeEnd(readablePeriod22);
        mutableInterval21.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(readableInstant26, readablePeriod27);
        long long29 = mutableInterval28.getEndMillis();
        boolean boolean30 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        boolean boolean31 = mutableInterval28.isAfterNow();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        java.lang.Object obj43 = mutableInterval41.clone();
        org.joda.time.Interval interval44 = mutableInterval41.toInterval();
        org.joda.time.ReadableInterval readableInterval45 = null;
        boolean boolean46 = mutableInterval41.isBefore(readableInterval45);
        org.joda.time.MutableInterval mutableInterval47 = mutableInterval41.copy();
        boolean boolean48 = mutableInterval35.contains((org.joda.time.ReadableInterval) mutableInterval41);
        mutableInterval41.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology52 = mutableInterval41.getChronology();
        boolean boolean53 = mutableInterval41.isBeforeNow();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        mutableInterval57.setPeriodBeforeEnd(readablePeriod58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(readableInstant60, readablePeriod61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        org.joda.time.DateTime dateTime74 = mutableInterval72.getStart();
        mutableInterval62.setInterval((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime74);
        boolean boolean76 = mutableInterval57.isAfter((org.joda.time.ReadableInstant) dateTime74);
        boolean boolean77 = mutableInterval41.isAfter((org.joda.time.ReadableInstant) dateTime74);
        mutableInterval28.setStart((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period16, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Chronology chronology80 = mutableInterval79.getChronology();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period16);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1606267555506L + "'", long29 == 1606267555506L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(chronology80);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval5.toMutableInterval();
        org.joda.time.DateTime dateTime8 = mutableInterval7.getStart();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        long long21 = interval20.getEndMillis();
        boolean boolean23 = interval20.isAfter((long) (byte) 100);
        boolean boolean24 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Duration duration25 = mutableInterval12.toDuration();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableInstant32, readablePeriod33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        mutableInterval34.setInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutableInterval49.setPeriodAfterStart(readablePeriod50);
        org.joda.time.Chronology chronology52 = mutableInterval49.getChronology();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval7, chronology52);
        org.joda.time.Chronology chronology54 = mutableInterval53.getChronology();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology54);
    }

    @Test
    @Ignore
  public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267284862L);
        org.joda.time.Interval interval20 = mutableInterval9.toInterval();
        org.joda.time.Duration duration21 = mutableInterval9.toDuration();
        java.lang.String str22 = mutableInterval9.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.035Z/2020-11-25T01:21:24.862Z" + "'", str22, "1970-01-01T00:00:00.035Z/2020-11-25T01:21:24.862Z");
    }

    @Test
    @Ignore
  public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        java.lang.Object obj13 = mutableInterval11.clone();
        java.lang.Object obj14 = mutableInterval11.clone();
        boolean boolean15 = mutableInterval5.equals((java.lang.Object) mutableInterval11);
        org.joda.time.Interval interval16 = mutableInterval11.toInterval();
        boolean boolean18 = mutableInterval11.isBefore((long) (byte) -1);
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval11.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readableInstant20, readablePeriod21);
        mutableInterval22.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval25 = mutableInterval22.toMutableInterval();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        long long30 = mutableInterval29.toDurationMillis();
        mutableInterval22.setInterval((org.joda.time.ReadableInterval) mutableInterval29);
        org.joda.time.Duration duration32 = mutableInterval29.toDuration();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        java.lang.Object obj38 = mutableInterval36.clone();
        org.joda.time.Interval interval39 = mutableInterval36.toInterval();
        org.joda.time.ReadableInterval readableInterval40 = null;
        boolean boolean41 = mutableInterval36.isBefore(readableInterval40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology44);
        boolean boolean46 = mutableInterval36.isAfter((org.joda.time.ReadableInterval) mutableInterval45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.DateTime dateTime52 = mutableInterval50.getStart();
        boolean boolean53 = mutableInterval36.isBefore((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval54);
        org.joda.time.Chronology chronology56 = mutableInterval55.getChronology();
        mutableInterval11.setChronology(chronology56);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(1606267529688L, 1606267378558L, chronology56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology56);
    }

    @Test
    @Ignore
  public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = mutableInterval10.isBefore(readableInterval14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology18);
        boolean boolean20 = mutableInterval10.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        boolean boolean27 = mutableInterval10.isBefore((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(obj34, chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        mutableInterval36.setPeriodAfterStart(readablePeriod37);
        org.joda.time.Period period39 = mutableInterval36.toPeriod();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        java.lang.Object obj45 = mutableInterval43.clone();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(obj45, chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        mutableInterval47.setPeriodAfterStart(readablePeriod48);
        org.joda.time.Period period50 = mutableInterval47.toPeriod();
        mutableInterval36.setPeriodAfterStart((org.joda.time.ReadablePeriod) period50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadablePeriod) period50);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((long) 100, 1606267358686L);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(readableInstant56, readablePeriod57);
        mutableInterval58.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval61 = mutableInterval58.toMutableInterval();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        long long66 = mutableInterval65.toDurationMillis();
        mutableInterval58.setInterval((org.joda.time.ReadableInterval) mutableInterval65);
        org.joda.time.Duration duration68 = mutableInterval65.toDuration();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        java.lang.Object obj74 = mutableInterval72.clone();
        org.joda.time.Interval interval75 = mutableInterval72.toInterval();
        org.joda.time.ReadableInterval readableInterval76 = null;
        boolean boolean77 = mutableInterval72.isBefore(readableInterval76);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology80);
        boolean boolean82 = mutableInterval72.isAfter((org.joda.time.ReadableInterval) mutableInterval81);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.DateTime dateTime88 = mutableInterval86.getStart();
        boolean boolean89 = mutableInterval72.isBefore((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration68, (org.joda.time.ReadableInstant) dateTime88);
        mutableInterval55.setStart((org.joda.time.ReadableInstant) dateTime88);
        mutableInterval52.setEnd((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.Period period93 = mutableInterval52.toPeriod();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(mutableInterval61);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(period93);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267310806L, 1606267331452L);
        mutableInterval2.setInterval((long) '4', 1606267533152L);
    }

    @Test
    @Ignore
  public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        long long10 = mutableInterval3.getStartMillis();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        long long24 = interval23.getEndMillis();
        boolean boolean26 = interval23.isAfter((long) (byte) 100);
        boolean boolean27 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Duration duration28 = mutableInterval15.toDuration();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval15);
        long long30 = mutableInterval3.getStartMillis();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        java.lang.Object obj42 = mutableInterval40.clone();
        org.joda.time.Interval interval43 = mutableInterval40.toInterval();
        org.joda.time.ReadableInterval readableInterval44 = null;
        boolean boolean45 = mutableInterval40.isBefore(readableInterval44);
        org.joda.time.MutableInterval mutableInterval46 = mutableInterval40.copy();
        boolean boolean47 = mutableInterval34.contains((org.joda.time.ReadableInterval) mutableInterval40);
        mutableInterval40.setInterval((long) '#', 1606267284862L);
        org.joda.time.Chronology chronology51 = mutableInterval40.getChronology();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(0L, 1L, chronology55);
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        java.lang.Object obj58 = mutableInterval56.clone();
        java.lang.Object obj59 = mutableInterval56.clone();
        org.joda.time.MutableInterval mutableInterval60 = mutableInterval56.copy();
        org.joda.time.DateTime dateTime61 = mutableInterval56.getStart();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        mutableInterval65.setDurationAfterStart((long) (byte) 1);
        boolean boolean70 = mutableInterval65.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology71 = mutableInterval65.getChronology();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        java.lang.Object obj77 = mutableInterval75.clone();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(obj77, chronology78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        mutableInterval79.setPeriodAfterStart(readablePeriod80);
        org.joda.time.Period period82 = mutableInterval79.toPeriod();
        mutableInterval65.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period82);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadablePeriod) period82);
        mutableInterval84.setInterval(1606267328092L, 1606267422855L);
        org.joda.time.Chronology chronology88 = mutableInterval84.getChronology();
        mutableInterval52.setChronology(chronology88);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(mutableInterval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(chronology88);
    }

    @Test
    @Ignore
  public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        boolean boolean15 = interval8.isBefore((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean16 = mutableInterval1.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval12.toMutableInterval();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = mutableInterval12.toPeriod(periodType18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        java.lang.Object obj25 = mutableInterval23.clone();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(obj25, chronology26);
        org.joda.time.DateTime dateTime28 = mutableInterval27.getEnd();
        boolean boolean29 = mutableInterval12.contains((org.joda.time.ReadableInterval) mutableInterval27);
        org.joda.time.DateTime dateTime30 = mutableInterval27.getStart();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((-1L), 1606267312402L);
        boolean boolean34 = mutableInterval33.isAfterNow();
        org.joda.time.Duration duration35 = mutableInterval33.toDuration();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration35);
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(duration35);
    }

    @Test
    @Ignore
  public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        boolean boolean22 = mutableInterval17.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology23 = mutableInterval17.getChronology();
        mutableInterval10.setChronology(chronology23);
        mutableInterval10.setEndMillis((long) '#');
        org.joda.time.Duration duration27 = mutableInterval10.toDuration();
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = mutableInterval3.toPeriod(periodType29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        mutableInterval34.setDurationBeforeEnd(readableDuration35);
        boolean boolean37 = mutableInterval34.isBeforeNow();
        java.lang.Object obj38 = mutableInterval34.clone();
        org.joda.time.Chronology chronology39 = mutableInterval34.getChronology();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology39);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology39);
    }

    @Test
    @Ignore
  public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.copy();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        java.lang.Object obj17 = mutableInterval15.clone();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(obj17, chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        mutableInterval19.setPeriodBeforeEnd(readablePeriod20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(readableInstant22, readablePeriod23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.DateTime dateTime30 = mutableInterval28.getStart();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        mutableInterval24.setInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        java.lang.Object obj43 = mutableInterval41.clone();
        org.joda.time.Interval interval44 = mutableInterval41.toInterval();
        org.joda.time.ReadableInterval readableInterval45 = null;
        boolean boolean46 = mutableInterval41.isBefore(readableInterval45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology49);
        boolean boolean51 = mutableInterval41.isAfter((org.joda.time.ReadableInterval) mutableInterval50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        boolean boolean58 = mutableInterval41.isBefore((org.joda.time.ReadableInstant) dateTime57);
        mutableInterval19.setInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(readablePeriod11, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration61 = mutableInterval60.toDuration();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval60);
        org.joda.time.MutableInterval mutableInterval63 = mutableInterval3.toMutableInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(mutableInterval63);
    }

    @Test
    @Ignore
  public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        java.lang.Object obj10 = mutableInterval7.clone();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval7.setStartMillis(1606267337765L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        org.joda.time.Chronology chronology43 = mutableInterval40.getChronology();
        long long44 = mutableInterval40.getStartMillis();
        org.joda.time.MutableInterval mutableInterval45 = mutableInterval40.copy();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        mutableInterval49.setDurationAfterStart((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant53 = null;
        mutableInterval49.setEnd(readableInstant53);
        mutableInterval49.setDurationBeforeEnd(0L);
        long long57 = mutableInterval49.toDurationMillis();
        boolean boolean58 = mutableInterval40.isBefore((org.joda.time.ReadableInterval) mutableInterval49);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval49);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    @Ignore
  public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        mutableInterval25.setDurationBeforeEnd(1L);
        boolean boolean28 = mutableInterval22.contains((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval25);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        mutableInterval32.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval35 = mutableInterval32.toMutableInterval();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        long long40 = mutableInterval39.toDurationMillis();
        mutableInterval32.setInterval((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.Duration duration42 = mutableInterval39.toDuration();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        java.lang.Object obj48 = mutableInterval46.clone();
        org.joda.time.Interval interval49 = mutableInterval46.toInterval();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutableInterval46.setPeriodAfterStart(readablePeriod50);
        mutableInterval46.setEndMillis((long) 100);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        mutableInterval57.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        java.lang.Object obj66 = mutableInterval64.clone();
        org.joda.time.Interval interval67 = mutableInterval64.toInterval();
        org.joda.time.ReadableInterval readableInterval68 = null;
        boolean boolean69 = mutableInterval64.isBefore(readableInterval68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology72);
        boolean boolean74 = mutableInterval64.isAfter((org.joda.time.ReadableInterval) mutableInterval73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        org.joda.time.DateTime dateTime80 = mutableInterval78.getStart();
        boolean boolean81 = mutableInterval64.isBefore((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean82 = mutableInterval57.contains((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean83 = mutableInterval46.isBefore((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) dateTime80);
        mutableInterval29.setDurationAfterStart((org.joda.time.ReadableDuration) duration42);
        boolean boolean87 = mutableInterval29.isBefore(1606267327298L);
        mutableInterval29.setStartMillis(1606267451129L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    @Ignore
  public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:22:59.010Z/2020-11-25T01:22:59.011Z");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(obj7, chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        mutableInterval9.setPeriodAfterStart(readablePeriod10);
        org.joda.time.Period period12 = mutableInterval9.toPeriod();
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval9.copy();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.DateTime dateTime19 = mutableInterval17.getStart();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readableInstant20, readablePeriod21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        mutableInterval22.setInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime34);
        boolean boolean37 = mutableInterval13.isBefore((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime38 = mutableInterval13.getEnd();
        mutableInterval1.setStart((org.joda.time.ReadableInstant) dateTime38);
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:25:12.247Z/2020-11-25T01:25:12.248Z");
        org.junit.Assert.assertNotNull(mutableInterval1);
    }

    @Test
    @Ignore
  public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        org.joda.time.Interval interval23 = mutableInterval20.toInterval();
        org.joda.time.ReadableInterval readableInterval24 = null;
        boolean boolean25 = mutableInterval20.isBefore(readableInterval24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology28);
        boolean boolean30 = mutableInterval20.isAfter((org.joda.time.ReadableInterval) mutableInterval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        boolean boolean37 = mutableInterval20.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Period period39 = mutableInterval38.toPeriod();
        org.joda.time.Duration duration40 = mutableInterval38.toDuration();
        org.joda.time.Duration duration41 = mutableInterval38.toDuration();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readableInstant42, readablePeriod43);
        mutableInterval44.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval47 = mutableInterval44.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval47);
        mutableInterval48.setDurationBeforeEnd(1606267376890L);
        org.joda.time.DateTime dateTime51 = mutableInterval48.getStart();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime51);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267338812L, 1606267382785L);
    }

    @Test
    @Ignore
  public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        mutableInterval7.setDurationBeforeEnd((long) 100);
        mutableInterval7.setStartMillis(1L);
        org.joda.time.MutableInterval mutableInterval14 = mutableInterval7.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval14.copy();
        org.joda.time.Chronology chronology16 = mutableInterval14.getChronology();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    @Ignore
  public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        long long6 = mutableInterval3.getStartMillis();
        mutableInterval3.setDurationBeforeEnd(1606267284862L);
        java.lang.String str9 = mutableInterval3.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodBeforeEnd(readablePeriod18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        mutableInterval23.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        long long32 = interval31.getEndMillis();
        boolean boolean34 = interval31.isAfter((long) (byte) 100);
        boolean boolean35 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Duration duration36 = mutableInterval23.toDuration();
        boolean boolean37 = mutableInterval17.isBefore((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.MutableInterval mutableInterval38 = mutableInterval23.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readableInstant40, readablePeriod41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        mutableInterval42.setInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readablePeriod39, (org.joda.time.ReadableInstant) dateTime48);
        mutableInterval23.setEnd((org.joda.time.ReadableInstant) dateTime48);
        mutableInterval3.setStart((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        java.lang.Object obj64 = mutableInterval62.clone();
        mutableInterval62.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology67 = mutableInterval62.getChronology();
        org.joda.time.MutableInterval mutableInterval68 = mutableInterval62.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval69 = mutableInterval62.copy();
        org.joda.time.Duration duration70 = mutableInterval62.toDuration();
        org.joda.time.DateTime dateTime71 = mutableInterval62.getStart();
        boolean boolean72 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval62);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1919-02-06T22:38:35.139Z/1970-01-01T00:00:00.001Z" + "'", str9, "1919-02-06T22:38:35.139Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(mutableInterval68);
        org.junit.Assert.assertNotNull(mutableInterval69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    @Ignore
  public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.MutableInterval mutableInterval3 = mutableInterval2.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        java.lang.Object obj10 = mutableInterval8.clone();
        org.joda.time.Interval interval11 = mutableInterval8.toInterval();
        org.joda.time.ReadableInterval readableInterval12 = null;
        boolean boolean13 = mutableInterval8.isBefore(readableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology16);
        boolean boolean18 = mutableInterval8.isAfter((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        mutableInterval27.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        long long36 = interval35.getEndMillis();
        boolean boolean38 = interval35.isAfter((long) (byte) 100);
        boolean boolean39 = mutableInterval27.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration40 = mutableInterval27.toDuration();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(readableInstant47, readablePeriod48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        mutableInterval49.setInterval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration40, (org.joda.time.ReadableInstant) dateTime61);
        mutableInterval22.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration40);
        mutableInterval8.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration40);
        mutableInterval2.setDurationAfterStart((org.joda.time.ReadableDuration) duration40);
        long long68 = mutableInterval2.toDurationMillis();
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
    }

    @Test
    @Ignore
  public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        mutableInterval44.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        java.lang.Object obj61 = mutableInterval59.clone();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(obj61, chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        mutableInterval63.setPeriodAfterStart(readablePeriod64);
        org.joda.time.Period period66 = mutableInterval63.toPeriod();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadablePeriod) period66);
        boolean boolean68 = mutableInterval44.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        java.lang.Object obj75 = mutableInterval73.clone();
        java.lang.Object obj76 = mutableInterval73.clone();
        org.joda.time.MutableInterval mutableInterval77 = mutableInterval73.copy();
        org.joda.time.Duration duration78 = mutableInterval73.toDuration();
        org.joda.time.Period period79 = mutableInterval73.toPeriod();
        org.joda.time.MutableInterval mutableInterval80 = mutableInterval73.toMutableInterval();
        boolean boolean81 = mutableInterval69.overlaps((org.joda.time.ReadableInterval) mutableInterval80);
        long long82 = mutableInterval69.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval77);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(mutableInterval80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1L) + "'", long82 == (-1L));
    }

    @Test
    @Ignore
  public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        org.joda.time.ReadableInterval readableInterval9 = null;
        boolean boolean10 = mutableInterval5.isBefore(readableInterval9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        boolean boolean26 = mutableInterval21.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        mutableInterval14.setChronology(chronology27);
        mutableInterval5.setChronology(chronology27);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(1L, 1606267294649L, chronology27);
        org.joda.time.MutableInterval mutableInterval32 = org.joda.time.MutableInterval.parse("2020-11-25T01:22:16.732Z/2020-11-25T01:22:16.733Z");
        boolean boolean33 = mutableInterval32.isBeforeNow();
        boolean boolean34 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) mutableInterval32);
        boolean boolean36 = mutableInterval30.contains(1606267415737L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    @Ignore
  public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableInterval25.setPeriodAfterStart(readablePeriod26);
        org.joda.time.Period period28 = mutableInterval25.toPeriod();
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval25.copy();
        boolean boolean30 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Interval interval31 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        java.lang.Object obj37 = mutableInterval35.clone();
        org.joda.time.Interval interval38 = mutableInterval35.toInterval();
        mutableInterval35.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        java.lang.Object obj46 = mutableInterval44.clone();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(obj46, chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        mutableInterval48.setPeriodBeforeEnd(readablePeriod49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        mutableInterval54.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        long long63 = interval62.getEndMillis();
        boolean boolean65 = interval62.isAfter((long) (byte) 100);
        boolean boolean66 = mutableInterval54.overlaps((org.joda.time.ReadableInterval) interval62);
        org.joda.time.Duration duration67 = mutableInterval54.toDuration();
        boolean boolean68 = mutableInterval48.isBefore((org.joda.time.ReadableInterval) mutableInterval54);
        org.joda.time.MutableInterval mutableInterval69 = mutableInterval54.toMutableInterval();
        boolean boolean70 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval69);
        boolean boolean71 = mutableInterval3.isBefore((org.joda.time.ReadableInterval) mutableInterval69);
        org.joda.time.MutableInterval mutableInterval73 = org.joda.time.MutableInterval.parse("2020-11-25T01:21:41.245Z/2020-11-25T01:21:41.246Z");
        boolean boolean74 = mutableInterval69.overlaps((org.joda.time.ReadableInterval) mutableInterval73);
        java.lang.String str75 = mutableInterval73.toString();
        org.joda.time.Interval interval76 = mutableInterval73.toInterval();
        org.joda.time.Interval interval77 = mutableInterval73.toInterval();
        boolean boolean79 = mutableInterval73.contains(1606267449462L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(mutableInterval69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(mutableInterval73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2020-11-25T01:21:41.245Z/2020-11-25T01:21:41.246Z" + "'", str75, "2020-11-25T01:21:41.245Z/2020-11-25T01:21:41.246Z");
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    @Ignore
  public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        long long5 = interval4.getEndMillis();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.DateTime dateTime11 = mutableInterval9.getStart();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        java.lang.Object obj17 = mutableInterval15.clone();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(obj17, chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        mutableInterval19.setPeriodAfterStart(readablePeriod20);
        org.joda.time.Period period22 = mutableInterval19.toPeriod();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadablePeriod) period22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        java.lang.Object obj29 = mutableInterval27.clone();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(obj29, chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        mutableInterval31.setPeriodBeforeEnd(readablePeriod32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        mutableInterval37.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        long long46 = interval45.getEndMillis();
        boolean boolean48 = interval45.isAfter((long) (byte) 100);
        boolean boolean49 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) interval45);
        org.joda.time.Duration duration50 = mutableInterval37.toDuration();
        boolean boolean51 = mutableInterval31.isBefore((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.MutableInterval mutableInterval52 = mutableInterval37.toMutableInterval();
        java.lang.String str53 = mutableInterval52.toString();
        boolean boolean54 = mutableInterval52.containsNow();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(readableInstant61, readablePeriod62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        org.joda.time.DateTime dateTime69 = mutableInterval67.getStart();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        mutableInterval63.setInterval((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime78 = mutableInterval77.getStart();
        boolean boolean79 = mutableInterval52.contains((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period22, (org.joda.time.ReadableInstant) dateTime78);
        boolean boolean81 = interval4.contains((org.joda.time.ReadableInstant) dateTime78);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(mutableInterval52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str53, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }
}

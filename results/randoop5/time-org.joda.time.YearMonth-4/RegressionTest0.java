import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.fromCalendarFields(calendar0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The calendar must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = yearMonth5.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.parse("", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = yearMonth8.get(dateTimeFieldType9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        org.joda.time.Chronology chronology0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.now(chronology0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Chronology must not be null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.now(dateTimeZone0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Zone must not be null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"hi!\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth13 = yearMonth3.withFieldAdded(durationFieldType11, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth6 = property4.setCopy((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth.Property property13 = yearMonth12.monthOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        org.joda.time.YearMonth yearMonth22 = yearMonth17.plusMonths((int) (byte) 10);
        int int23 = property13.compareTo((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.Chronology chronology24 = yearMonth17.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((java.lang.Object) (byte) 10, chronology24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Byte");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.parse("Oct", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = yearMonth9.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology15 = yearMonth8.getChronology();
        java.util.Locale locale17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = yearMonth8.toString("", locale17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.getMaximumValue();
        java.lang.String str17 = property15.getAsShortText();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property15.getAsShortText(locale18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property15.getFieldType();
        org.joda.time.YearMonth.Property property21 = yearMonth3.property(dateTimeFieldType20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = yearMonth3.toString("October");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: O");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Oct" + "'", str17, "Oct");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Oct" + "'", str19, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonth yearMonth33 = yearMonth30.withPeriodAdded(readablePeriod31, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = yearMonth33.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth33);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        org.joda.time.YearMonth yearMonth55 = yearMonth50.plusMonths((int) (byte) 10);
        int int56 = property46.compareTo((org.joda.time.ReadablePartial) yearMonth50);
        boolean boolean57 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth50);
        // The following exception was thrown during execution in test generation
        try {
            int int59 = yearMonth50.getValue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.YearMonth yearMonth8 = property4.addToCopy((int) (short) 0);
        org.joda.time.DurationFieldType durationFieldType9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth11 = yearMonth8.withFieldAdded(durationFieldType9, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(yearMonth8);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        java.util.Locale locale7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth8 = property4.setCopy("hi!", locale7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"hi!\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.fromDateFields(date0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType23 = yearMonth8.getFieldType((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.parse("0097-10", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.DurationFieldType durationFieldType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth15 = yearMonth12.withFieldAdded(durationFieldType13, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        int int0 = org.joda.time.YearMonth.YEAR;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 0 + "'", int0 == 0);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        int int11 = yearMonth3.getYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth yearMonth17 = yearMonth15.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        int int24 = yearMonth21.size();
        boolean boolean25 = yearMonth17.isAfter((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth.Property property30 = yearMonth29.monthOfYear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        int int37 = yearMonth34.size();
        org.joda.time.YearMonth yearMonth39 = yearMonth34.plusMonths((int) (byte) 10);
        int int40 = property30.compareTo((org.joda.time.ReadablePartial) yearMonth34);
        org.joda.time.Chronology chronology41 = yearMonth34.getChronology();
        org.joda.time.YearMonth yearMonth42 = yearMonth21.withChronologyRetainFields(chronology41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        int int49 = yearMonth46.size();
        org.joda.time.YearMonth yearMonth51 = yearMonth46.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        int int53 = yearMonth46.indexOf(dateTimeFieldType52);
        org.joda.time.Interval interval54 = yearMonth46.toInterval();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth.Property property59 = yearMonth58.monthOfYear();
        int int60 = property59.getMaximumValue();
        java.lang.String str61 = property59.getAsShortText();
        java.util.Locale locale62 = null;
        java.lang.String str63 = property59.getAsShortText(locale62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = property59.getFieldType();
        int int65 = yearMonth46.get(dateTimeFieldType64);
        boolean boolean66 = yearMonth42.isSupported(dateTimeFieldType64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth68 = yearMonth3.withField(dateTimeFieldType64, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 12 + "'", int60 == 12);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Oct" + "'", str61, "Oct");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Oct" + "'", str63, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumTextLength(locale6);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((-1), (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        java.lang.Class<?> wildcardClass22 = yearMonth18.getClass();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth.Property property12 = yearMonth11.monthOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        int int22 = property12.compareTo((org.joda.time.ReadablePartial) yearMonth16);
        org.joda.time.Chronology chronology23 = yearMonth16.getChronology();
        org.joda.time.YearMonth yearMonth24 = org.joda.time.YearMonth.now(chronology23);
        org.joda.time.YearMonth yearMonth25 = yearMonth7.withChronologyRetainFields(chronology23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth(1, (int) '#', chronology23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(yearMonth25);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.plusMonths(1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        org.joda.time.YearMonth yearMonth29 = yearMonth24.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = yearMonth24.indexOf(dateTimeFieldType30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth.Property property36 = yearMonth35.monthOfYear();
        int int37 = property36.getMaximumValue();
        java.lang.String str38 = property36.getAsShortText();
        java.util.Locale locale39 = null;
        java.lang.String str40 = property36.getAsShortText(locale39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property36.getFieldType();
        org.joda.time.YearMonth.Property property42 = yearMonth24.property(dateTimeFieldType41);
        int int43 = yearMonth20.get(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 12 + "'", int37 == 12);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Oct" + "'", str38, "Oct");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Oct" + "'", str40, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 11 + "'", int43 == 11);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        java.util.Locale locale17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth18 = property15.setCopy("Property[monthOfYear]", locale17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[monthOfYear]\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth27 = yearMonth3.withMonthOfYear((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology15 = yearMonth8.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = yearMonth8.toString("Oct");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: O");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth8 = property4.setCopy(97);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        java.lang.String str9 = property4.getAsShortText(locale8);
        java.util.Locale locale10 = null;
        int int11 = property4.getMaximumTextLength(locale10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth13 = property4.setCopy("monthOfYear");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"monthOfYear\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Oct" + "'", str9, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        int int37 = yearMonth34.size();
        org.joda.time.YearMonth yearMonth39 = yearMonth34.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        int int41 = yearMonth34.indexOf(dateTimeFieldType40);
        org.joda.time.YearMonth yearMonth43 = yearMonth34.plusMonths((-1));
        boolean boolean44 = yearMonth9.isEqual((org.joda.time.ReadablePartial) yearMonth43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Interval interval46 = yearMonth9.toInterval(dateTimeZone45);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = yearMonth9.getValue(12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval46);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        int int0 = org.joda.time.YearMonth.MONTH_OF_YEAR;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonth yearMonth33 = yearMonth30.withPeriodAdded(readablePeriod31, (int) 'a');
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths(9);
        org.joda.time.DurationFieldType durationFieldType36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth38 = yearMonth35.withFieldAdded(durationFieldType36, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth35);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth13 = property4.setCopy("Property[monthOfYear]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[monthOfYear]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = yearMonth8.indexOf(dateTimeFieldType14);
        org.joda.time.YearMonth yearMonth17 = yearMonth8.plusMonths((-1));
        int int18 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.DateTimeField dateTimeField19 = property4.getField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType12 = yearMonth3.getFieldType(3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = yearMonth2.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth(0, (int) (byte) 100, chronology3);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonth yearMonth16 = yearMonth14.plus(readablePeriod15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        org.joda.time.YearMonth yearMonth25 = yearMonth20.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        int int27 = yearMonth20.indexOf(dateTimeFieldType26);
        org.joda.time.Interval interval28 = yearMonth20.toInterval();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth.Property property33 = yearMonth32.monthOfYear();
        int int34 = property33.getMaximumValue();
        java.lang.String str35 = property33.getAsShortText();
        java.util.Locale locale36 = null;
        java.lang.String str37 = property33.getAsShortText(locale36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property33.getFieldType();
        int int39 = yearMonth20.get(dateTimeFieldType38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth41 = yearMonth16.withField(dateTimeFieldType38, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 12 + "'", int34 == 12);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Oct" + "'", str37, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.lang.Class<?> wildcardClass7 = property4.getClass();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        java.lang.String str9 = property4.getAsShortText(locale8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth11 = property4.setCopy("hi!");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"hi!\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Oct" + "'", str9, "Oct");
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = yearMonth18.toString(dateTimeFormatter22);
        int int24 = yearMonth18.getMonthOfYear();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0097-10" + "'", str23, "0097-10");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((long) (short) 1, chronology34);
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth(chronology34);
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) (byte) -1, (int) 'a', chronology34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology15 = yearMonth8.getChronology();
        org.joda.time.YearMonth yearMonth16 = org.joda.time.YearMonth.now(chronology15);
        java.lang.Class<?> wildcardClass17 = chronology15.getClass();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        boolean boolean34 = yearMonth26.isAfter((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth.Property property39 = yearMonth38.monthOfYear();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth yearMonth45 = yearMonth43.minusYears((int) (short) 0);
        int int46 = yearMonth43.size();
        org.joda.time.YearMonth yearMonth48 = yearMonth43.plusMonths((int) (byte) 10);
        int int49 = property39.compareTo((org.joda.time.ReadablePartial) yearMonth43);
        org.joda.time.Chronology chronology50 = yearMonth43.getChronology();
        org.joda.time.YearMonth yearMonth51 = yearMonth30.withChronologyRetainFields(chronology50);
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((long) (short) 1, chronology50);
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth(chronology50);
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((java.lang.Object) chronology15, chronology50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(yearMonth51);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(dateTimeZone0);
        // The following exception was thrown during execution in test generation
        try {
            int int3 = yearMonth1.getValue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        int int11 = yearMonth3.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField13 = yearMonth3.getField((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.toString();
        org.joda.time.ReadablePartial readablePartial12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int13 = property4.compareTo(readablePartial12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        int int15 = yearMonth8.indexOf(dateTimeFieldType14);
        org.joda.time.YearMonth yearMonth17 = yearMonth8.plusMonths((-1));
        int int18 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth20 = property4.setCopy("Property[monthOfYear]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[monthOfYear]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        boolean boolean36 = yearMonth28.isAfter((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        int int51 = property41.compareTo((org.joda.time.ReadablePartial) yearMonth45);
        org.joda.time.Chronology chronology52 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth53 = yearMonth32.withChronologyRetainFields(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonth yearMonth56 = yearMonth53.withPeriodAdded(readablePeriod54, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = yearMonth56.indexOf(dateTimeFieldType57);
        boolean boolean59 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology67);
        org.joda.time.YearMonth yearMonth70 = yearMonth68.minusYears((int) (short) 0);
        int int71 = yearMonth68.size();
        org.joda.time.YearMonth yearMonth73 = yearMonth68.plusMonths((int) (byte) 10);
        int int74 = property64.compareTo((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean75 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean76 = yearMonth17.isAfter((org.joda.time.ReadablePartial) yearMonth21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth78 = yearMonth17.withMonthOfYear(97);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = yearMonth8.toString(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0097-10" + "'", str26, "0097-10");
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.YearMonth yearMonth19 = property4.setCopy("October");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((java.lang.Object) property4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.YearMonth$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth19);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.YearMonth.Property property22 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        boolean boolean36 = yearMonth28.isAfter((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        int int51 = property41.compareTo((org.joda.time.ReadablePartial) yearMonth45);
        org.joda.time.Chronology chronology52 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth53 = yearMonth32.withChronologyRetainFields(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonth yearMonth56 = yearMonth53.withPeriodAdded(readablePeriod54, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = yearMonth56.indexOf(dateTimeFieldType57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology61);
        org.joda.time.YearMonth.Property property63 = yearMonth62.monthOfYear();
        int int64 = property63.getMaximumValue();
        java.lang.String str65 = property63.getAsShortText();
        java.util.Locale locale66 = null;
        java.lang.String str67 = property63.getAsShortText(locale66);
        org.joda.time.YearMonth yearMonth69 = property63.setCopy("October");
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = yearMonth69.toDateTime(readableInstant70);
        org.joda.time.DateTime dateTime72 = yearMonth56.toDateTime(readableInstant70);
        // The following exception was thrown during execution in test generation
        try {
            int int73 = property22.compareTo(readableInstant70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 12 + "'", int64 == 12);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Oct" + "'", str65, "Oct");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Oct" + "'", str67, "Oct");
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth9.withYear((int) (byte) 1);
        int int33 = yearMonth32.getMonthOfYear();
        java.lang.Class<?> wildcardClass34 = yearMonth32.getClass();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(12, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        java.lang.Class<?> wildcardClass15 = interval14.getClass();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth.Property property20 = yearMonth19.monthOfYear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        org.joda.time.YearMonth yearMonth29 = yearMonth24.plusMonths((int) (byte) 10);
        int int30 = property20.compareTo((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.Chronology chronology31 = yearMonth24.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((java.lang.Object) wildcardClass15, chronology31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Class");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        boolean boolean14 = yearMonth12.equals((java.lang.Object) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField16 = yearMonth12.getField(11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 11");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        int int37 = yearMonth34.size();
        org.joda.time.YearMonth yearMonth39 = yearMonth34.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        int int41 = yearMonth34.indexOf(dateTimeFieldType40);
        org.joda.time.Interval interval42 = yearMonth34.toInterval();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        int int48 = property47.getMaximumValue();
        java.lang.String str49 = property47.getAsShortText();
        java.util.Locale locale50 = null;
        java.lang.String str51 = property47.getAsShortText(locale50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property47.getFieldType();
        int int53 = yearMonth34.get(dateTimeFieldType52);
        boolean boolean54 = yearMonth30.isSupported(dateTimeFieldType52);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = yearMonth30.getValue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 12 + "'", int48 == 12);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Oct" + "'", str49, "Oct");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Oct" + "'", str51, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        int int8 = property4.getMaximumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth10 = property4.setCopy((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.Interval interval26 = yearMonth18.toInterval();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        int int37 = yearMonth18.get(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth5.property(dateTimeFieldType36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth.Property property43 = yearMonth42.monthOfYear();
        int int44 = property43.getMaximumValue();
        java.lang.String str45 = property43.getAsShortText();
        java.util.Locale locale46 = null;
        java.lang.String str47 = property43.getAsShortText(locale46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property43.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth50 = yearMonth5.withField(dateTimeFieldType48, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 12 + "'", int44 == 12);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Oct" + "'", str45, "Oct");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Oct" + "'", str47, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.Interval interval9 = yearMonth3.toInterval();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(interval9);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.lang.String str8 = property4.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.parse("monthOfYear", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        int int29 = yearMonth26.size();
        boolean boolean30 = yearMonth22.isAfter((org.joda.time.ReadablePartial) yearMonth26);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth.Property property35 = yearMonth34.monthOfYear();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth yearMonth41 = yearMonth39.minusYears((int) (short) 0);
        int int42 = yearMonth39.size();
        org.joda.time.YearMonth yearMonth44 = yearMonth39.plusMonths((int) (byte) 10);
        int int45 = property35.compareTo((org.joda.time.ReadablePartial) yearMonth39);
        org.joda.time.Chronology chronology46 = yearMonth39.getChronology();
        org.joda.time.YearMonth yearMonth47 = yearMonth26.withChronologyRetainFields(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.YearMonth yearMonth50 = yearMonth47.withPeriodAdded(readablePeriod48, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        int int52 = yearMonth50.indexOf(dateTimeFieldType51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth.Property property57 = yearMonth56.monthOfYear();
        int int58 = property57.getMaximumValue();
        java.lang.String str59 = property57.getAsShortText();
        java.util.Locale locale60 = null;
        java.lang.String str61 = property57.getAsShortText(locale60);
        org.joda.time.YearMonth yearMonth63 = property57.setCopy("October");
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = yearMonth63.toDateTime(readableInstant64);
        org.joda.time.DateTime dateTime66 = yearMonth50.toDateTime(readableInstant64);
        int int67 = property4.compareTo((org.joda.time.ReadableInstant) dateTime66);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth69 = property4.setCopy(100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 12 + "'", int58 == 12);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Oct" + "'", str59, "Oct");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Oct" + "'", str61, "Oct");
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("Property[monthOfYear]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Property[monthOfYear]\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.getMaximumValue();
        java.lang.String str17 = property15.getAsShortText();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property15.getAsShortText(locale18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property15.getFieldType();
        org.joda.time.YearMonth.Property property21 = yearMonth3.property(dateTimeFieldType20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth23 = property21.setCopy("2020-11");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2020-11\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Oct" + "'", str17, "Oct");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Oct" + "'", str19, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        int int37 = yearMonth34.size();
        org.joda.time.YearMonth yearMonth39 = yearMonth34.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        int int41 = yearMonth34.indexOf(dateTimeFieldType40);
        org.joda.time.YearMonth yearMonth43 = yearMonth34.plusMonths((-1));
        boolean boolean44 = yearMonth9.isEqual((org.joda.time.ReadablePartial) yearMonth43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Interval interval46 = yearMonth9.toInterval(dateTimeZone45);
        java.lang.String str47 = yearMonth9.toString();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology50);
        org.joda.time.YearMonth yearMonth53 = yearMonth51.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.YearMonth yearMonth57 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology56);
        org.joda.time.YearMonth yearMonth59 = yearMonth57.minusYears((int) (short) 0);
        int int60 = yearMonth57.size();
        boolean boolean61 = yearMonth53.isAfter((org.joda.time.ReadablePartial) yearMonth57);
        org.joda.time.Interval interval62 = yearMonth53.toInterval();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth yearMonth68 = yearMonth66.minusYears((int) (short) 0);
        int int69 = yearMonth66.size();
        org.joda.time.YearMonth yearMonth71 = yearMonth66.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        int int73 = yearMonth66.indexOf(dateTimeFieldType72);
        org.joda.time.Interval interval74 = yearMonth66.toInterval();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.YearMonth yearMonth78 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology77);
        org.joda.time.YearMonth.Property property79 = yearMonth78.monthOfYear();
        int int80 = property79.getMaximumValue();
        java.lang.String str81 = property79.getAsShortText();
        java.util.Locale locale82 = null;
        java.lang.String str83 = property79.getAsShortText(locale82);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = property79.getFieldType();
        int int85 = yearMonth66.get(dateTimeFieldType84);
        org.joda.time.YearMonth.Property property86 = yearMonth53.property(dateTimeFieldType84);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth88 = yearMonth9.withField(dateTimeFieldType84, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0097-10" + "'", str47, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 12 + "'", int80 == 12);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Oct" + "'", str81, "Oct");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Oct" + "'", str83, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertNotNull(property86);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.DurationFieldType durationFieldType33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth35 = yearMonth32.withFieldAdded(durationFieldType33, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        java.lang.String str21 = yearMonth18.toString();
        java.lang.String str22 = yearMonth18.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = yearMonth18.toInterval(dateTimeZone23);
        boolean boolean25 = yearMonth8.equals((java.lang.Object) dateTimeZone23);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0097-10" + "'", str21, "0097-10");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0097-10" + "'", str22, "0097-10");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = yearMonth9.toLocalDate((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        boolean boolean24 = yearMonth16.isAfter((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        int int39 = property29.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = yearMonth33.getChronology();
        org.joda.time.YearMonth yearMonth41 = yearMonth20.withChronologyRetainFields(chronology40);
        int int42 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        int int48 = property47.getMaximumValue();
        java.util.Locale locale49 = null;
        int int50 = property47.getMaximumShortTextLength(locale49);
        java.util.Locale locale51 = null;
        int int52 = property47.getMaximumTextLength(locale51);
        org.joda.time.DurationField durationField53 = property47.getRangeDurationField();
        java.util.Locale locale54 = null;
        java.lang.String str55 = property47.getAsShortText(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property47.getFieldType();
        org.joda.time.YearMonth yearMonth58 = yearMonth3.withField(dateTimeFieldType56, 11);
        java.util.Locale locale60 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = yearMonth3.toString("monthOfYear", locale60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: o");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 12 + "'", int48 == 12);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Oct" + "'", str55, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(yearMonth58);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.YearMonth.Property property22 = yearMonth18.monthOfYear();
        java.util.Locale locale23 = null;
        java.lang.String str24 = property22.getAsShortText(locale23);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Oct" + "'", str24, "Oct");
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.parse("0097-09", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonth yearMonth9 = yearMonth3.withPeriodAdded(readablePeriod7, (int) (byte) 0);
        int int10 = yearMonth9.getMonthOfYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = yearMonth8.getFieldTypes();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.YearMonth yearMonth4 = yearMonth2.withYear((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonth yearMonth7 = yearMonth2.withPeriodAdded(readablePeriod5, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = yearMonth7.toLocalDate((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth4);
        org.junit.Assert.assertNotNull(yearMonth7);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonth8.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonth8.toInterval(dateTimeZone26);
        int[] intArray28 = yearMonth8.getValues();
        java.lang.Class<?> wildcardClass29 = intArray28.getClass();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[97, 10]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth9 = property4.setCopy("2020-11");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2020-11\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.YearMonth yearMonth3 = yearMonth1.plusMonths((int) (short) 10);
        java.lang.Class<?> wildcardClass4 = yearMonth1.getClass();
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth.Property property8 = yearMonth7.monthOfYear();
        int int9 = property8.getMaximumValue();
        java.util.Locale locale10 = null;
        int int11 = property8.getMaximumShortTextLength(locale10);
        java.util.Locale locale12 = null;
        int int13 = property8.getMaximumTextLength(locale12);
        org.joda.time.DurationField durationField14 = property8.getRangeDurationField();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property8.getAsShortText(locale15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property8.getFieldType();
        boolean boolean18 = yearMonth3.isSupported(dateTimeFieldType17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((java.lang.Object) dateTimeFieldType17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Oct" + "'", str16, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        org.joda.time.YearMonth yearMonth41 = yearMonth36.plusMonths((int) (byte) 10);
        int int42 = property32.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        boolean boolean49 = yearMonth36.isAfter((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = yearMonth36.indexOf(dateTimeFieldType50);
        int int52 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField54 = yearMonth3.getField(11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 11");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.plusMonths(1);
        org.joda.time.YearMonth yearMonth22 = yearMonth18.plusYears(0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(yearMonth22);
    }

    @Test
    @Ignore
  public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.Chronology chronology8 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth9 = yearMonth0.withChronologyRetainFields(chronology8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        int int15 = property14.getMaximumValue();
        java.util.Locale locale16 = null;
        int int17 = property14.getMaximumShortTextLength(locale16);
        java.util.Locale locale18 = null;
        int int19 = property14.getMaximumTextLength(locale18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth.Property property24 = yearMonth23.monthOfYear();
        int int25 = property24.getMaximumValue();
        java.util.Locale locale26 = null;
        int int27 = property24.getMaximumShortTextLength(locale26);
        java.util.Locale locale28 = null;
        int int29 = property24.getMaximumTextLength(locale28);
        java.lang.String str30 = property24.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property24.getFieldType();
        boolean boolean32 = property14.equals((java.lang.Object) property24);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property24.getFieldType();
        int int34 = yearMonth9.get(dateTimeFieldType33);
        java.lang.Class<?> wildcardClass35 = yearMonth9.getClass();
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 12 + "'", int25 == 12);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Oct" + "'", str30, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        java.lang.String str9 = property4.getAsShortText(locale8);
        java.util.Locale locale11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth12 = property4.setCopy("", locale11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Oct" + "'", str9, "Oct");
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth.Property property28 = yearMonth27.monthOfYear();
        int int29 = property28.getMaximumValue();
        java.lang.String str30 = property28.getAsShortText();
        org.joda.time.YearMonth yearMonth32 = property28.addWrapFieldToCopy((int) (short) -1);
        int[] intArray33 = yearMonth32.getValues();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth.Property property38 = yearMonth37.monthOfYear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        int int48 = property38.compareTo((org.joda.time.ReadablePartial) yearMonth42);
        org.joda.time.Chronology chronology49 = yearMonth42.getChronology();
        org.joda.time.YearMonth yearMonth50 = org.joda.time.YearMonth.now(chronology49);
        org.joda.time.YearMonth yearMonth51 = yearMonth32.withChronologyRetainFields(chronology49);
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth(chronology49);
        boolean boolean53 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth52);
        org.joda.time.DateTimeField[] dateTimeFieldArray54 = yearMonth3.getFields();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 12 + "'", int29 == 12);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Oct" + "'", str30, "Oct");
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 9]");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray54);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        int int18 = yearMonth8.getValue(0);
        java.lang.String str19 = yearMonth8.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0097-10" + "'", str19, "0097-10");
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = yearMonth8.toString(dateTimeFormatter15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        int int22 = property21.getMinimumValue();
        java.util.Locale locale23 = null;
        int int24 = property21.getMaximumShortTextLength(locale23);
        org.joda.time.DurationField durationField25 = property21.getDurationField();
        boolean boolean26 = yearMonth8.equals((java.lang.Object) property21);
        int int27 = yearMonth8.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField29 = yearMonth8.getField((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0097-10" + "'", str16, "0097-10");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.DurationFieldType durationFieldType1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth3 = yearMonth0.withFieldAdded(durationFieldType1, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth5.getYear();
        java.util.Locale locale8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = yearMonth5.toString("monthOfYear", locale8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: o");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsString();
        java.lang.String str7 = property4.getAsShortText();
        boolean boolean9 = property4.equals((java.lang.Object) "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10" + "'", str6, "10");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Oct" + "'", str7, "Oct");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        boolean boolean24 = yearMonth16.isAfter((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        int int39 = property29.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = yearMonth33.getChronology();
        org.joda.time.YearMonth yearMonth41 = yearMonth20.withChronologyRetainFields(chronology40);
        int int42 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        int int48 = property47.getMaximumValue();
        java.util.Locale locale49 = null;
        int int50 = property47.getMaximumShortTextLength(locale49);
        java.util.Locale locale51 = null;
        int int52 = property47.getMaximumTextLength(locale51);
        org.joda.time.DurationField durationField53 = property47.getRangeDurationField();
        java.util.Locale locale54 = null;
        java.lang.String str55 = property47.getAsShortText(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property47.getFieldType();
        org.joda.time.YearMonth yearMonth58 = yearMonth3.withField(dateTimeFieldType56, 11);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology61);
        org.joda.time.YearMonth yearMonth64 = yearMonth62.minusYears((int) (short) 0);
        int int65 = yearMonth62.size();
        org.joda.time.YearMonth yearMonth67 = yearMonth62.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = null;
        int int69 = yearMonth62.indexOf(dateTimeFieldType68);
        org.joda.time.YearMonth yearMonth71 = yearMonth62.plusMonths((-1));
        org.joda.time.YearMonth yearMonth73 = yearMonth62.plusMonths((-1));
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.YearMonth yearMonth75 = yearMonth73.plus(readablePeriod74);
        org.joda.time.DateTimeField[] dateTimeFieldArray76 = yearMonth75.getFields();
        org.joda.time.YearMonth yearMonth78 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.Interval interval80 = yearMonth78.toInterval(dateTimeZone79);
        int int81 = yearMonth75.compareTo((org.joda.time.ReadablePartial) yearMonth78);
        boolean boolean82 = yearMonth58.equals((java.lang.Object) yearMonth75);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 12 + "'", int48 == 12);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Oct" + "'", str55, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertNotNull(yearMonth75);
        org.junit.Assert.assertNotNull(dateTimeFieldArray76);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        org.joda.time.YearMonth yearMonth41 = yearMonth36.plusMonths((int) (byte) 10);
        int int42 = property32.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        boolean boolean49 = yearMonth36.isAfter((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = yearMonth36.indexOf(dateTimeFieldType50);
        int int52 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology61);
        org.joda.time.YearMonth.Property property63 = yearMonth62.monthOfYear();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.YearMonth yearMonth67 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology66);
        org.joda.time.YearMonth yearMonth69 = yearMonth67.minusYears((int) (short) 0);
        int int70 = yearMonth67.size();
        org.joda.time.YearMonth yearMonth72 = yearMonth67.plusMonths((int) (byte) 10);
        int int73 = property63.compareTo((org.joda.time.ReadablePartial) yearMonth67);
        org.joda.time.Chronology chronology74 = yearMonth67.getChronology();
        org.joda.time.YearMonth yearMonth75 = org.joda.time.YearMonth.now(chronology74);
        org.joda.time.YearMonth yearMonth76 = yearMonth58.withChronologyRetainFields(chronology74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth77 = new org.joda.time.YearMonth((java.lang.Object) int52, chronology74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(yearMonth75);
        org.junit.Assert.assertNotNull(yearMonth76);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((long) (short) 1, chronology32);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(chronology32);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology32);
        org.joda.time.DurationFieldType durationFieldType37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth39 = yearMonth36.withFieldAdded(durationFieldType37, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addToCopy((int) (short) 1);
        int int10 = property4.get();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        org.joda.time.YearMonth yearMonth10 = property4.getYearMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth12 = property4.setCopy("0097-10");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0097-10\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(yearMonth10);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = yearMonth4.getFieldTypes();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        boolean boolean22 = yearMonth14.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth.Property property27 = yearMonth26.monthOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        org.joda.time.YearMonth yearMonth36 = yearMonth31.plusMonths((int) (byte) 10);
        int int37 = property27.compareTo((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology38 = yearMonth31.getChronology();
        org.joda.time.YearMonth yearMonth39 = yearMonth18.withChronologyRetainFields(chronology38);
        org.joda.time.YearMonth yearMonth40 = yearMonth4.withChronologyRetainFields(chronology38);
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((long) '4', chronology38);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth40);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        java.util.Locale locale17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth18 = property15.setCopy("0097-10", locale17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0097-10\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("Oct");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Oct\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        int int47 = property46.getMinimumValue();
        java.util.Locale locale48 = null;
        int int49 = property46.getMaximumShortTextLength(locale48);
        org.joda.time.YearMonth yearMonth51 = property46.addToCopy((int) (short) 1);
        boolean boolean52 = yearMonth3.equals((java.lang.Object) yearMonth51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        int int59 = yearMonth56.size();
        org.joda.time.YearMonth yearMonth61 = yearMonth56.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        int int63 = yearMonth56.indexOf(dateTimeFieldType62);
        int int64 = yearMonth56.getYear();
        boolean boolean65 = yearMonth51.isBefore((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.YearMonth yearMonth67 = yearMonth56.minus(readablePeriod66);
        java.lang.String str69 = yearMonth67.toString("1970-01");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1970-01" + "'", str69, "1970-01");
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("October");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"October\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        int int11 = property4.get();
        java.lang.Class<?> wildcardClass12 = property4.getClass();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        org.joda.time.DurationField durationField16 = property4.getDurationField();
        org.joda.time.DateTimeField dateTimeField17 = property4.getField();
        java.lang.String str18 = property4.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth20 = property4.setCopy("0097-10");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0097-10\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Property[monthOfYear]" + "'", str18, "Property[monthOfYear]");
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy(100);
        int int13 = yearMonth12.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = yearMonth12.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        int int47 = property46.getMinimumValue();
        java.util.Locale locale48 = null;
        int int49 = property46.getMaximumShortTextLength(locale48);
        org.joda.time.YearMonth yearMonth51 = property46.addToCopy((int) (short) 1);
        boolean boolean52 = yearMonth3.equals((java.lang.Object) yearMonth51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        int int59 = yearMonth56.size();
        org.joda.time.YearMonth yearMonth61 = yearMonth56.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        int int63 = yearMonth56.indexOf(dateTimeFieldType62);
        int int64 = yearMonth56.getYear();
        boolean boolean65 = yearMonth51.isBefore((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.YearMonth yearMonth67 = yearMonth56.plusMonths((int) ' ');
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(yearMonth67);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth.Property property6 = yearMonth5.monthOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        org.joda.time.YearMonth yearMonth15 = yearMonth10.plusMonths((int) (byte) 10);
        int int16 = property6.compareTo((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        boolean boolean23 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth10.indexOf(dateTimeFieldType24);
        int int26 = yearMonth10.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = yearMonth10.getFieldTypes();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth yearMonth40 = yearMonth38.minusYears((int) (short) 0);
        int int41 = yearMonth38.size();
        boolean boolean42 = yearMonth34.isAfter((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology50);
        org.joda.time.YearMonth yearMonth53 = yearMonth51.minusYears((int) (short) 0);
        int int54 = yearMonth51.size();
        org.joda.time.YearMonth yearMonth56 = yearMonth51.plusMonths((int) (byte) 10);
        int int57 = property47.compareTo((org.joda.time.ReadablePartial) yearMonth51);
        org.joda.time.Chronology chronology58 = yearMonth51.getChronology();
        org.joda.time.YearMonth yearMonth59 = yearMonth38.withChronologyRetainFields(chronology58);
        org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth((long) (short) 1, chronology58);
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth((java.lang.Object) yearMonth10, chronology58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((int) 'a', (int) (byte) -1, chronology58);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(yearMonth59);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addToCopy((int) (short) 1);
        org.joda.time.ReadablePartial readablePartial10 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = yearMonth9.isEqual(readablePartial10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        int int15 = property4.getMaximumValueOverall();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property4.getAsText(locale16);
        org.joda.time.YearMonth yearMonth18 = property4.getYearMonth();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = yearMonth18.getValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "October" + "'", str17, "October");
        org.junit.Assert.assertNotNull(yearMonth18);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.YearMonth.Property property42 = yearMonth38.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth44 = property42.setCopy("0097-11");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0097-11\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        org.joda.time.YearMonth yearMonth13 = property4.addToCopy(3);
        java.lang.String str14 = property4.getAsString();
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        org.joda.time.Interval interval22 = yearMonth19.toInterval();
        org.joda.time.Chronology chronology23 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth24 = yearMonth15.withChronologyRetainFields(chronology23);
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth(chronology23);
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth(chronology23);
        org.joda.time.YearMonth yearMonth27 = org.joda.time.YearMonth.now(chronology23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((java.lang.Object) property4, chronology23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.YearMonth$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(yearMonth27);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        java.util.Locale locale17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth18 = property15.setCopy("October", locale17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"October\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        java.util.Locale locale8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth9 = property4.setCopy("1970-01", locale8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth7 = property4.setCopy("0097-09");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0097-09\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.lang.String str8 = property4.getAsText();
        java.lang.String str9 = property4.getAsString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "October" + "'", str8, "October");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10" + "'", str9, "10");
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth yearMonth9 = yearMonth7.minusYears((int) (short) 0);
        int int10 = yearMonth7.size();
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        boolean boolean27 = yearMonth19.isAfter((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Interval interval28 = yearMonth19.toInterval();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = yearMonth32.indexOf(dateTimeFieldType38);
        org.joda.time.Interval interval40 = yearMonth32.toInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        int int46 = property45.getMaximumValue();
        java.lang.String str47 = property45.getAsShortText();
        java.util.Locale locale48 = null;
        java.lang.String str49 = property45.getAsShortText(locale48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property45.getFieldType();
        int int51 = yearMonth32.get(dateTimeFieldType50);
        org.joda.time.YearMonth.Property property52 = yearMonth19.property(dateTimeFieldType50);
        boolean boolean53 = yearMonth13.isSupported(dateTimeFieldType50);
        org.joda.time.YearMonth yearMonth55 = yearMonth7.withField(dateTimeFieldType50, (int) (short) 10);
        boolean boolean56 = yearMonth3.isBefore((org.joda.time.ReadablePartial) yearMonth7);
        java.util.Locale locale58 = null;
        java.lang.String str59 = yearMonth7.toString("1970-01", locale58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType61 = yearMonth7.getFieldType((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Oct" + "'", str47, "Oct");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Oct" + "'", str49, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01" + "'", str59, "1970-01");
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        int int16 = yearMonth13.size();
        org.joda.time.YearMonth yearMonth18 = yearMonth13.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonth13.indexOf(dateTimeFieldType19);
        org.joda.time.YearMonth yearMonth22 = yearMonth13.plusMonths((-1));
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        int int29 = yearMonth26.size();
        org.joda.time.YearMonth yearMonth31 = yearMonth26.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = yearMonth26.indexOf(dateTimeFieldType32);
        org.joda.time.Interval interval34 = yearMonth26.toInterval();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth.Property property39 = yearMonth38.monthOfYear();
        int int40 = property39.getMaximumValue();
        java.lang.String str41 = property39.getAsShortText();
        java.util.Locale locale42 = null;
        java.lang.String str43 = property39.getAsShortText(locale42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property39.getFieldType();
        int int45 = yearMonth26.get(dateTimeFieldType44);
        org.joda.time.YearMonth.Property property46 = yearMonth13.property(dateTimeFieldType44);
        org.joda.time.Chronology chronology47 = yearMonth13.getChronology();
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth(chronology47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((java.lang.Object) property4, chronology47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.YearMonth$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 12 + "'", int40 == 12);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Oct" + "'", str41, "Oct");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Oct" + "'", str43, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        org.joda.time.DurationField durationField16 = property4.getDurationField();
        org.joda.time.DateTimeField dateTimeField17 = property4.getField();
        java.lang.String str18 = property4.toString();
        int int19 = property4.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Property[monthOfYear]" + "'", str18, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        java.lang.String str9 = property4.getAsShortText(locale8);
        java.util.Locale locale10 = null;
        int int11 = property4.getMaximumTextLength(locale10);
        java.lang.String str12 = property4.getName();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Oct" + "'", str9, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "monthOfYear" + "'", str12, "monthOfYear");
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField11 = property4.getField();
        int int12 = property4.getMaximumValue();
        org.joda.time.YearMonth yearMonth14 = property4.setCopy((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = yearMonth14.getValue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
        org.junit.Assert.assertNotNull(yearMonth14);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth5.getYear();
        org.joda.time.YearMonth yearMonth8 = yearMonth5.minusYears(0);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = yearMonth5.getFields();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        org.joda.time.YearMonth yearMonth17 = yearMonth5.plusMonths((int) '4');
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        boolean boolean31 = yearMonth23.isAfter((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth.Property property36 = yearMonth35.monthOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        int int43 = yearMonth40.size();
        org.joda.time.YearMonth yearMonth45 = yearMonth40.plusMonths((int) (byte) 10);
        int int46 = property36.compareTo((org.joda.time.ReadablePartial) yearMonth40);
        org.joda.time.Chronology chronology47 = yearMonth40.getChronology();
        org.joda.time.YearMonth yearMonth48 = yearMonth27.withChronologyRetainFields(chronology47);
        org.joda.time.YearMonth yearMonth50 = yearMonth27.withYear((int) (byte) 1);
        int int51 = yearMonth17.compareTo((org.joda.time.ReadablePartial) yearMonth50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate53 = yearMonth50.toLocalDate(100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        java.lang.String str9 = property4.getName();
        java.lang.String str10 = property4.getAsString();
        java.lang.String str11 = property4.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "monthOfYear" + "'", str9, "monthOfYear");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "10" + "'", str10, "10");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str9 = property4.getAsString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10" + "'", str9, "10");
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("monthOfYear");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"monthOfYear\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        boolean boolean36 = yearMonth28.isAfter((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        int int51 = property41.compareTo((org.joda.time.ReadablePartial) yearMonth45);
        org.joda.time.Chronology chronology52 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth53 = yearMonth32.withChronologyRetainFields(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonth yearMonth56 = yearMonth53.withPeriodAdded(readablePeriod54, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = yearMonth56.indexOf(dateTimeFieldType57);
        boolean boolean59 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology67);
        org.joda.time.YearMonth yearMonth70 = yearMonth68.minusYears((int) (short) 0);
        int int71 = yearMonth68.size();
        org.joda.time.YearMonth yearMonth73 = yearMonth68.plusMonths((int) (byte) 10);
        int int74 = property64.compareTo((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean75 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean76 = yearMonth17.isAfter((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.YearMonth yearMonth79 = yearMonth21.withPeriodAdded(readablePeriod77, 12);
        int int80 = yearMonth79.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.Interval interval82 = yearMonth79.toInterval(dateTimeZone81);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(yearMonth79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertNotNull(interval82);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((long) (short) 1, chronology32);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(chronology32);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology32);
        org.joda.time.DurationFieldType durationFieldType37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth39 = yearMonth36.withFieldAdded(durationFieldType37, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth17 = yearMonth5.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth18 = yearMonth14.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.plusMonths((int) (short) 1);
        org.joda.time.YearMonth yearMonth22 = yearMonth18.minusYears((int) 'a');
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(yearMonth22);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        int[] intArray16 = yearMonth5.getValues();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Interval interval18 = yearMonth5.toInterval(dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.YearMonth yearMonth21 = yearMonth5.withPeriodAdded(readablePeriod19, 11);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[97, 10]");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(yearMonth21);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property4.getAsShortText(locale16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth19 = property4.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Oct" + "'", str17, "Oct");
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        int int8 = property4.get();
        java.lang.String str9 = property4.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[monthOfYear]" + "'", str9, "Property[monthOfYear]");
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth9.withYear((int) (byte) 1);
        int int33 = yearMonth32.getMonthOfYear();
        org.joda.time.YearMonth.Property property34 = yearMonth32.year();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = yearMonth32.getFieldTypes();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.parse("Property[monthOfYear]", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonth yearMonth33 = yearMonth30.withPeriodAdded(readablePeriod31, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = yearMonth33.indexOf(dateTimeFieldType34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth.Property property40 = yearMonth39.monthOfYear();
        int int41 = property40.getMaximumValue();
        java.lang.String str42 = property40.getAsShortText();
        java.util.Locale locale43 = null;
        java.lang.String str44 = property40.getAsShortText(locale43);
        org.joda.time.YearMonth yearMonth46 = property40.setCopy("October");
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = yearMonth46.toDateTime(readableInstant47);
        org.joda.time.DateTime dateTime49 = yearMonth33.toDateTime(readableInstant47);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology52);
        org.joda.time.YearMonth.Property property54 = yearMonth53.monthOfYear();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth yearMonth60 = yearMonth58.minusYears((int) (short) 0);
        int int61 = yearMonth58.size();
        org.joda.time.YearMonth yearMonth63 = yearMonth58.plusMonths((int) (byte) 10);
        int int64 = property54.compareTo((org.joda.time.ReadablePartial) yearMonth58);
        org.joda.time.Chronology chronology65 = yearMonth58.getChronology();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.YearMonth yearMonth69 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology68);
        org.joda.time.YearMonth yearMonth71 = yearMonth69.minusYears((int) (short) 0);
        int int72 = yearMonth69.size();
        org.joda.time.YearMonth yearMonth74 = yearMonth69.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = null;
        int int76 = yearMonth69.indexOf(dateTimeFieldType75);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.YearMonth yearMonth80 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology79);
        org.joda.time.YearMonth.Property property81 = yearMonth80.monthOfYear();
        int int82 = property81.getMaximumValue();
        java.lang.String str83 = property81.getAsShortText();
        java.util.Locale locale84 = null;
        java.lang.String str85 = property81.getAsShortText(locale84);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = property81.getFieldType();
        org.joda.time.YearMonth.Property property87 = yearMonth69.property(dateTimeFieldType86);
        org.joda.time.YearMonth.Property property88 = yearMonth58.property(dateTimeFieldType86);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth90 = yearMonth33.withField(dateTimeFieldType86, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 12 + "'", int41 == 12);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Oct" + "'", str42, "Oct");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Oct" + "'", str44, "Oct");
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 12 + "'", int82 == 12);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Oct" + "'", str83, "Oct");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Oct" + "'", str85, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(property88);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        org.joda.time.YearMonth yearMonth41 = yearMonth36.plusMonths((int) (byte) 10);
        int int42 = property32.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        boolean boolean49 = yearMonth36.isAfter((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = yearMonth36.indexOf(dateTimeFieldType50);
        int int52 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = yearMonth36.getValue(9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 9");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth5.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = yearMonth5.toLocalDate((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField11 = property4.getField();
        org.joda.time.DurationField durationField12 = property4.getDurationField();
        int int13 = property4.get();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonth8.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonth8.toInterval(dateTimeZone26);
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = yearMonth8.getFields();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy(100);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth.Property property17 = yearMonth16.monthOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        int int24 = yearMonth21.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth21.plusMonths((int) (byte) 10);
        int int27 = property17.compareTo((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.YearMonth yearMonth28 = property17.getYearMonth();
        java.lang.String str29 = property17.getAsText();
        org.joda.time.YearMonth yearMonth30 = property17.getYearMonth();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth.Property property35 = yearMonth34.monthOfYear();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth yearMonth41 = yearMonth39.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        boolean boolean49 = yearMonth41.isAfter((org.joda.time.ReadablePartial) yearMonth45);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology52);
        org.joda.time.YearMonth.Property property54 = yearMonth53.monthOfYear();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth yearMonth60 = yearMonth58.minusYears((int) (short) 0);
        int int61 = yearMonth58.size();
        org.joda.time.YearMonth yearMonth63 = yearMonth58.plusMonths((int) (byte) 10);
        int int64 = property54.compareTo((org.joda.time.ReadablePartial) yearMonth58);
        org.joda.time.Chronology chronology65 = yearMonth58.getChronology();
        org.joda.time.YearMonth yearMonth66 = yearMonth45.withChronologyRetainFields(chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.YearMonth yearMonth69 = yearMonth66.withPeriodAdded(readablePeriod67, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = null;
        int int71 = yearMonth69.indexOf(dateTimeFieldType70);
        boolean boolean72 = yearMonth34.isEqual((org.joda.time.ReadablePartial) yearMonth69);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.YearMonth yearMonth76 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology75);
        org.joda.time.YearMonth.Property property77 = yearMonth76.monthOfYear();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.YearMonth yearMonth81 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology80);
        org.joda.time.YearMonth yearMonth83 = yearMonth81.minusYears((int) (short) 0);
        int int84 = yearMonth81.size();
        org.joda.time.YearMonth yearMonth86 = yearMonth81.plusMonths((int) (byte) 10);
        int int87 = property77.compareTo((org.joda.time.ReadablePartial) yearMonth81);
        boolean boolean88 = yearMonth34.isEqual((org.joda.time.ReadablePartial) yearMonth81);
        boolean boolean89 = yearMonth30.isAfter((org.joda.time.ReadablePartial) yearMonth34);
        org.joda.time.YearMonth yearMonth91 = yearMonth30.plusMonths(2);
        org.joda.time.YearMonth yearMonth93 = yearMonth30.minusYears(3);
        org.joda.time.ReadablePeriod readablePeriod94 = null;
        org.joda.time.YearMonth yearMonth95 = yearMonth30.minus(readablePeriod94);
        int int96 = yearMonth12.compareTo((org.joda.time.ReadablePartial) yearMonth95);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "October" + "'", str29, "October");
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(yearMonth83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(yearMonth86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(yearMonth91);
        org.junit.Assert.assertNotNull(yearMonth93);
        org.junit.Assert.assertNotNull(yearMonth95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonth yearMonth33 = yearMonth30.withPeriodAdded(readablePeriod31, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = yearMonth33.indexOf(dateTimeFieldType34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth.Property property40 = yearMonth39.monthOfYear();
        int int41 = property40.getMaximumValue();
        java.lang.String str42 = property40.getAsShortText();
        java.util.Locale locale43 = null;
        java.lang.String str44 = property40.getAsShortText(locale43);
        org.joda.time.YearMonth yearMonth46 = property40.setCopy("October");
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = yearMonth46.toDateTime(readableInstant47);
        org.joda.time.DateTime dateTime49 = yearMonth33.toDateTime(readableInstant47);
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth((long) 100);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.Interval interval53 = yearMonth51.toInterval(dateTimeZone52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.YearMonth yearMonth57 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology56);
        org.joda.time.YearMonth.Property property58 = yearMonth57.monthOfYear();
        int int59 = property58.getMaximumValue();
        java.util.Locale locale60 = null;
        int int61 = property58.getMaximumShortTextLength(locale60);
        java.util.Locale locale62 = null;
        int int63 = property58.getMaximumTextLength(locale62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.YearMonth yearMonth67 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology66);
        org.joda.time.YearMonth.Property property68 = yearMonth67.monthOfYear();
        int int69 = property68.getMaximumValue();
        java.util.Locale locale70 = null;
        int int71 = property68.getMaximumShortTextLength(locale70);
        java.util.Locale locale72 = null;
        int int73 = property68.getMaximumTextLength(locale72);
        java.lang.String str74 = property68.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = property68.getFieldType();
        boolean boolean76 = property58.equals((java.lang.Object) property68);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property68.getFieldType();
        org.joda.time.YearMonth.Property property78 = yearMonth51.property(dateTimeFieldType77);
        int int79 = yearMonth33.indexOf(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 12 + "'", int41 == 12);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Oct" + "'", str42, "Oct");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Oct" + "'", str44, "Oct");
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 12 + "'", int59 == 12);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 12 + "'", int69 == 12);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 9 + "'", int73 == 9);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Oct" + "'", str74, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology15 = yearMonth8.getChronology();
        org.joda.time.YearMonth yearMonth16 = org.joda.time.YearMonth.now(chronology15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        org.joda.time.YearMonth yearMonth25 = yearMonth20.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        int int27 = yearMonth20.indexOf(dateTimeFieldType26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        int int33 = property32.getMaximumValue();
        java.lang.String str34 = property32.getAsShortText();
        java.util.Locale locale35 = null;
        java.lang.String str36 = property32.getAsShortText(locale35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property32.getFieldType();
        org.joda.time.YearMonth.Property property38 = yearMonth20.property(dateTimeFieldType37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology47);
        org.joda.time.YearMonth yearMonth50 = yearMonth48.minusYears((int) (short) 0);
        int int51 = yearMonth48.size();
        boolean boolean52 = yearMonth44.isAfter((org.joda.time.ReadablePartial) yearMonth48);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth.Property property57 = yearMonth56.monthOfYear();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology60);
        org.joda.time.YearMonth yearMonth63 = yearMonth61.minusYears((int) (short) 0);
        int int64 = yearMonth61.size();
        org.joda.time.YearMonth yearMonth66 = yearMonth61.plusMonths((int) (byte) 10);
        int int67 = property57.compareTo((org.joda.time.ReadablePartial) yearMonth61);
        org.joda.time.Chronology chronology68 = yearMonth61.getChronology();
        org.joda.time.YearMonth yearMonth69 = yearMonth48.withChronologyRetainFields(chronology68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.YearMonth yearMonth73 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology72);
        org.joda.time.YearMonth yearMonth75 = yearMonth73.minusYears((int) (short) 0);
        int int76 = yearMonth73.size();
        org.joda.time.YearMonth yearMonth78 = yearMonth73.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = null;
        int int80 = yearMonth73.indexOf(dateTimeFieldType79);
        org.joda.time.Interval interval81 = yearMonth73.toInterval();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.YearMonth yearMonth85 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology84);
        org.joda.time.YearMonth.Property property86 = yearMonth85.monthOfYear();
        int int87 = property86.getMaximumValue();
        java.lang.String str88 = property86.getAsShortText();
        java.util.Locale locale89 = null;
        java.lang.String str90 = property86.getAsShortText(locale89);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = property86.getFieldType();
        int int92 = yearMonth73.get(dateTimeFieldType91);
        boolean boolean93 = yearMonth69.isSupported(dateTimeFieldType91);
        boolean boolean94 = yearMonth20.isSupported(dateTimeFieldType91);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth96 = yearMonth16.withField(dateTimeFieldType91, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Oct" + "'", str34, "Oct");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Oct" + "'", str36, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertNotNull(yearMonth75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 12 + "'", int87 == 12);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Oct" + "'", str88, "Oct");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Oct" + "'", str90, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Interval interval6 = yearMonth3.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth3.getFieldTypes();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        boolean boolean21 = yearMonth13.isAfter((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        int int36 = property26.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.Chronology chronology37 = yearMonth30.getChronology();
        org.joda.time.YearMonth yearMonth38 = yearMonth17.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth39 = yearMonth3.withChronologyRetainFields(chronology37);
        java.lang.Class<?> wildcardClass40 = yearMonth3.getClass();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.parse("0097-11", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.lang.String str8 = property4.getName();
        java.lang.String str9 = property4.getAsString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10" + "'", str9, "10");
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.YearMonth yearMonth19 = yearMonth17.withMonthOfYear(3);
        int[] intArray20 = yearMonth17.getValues();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[97, 10]");
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth16 = yearMonth8.plusYears((int) (byte) 10);
        java.util.Locale locale18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = yearMonth8.toString("Oct", locale18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: O");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth16);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth.Property property10 = yearMonth9.monthOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        org.joda.time.YearMonth yearMonth19 = yearMonth14.plusMonths((int) (byte) 10);
        int int20 = property10.compareTo((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = yearMonth14.getChronology();
        org.joda.time.YearMonth yearMonth22 = org.joda.time.YearMonth.now(chronology21);
        org.joda.time.YearMonth yearMonth23 = yearMonth5.withChronologyRetainFields(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.YearMonth yearMonth25 = yearMonth5.minus(readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth.Property property30 = yearMonth29.monthOfYear();
        int int31 = property30.getMaximumValue();
        java.util.Locale locale32 = null;
        int int33 = property30.getMaximumShortTextLength(locale32);
        java.util.Locale locale34 = null;
        int int35 = property30.getMaximumTextLength(locale34);
        org.joda.time.DurationField durationField36 = property30.getRangeDurationField();
        java.util.Locale locale37 = null;
        java.lang.String str38 = property30.getAsShortText(locale37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property30.getFieldType();
        boolean boolean40 = yearMonth25.isSupported(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 12 + "'", int31 == 12);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Oct" + "'", str38, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = yearMonth8.toString(dateTimeFormatter15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        int int22 = property21.getMinimumValue();
        java.util.Locale locale23 = null;
        int int24 = property21.getMaximumShortTextLength(locale23);
        org.joda.time.DurationField durationField25 = property21.getDurationField();
        boolean boolean26 = yearMonth8.equals((java.lang.Object) property21);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        int int37 = yearMonth30.indexOf(dateTimeFieldType36);
        org.joda.time.YearMonth yearMonth39 = yearMonth30.plusMonths((-1));
        boolean boolean41 = yearMonth39.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        org.joda.time.YearMonth yearMonth55 = yearMonth50.plusMonths((int) (byte) 10);
        int int56 = property46.compareTo((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.YearMonth yearMonth57 = property46.getYearMonth();
        java.lang.String str58 = property46.getAsText();
        org.joda.time.YearMonth yearMonth59 = property46.getYearMonth();
        boolean boolean60 = yearMonth39.isBefore((org.joda.time.ReadablePartial) yearMonth59);
        org.joda.time.YearMonth yearMonth62 = yearMonth39.minusYears(3);
        int int63 = yearMonth8.compareTo((org.joda.time.ReadablePartial) yearMonth39);
        org.joda.time.YearMonth yearMonth65 = yearMonth39.minusYears(12);
        org.joda.time.YearMonth yearMonth67 = yearMonth39.plusYears((int) (byte) 10);
        org.joda.time.DateTimeField[] dateTimeFieldArray68 = yearMonth39.getFields();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0097-10" + "'", str16, "0097-10");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "October" + "'", str58, "October");
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(dateTimeFieldArray68);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth yearMonth17 = yearMonth3.minusMonths(0);
        org.joda.time.DateTimeField[] dateTimeFieldArray18 = yearMonth17.getFields();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(dateTimeFieldArray18);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth9 = property4.setCopy("0100-10", locale8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0100-10\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = yearMonth3.getFieldTypes();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((int) (byte) -1, 97);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((java.lang.Object) yearMonth9);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonth yearMonth17 = yearMonth14.withPeriodAdded(readablePeriod15, (int) (byte) 10);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(yearMonth17);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        int int47 = property46.getMaximumValue();
        java.lang.String str48 = property46.getAsShortText();
        java.util.Locale locale49 = null;
        java.lang.String str50 = property46.getAsShortText(locale49);
        org.joda.time.YearMonth yearMonth52 = property46.setCopy("October");
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = yearMonth52.toDateTime(readableInstant53);
        org.joda.time.DateTime dateTime55 = yearMonth38.toDateTime(readableInstant53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType57 = yearMonth38.getFieldType(2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 12 + "'", int47 == 12);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Oct" + "'", str48, "Oct");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Oct" + "'", str50, "Oct");
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        int int37 = property36.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 12 + "'", int37 == 12);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addToCopy((int) (short) 1);
        int int10 = property4.getMaximumValueOverall();
        java.util.Locale locale12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth13 = property4.setCopy("Property[monthOfYear]", locale12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[monthOfYear]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth8.getFieldTypes();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        boolean boolean35 = yearMonth27.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Interval interval36 = yearMonth27.toInterval();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        int int43 = yearMonth40.size();
        org.joda.time.YearMonth yearMonth45 = yearMonth40.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        int int47 = yearMonth40.indexOf(dateTimeFieldType46);
        org.joda.time.Interval interval48 = yearMonth40.toInterval();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology51);
        org.joda.time.YearMonth.Property property53 = yearMonth52.monthOfYear();
        int int54 = property53.getMaximumValue();
        java.lang.String str55 = property53.getAsShortText();
        java.util.Locale locale56 = null;
        java.lang.String str57 = property53.getAsShortText(locale56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property53.getFieldType();
        int int59 = yearMonth40.get(dateTimeFieldType58);
        org.joda.time.YearMonth.Property property60 = yearMonth27.property(dateTimeFieldType58);
        boolean boolean61 = yearMonth21.isSupported(dateTimeFieldType58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth63 = yearMonth18.withField(dateTimeFieldType58, 97);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 12 + "'", int54 == 12);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Oct" + "'", str55, "Oct");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Oct" + "'", str57, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth.Property property38 = yearMonth32.year();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonth42.indexOf(dateTimeFieldType48);
        org.joda.time.YearMonth yearMonth51 = yearMonth42.plusMonths((-1));
        org.joda.time.YearMonth yearMonth53 = yearMonth42.plusMonths((-1));
        org.joda.time.YearMonth.Property property54 = yearMonth53.monthOfYear();
        int int55 = property54.get();
        org.joda.time.YearMonth yearMonth56 = property54.getYearMonth();
        org.joda.time.YearMonth yearMonth58 = property54.addToCopy(0);
        int int59 = property38.compareTo((org.joda.time.ReadablePartial) yearMonth58);
        int int60 = property38.get();
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1970 + "'", int60 == 1970);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        org.joda.time.YearMonth yearMonth17 = yearMonth5.plusMonths((int) '4');
        org.joda.time.YearMonth yearMonth19 = yearMonth5.plusMonths(11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((java.lang.Object) 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth19);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth9.withYear((int) (byte) 1);
        int int33 = yearMonth32.getMonthOfYear();
        org.joda.time.YearMonth.Property property34 = yearMonth32.year();
        int int35 = property34.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-292275054) + "'", int35 == (-292275054));
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        int int47 = property46.getMinimumValue();
        java.util.Locale locale48 = null;
        int int49 = property46.getMaximumShortTextLength(locale48);
        org.joda.time.YearMonth yearMonth51 = property46.addToCopy((int) (short) 1);
        boolean boolean52 = yearMonth3.equals((java.lang.Object) yearMonth51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        int int59 = yearMonth56.size();
        org.joda.time.YearMonth yearMonth61 = yearMonth56.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        int int63 = yearMonth56.indexOf(dateTimeFieldType62);
        int int64 = yearMonth56.getYear();
        boolean boolean65 = yearMonth51.isBefore((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.DateTimeField[] dateTimeFieldArray66 = yearMonth56.getFields();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth68 = yearMonth56.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray66);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        int[] intArray16 = yearMonth5.getValues();
        org.joda.time.YearMonth yearMonth18 = yearMonth5.plusMonths((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.YearMonth yearMonth21 = yearMonth5.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[97, 10]");
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth21);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        java.lang.String str9 = property4.getName();
        java.lang.String str10 = property4.getAsText();
        java.lang.String str11 = property4.getName();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "monthOfYear" + "'", str9, "monthOfYear");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "October" + "'", str10, "October");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "monthOfYear" + "'", str11, "monthOfYear");
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Interval interval6 = yearMonth3.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth3.getFieldTypes();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        boolean boolean21 = yearMonth13.isAfter((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        int int36 = property26.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.Chronology chronology37 = yearMonth30.getChronology();
        org.joda.time.YearMonth yearMonth38 = yearMonth17.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth39 = yearMonth3.withChronologyRetainFields(chronology37);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology46);
        org.joda.time.YearMonth yearMonth49 = yearMonth47.minusYears((int) (short) 0);
        int int50 = yearMonth47.size();
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.YearMonth yearMonth57 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology56);
        org.joda.time.YearMonth yearMonth59 = yearMonth57.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth yearMonth65 = yearMonth63.minusYears((int) (short) 0);
        int int66 = yearMonth63.size();
        boolean boolean67 = yearMonth59.isAfter((org.joda.time.ReadablePartial) yearMonth63);
        org.joda.time.Interval interval68 = yearMonth59.toInterval();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.YearMonth yearMonth72 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology71);
        org.joda.time.YearMonth yearMonth74 = yearMonth72.minusYears((int) (short) 0);
        int int75 = yearMonth72.size();
        org.joda.time.YearMonth yearMonth77 = yearMonth72.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = null;
        int int79 = yearMonth72.indexOf(dateTimeFieldType78);
        org.joda.time.Interval interval80 = yearMonth72.toInterval();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.YearMonth yearMonth84 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology83);
        org.joda.time.YearMonth.Property property85 = yearMonth84.monthOfYear();
        int int86 = property85.getMaximumValue();
        java.lang.String str87 = property85.getAsShortText();
        java.util.Locale locale88 = null;
        java.lang.String str89 = property85.getAsShortText(locale88);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = property85.getFieldType();
        int int91 = yearMonth72.get(dateTimeFieldType90);
        org.joda.time.YearMonth.Property property92 = yearMonth59.property(dateTimeFieldType90);
        boolean boolean93 = yearMonth53.isSupported(dateTimeFieldType90);
        org.joda.time.YearMonth yearMonth95 = yearMonth47.withField(dateTimeFieldType90, (int) (short) 10);
        boolean boolean96 = yearMonth43.isBefore((org.joda.time.ReadablePartial) yearMonth47);
        int int97 = yearMonth39.compareTo((org.joda.time.ReadablePartial) yearMonth47);
        org.joda.time.YearMonth yearMonth99 = yearMonth47.minusMonths((int) (byte) 100);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(yearMonth77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 12 + "'", int86 == 12);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Oct" + "'", str87, "Oct");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Oct" + "'", str89, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(yearMonth95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(yearMonth99);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        int int11 = property4.getMinimumValueOverall();
        int int12 = property4.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField13 = property4.getField();
        java.util.Locale locale14 = null;
        java.lang.String str15 = property4.getAsText(locale14);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "October" + "'", str15, "October");
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        org.joda.time.Chronology chronology37 = yearMonth3.getChronology();
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth(chronology37);
        java.lang.Class<?> wildcardClass39 = yearMonth38.getClass();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addToCopy((int) (short) 1);
        int int10 = property4.getMaximumValueOverall();
        java.util.Locale locale11 = null;
        int int12 = property4.getMaximumShortTextLength(locale11);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        org.joda.time.Chronology chronology37 = yearMonth3.getChronology();
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth(chronology37);
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth yearMonth45 = yearMonth43.minusYears((int) (short) 0);
        org.joda.time.Interval interval46 = yearMonth43.toInterval();
        org.joda.time.Chronology chronology47 = yearMonth43.getChronology();
        org.joda.time.YearMonth yearMonth48 = yearMonth39.withChronologyRetainFields(chronology47);
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth(chronology47);
        org.joda.time.YearMonth yearMonth50 = yearMonth38.withChronologyRetainFields(chronology47);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        int int61 = yearMonth54.indexOf(dateTimeFieldType60);
        org.joda.time.YearMonth yearMonth63 = yearMonth54.plusMonths((-1));
        org.joda.time.YearMonth yearMonth65 = yearMonth54.plusMonths((-1));
        org.joda.time.YearMonth.Property property66 = yearMonth65.monthOfYear();
        int int67 = property66.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = property66.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property66.getFieldType();
        org.joda.time.YearMonth.Property property70 = yearMonth38.property(dateTimeFieldType69);
        org.joda.time.YearMonth yearMonth71 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology72 = yearMonth71.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth73 = new org.joda.time.YearMonth((java.lang.Object) dateTimeFieldType69, chronology72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(chronology72);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        int int15 = property4.getMaximumValueOverall();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property4.getAsText(locale16);
        org.joda.time.YearMonth yearMonth18 = property4.getYearMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField20 = yearMonth18.getField(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "October" + "'", str17, "October");
        org.junit.Assert.assertNotNull(yearMonth18);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        java.lang.Class<?> wildcardClass36 = yearMonth35.getClass();
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth.Property property8 = yearMonth7.monthOfYear();
        int int9 = property8.getMaximumValue();
        java.util.Locale locale10 = null;
        int int11 = property8.getMaximumShortTextLength(locale10);
        java.util.Locale locale12 = null;
        int int13 = property8.getMaximumTextLength(locale12);
        org.joda.time.DurationField durationField14 = property8.getRangeDurationField();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property8.getAsShortText(locale15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property8.getFieldType();
        boolean boolean18 = yearMonth3.isSupported(dateTimeFieldType17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = yearMonth3.toString("October");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: O");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Oct" + "'", str16, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        boolean boolean36 = yearMonth28.isAfter((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        int int51 = property41.compareTo((org.joda.time.ReadablePartial) yearMonth45);
        org.joda.time.Chronology chronology52 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth53 = yearMonth32.withChronologyRetainFields(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonth yearMonth56 = yearMonth53.withPeriodAdded(readablePeriod54, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = yearMonth56.indexOf(dateTimeFieldType57);
        boolean boolean59 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology67);
        org.joda.time.YearMonth yearMonth70 = yearMonth68.minusYears((int) (short) 0);
        int int71 = yearMonth68.size();
        org.joda.time.YearMonth yearMonth73 = yearMonth68.plusMonths((int) (byte) 10);
        int int74 = property64.compareTo((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean75 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean76 = yearMonth17.isAfter((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.YearMonth yearMonth78 = yearMonth17.plusMonths(2);
        int int79 = yearMonth78.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate81 = yearMonth78.toLocalDate(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 12 + "'", int79 == 12);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.parse("September", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.YearMonth yearMonth29 = yearMonth3.minusYears(100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType31 = yearMonth3.getFieldType((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth.Property property10 = yearMonth3.year();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        int int25 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonth19.toInterval(dateTimeZone26);
        org.joda.time.YearMonth yearMonth29 = yearMonth19.minusYears((int) (short) 0);
        java.lang.String str30 = yearMonth19.toString();
        int int31 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0097-10" + "'", str30, "0097-10");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addToCopy((int) (short) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        boolean boolean31 = yearMonth18.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = yearMonth28.toString(dateTimeFormatter32);
        int int34 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth28);
        java.lang.String str35 = property4.getAsShortText();
        java.lang.Class<?> wildcardClass36 = property4.getClass();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0097-10" + "'", str33, "0097-10");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(12, (int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.YearMonth yearMonth18 = yearMonth12.minusYears((int) (byte) 100);
        boolean boolean19 = yearMonth2.isEqual((org.joda.time.ReadablePartial) yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.YearMonth yearMonth18 = yearMonth14.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.withMonthOfYear(11);
        org.joda.time.YearMonth yearMonth22 = yearMonth18.minusYears(9);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(yearMonth22);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth(chronology25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth30 = yearMonth28.withMonthOfYear((-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth8 = property4.setCopy("hi!", locale7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"hi!\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = yearMonth8.toString(dateTimeFormatter15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        int int22 = property21.getMinimumValue();
        java.util.Locale locale23 = null;
        int int24 = property21.getMaximumShortTextLength(locale23);
        org.joda.time.DurationField durationField25 = property21.getDurationField();
        boolean boolean26 = yearMonth8.equals((java.lang.Object) property21);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        int int37 = yearMonth30.indexOf(dateTimeFieldType36);
        org.joda.time.YearMonth yearMonth39 = yearMonth30.plusMonths((-1));
        boolean boolean41 = yearMonth39.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        org.joda.time.YearMonth yearMonth55 = yearMonth50.plusMonths((int) (byte) 10);
        int int56 = property46.compareTo((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.YearMonth yearMonth57 = property46.getYearMonth();
        java.lang.String str58 = property46.getAsText();
        org.joda.time.YearMonth yearMonth59 = property46.getYearMonth();
        boolean boolean60 = yearMonth39.isBefore((org.joda.time.ReadablePartial) yearMonth59);
        org.joda.time.YearMonth yearMonth62 = yearMonth39.minusYears(3);
        int int63 = yearMonth8.compareTo((org.joda.time.ReadablePartial) yearMonth39);
        int int64 = yearMonth8.getMonthOfYear();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0097-10" + "'", str16, "0097-10");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "October" + "'", str58, "October");
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth5.getYear();
        org.joda.time.YearMonth yearMonth8 = yearMonth5.plusMonths(2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = yearMonth8.toLocalDate((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(yearMonth8);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.Chronology chronology8 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth9 = yearMonth0.withChronologyRetainFields(chronology8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        int int16 = yearMonth13.size();
        org.joda.time.YearMonth yearMonth18 = yearMonth13.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = yearMonth18.getFields();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        int int30 = yearMonth23.indexOf(dateTimeFieldType29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth.Property property35 = yearMonth34.monthOfYear();
        int int36 = property35.getMaximumValue();
        java.lang.String str37 = property35.getAsShortText();
        java.util.Locale locale38 = null;
        java.lang.String str39 = property35.getAsShortText(locale38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property35.getFieldType();
        org.joda.time.YearMonth.Property property41 = yearMonth23.property(dateTimeFieldType40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology50);
        org.joda.time.YearMonth yearMonth53 = yearMonth51.minusYears((int) (short) 0);
        int int54 = yearMonth51.size();
        boolean boolean55 = yearMonth47.isAfter((org.joda.time.ReadablePartial) yearMonth51);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology58);
        org.joda.time.YearMonth.Property property60 = yearMonth59.monthOfYear();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth yearMonth66 = yearMonth64.minusYears((int) (short) 0);
        int int67 = yearMonth64.size();
        org.joda.time.YearMonth yearMonth69 = yearMonth64.plusMonths((int) (byte) 10);
        int int70 = property60.compareTo((org.joda.time.ReadablePartial) yearMonth64);
        org.joda.time.Chronology chronology71 = yearMonth64.getChronology();
        org.joda.time.YearMonth yearMonth72 = yearMonth51.withChronologyRetainFields(chronology71);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.YearMonth yearMonth76 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology75);
        org.joda.time.YearMonth yearMonth78 = yearMonth76.minusYears((int) (short) 0);
        int int79 = yearMonth76.size();
        org.joda.time.YearMonth yearMonth81 = yearMonth76.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = null;
        int int83 = yearMonth76.indexOf(dateTimeFieldType82);
        org.joda.time.Interval interval84 = yearMonth76.toInterval();
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.YearMonth yearMonth88 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology87);
        org.joda.time.YearMonth.Property property89 = yearMonth88.monthOfYear();
        int int90 = property89.getMaximumValue();
        java.lang.String str91 = property89.getAsShortText();
        java.util.Locale locale92 = null;
        java.lang.String str93 = property89.getAsShortText(locale92);
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = property89.getFieldType();
        int int95 = yearMonth76.get(dateTimeFieldType94);
        boolean boolean96 = yearMonth72.isSupported(dateTimeFieldType94);
        boolean boolean97 = yearMonth23.isSupported(dateTimeFieldType94);
        boolean boolean98 = yearMonth18.isSupported(dateTimeFieldType94);
        int int99 = yearMonth0.indexOf(dateTimeFieldType94);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 12 + "'", int36 == 12);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Oct" + "'", str37, "Oct");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Oct" + "'", str39, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(yearMonth81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 12 + "'", int90 == 12);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Oct" + "'", str91, "Oct");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Oct" + "'", str93, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 10 + "'", int95 == 10);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth.Property property14 = yearMonth9.year();
        org.joda.time.YearMonth.Property property15 = yearMonth9.year();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.Interval interval27 = yearMonth19.toInterval();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        int int33 = property32.getMaximumValue();
        java.lang.String str34 = property32.getAsShortText();
        java.util.Locale locale35 = null;
        java.lang.String str36 = property32.getAsShortText(locale35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property32.getFieldType();
        int int38 = yearMonth19.get(dateTimeFieldType37);
        org.joda.time.Interval interval39 = yearMonth19.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = yearMonth19.toString(dateTimeFormatter40);
        org.joda.time.YearMonth yearMonth43 = yearMonth19.plusYears(0);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology46);
        org.joda.time.YearMonth.Property property48 = yearMonth47.monthOfYear();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology51);
        org.joda.time.YearMonth yearMonth54 = yearMonth52.minusYears((int) (short) 0);
        int int55 = yearMonth52.size();
        org.joda.time.YearMonth yearMonth57 = yearMonth52.plusMonths((int) (byte) 10);
        int int58 = property48.compareTo((org.joda.time.ReadablePartial) yearMonth52);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology61);
        org.joda.time.YearMonth yearMonth64 = yearMonth62.minusYears((int) (short) 0);
        boolean boolean65 = yearMonth52.isAfter((org.joda.time.ReadablePartial) yearMonth62);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        int int67 = yearMonth52.indexOf(dateTimeFieldType66);
        int int68 = yearMonth19.compareTo((org.joda.time.ReadablePartial) yearMonth52);
        int int69 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Oct" + "'", str34, "Oct");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Oct" + "'", str36, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0097-10" + "'", str41, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField11 = property4.getField();
        org.joda.time.DurationField durationField12 = property4.getDurationField();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property4.getAsShortText(locale13);
        java.util.Locale locale15 = null;
        int int16 = property4.getMaximumTextLength(locale15);
        java.lang.String str17 = property4.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Oct" + "'", str14, "Oct");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[monthOfYear]" + "'", str17, "Property[monthOfYear]");
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.YearMonth yearMonth19 = property4.setCopy("October");
        org.joda.time.YearMonth yearMonth21 = property4.addWrapFieldToCopy(9);
        java.lang.String str22 = property4.getAsShortText();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Oct" + "'", str22, "Oct");
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth.Property property10 = yearMonth9.monthOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        org.joda.time.YearMonth yearMonth19 = yearMonth14.plusMonths((int) (byte) 10);
        int int20 = property10.compareTo((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = yearMonth14.getChronology();
        org.joda.time.YearMonth yearMonth22 = org.joda.time.YearMonth.now(chronology21);
        org.joda.time.YearMonth yearMonth23 = yearMonth5.withChronologyRetainFields(chronology21);
        org.joda.time.YearMonth.Property property24 = yearMonth23.year();
        java.util.Locale locale25 = null;
        int int26 = property24.getMaximumShortTextLength(locale25);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth.Property property12 = yearMonth11.monthOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        int int22 = property12.compareTo((org.joda.time.ReadablePartial) yearMonth16);
        org.joda.time.Chronology chronology23 = yearMonth16.getChronology();
        org.joda.time.YearMonth yearMonth24 = org.joda.time.YearMonth.now(chronology23);
        org.joda.time.YearMonth yearMonth25 = yearMonth7.withChronologyRetainFields(chronology23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth(0, 0, chronology23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(yearMonth25);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        org.joda.time.YearMonth yearMonth13 = property4.addToCopy(3);
        java.lang.String str14 = property4.getAsString();
        org.joda.time.YearMonth yearMonth16 = property4.addToCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth18 = property4.setCopy("Property[monthOfYear]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[monthOfYear]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertNotNull(yearMonth16);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.parse("0100-10", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.YearMonth.Property property42 = yearMonth38.year();
        java.lang.String str43 = property42.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Property[year]" + "'", str43, "Property[year]");
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.parse("October", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        org.joda.time.Interval interval8 = yearMonth5.toInterval();
        org.joda.time.Chronology chronology9 = yearMonth5.getChronology();
        org.joda.time.YearMonth yearMonth10 = yearMonth1.withChronologyRetainFields(chronology9);
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth(chronology9);
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth(0L, chronology9);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(yearMonth10);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        java.lang.String str9 = property4.getName();
        java.lang.String str10 = property4.getAsString();
        int int11 = property4.get();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "monthOfYear" + "'", str9, "monthOfYear");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "10" + "'", str10, "10");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth5.getYear();
        org.joda.time.YearMonth yearMonth8 = yearMonth5.minusYears(0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        org.joda.time.YearMonth yearMonth17 = yearMonth12.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = yearMonth12.indexOf(dateTimeFieldType18);
        org.joda.time.YearMonth yearMonth21 = yearMonth12.plusMonths((-1));
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = yearMonth25.indexOf(dateTimeFieldType31);
        org.joda.time.Interval interval33 = yearMonth25.toInterval();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth.Property property38 = yearMonth37.monthOfYear();
        int int39 = property38.getMaximumValue();
        java.lang.String str40 = property38.getAsShortText();
        java.util.Locale locale41 = null;
        java.lang.String str42 = property38.getAsShortText(locale41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property38.getFieldType();
        int int44 = yearMonth25.get(dateTimeFieldType43);
        org.joda.time.YearMonth.Property property45 = yearMonth12.property(dateTimeFieldType43);
        org.joda.time.Chronology chronology46 = yearMonth12.getChronology();
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth(chronology46);
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology51);
        org.joda.time.YearMonth yearMonth54 = yearMonth52.minusYears((int) (short) 0);
        org.joda.time.Interval interval55 = yearMonth52.toInterval();
        org.joda.time.Chronology chronology56 = yearMonth52.getChronology();
        org.joda.time.YearMonth yearMonth57 = yearMonth48.withChronologyRetainFields(chronology56);
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth(chronology56);
        org.joda.time.YearMonth yearMonth59 = yearMonth47.withChronologyRetainFields(chronology56);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth yearMonth65 = yearMonth63.minusYears((int) (short) 0);
        int int66 = yearMonth63.size();
        org.joda.time.YearMonth yearMonth68 = yearMonth63.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        int int70 = yearMonth63.indexOf(dateTimeFieldType69);
        org.joda.time.YearMonth yearMonth72 = yearMonth63.plusMonths((-1));
        org.joda.time.YearMonth yearMonth74 = yearMonth63.plusMonths((-1));
        org.joda.time.YearMonth.Property property75 = yearMonth74.monthOfYear();
        int int76 = property75.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property75.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property75.getFieldType();
        org.joda.time.YearMonth.Property property79 = yearMonth47.property(dateTimeFieldType78);
        int int80 = yearMonth8.indexOf(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Oct" + "'", str40, "Oct");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Oct" + "'", str42, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 9 + "'", int76 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        java.lang.String str2 = yearMonth1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth12.withYear((int) (byte) 1);
        boolean boolean36 = yearMonth1.isEqual((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.YearMonth.Property property37 = yearMonth1.monthOfYear();
        int int38 = property37.getMaximumValue();
        int int39 = property37.getMaximumValueOverall();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01" + "'", str2, "1970-01");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 12 + "'", int38 == 12);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth18 = property4.setCopy((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.YearMonth yearMonth4 = yearMonth2.withYear((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((java.lang.Object) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Byte");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth4);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonth yearMonth29 = yearMonth27.plus(readablePeriod28);
        org.joda.time.YearMonth yearMonth31 = yearMonth27.withYear((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.YearMonth yearMonth33 = yearMonth27.minus(readablePeriod32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = yearMonth27.toString("Sep");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: p");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth33);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        int int15 = property14.getMaximumValue();
        java.util.Locale locale16 = null;
        int int17 = property14.getMaximumShortTextLength(locale16);
        java.util.Locale locale18 = null;
        int int19 = property14.getMaximumTextLength(locale18);
        java.lang.String str20 = property14.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property14.getFieldType();
        boolean boolean22 = property4.equals((java.lang.Object) property14);
        org.joda.time.YearMonth yearMonth24 = property4.addWrapFieldToCopy(1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(yearMonth24);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth5.getYear();
        org.joda.time.YearMonth yearMonth8 = yearMonth5.minusYears(0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth.Property property13 = yearMonth12.monthOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        org.joda.time.YearMonth yearMonth22 = yearMonth17.plusMonths((int) (byte) 10);
        int int23 = property13.compareTo((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.Chronology chronology24 = yearMonth17.getChronology();
        org.joda.time.YearMonth yearMonth25 = org.joda.time.YearMonth.now(chronology24);
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology24);
        int int27 = yearMonth5.compareTo((org.joda.time.ReadablePartial) yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth1.getFieldTypes();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = yearMonth1.getFieldType((int) (short) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        org.joda.time.YearMonth yearMonth14 = yearMonth9.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = yearMonth9.indexOf(dateTimeFieldType15);
        org.joda.time.YearMonth yearMonth18 = yearMonth9.plusMonths((-1));
        org.joda.time.YearMonth yearMonth20 = yearMonth9.plusMonths((-1));
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        int int22 = property21.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property21.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property21.getFieldType();
        org.joda.time.YearMonth.Property property25 = yearMonth1.property(dateTimeFieldType24);
        java.util.Locale locale27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = yearMonth1.toString("", locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Interval interval29 = yearMonth27.toInterval(dateTimeZone28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        boolean boolean37 = yearMonth27.isBefore((org.joda.time.ReadablePartial) yearMonth33);
        int[] intArray38 = yearMonth27.getValues();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 10]");
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        boolean boolean28 = yearMonth20.isAfter((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.YearMonth yearMonth30 = yearMonth24.minus(readablePeriod29);
        boolean boolean31 = property4.equals((java.lang.Object) yearMonth24);
        int int32 = yearMonth24.getMonthOfYear();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth16 = yearMonth8.plusYears((int) (byte) 10);
        java.util.Locale locale18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = yearMonth8.toString("hi!", locale18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth16);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property15.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property15.getFieldType();
        org.joda.time.DurationField durationField19 = property15.getRangeDurationField();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth yearMonth17 = yearMonth3.minusMonths(0);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        boolean boolean36 = yearMonth28.isAfter((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        int int51 = property41.compareTo((org.joda.time.ReadablePartial) yearMonth45);
        org.joda.time.Chronology chronology52 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth53 = yearMonth32.withChronologyRetainFields(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonth yearMonth56 = yearMonth53.withPeriodAdded(readablePeriod54, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = yearMonth56.indexOf(dateTimeFieldType57);
        boolean boolean59 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        int int65 = property64.getMinimumValue();
        java.util.Locale locale66 = null;
        int int67 = property64.getMaximumShortTextLength(locale66);
        org.joda.time.YearMonth yearMonth69 = property64.addToCopy((int) (short) 1);
        boolean boolean70 = yearMonth21.equals((java.lang.Object) yearMonth69);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.YearMonth yearMonth74 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology73);
        org.joda.time.YearMonth yearMonth76 = yearMonth74.minusYears((int) (short) 0);
        int int77 = yearMonth74.size();
        org.joda.time.YearMonth yearMonth79 = yearMonth74.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        int int81 = yearMonth74.indexOf(dateTimeFieldType80);
        int int82 = yearMonth74.getYear();
        boolean boolean83 = yearMonth69.isBefore((org.joda.time.ReadablePartial) yearMonth74);
        org.joda.time.DateTimeField[] dateTimeFieldArray84 = yearMonth74.getFields();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = null;
        java.lang.String str86 = yearMonth74.toString(dateTimeFormatter85);
        boolean boolean87 = yearMonth17.isBefore((org.joda.time.ReadablePartial) yearMonth74);
        java.util.Locale locale89 = null;
        java.lang.String str90 = yearMonth74.toString("10", locale89);
        java.util.Locale locale92 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = yearMonth74.toString("October", locale92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: O");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(yearMonth79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0097-10" + "'", str86, "0097-10");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "10" + "'", str90, "10");
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        int[] intArray4 = yearMonth3.getValues();
        org.joda.time.YearMonth yearMonth6 = yearMonth3.withYear(11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((java.lang.Object) 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[97, 10]");
        org.junit.Assert.assertNotNull(yearMonth6);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.plusYears((int) '#');
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.withYear((int) (byte) 1);
        boolean boolean45 = yearMonth37.equals((java.lang.Object) yearMonth44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.YearMonth yearMonth48 = yearMonth37.withPeriodAdded(readablePeriod46, 2);
        org.joda.time.YearMonth yearMonth50 = yearMonth37.minusMonths(100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField52 = yearMonth37.getField((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertNotNull(yearMonth50);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = yearMonth32.getValue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        org.joda.time.YearMonth yearMonth13 = property4.addToCopy(3);
        java.lang.String str14 = property4.getAsString();
        java.lang.String str15 = property4.getName();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "monthOfYear" + "'", str15, "monthOfYear");
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = yearMonth3.getValue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((long) (short) 1, chronology34);
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth(chronology34);
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) (short) 0, (int) (short) 100, chronology34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.getAsShortText();
        int int12 = property4.getMaximumValue();
        int int13 = property4.get();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Oct" + "'", str11, "Oct");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.plusYears((int) '#');
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.YearMonth yearMonth41 = yearMonth37.minus(readablePeriod40);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology47);
        org.joda.time.YearMonth yearMonth50 = yearMonth48.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        boolean boolean58 = yearMonth50.isAfter((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology61);
        org.joda.time.YearMonth.Property property63 = yearMonth62.monthOfYear();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.YearMonth yearMonth67 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology66);
        org.joda.time.YearMonth yearMonth69 = yearMonth67.minusYears((int) (short) 0);
        int int70 = yearMonth67.size();
        org.joda.time.YearMonth yearMonth72 = yearMonth67.plusMonths((int) (byte) 10);
        int int73 = property63.compareTo((org.joda.time.ReadablePartial) yearMonth67);
        org.joda.time.Chronology chronology74 = yearMonth67.getChronology();
        org.joda.time.YearMonth yearMonth75 = yearMonth54.withChronologyRetainFields(chronology74);
        org.joda.time.YearMonth yearMonth76 = new org.joda.time.YearMonth((long) (short) 1, chronology74);
        org.joda.time.YearMonth yearMonth77 = new org.joda.time.YearMonth(chronology74);
        org.joda.time.YearMonth yearMonth78 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology74);
        int int80 = yearMonth78.getValue((int) (short) 1);
        boolean boolean81 = yearMonth41.isEqual((org.joda.time.ReadablePartial) yearMonth78);
        java.lang.String str83 = yearMonth78.toString("0097-11");
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.Interval interval85 = yearMonth78.toInterval(dateTimeZone84);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(yearMonth75);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "0097-11" + "'", str83, "0097-11");
        org.junit.Assert.assertNotNull(interval85);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        int int43 = yearMonth40.size();
        boolean boolean44 = yearMonth36.isAfter((org.joda.time.ReadablePartial) yearMonth40);
        int int45 = yearMonth30.compareTo((org.joda.time.ReadablePartial) yearMonth40);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth yearMonth51 = yearMonth49.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology54);
        org.joda.time.YearMonth yearMonth57 = yearMonth55.minusYears((int) (short) 0);
        int int58 = yearMonth55.size();
        boolean boolean59 = yearMonth51.isAfter((org.joda.time.ReadablePartial) yearMonth55);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology67);
        org.joda.time.YearMonth yearMonth70 = yearMonth68.minusYears((int) (short) 0);
        int int71 = yearMonth68.size();
        org.joda.time.YearMonth yearMonth73 = yearMonth68.plusMonths((int) (byte) 10);
        int int74 = property64.compareTo((org.joda.time.ReadablePartial) yearMonth68);
        org.joda.time.Chronology chronology75 = yearMonth68.getChronology();
        org.joda.time.YearMonth yearMonth76 = yearMonth55.withChronologyRetainFields(chronology75);
        boolean boolean77 = yearMonth30.isEqual((org.joda.time.ReadablePartial) yearMonth76);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        org.joda.time.YearMonth yearMonth19 = yearMonth14.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = yearMonth14.indexOf(dateTimeFieldType20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        boolean boolean35 = yearMonth27.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth.Property property40 = yearMonth39.monthOfYear();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        int int47 = yearMonth44.size();
        org.joda.time.YearMonth yearMonth49 = yearMonth44.plusMonths((int) (byte) 10);
        int int50 = property40.compareTo((org.joda.time.ReadablePartial) yearMonth44);
        org.joda.time.Chronology chronology51 = yearMonth44.getChronology();
        org.joda.time.YearMonth yearMonth52 = yearMonth31.withChronologyRetainFields(chronology51);
        int int53 = yearMonth14.compareTo((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.YearMonth yearMonth57 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology56);
        org.joda.time.YearMonth.Property property58 = yearMonth57.monthOfYear();
        int int59 = property58.getMaximumValue();
        java.util.Locale locale60 = null;
        int int61 = property58.getMaximumShortTextLength(locale60);
        java.util.Locale locale62 = null;
        int int63 = property58.getMaximumTextLength(locale62);
        org.joda.time.DurationField durationField64 = property58.getRangeDurationField();
        java.util.Locale locale65 = null;
        java.lang.String str66 = property58.getAsShortText(locale65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property58.getFieldType();
        org.joda.time.YearMonth yearMonth69 = yearMonth14.withField(dateTimeFieldType67, 11);
        org.joda.time.DateTimeField[] dateTimeFieldArray70 = yearMonth14.getFields();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.YearMonth yearMonth74 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology73);
        org.joda.time.YearMonth.Property property75 = yearMonth74.monthOfYear();
        int int76 = property75.getMaximumValue();
        java.lang.String str77 = property75.getAsShortText();
        org.joda.time.YearMonth yearMonth79 = property75.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = property75.getFieldType();
        org.joda.time.YearMonth.Property property81 = yearMonth14.property(dateTimeFieldType80);
        org.joda.time.YearMonth.Property property82 = yearMonth3.property(dateTimeFieldType80);
        int int83 = yearMonth3.getMonthOfYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 12 + "'", int59 == 12);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Oct" + "'", str66, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertNotNull(dateTimeFieldArray70);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 12 + "'", int76 == 12);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Oct" + "'", str77, "Oct");
        org.junit.Assert.assertNotNull(yearMonth79);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        int int11 = property4.getMinimumValueOverall();
        int int12 = property4.getMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth14 = property4.setCopy("1970-01");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        boolean boolean14 = yearMonth12.equals((java.lang.Object) 1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonth yearMonth16 = yearMonth12.minus(readablePeriod15);
        org.joda.time.YearMonth.Property property17 = yearMonth16.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = yearMonth16.toString("Property[monthOfYear]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        int int47 = property46.getMinimumValue();
        java.util.Locale locale48 = null;
        int int49 = property46.getMaximumShortTextLength(locale48);
        org.joda.time.YearMonth yearMonth51 = property46.addToCopy((int) (short) 1);
        boolean boolean52 = yearMonth3.equals((java.lang.Object) yearMonth51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        int int59 = yearMonth56.size();
        org.joda.time.YearMonth yearMonth61 = yearMonth56.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        int int63 = yearMonth56.indexOf(dateTimeFieldType62);
        int int64 = yearMonth56.getYear();
        boolean boolean65 = yearMonth51.isBefore((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.DateTimeField[] dateTimeFieldArray66 = yearMonth56.getFields();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = null;
        java.lang.String str68 = yearMonth56.toString(dateTimeFormatter67);
        org.joda.time.YearMonth yearMonth70 = yearMonth56.withMonthOfYear(12);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0097-10" + "'", str68, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth70);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        java.util.Locale locale17 = null;
        int int18 = property15.getMaximumShortTextLength(locale17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth20 = property15.setCopy((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.Chronology chronology8 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth9 = yearMonth0.withChronologyRetainFields(chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.withYear(9);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth11);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Interval interval6 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology7 = yearMonth3.getChronology();
        org.joda.time.YearMonth yearMonth9 = yearMonth3.plusMonths((int) (byte) -1);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonth9);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.parse("hi!", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.plusYears((int) '#');
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.YearMonth yearMonth41 = yearMonth37.minus(readablePeriod40);
        int[] intArray42 = yearMonth37.getValues();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = yearMonth37.toString("monthOfYear");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: o");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1980, 1]");
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMaximumValue();
        int int10 = property4.getMinimumValueOverall();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property4.getAsText(locale11);
        int int13 = property4.getMaximumValueOverall();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.YearMonth yearMonth29 = property18.getYearMonth();
        java.lang.String str30 = property18.getAsText();
        org.joda.time.YearMonth yearMonth31 = property18.getYearMonth();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth.Property property36 = yearMonth35.monthOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        int int49 = yearMonth46.size();
        boolean boolean50 = yearMonth42.isAfter((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth.Property property55 = yearMonth54.monthOfYear();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology58);
        org.joda.time.YearMonth yearMonth61 = yearMonth59.minusYears((int) (short) 0);
        int int62 = yearMonth59.size();
        org.joda.time.YearMonth yearMonth64 = yearMonth59.plusMonths((int) (byte) 10);
        int int65 = property55.compareTo((org.joda.time.ReadablePartial) yearMonth59);
        org.joda.time.Chronology chronology66 = yearMonth59.getChronology();
        org.joda.time.YearMonth yearMonth67 = yearMonth46.withChronologyRetainFields(chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.YearMonth yearMonth70 = yearMonth67.withPeriodAdded(readablePeriod68, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = null;
        int int72 = yearMonth70.indexOf(dateTimeFieldType71);
        boolean boolean73 = yearMonth35.isEqual((org.joda.time.ReadablePartial) yearMonth70);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.YearMonth yearMonth77 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology76);
        org.joda.time.YearMonth.Property property78 = yearMonth77.monthOfYear();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.YearMonth yearMonth82 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology81);
        org.joda.time.YearMonth yearMonth84 = yearMonth82.minusYears((int) (short) 0);
        int int85 = yearMonth82.size();
        org.joda.time.YearMonth yearMonth87 = yearMonth82.plusMonths((int) (byte) 10);
        int int88 = property78.compareTo((org.joda.time.ReadablePartial) yearMonth82);
        boolean boolean89 = yearMonth35.isEqual((org.joda.time.ReadablePartial) yearMonth82);
        boolean boolean90 = yearMonth31.isAfter((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.YearMonth yearMonth92 = yearMonth31.plusMonths(2);
        org.joda.time.YearMonth yearMonth94 = yearMonth31.minusYears(3);
        org.joda.time.ReadablePeriod readablePeriod95 = null;
        org.joda.time.YearMonth yearMonth96 = yearMonth31.minus(readablePeriod95);
        org.joda.time.YearMonth yearMonth98 = yearMonth31.minusYears(10);
        int int99 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth98);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "October" + "'", str12, "October");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "October" + "'", str30, "October");
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(yearMonth84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(yearMonth87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(yearMonth92);
        org.junit.Assert.assertNotNull(yearMonth94);
        org.junit.Assert.assertNotNull(yearMonth96);
        org.junit.Assert.assertNotNull(yearMonth98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        org.joda.time.Interval interval8 = yearMonth5.toInterval();
        org.joda.time.Chronology chronology9 = yearMonth5.getChronology();
        org.joda.time.YearMonth yearMonth10 = yearMonth1.withChronologyRetainFields(chronology9);
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth(chronology9);
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((long) (-292275054), chronology9);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(yearMonth10);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        java.lang.String str2 = yearMonth1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth12.withYear((int) (byte) 1);
        boolean boolean36 = yearMonth1.isEqual((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.YearMonth.Property property37 = yearMonth1.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = yearMonth1.toString(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01" + "'", str2, "1970-01");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01" + "'", str39, "1970-01");
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField29 = yearMonth27.getField((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth.Property property13 = yearMonth12.monthOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        org.joda.time.YearMonth yearMonth22 = yearMonth17.plusMonths((int) (byte) 10);
        int int23 = property13.compareTo((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Interval interval25 = yearMonth17.toInterval(dateTimeZone24);
        org.joda.time.YearMonth yearMonth27 = yearMonth17.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.minusYears((int) (short) 0);
        int int40 = yearMonth37.size();
        boolean boolean41 = yearMonth33.isAfter((org.joda.time.ReadablePartial) yearMonth37);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        org.joda.time.YearMonth yearMonth55 = yearMonth50.plusMonths((int) (byte) 10);
        int int56 = property46.compareTo((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.Chronology chronology57 = yearMonth50.getChronology();
        org.joda.time.YearMonth yearMonth58 = yearMonth37.withChronologyRetainFields(chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.YearMonth yearMonth61 = yearMonth58.withPeriodAdded(readablePeriod59, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        int int63 = yearMonth61.indexOf(dateTimeFieldType62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.YearMonth yearMonth67 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology66);
        org.joda.time.YearMonth.Property property68 = yearMonth67.monthOfYear();
        int int69 = property68.getMaximumValue();
        java.lang.String str70 = property68.getAsShortText();
        java.util.Locale locale71 = null;
        java.lang.String str72 = property68.getAsShortText(locale71);
        org.joda.time.YearMonth yearMonth74 = property68.setCopy("October");
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = yearMonth74.toDateTime(readableInstant75);
        org.joda.time.DateTime dateTime77 = yearMonth61.toDateTime(readableInstant75);
        org.joda.time.DateTime dateTime78 = yearMonth17.toDateTime((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime79 = yearMonth8.toDateTime((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.YearMonth yearMonth81 = yearMonth8.minus(readablePeriod80);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 12 + "'", int69 == 12);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Oct" + "'", str70, "Oct");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Oct" + "'", str72, "Oct");
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(yearMonth81);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonth yearMonth29 = yearMonth27.plus(readablePeriod28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonth yearMonth31 = yearMonth27.minus(readablePeriod30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minusYears((int) (short) 0);
        int int44 = yearMonth41.size();
        boolean boolean45 = yearMonth37.isAfter((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        int int60 = property50.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth62 = yearMonth41.withChronologyRetainFields(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.YearMonth yearMonth65 = yearMonth62.withPeriodAdded(readablePeriod63, (int) 'a');
        org.joda.time.YearMonth yearMonth67 = yearMonth62.plusMonths(9);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.YearMonth yearMonth71 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology70);
        org.joda.time.YearMonth.Property property72 = yearMonth71.monthOfYear();
        int int73 = property72.getMaximumValue();
        java.lang.String str74 = property72.getAsShortText();
        java.util.Locale locale75 = null;
        java.lang.String str76 = property72.getAsShortText(locale75);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property72.getFieldType();
        int int78 = yearMonth62.get(dateTimeFieldType77);
        int int79 = yearMonth27.get(dateTimeFieldType77);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.YearMonth yearMonth83 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology82);
        org.joda.time.YearMonth.Property property84 = yearMonth83.monthOfYear();
        org.joda.time.DurationField durationField85 = property84.getDurationField();
        java.util.Locale locale86 = null;
        int int87 = property84.getMaximumShortTextLength(locale86);
        java.lang.String str88 = property84.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = property84.getFieldType();
        boolean boolean90 = yearMonth27.isSupported(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 12 + "'", int73 == 12);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Oct" + "'", str74, "Oct");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Oct" + "'", str76, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "10" + "'", str88, "10");
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.YearMonth yearMonth26 = yearMonth3.withPeriodAdded(readablePeriod24, (int) (byte) -1);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(yearMonth26);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        org.joda.time.YearMonth yearMonth17 = yearMonth5.plusMonths((int) '4');
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        boolean boolean31 = yearMonth23.isAfter((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth.Property property36 = yearMonth35.monthOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        int int43 = yearMonth40.size();
        org.joda.time.YearMonth yearMonth45 = yearMonth40.plusMonths((int) (byte) 10);
        int int46 = property36.compareTo((org.joda.time.ReadablePartial) yearMonth40);
        org.joda.time.Chronology chronology47 = yearMonth40.getChronology();
        org.joda.time.YearMonth yearMonth48 = yearMonth27.withChronologyRetainFields(chronology47);
        org.joda.time.YearMonth yearMonth50 = yearMonth27.withYear((int) (byte) 1);
        int int51 = yearMonth17.compareTo((org.joda.time.ReadablePartial) yearMonth50);
        java.util.Locale locale53 = null;
        java.lang.String str54 = yearMonth50.toString("9", locale53);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "9" + "'", str54, "9");
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth8.withYear((int) (byte) 10);
        int int27 = yearMonth26.size();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonth8.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonth8.toInterval(dateTimeZone26);
        int[] intArray28 = yearMonth8.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = yearMonth8.getFieldType((int) (short) 1);
        org.joda.time.YearMonth yearMonth32 = yearMonth8.minusMonths((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = yearMonth8.getValue(1970);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1970");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[97, 10]");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(yearMonth32);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        java.lang.String str2 = yearMonth1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth12.withYear((int) (byte) 1);
        boolean boolean36 = yearMonth1.isEqual((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.YearMonth.Property property37 = yearMonth1.monthOfYear();
        int int38 = property37.getMaximumValue();
        java.lang.Class<?> wildcardClass39 = property37.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01" + "'", str2, "1970-01");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 12 + "'", int38 == 12);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        boolean boolean14 = yearMonth12.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.YearMonth yearMonth30 = property19.getYearMonth();
        java.lang.String str31 = property19.getAsText();
        org.joda.time.YearMonth yearMonth32 = property19.getYearMonth();
        boolean boolean33 = yearMonth12.isBefore((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.YearMonth yearMonth35 = yearMonth12.minusYears(3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = yearMonth35.getFieldTypes();
        org.joda.time.DurationFieldType durationFieldType37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth39 = yearMonth35.withFieldAdded(durationFieldType37, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "October" + "'", str31, "October");
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = yearMonth27.getFields();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy(100);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.Interval interval36 = yearMonth16.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = yearMonth16.toString(dateTimeFormatter37);
        org.joda.time.YearMonth yearMonth40 = yearMonth16.plusYears(0);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        boolean boolean54 = yearMonth46.isAfter((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth.Property property59 = yearMonth58.monthOfYear();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth yearMonth65 = yearMonth63.minusYears((int) (short) 0);
        int int66 = yearMonth63.size();
        org.joda.time.YearMonth yearMonth68 = yearMonth63.plusMonths((int) (byte) 10);
        int int69 = property59.compareTo((org.joda.time.ReadablePartial) yearMonth63);
        org.joda.time.Chronology chronology70 = yearMonth63.getChronology();
        org.joda.time.YearMonth yearMonth71 = yearMonth50.withChronologyRetainFields(chronology70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.YearMonth yearMonth74 = yearMonth71.withPeriodAdded(readablePeriod72, (int) 'a');
        org.joda.time.YearMonth yearMonth76 = yearMonth71.plusMonths(9);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.YearMonth yearMonth80 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology79);
        org.joda.time.YearMonth.Property property81 = yearMonth80.monthOfYear();
        int int82 = property81.getMaximumValue();
        java.lang.String str83 = property81.getAsShortText();
        java.util.Locale locale84 = null;
        java.lang.String str85 = property81.getAsShortText(locale84);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = property81.getFieldType();
        int int87 = yearMonth71.get(dateTimeFieldType86);
        int int88 = yearMonth16.get(dateTimeFieldType86);
        boolean boolean89 = yearMonth12.isSupported(dateTimeFieldType86);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0097-10" + "'", str38, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 12 + "'", int82 == 12);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Oct" + "'", str83, "Oct");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Oct" + "'", str85, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10 + "'", int87 == 10);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 10 + "'", int88 == 10);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth.Property property28 = yearMonth27.monthOfYear();
        int int29 = property28.getMaximumValue();
        java.lang.String str30 = property28.getAsShortText();
        org.joda.time.YearMonth yearMonth32 = property28.addWrapFieldToCopy((int) (short) -1);
        int[] intArray33 = yearMonth32.getValues();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth.Property property38 = yearMonth37.monthOfYear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        int int48 = property38.compareTo((org.joda.time.ReadablePartial) yearMonth42);
        org.joda.time.Chronology chronology49 = yearMonth42.getChronology();
        org.joda.time.YearMonth yearMonth50 = org.joda.time.YearMonth.now(chronology49);
        org.joda.time.YearMonth yearMonth51 = yearMonth32.withChronologyRetainFields(chronology49);
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth(chronology49);
        boolean boolean53 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth52);
        java.util.Locale locale55 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = yearMonth52.toString("Property[monthOfYear]", locale55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 12 + "'", int29 == 12);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Oct" + "'", str30, "Oct");
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 9]");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property4.getAsShortText(locale16);
        org.joda.time.YearMonth yearMonth18 = property4.getYearMonth();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property4.getAsText(locale19);
        java.lang.String str21 = property4.getAsString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Oct" + "'", str17, "Oct");
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "October" + "'", str20, "October");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "10" + "'", str21, "10");
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth yearMonth9 = yearMonth7.minusYears((int) (short) 0);
        int int10 = yearMonth7.size();
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        boolean boolean27 = yearMonth19.isAfter((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Interval interval28 = yearMonth19.toInterval();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = yearMonth32.indexOf(dateTimeFieldType38);
        org.joda.time.Interval interval40 = yearMonth32.toInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        int int46 = property45.getMaximumValue();
        java.lang.String str47 = property45.getAsShortText();
        java.util.Locale locale48 = null;
        java.lang.String str49 = property45.getAsShortText(locale48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property45.getFieldType();
        int int51 = yearMonth32.get(dateTimeFieldType50);
        org.joda.time.YearMonth.Property property52 = yearMonth19.property(dateTimeFieldType50);
        boolean boolean53 = yearMonth13.isSupported(dateTimeFieldType50);
        org.joda.time.YearMonth yearMonth55 = yearMonth7.withField(dateTimeFieldType50, (int) (short) 10);
        boolean boolean56 = yearMonth3.isBefore((org.joda.time.ReadablePartial) yearMonth7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField58 = yearMonth7.getField((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Oct" + "'", str47, "Oct");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Oct" + "'", str49, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addToCopy((int) (short) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        boolean boolean31 = yearMonth18.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = yearMonth28.toString(dateTimeFormatter32);
        int int34 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth28);
        int int35 = property4.getMinimumValueOverall();
        int int36 = property4.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0097-10" + "'", str33, "0097-10");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth yearMonth17 = yearMonth3.minusMonths(0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth.Property property24 = yearMonth23.monthOfYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        int int31 = yearMonth28.size();
        org.joda.time.YearMonth yearMonth33 = yearMonth28.plusMonths((int) (byte) 10);
        int int34 = property24.compareTo((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.Chronology chronology35 = yearMonth28.getChronology();
        org.joda.time.YearMonth yearMonth36 = org.joda.time.YearMonth.now(chronology35);
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth(100, (int) (short) 1, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth3.withChronologyRetainFields(chronology35);
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3);
        int int40 = yearMonth39.getMonthOfYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth.Property property38 = yearMonth37.monthOfYear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        int int48 = property38.compareTo((org.joda.time.ReadablePartial) yearMonth42);
        org.joda.time.Chronology chronology49 = yearMonth42.getChronology();
        org.joda.time.YearMonth yearMonth50 = org.joda.time.YearMonth.now(chronology49);
        org.joda.time.YearMonth yearMonth51 = yearMonth33.withChronologyRetainFields(chronology49);
        org.joda.time.YearMonth.Property property52 = yearMonth51.year();
        int int53 = property52.getMinimumValue();
        org.joda.time.YearMonth yearMonth54 = property52.getYearMonth();
        int int55 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType57 = yearMonth54.getFieldType((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-292275054) + "'", int53 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology2 = yearMonth1.getChronology();
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((long) 3, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minus(readablePeriod4);
        org.joda.time.ReadablePartial readablePartial6 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = yearMonth3.isBefore(readablePartial6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(yearMonth5);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth.Property property5 = yearMonth4.monthOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        org.joda.time.YearMonth yearMonth14 = yearMonth9.plusMonths((int) (byte) 10);
        int int15 = property5.compareTo((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        boolean boolean22 = yearMonth9.isAfter((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = yearMonth9.indexOf(dateTimeFieldType23);
        int int25 = yearMonth9.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = yearMonth9.getFieldTypes();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.minusYears((int) (short) 0);
        int int40 = yearMonth37.size();
        boolean boolean41 = yearMonth33.isAfter((org.joda.time.ReadablePartial) yearMonth37);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        org.joda.time.YearMonth yearMonth55 = yearMonth50.plusMonths((int) (byte) 10);
        int int56 = property46.compareTo((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.Chronology chronology57 = yearMonth50.getChronology();
        org.joda.time.YearMonth yearMonth58 = yearMonth37.withChronologyRetainFields(chronology57);
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((long) (short) 1, chronology57);
        org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth((java.lang.Object) yearMonth9, chronology57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth((java.lang.Object) "Property[year]", chronology57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Property[year]\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(yearMonth58);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        java.lang.String str28 = yearMonth8.toString();
        org.joda.time.YearMonth yearMonth30 = yearMonth8.plusMonths(100);
        org.joda.time.DurationFieldType durationFieldType31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth33 = yearMonth30.withFieldAdded(durationFieldType31, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0097-09" + "'", str28, "0097-09");
        org.junit.Assert.assertNotNull(yearMonth30);
    }

    @Test
    @Ignore
  public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth(chronology30);
        int int34 = yearMonth33.getMonthOfYear();
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth.Property property5 = yearMonth4.monthOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        org.joda.time.YearMonth yearMonth14 = yearMonth9.plusMonths((int) (byte) 10);
        int int15 = property5.compareTo((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = yearMonth9.getChronology();
        org.joda.time.YearMonth yearMonth17 = org.joda.time.YearMonth.now(chronology16);
        org.joda.time.YearMonth yearMonth18 = org.joda.time.YearMonth.now(chronology16);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((java.lang.Object) "0097-10", chronology16);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(chronology16);
        org.joda.time.YearMonth yearMonth21 = org.joda.time.YearMonth.now(chronology16);
        org.joda.time.YearMonth yearMonth22 = org.joda.time.YearMonth.now(chronology16);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(yearMonth22);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField11 = property4.getField();
        int int12 = property4.getMaximumValue();
        org.joda.time.YearMonth yearMonth14 = property4.setCopy((int) (byte) 10);
        java.util.Locale locale15 = null;
        int int16 = property4.getMaximumTextLength(locale15);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.plusYears((int) '#');
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.withYear((int) (byte) 1);
        boolean boolean45 = yearMonth37.equals((java.lang.Object) yearMonth44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.YearMonth yearMonth48 = yearMonth37.withPeriodAdded(readablePeriod46, 2);
        org.joda.time.YearMonth yearMonth50 = yearMonth37.minusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.Interval interval52 = yearMonth50.toInterval(dateTimeZone51);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(interval52);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology2 = yearMonth1.getChronology();
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((long) 3, chronology2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((java.lang.Object) 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        boolean boolean14 = yearMonth12.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.YearMonth yearMonth30 = property19.getYearMonth();
        java.lang.String str31 = property19.getAsText();
        org.joda.time.YearMonth yearMonth32 = property19.getYearMonth();
        boolean boolean33 = yearMonth12.isBefore((org.joda.time.ReadablePartial) yearMonth32);
        int int35 = yearMonth12.getValue((int) (short) 0);
        java.lang.Class<?> wildcardClass36 = yearMonth12.getClass();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "October" + "'", str31, "October");
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        boolean boolean14 = yearMonth12.equals((java.lang.Object) 1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonth yearMonth16 = yearMonth12.minus(readablePeriod15);
        org.joda.time.YearMonth.Property property17 = yearMonth16.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = yearMonth16.toString(dateTimeFormatter18);
        org.joda.time.DurationFieldType durationFieldType20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth22 = yearMonth16.withFieldAdded(durationFieldType20, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0097-09" + "'", str19, "0097-09");
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property4.getAsShortText(locale11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property4.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property4.getFieldType();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Oct" + "'", str12, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth3.getFieldTypes();
        int[] intArray10 = yearMonth3.getValues();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        int int25 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.Chronology chronology26 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth27 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth28 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3, chronology26);
        org.joda.time.YearMonth yearMonth31 = yearMonth3.plusYears((int) 'a');
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[97, 10]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth31);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth yearMonth15 = yearMonth9.minusYears((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = yearMonth9.getValue(9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 9");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(yearMonth15);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.lang.String str8 = property4.getName();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(9, (int) (byte) 1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth.Property property7 = yearMonth6.monthOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        int int14 = yearMonth11.size();
        org.joda.time.YearMonth yearMonth16 = yearMonth11.plusMonths((int) (byte) 10);
        int int17 = property7.compareTo((org.joda.time.ReadablePartial) yearMonth11);
        org.joda.time.YearMonth yearMonth18 = property7.getYearMonth();
        java.lang.String str19 = property7.getAsText();
        org.joda.time.YearMonth yearMonth20 = property7.getYearMonth();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth.Property property25 = yearMonth24.monthOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth yearMonth31 = yearMonth29.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        int int38 = yearMonth35.size();
        boolean boolean39 = yearMonth31.isAfter((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth.Property property44 = yearMonth43.monthOfYear();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology47);
        org.joda.time.YearMonth yearMonth50 = yearMonth48.minusYears((int) (short) 0);
        int int51 = yearMonth48.size();
        org.joda.time.YearMonth yearMonth53 = yearMonth48.plusMonths((int) (byte) 10);
        int int54 = property44.compareTo((org.joda.time.ReadablePartial) yearMonth48);
        org.joda.time.Chronology chronology55 = yearMonth48.getChronology();
        org.joda.time.YearMonth yearMonth56 = yearMonth35.withChronologyRetainFields(chronology55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.YearMonth yearMonth59 = yearMonth56.withPeriodAdded(readablePeriod57, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        int int61 = yearMonth59.indexOf(dateTimeFieldType60);
        boolean boolean62 = yearMonth24.isEqual((org.joda.time.ReadablePartial) yearMonth59);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth.Property property67 = yearMonth66.monthOfYear();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.YearMonth yearMonth71 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology70);
        org.joda.time.YearMonth yearMonth73 = yearMonth71.minusYears((int) (short) 0);
        int int74 = yearMonth71.size();
        org.joda.time.YearMonth yearMonth76 = yearMonth71.plusMonths((int) (byte) 10);
        int int77 = property67.compareTo((org.joda.time.ReadablePartial) yearMonth71);
        boolean boolean78 = yearMonth24.isEqual((org.joda.time.ReadablePartial) yearMonth71);
        boolean boolean79 = yearMonth20.isAfter((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.YearMonth yearMonth81 = yearMonth20.plusMonths(2);
        org.joda.time.YearMonth yearMonth83 = yearMonth20.minusYears(3);
        boolean boolean84 = yearMonth2.isEqual((org.joda.time.ReadablePartial) yearMonth20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField86 = yearMonth2.getField((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "October" + "'", str19, "October");
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(yearMonth81);
        org.junit.Assert.assertNotNull(yearMonth83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((long) (short) 1, chronology32);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(chronology32);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology32);
        int int38 = yearMonth36.getValue((int) (short) 1);
        int int39 = yearMonth36.getYear();
        org.joda.time.YearMonth.Property property40 = yearMonth36.year();
        int int41 = property40.getMinimumValue();
        int int42 = property40.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-292275054) + "'", int41 == (-292275054));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 292278993 + "'", int42 == 292278993);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        org.joda.time.YearMonth yearMonth13 = property4.addToCopy(3);
        java.lang.String str14 = property4.getAsString();
        org.joda.time.YearMonth yearMonth16 = property4.addToCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((java.lang.Object) property4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.YearMonth$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertNotNull(yearMonth16);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth3.getFieldTypes();
        int[] intArray10 = yearMonth3.getValues();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        int int25 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.Chronology chronology26 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth27 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth28 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3, chronology26);
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth(0L);
        java.lang.String str32 = yearMonth31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        boolean boolean46 = yearMonth38.isAfter((org.joda.time.ReadablePartial) yearMonth42);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth.Property property51 = yearMonth50.monthOfYear();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology54);
        org.joda.time.YearMonth yearMonth57 = yearMonth55.minusYears((int) (short) 0);
        int int58 = yearMonth55.size();
        org.joda.time.YearMonth yearMonth60 = yearMonth55.plusMonths((int) (byte) 10);
        int int61 = property51.compareTo((org.joda.time.ReadablePartial) yearMonth55);
        org.joda.time.Chronology chronology62 = yearMonth55.getChronology();
        org.joda.time.YearMonth yearMonth63 = yearMonth42.withChronologyRetainFields(chronology62);
        org.joda.time.YearMonth yearMonth65 = yearMonth42.withYear((int) (byte) 1);
        boolean boolean66 = yearMonth31.isEqual((org.joda.time.ReadablePartial) yearMonth65);
        boolean boolean67 = yearMonth3.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.YearMonth yearMonth69 = yearMonth3.minusYears((int) (byte) 10);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[97, 10]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01" + "'", str32, "1970-01");
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(yearMonth69);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth.Property property6 = yearMonth5.monthOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        org.joda.time.YearMonth yearMonth15 = yearMonth10.plusMonths((int) (byte) 10);
        int int16 = property6.compareTo((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Interval interval18 = yearMonth10.toInterval(dateTimeZone17);
        org.joda.time.YearMonth yearMonth20 = yearMonth10.minusYears((int) (short) 0);
        java.lang.String str21 = yearMonth10.toString();
        java.lang.String str22 = yearMonth10.toString();
        int int23 = yearMonth1.compareTo((org.joda.time.ReadablePartial) yearMonth10);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0097-10" + "'", str21, "0097-10");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0097-10" + "'", str22, "0097-10");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = yearMonth8.toString(dateTimeFormatter15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Interval interval18 = yearMonth8.toInterval(dateTimeZone17);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0097-10" + "'", str16, "0097-10");
        org.junit.Assert.assertNotNull(interval18);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = yearMonth5.toInterval(dateTimeZone14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType17 = yearMonth5.getFieldType((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval15);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        // The following exception was thrown during execution in test generation
        try {
            int int16 = yearMonth3.getValue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonth8.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonth8.toInterval(dateTimeZone26);
        int[] intArray28 = yearMonth8.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = yearMonth8.getFieldType((int) (short) 1);
        org.joda.time.YearMonth yearMonth32 = yearMonth8.minusMonths((int) (short) -1);
        org.joda.time.Chronology chronology33 = yearMonth32.getChronology();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[97, 10]");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(chronology33);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1970, (-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        int int29 = yearMonth26.size();
        boolean boolean30 = yearMonth22.isAfter((org.joda.time.ReadablePartial) yearMonth26);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth.Property property35 = yearMonth34.monthOfYear();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth yearMonth41 = yearMonth39.minusYears((int) (short) 0);
        int int42 = yearMonth39.size();
        org.joda.time.YearMonth yearMonth44 = yearMonth39.plusMonths((int) (byte) 10);
        int int45 = property35.compareTo((org.joda.time.ReadablePartial) yearMonth39);
        org.joda.time.Chronology chronology46 = yearMonth39.getChronology();
        org.joda.time.YearMonth yearMonth47 = yearMonth26.withChronologyRetainFields(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.YearMonth yearMonth50 = yearMonth47.withPeriodAdded(readablePeriod48, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        int int52 = yearMonth50.indexOf(dateTimeFieldType51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth.Property property57 = yearMonth56.monthOfYear();
        int int58 = property57.getMaximumValue();
        java.lang.String str59 = property57.getAsShortText();
        java.util.Locale locale60 = null;
        java.lang.String str61 = property57.getAsShortText(locale60);
        org.joda.time.YearMonth yearMonth63 = property57.setCopy("October");
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = yearMonth63.toDateTime(readableInstant64);
        org.joda.time.DateTime dateTime66 = yearMonth50.toDateTime(readableInstant64);
        int int67 = property4.compareTo((org.joda.time.ReadableInstant) dateTime66);
        java.util.Locale locale68 = null;
        java.lang.String str69 = property4.getAsShortText(locale68);
        org.joda.time.YearMonth yearMonth70 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.YearMonth yearMonth74 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology73);
        org.joda.time.YearMonth yearMonth76 = yearMonth74.minusYears((int) (short) 0);
        org.joda.time.Interval interval77 = yearMonth74.toInterval();
        org.joda.time.Chronology chronology78 = yearMonth74.getChronology();
        org.joda.time.YearMonth yearMonth79 = yearMonth70.withChronologyRetainFields(chronology78);
        org.joda.time.YearMonth yearMonth80 = new org.joda.time.YearMonth(chronology78);
        org.joda.time.YearMonth yearMonth81 = new org.joda.time.YearMonth(chronology78);
        org.joda.time.YearMonth yearMonth82 = new org.joda.time.YearMonth(chronology78);
        int int83 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth82);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth85 = property4.setCopy((int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 12 + "'", int58 == 12);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Oct" + "'", str59, "Oct");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Oct" + "'", str61, "Oct");
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Oct" + "'", str69, "Oct");
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(yearMonth79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        int int8 = property4.getMaximumValueOverall();
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        org.joda.time.Interval interval16 = yearMonth13.toInterval();
        org.joda.time.Chronology chronology17 = yearMonth13.getChronology();
        org.joda.time.YearMonth yearMonth18 = yearMonth9.withChronologyRetainFields(chronology17);
        boolean boolean19 = property4.equals((java.lang.Object) yearMonth9);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = yearMonth9.toInterval(dateTimeZone20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        int int36 = property26.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth yearMonth42 = yearMonth40.minusYears((int) (short) 0);
        boolean boolean43 = yearMonth30.isAfter((org.joda.time.ReadablePartial) yearMonth40);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        int int45 = yearMonth30.indexOf(dateTimeFieldType44);
        int int46 = yearMonth30.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = yearMonth30.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Interval interval49 = yearMonth30.toInterval(dateTimeZone48);
        int[] intArray50 = yearMonth30.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = yearMonth30.getFieldType((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth54 = yearMonth9.withField(dateTimeFieldType52, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[97, 10]");
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonth yearMonth29 = yearMonth27.plus(readablePeriod28);
        org.joda.time.YearMonth yearMonth31 = yearMonth27.withYear((int) (short) 10);
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth(0L);
        java.lang.String str34 = yearMonth33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth yearMonth40 = yearMonth38.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        int int47 = yearMonth44.size();
        boolean boolean48 = yearMonth40.isAfter((org.joda.time.ReadablePartial) yearMonth44);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology51);
        org.joda.time.YearMonth.Property property53 = yearMonth52.monthOfYear();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.YearMonth yearMonth57 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology56);
        org.joda.time.YearMonth yearMonth59 = yearMonth57.minusYears((int) (short) 0);
        int int60 = yearMonth57.size();
        org.joda.time.YearMonth yearMonth62 = yearMonth57.plusMonths((int) (byte) 10);
        int int63 = property53.compareTo((org.joda.time.ReadablePartial) yearMonth57);
        org.joda.time.Chronology chronology64 = yearMonth57.getChronology();
        org.joda.time.YearMonth yearMonth65 = yearMonth44.withChronologyRetainFields(chronology64);
        org.joda.time.YearMonth yearMonth67 = yearMonth44.withYear((int) (byte) 1);
        boolean boolean68 = yearMonth33.isEqual((org.joda.time.ReadablePartial) yearMonth67);
        boolean boolean69 = yearMonth27.equals((java.lang.Object) yearMonth67);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.Interval interval71 = yearMonth27.toInterval(dateTimeZone70);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01" + "'", str34, "1970-01");
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(interval71);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        boolean boolean28 = yearMonth20.isAfter((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.YearMonth yearMonth30 = yearMonth24.minus(readablePeriod29);
        boolean boolean31 = property4.equals((java.lang.Object) yearMonth24);
        org.joda.time.DurationField durationField32 = property4.getDurationField();
        org.joda.time.YearMonth yearMonth34 = property4.setCopy(3);
        java.lang.String str35 = property4.getAsString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "10" + "'", str35, "10");
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        int int47 = property46.getMinimumValue();
        java.util.Locale locale48 = null;
        int int49 = property46.getMaximumShortTextLength(locale48);
        org.joda.time.YearMonth yearMonth51 = property46.addToCopy((int) (short) 1);
        boolean boolean52 = yearMonth3.equals((java.lang.Object) yearMonth51);
        java.lang.String str53 = yearMonth51.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = yearMonth51.getFieldType(0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0097-11" + "'", str53, "0097-11");
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property4.getAsShortText(locale11);
        org.joda.time.DateTimeField dateTimeField13 = property4.getField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Oct" + "'", str12, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        org.joda.time.YearMonth yearMonth13 = property4.addToCopy(3);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) 'a');
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth15);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField7 = property4.getField();
        org.joda.time.YearMonth yearMonth9 = property4.setCopy("Oct");
        org.joda.time.YearMonth yearMonth11 = property4.addWrapFieldToCopy((int) (byte) -1);
        int int12 = property4.getMaximumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMaximumValue();
        int int10 = property4.getMinimumValueOverall();
        java.lang.String str11 = property4.getAsText();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "October" + "'", str11, "October");
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeField dateTimeField9 = property4.getField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    @Ignore
  public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        int int29 = yearMonth26.size();
        boolean boolean30 = yearMonth22.isAfter((org.joda.time.ReadablePartial) yearMonth26);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth.Property property35 = yearMonth34.monthOfYear();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth yearMonth41 = yearMonth39.minusYears((int) (short) 0);
        int int42 = yearMonth39.size();
        org.joda.time.YearMonth yearMonth44 = yearMonth39.plusMonths((int) (byte) 10);
        int int45 = property35.compareTo((org.joda.time.ReadablePartial) yearMonth39);
        org.joda.time.Chronology chronology46 = yearMonth39.getChronology();
        org.joda.time.YearMonth yearMonth47 = yearMonth26.withChronologyRetainFields(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.YearMonth yearMonth50 = yearMonth47.withPeriodAdded(readablePeriod48, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        int int52 = yearMonth50.indexOf(dateTimeFieldType51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth.Property property57 = yearMonth56.monthOfYear();
        int int58 = property57.getMaximumValue();
        java.lang.String str59 = property57.getAsShortText();
        java.util.Locale locale60 = null;
        java.lang.String str61 = property57.getAsShortText(locale60);
        org.joda.time.YearMonth yearMonth63 = property57.setCopy("October");
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = yearMonth63.toDateTime(readableInstant64);
        org.joda.time.DateTime dateTime66 = yearMonth50.toDateTime(readableInstant64);
        int int67 = property4.compareTo((org.joda.time.ReadableInstant) dateTime66);
        java.util.Locale locale68 = null;
        java.lang.String str69 = property4.getAsShortText(locale68);
        org.joda.time.YearMonth yearMonth70 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.YearMonth yearMonth74 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology73);
        org.joda.time.YearMonth yearMonth76 = yearMonth74.minusYears((int) (short) 0);
        org.joda.time.Interval interval77 = yearMonth74.toInterval();
        org.joda.time.Chronology chronology78 = yearMonth74.getChronology();
        org.joda.time.YearMonth yearMonth79 = yearMonth70.withChronologyRetainFields(chronology78);
        org.joda.time.YearMonth yearMonth80 = new org.joda.time.YearMonth(chronology78);
        org.joda.time.YearMonth yearMonth81 = new org.joda.time.YearMonth(chronology78);
        org.joda.time.YearMonth yearMonth82 = new org.joda.time.YearMonth(chronology78);
        int int83 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth82);
        int int84 = property4.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 12 + "'", int58 == 12);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Oct" + "'", str59, "Oct");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Oct" + "'", str61, "Oct");
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Oct" + "'", str69, "Oct");
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(yearMonth79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 12 + "'", int84 == 12);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = yearMonth18.toString(dateTimeFormatter22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth.Property property28 = yearMonth27.monthOfYear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusMonths((int) (byte) 10);
        int int38 = property28.compareTo((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = yearMonth32.getChronology();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth yearMonth45 = yearMonth43.minusYears((int) (short) 0);
        int int46 = yearMonth43.size();
        org.joda.time.YearMonth yearMonth48 = yearMonth43.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        int int50 = yearMonth43.indexOf(dateTimeFieldType49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth.Property property55 = yearMonth54.monthOfYear();
        int int56 = property55.getMaximumValue();
        java.lang.String str57 = property55.getAsShortText();
        java.util.Locale locale58 = null;
        java.lang.String str59 = property55.getAsShortText(locale58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property55.getFieldType();
        org.joda.time.YearMonth.Property property61 = yearMonth43.property(dateTimeFieldType60);
        org.joda.time.YearMonth.Property property62 = yearMonth32.property(dateTimeFieldType60);
        boolean boolean63 = yearMonth18.equals((java.lang.Object) property62);
        java.lang.String str64 = property62.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth66 = property62.setCopy("0097-10");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0097-10\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0097-10" + "'", str23, "0097-10");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 12 + "'", int56 == 12);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Oct" + "'", str57, "Oct");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Oct" + "'", str59, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "monthOfYear" + "'", str64, "monthOfYear");
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        java.util.Locale locale17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = yearMonth14.toString("monthOfYear", locale17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: o");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.YearMonth yearMonth10 = property4.setCopy("October");
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = yearMonth10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth.Property property17 = yearMonth16.monthOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        int int24 = yearMonth21.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth21.plusMonths((int) (byte) 10);
        int int27 = property17.compareTo((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.Chronology chronology28 = yearMonth21.getChronology();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = yearMonth32.indexOf(dateTimeFieldType38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth.Property property44 = yearMonth43.monthOfYear();
        int int45 = property44.getMaximumValue();
        java.lang.String str46 = property44.getAsShortText();
        java.util.Locale locale47 = null;
        java.lang.String str48 = property44.getAsShortText(locale47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property44.getFieldType();
        org.joda.time.YearMonth.Property property50 = yearMonth32.property(dateTimeFieldType49);
        org.joda.time.YearMonth.Property property51 = yearMonth21.property(dateTimeFieldType49);
        int int52 = yearMonth10.indexOf(dateTimeFieldType49);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.YearMonth yearMonth55 = yearMonth10.withPeriodAdded(readablePeriod53, 10);
        int int56 = yearMonth10.getYear();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 12 + "'", int45 == 12);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Oct" + "'", str46, "Oct");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Oct" + "'", str48, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97 + "'", int56 == 97);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = yearMonth27.getValue(11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.Interval interval26 = yearMonth18.toInterval();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        int int37 = yearMonth18.get(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth5.property(dateTimeFieldType36);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.YearMonth yearMonth40 = yearMonth5.minus(readablePeriod39);
        java.lang.String str42 = yearMonth40.toString("0097-10");
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0097-10" + "'", str42, "0097-10");
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology15 = yearMonth8.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        org.joda.time.YearMonth.Property property37 = yearMonth19.property(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth8.property(dateTimeFieldType36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonth42.indexOf(dateTimeFieldType48);
        org.joda.time.YearMonth yearMonth51 = yearMonth42.plusMonths((-1));
        boolean boolean53 = yearMonth51.equals((java.lang.Object) 1);
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((long) 100);
        boolean boolean56 = yearMonth51.isBefore((org.joda.time.ReadablePartial) yearMonth55);
        int int57 = yearMonth8.compareTo((org.joda.time.ReadablePartial) yearMonth51);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.YearMonth yearMonth60 = yearMonth51.withPeriodAdded(readablePeriod58, (int) (byte) -1);
        int int61 = yearMonth51.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth63 = yearMonth51.withMonthOfYear((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        java.lang.String str20 = yearMonth8.toString("0097-10");
        org.joda.time.YearMonth yearMonth22 = yearMonth8.minusMonths(11);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.YearMonth yearMonth25 = yearMonth8.withPeriodAdded(readablePeriod23, 11);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0097-10" + "'", str20, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth25);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth.Property property6 = yearMonth5.monthOfYear();
        int int7 = property6.getMaximumValue();
        java.lang.String str8 = property6.getAsShortText();
        org.joda.time.YearMonth yearMonth10 = property6.addWrapFieldToCopy((int) (short) -1);
        int[] intArray11 = yearMonth10.getValues();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        org.joda.time.YearMonth yearMonth25 = yearMonth20.plusMonths((int) (byte) 10);
        int int26 = property16.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = yearMonth20.getChronology();
        org.joda.time.YearMonth yearMonth28 = org.joda.time.YearMonth.now(chronology27);
        org.joda.time.YearMonth yearMonth29 = yearMonth10.withChronologyRetainFields(chronology27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) (short) 0, (-1), chronology27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[97, 9]");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth29);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.YearMonth yearMonth4 = yearMonth2.withYear((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.YearMonth yearMonth7 = yearMonth2.withPeriodAdded(readablePeriod5, (int) ' ');
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.YearMonth yearMonth9 = yearMonth2.minus(readablePeriod8);
        org.junit.Assert.assertNotNull(yearMonth4);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(yearMonth9);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        boolean boolean36 = yearMonth28.isAfter((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        int int51 = property41.compareTo((org.joda.time.ReadablePartial) yearMonth45);
        org.joda.time.Chronology chronology52 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth53 = yearMonth32.withChronologyRetainFields(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonth yearMonth56 = yearMonth53.withPeriodAdded(readablePeriod54, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = yearMonth56.indexOf(dateTimeFieldType57);
        boolean boolean59 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology67);
        org.joda.time.YearMonth yearMonth70 = yearMonth68.minusYears((int) (short) 0);
        int int71 = yearMonth68.size();
        org.joda.time.YearMonth yearMonth73 = yearMonth68.plusMonths((int) (byte) 10);
        int int74 = property64.compareTo((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean75 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean76 = yearMonth17.isAfter((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.YearMonth yearMonth78 = yearMonth17.plusMonths(2);
        // The following exception was thrown during execution in test generation
        try {
            int int80 = yearMonth17.getValue(2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(yearMonth78);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.plusYears((int) '#');
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.withYear((int) (byte) 1);
        boolean boolean45 = yearMonth37.equals((java.lang.Object) yearMonth44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType47 = yearMonth44.getFieldType((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        int int15 = property14.getMaximumValue();
        java.util.Locale locale16 = null;
        int int17 = property14.getMaximumShortTextLength(locale16);
        java.util.Locale locale18 = null;
        int int19 = property14.getMaximumTextLength(locale18);
        java.lang.String str20 = property14.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property14.getFieldType();
        boolean boolean22 = property4.equals((java.lang.Object) property14);
        org.joda.time.DurationField durationField23 = property4.getRangeDurationField();
        org.joda.time.YearMonth yearMonth25 = property4.addToCopy((-1));
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(yearMonth25);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        int int8 = yearMonth5.size();
        org.joda.time.YearMonth yearMonth10 = yearMonth5.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = yearMonth5.getFieldTypes();
        int[] intArray12 = yearMonth5.getValues();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth.Property property17 = yearMonth16.monthOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        int int24 = yearMonth21.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth21.plusMonths((int) (byte) 10);
        int int27 = property17.compareTo((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.Chronology chronology28 = yearMonth21.getChronology();
        org.joda.time.YearMonth yearMonth29 = org.joda.time.YearMonth.now(chronology28);
        org.joda.time.YearMonth yearMonth30 = org.joda.time.YearMonth.now(chronology28);
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((java.lang.Object) yearMonth5, chronology28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth(1970, (int) ' ', chronology28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[97, 10]");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth30);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addToCopy((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        int int22 = property21.getMaximumValue();
        java.util.Locale locale23 = null;
        int int24 = property21.getMaximumShortTextLength(locale23);
        java.util.Locale locale25 = null;
        int int26 = property21.getMaximumTextLength(locale25);
        org.joda.time.DurationField durationField27 = property21.getRangeDurationField();
        java.util.Locale locale28 = null;
        java.lang.String str29 = property21.getAsShortText(locale28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property21.getFieldType();
        boolean boolean31 = yearMonth16.isSupported(dateTimeFieldType30);
        boolean boolean32 = property4.equals((java.lang.Object) dateTimeFieldType30);
        org.joda.time.DurationField durationField33 = property4.getDurationField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Oct" + "'", str29, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        int int7 = property4.get();
        java.lang.String str8 = property4.getAsString();
        java.util.Locale locale9 = null;
        int int10 = property4.getMaximumShortTextLength(locale9);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10" + "'", str8, "10");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        java.lang.String str2 = yearMonth1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth12.withYear((int) (byte) 1);
        boolean boolean36 = yearMonth1.isEqual((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = yearMonth1.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth39 = yearMonth1.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01" + "'", str2, "1970-01");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((long) (short) 1, chronology32);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(chronology32);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology32);
        int int38 = yearMonth36.getValue((int) (short) 1);
        int int39 = yearMonth36.getYear();
        org.joda.time.YearMonth.Property property40 = yearMonth36.year();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        int int46 = property45.getMaximumValue();
        java.util.Locale locale47 = null;
        int int48 = property45.getMaximumShortTextLength(locale47);
        java.util.Locale locale49 = null;
        int int50 = property45.getMaximumTextLength(locale49);
        org.joda.time.DurationField durationField51 = property45.getRangeDurationField();
        java.lang.String str52 = property45.toString();
        boolean boolean53 = property40.equals((java.lang.Object) property45);
        java.lang.String str54 = property45.getAsShortText();
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Property[monthOfYear]" + "'", str52, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Oct" + "'", str54, "Oct");
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth.Property property14 = yearMonth9.year();
        org.joda.time.YearMonth.Property property15 = yearMonth9.year();
        int int16 = property15.getMinimumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth18 = property15.setCopy("September");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"September\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-292275054) + "'", int16 == (-292275054));
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) 3);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        java.lang.String str6 = yearMonth3.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        org.joda.time.Interval interval13 = yearMonth10.toInterval();
        org.joda.time.Chronology chronology14 = yearMonth10.getChronology();
        boolean boolean15 = yearMonth3.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        java.lang.String str16 = yearMonth3.toString();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0097-10" + "'", str6, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0097-10" + "'", str16, "0097-10");
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        java.util.Locale locale17 = null;
        int int18 = property15.getMaximumShortTextLength(locale17);
        org.joda.time.DateTimeField dateTimeField19 = property15.getField();
        java.lang.String str20 = property15.getAsShortText();
        int int21 = property15.getMinimumValueOverall();
        java.lang.String str22 = property15.getAsString();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Sep" + "'", str20, "Sep");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "9" + "'", str22, "9");
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth yearMonth17 = yearMonth3.minusMonths(0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth.Property property24 = yearMonth23.monthOfYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        int int31 = yearMonth28.size();
        org.joda.time.YearMonth yearMonth33 = yearMonth28.plusMonths((int) (byte) 10);
        int int34 = property24.compareTo((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.Chronology chronology35 = yearMonth28.getChronology();
        org.joda.time.YearMonth yearMonth36 = org.joda.time.YearMonth.now(chronology35);
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth(100, (int) (short) 1, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth3.withChronologyRetainFields(chronology35);
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.YearMonth yearMonth42 = yearMonth3.withPeriodAdded(readablePeriod40, 1);
        int int43 = yearMonth3.size();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.plusYears((int) '#');
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.withYear((int) (byte) 1);
        boolean boolean45 = yearMonth37.equals((java.lang.Object) yearMonth44);
        int int46 = yearMonth44.size();
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField11 = property4.getField();
        int int12 = property4.getMaximumValue();
        org.joda.time.YearMonth yearMonth14 = property4.setCopy((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property4.getFieldType();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property4.getAsText(locale16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        int int23 = property22.getMaximumValue();
        java.util.Locale locale24 = null;
        int int25 = property22.getMaximumShortTextLength(locale24);
        java.util.Locale locale26 = null;
        int int27 = property22.getMaximumTextLength(locale26);
        java.util.Locale locale28 = null;
        int int29 = property22.getMaximumTextLength(locale28);
        java.lang.String str30 = property22.getAsText();
        boolean boolean31 = property4.equals((java.lang.Object) property22);
        org.joda.time.YearMonth yearMonth32 = property22.getYearMonth();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "October" + "'", str17, "October");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "October" + "'", str30, "October");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(yearMonth32);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DateTimeField dateTimeField10 = property4.getField();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy(100);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(yearMonth12);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.lang.String str8 = property4.getName();
        java.lang.String str9 = property4.getAsShortText();
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Oct" + "'", str9, "Oct");
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        int int7 = yearMonth6.getYear();
        org.joda.time.YearMonth yearMonth9 = yearMonth6.plusMonths(2);
        org.joda.time.Chronology chronology10 = yearMonth6.getChronology();
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((long) (short) 1, chronology10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth13 = yearMonth11.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        int int15 = property4.getMaximumValueOverall();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property4.getAsText(locale16);
        org.joda.time.YearMonth yearMonth18 = property4.getYearMonth();
        org.joda.time.ReadablePartial readablePartial19 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = yearMonth18.isBefore(readablePartial19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "October" + "'", str17, "October");
        org.junit.Assert.assertNotNull(yearMonth18);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.DurationField durationField8 = property4.getDurationField();
        int int9 = property4.getMaximumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        int int15 = property14.getMaximumValue();
        java.util.Locale locale16 = null;
        int int17 = property14.getMaximumShortTextLength(locale16);
        java.util.Locale locale18 = null;
        int int19 = property14.getMaximumTextLength(locale18);
        java.lang.String str20 = property14.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property14.getFieldType();
        boolean boolean22 = property4.equals((java.lang.Object) property14);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth.Property property27 = yearMonth26.monthOfYear();
        int int28 = property27.getMinimumValue();
        java.util.Locale locale29 = null;
        int int30 = property27.getMaximumShortTextLength(locale29);
        org.joda.time.YearMonth yearMonth32 = property27.addToCopy((int) (short) 1);
        java.util.Locale locale33 = null;
        java.lang.String str34 = property27.getAsText(locale33);
        int int35 = property27.getMinimumValue();
        java.lang.String str36 = property27.getAsText();
        java.lang.String str37 = property27.toString();
        boolean boolean38 = property4.equals((java.lang.Object) property27);
        java.lang.String str39 = property4.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "October" + "'", str34, "October");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "October" + "'", str36, "October");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[monthOfYear]" + "'", str37, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Property[monthOfYear]" + "'", str39, "Property[monthOfYear]");
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property4.getFieldType();
        int int12 = property4.getMinimumValue();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property4.getAsText(locale13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth16 = property4.setCopy("0100-10");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0100-10\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "October" + "'", str14, "October");
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        org.joda.time.DurationField durationField12 = property4.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth14 = property4.setCopy("0097-11");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0097-11\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth9.withYear((int) (byte) 1);
        int int33 = yearMonth32.getMonthOfYear();
        org.joda.time.YearMonth.Property property34 = yearMonth32.year();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth.Property property39 = yearMonth38.monthOfYear();
        int int40 = property39.getMinimumValue();
        java.util.Locale locale41 = null;
        int int42 = property39.getMaximumShortTextLength(locale41);
        org.joda.time.YearMonth yearMonth44 = property39.addToCopy((int) (short) 1);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology47);
        org.joda.time.YearMonth.Property property49 = yearMonth48.monthOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology52);
        org.joda.time.YearMonth yearMonth55 = yearMonth53.minusYears((int) (short) 0);
        int int56 = yearMonth53.size();
        org.joda.time.YearMonth yearMonth58 = yearMonth53.plusMonths((int) (byte) 10);
        int int59 = property49.compareTo((org.joda.time.ReadablePartial) yearMonth53);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth yearMonth65 = yearMonth63.minusYears((int) (short) 0);
        boolean boolean66 = yearMonth53.isAfter((org.joda.time.ReadablePartial) yearMonth63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = null;
        java.lang.String str68 = yearMonth63.toString(dateTimeFormatter67);
        int int69 = property39.compareTo((org.joda.time.ReadablePartial) yearMonth63);
        boolean boolean70 = yearMonth32.isEqual((org.joda.time.ReadablePartial) yearMonth63);
        org.joda.time.Interval interval71 = yearMonth32.toInterval();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0097-10" + "'", str68, "0097-10");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(interval71);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property15.getFieldType();
        int int18 = property15.getMaximumValueOverall();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property15.getAsShortText(locale19);
        int int21 = property15.getMinimumValueOverall();
        org.joda.time.YearMonth yearMonth23 = property15.addToCopy((int) (byte) 100);
        java.lang.String str24 = property15.getAsString();
        java.lang.String str25 = property15.getAsShortText();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Sep" + "'", str20, "Sep");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "9" + "'", str24, "9");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Sep" + "'", str25, "Sep");
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth.Property property5 = yearMonth4.monthOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        org.joda.time.YearMonth yearMonth14 = yearMonth9.plusMonths((int) (byte) 10);
        int int15 = property5.compareTo((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth yearMonth16 = property5.getYearMonth();
        java.lang.String str17 = property5.getAsText();
        org.joda.time.YearMonth yearMonth18 = property5.getYearMonth();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        boolean boolean37 = yearMonth29.isAfter((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth.Property property42 = yearMonth41.monthOfYear();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        int int49 = yearMonth46.size();
        org.joda.time.YearMonth yearMonth51 = yearMonth46.plusMonths((int) (byte) 10);
        int int52 = property42.compareTo((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.Chronology chronology53 = yearMonth46.getChronology();
        org.joda.time.YearMonth yearMonth54 = yearMonth33.withChronologyRetainFields(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.YearMonth yearMonth57 = yearMonth54.withPeriodAdded(readablePeriod55, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        int int59 = yearMonth57.indexOf(dateTimeFieldType58);
        boolean boolean60 = yearMonth22.isEqual((org.joda.time.ReadablePartial) yearMonth57);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology63);
        org.joda.time.YearMonth.Property property65 = yearMonth64.monthOfYear();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.YearMonth yearMonth69 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology68);
        org.joda.time.YearMonth yearMonth71 = yearMonth69.minusYears((int) (short) 0);
        int int72 = yearMonth69.size();
        org.joda.time.YearMonth yearMonth74 = yearMonth69.plusMonths((int) (byte) 10);
        int int75 = property65.compareTo((org.joda.time.ReadablePartial) yearMonth69);
        boolean boolean76 = yearMonth22.isEqual((org.joda.time.ReadablePartial) yearMonth69);
        boolean boolean77 = yearMonth18.isAfter((org.joda.time.ReadablePartial) yearMonth22);
        boolean boolean78 = yearMonth0.isEqual((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.YearMonth yearMonth80 = yearMonth0.plus(readablePeriod79);
        org.joda.time.YearMonth yearMonth82 = yearMonth80.minusYears(97);
        org.joda.time.YearMonth yearMonth84 = yearMonth82.minusMonths((int) '4');
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "October" + "'", str17, "October");
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertNotNull(yearMonth82);
        org.junit.Assert.assertNotNull(yearMonth84);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = yearMonth8.getFields();
        org.joda.time.YearMonth yearMonth11 = yearMonth8.plusYears((int) (byte) 1);
        org.joda.time.Interval interval12 = yearMonth8.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((java.lang.Object) interval12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Interval");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(interval12);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        java.lang.String str6 = yearMonth3.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        org.joda.time.Interval interval13 = yearMonth10.toInterval();
        org.joda.time.Chronology chronology14 = yearMonth10.getChronology();
        boolean boolean15 = yearMonth3.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        int int17 = yearMonth3.getValue((int) (short) 0);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0097-10" + "'", str6, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth yearMonth17 = yearMonth3.minusMonths(0);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        boolean boolean36 = yearMonth28.isAfter((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        int int51 = property41.compareTo((org.joda.time.ReadablePartial) yearMonth45);
        org.joda.time.Chronology chronology52 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth53 = yearMonth32.withChronologyRetainFields(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonth yearMonth56 = yearMonth53.withPeriodAdded(readablePeriod54, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = yearMonth56.indexOf(dateTimeFieldType57);
        boolean boolean59 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        int int65 = property64.getMinimumValue();
        java.util.Locale locale66 = null;
        int int67 = property64.getMaximumShortTextLength(locale66);
        org.joda.time.YearMonth yearMonth69 = property64.addToCopy((int) (short) 1);
        boolean boolean70 = yearMonth21.equals((java.lang.Object) yearMonth69);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.YearMonth yearMonth74 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology73);
        org.joda.time.YearMonth yearMonth76 = yearMonth74.minusYears((int) (short) 0);
        int int77 = yearMonth74.size();
        org.joda.time.YearMonth yearMonth79 = yearMonth74.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        int int81 = yearMonth74.indexOf(dateTimeFieldType80);
        int int82 = yearMonth74.getYear();
        boolean boolean83 = yearMonth69.isBefore((org.joda.time.ReadablePartial) yearMonth74);
        org.joda.time.DateTimeField[] dateTimeFieldArray84 = yearMonth74.getFields();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = null;
        java.lang.String str86 = yearMonth74.toString(dateTimeFormatter85);
        boolean boolean87 = yearMonth17.isBefore((org.joda.time.ReadablePartial) yearMonth74);
        java.util.Locale locale89 = null;
        java.lang.String str90 = yearMonth74.toString("10", locale89);
        org.joda.time.YearMonth yearMonth92 = yearMonth74.minusMonths((int) (byte) 100);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(yearMonth79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0097-10" + "'", str86, "0097-10");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "10" + "'", str90, "10");
        org.junit.Assert.assertNotNull(yearMonth92);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        org.joda.time.YearMonth yearMonth55 = yearMonth50.plusMonths((int) (byte) 10);
        int int56 = property46.compareTo((org.joda.time.ReadablePartial) yearMonth50);
        boolean boolean57 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth50);
        int int58 = yearMonth50.getMonthOfYear();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property15.getFieldType();
        int int18 = property15.getMaximumValueOverall();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property15.getAsShortText(locale19);
        int int21 = property15.getMinimumValueOverall();
        org.joda.time.YearMonth yearMonth23 = property15.addToCopy((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth25 = property15.setCopy((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Sep" + "'", str20, "Sep");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(yearMonth23);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.YearMonth yearMonth28 = yearMonth3.withPeriodAdded(readablePeriod26, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.YearMonth yearMonth30 = yearMonth3.plus(readablePeriod29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate32 = yearMonth3.toLocalDate((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth30);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonth yearMonth33 = yearMonth30.withPeriodAdded(readablePeriod31, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = yearMonth33.indexOf(dateTimeFieldType34);
        org.joda.time.Chronology chronology36 = yearMonth33.getChronology();
        java.lang.String str37 = yearMonth33.toString();
        int[] intArray38 = yearMonth33.getValues();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0097-10" + "'", str37, "0097-10");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97, 10]");
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonth yearMonth16 = yearMonth14.plus(readablePeriod15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = yearMonth16.getFieldTypes();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        int int8 = property4.getMaximumValueOverall();
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        org.joda.time.Interval interval16 = yearMonth13.toInterval();
        org.joda.time.Chronology chronology17 = yearMonth13.getChronology();
        org.joda.time.YearMonth yearMonth18 = yearMonth9.withChronologyRetainFields(chronology17);
        boolean boolean19 = property4.equals((java.lang.Object) yearMonth9);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = yearMonth9.toInterval(dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.YearMonth yearMonth23 = yearMonth9.plus(readablePeriod22);
        org.joda.time.YearMonth.Property property24 = yearMonth23.year();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addToCopy((int) (short) 10);
        int[] intArray13 = yearMonth12.getValues();
        int[] intArray14 = yearMonth12.getValues();
        int int15 = yearMonth12.size();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[98, 8]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[98, 8]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        boolean boolean28 = yearMonth20.isAfter((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.YearMonth yearMonth30 = yearMonth24.minus(readablePeriod29);
        boolean boolean31 = property4.equals((java.lang.Object) yearMonth24);
        org.joda.time.DurationField durationField32 = property4.getDurationField();
        org.joda.time.YearMonth yearMonth34 = property4.addToCopy(0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(yearMonth34);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property4.getAsShortText(locale16);
        java.util.Locale locale19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth20 = property4.setCopy("0097-11", locale19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0097-11\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Oct" + "'", str17, "Oct");
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.plusYears((int) '#');
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.withYear((int) (byte) 1);
        boolean boolean45 = yearMonth37.equals((java.lang.Object) yearMonth44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.YearMonth yearMonth48 = yearMonth37.withPeriodAdded(readablePeriod46, 2);
        int int49 = yearMonth37.getYear();
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1980 + "'", int49 == 1980);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.DurationField durationField8 = property4.getDurationField();
        java.util.Locale locale9 = null;
        int int10 = property4.getMaximumShortTextLength(locale9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth12 = property4.setCopy((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology1 = yearMonth0.getChronology();
        org.joda.time.YearMonth yearMonth3 = yearMonth0.withMonthOfYear((int) (short) 1);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property4.getAsShortText(locale5);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(yearMonth3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Jan" + "'", str6, "Jan");
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth24 = yearMonth3.withMonthOfYear((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMaximumValue();
        int int10 = property4.getMinimumValueOverall();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property4.getAsText(locale11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth.Property property17 = yearMonth16.monthOfYear();
        int int18 = property17.getMaximumValue();
        java.lang.String str19 = property17.getAsShortText();
        org.joda.time.DateTimeField dateTimeField20 = property17.getField();
        org.joda.time.YearMonth yearMonth22 = property17.setCopy("Oct");
        int int23 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth.Property property28 = yearMonth27.monthOfYear();
        int int29 = property28.getMaximumValue();
        java.lang.String str30 = property28.getAsShortText();
        org.joda.time.YearMonth yearMonth32 = property28.addWrapFieldToCopy((int) (short) -1);
        int[] intArray33 = yearMonth32.getValues();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth.Property property38 = yearMonth37.monthOfYear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        int int48 = property38.compareTo((org.joda.time.ReadablePartial) yearMonth42);
        org.joda.time.Chronology chronology49 = yearMonth42.getChronology();
        org.joda.time.YearMonth yearMonth50 = org.joda.time.YearMonth.now(chronology49);
        org.joda.time.YearMonth yearMonth51 = yearMonth32.withChronologyRetainFields(chronology49);
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth(chronology49);
        org.joda.time.YearMonth yearMonth53 = yearMonth22.withChronologyRetainFields(chronology49);
        org.joda.time.Interval interval54 = yearMonth22.toInterval();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "October" + "'", str12, "October");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Oct" + "'", str19, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 12 + "'", int29 == 12);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Oct" + "'", str30, "Oct");
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[97, 9]");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(interval54);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        int int7 = yearMonth4.size();
        org.joda.time.YearMonth yearMonth9 = yearMonth4.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = yearMonth4.indexOf(dateTimeFieldType10);
        org.joda.time.YearMonth yearMonth13 = yearMonth4.plusMonths((-1));
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        org.joda.time.YearMonth yearMonth22 = yearMonth17.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = yearMonth17.indexOf(dateTimeFieldType23);
        org.joda.time.Interval interval25 = yearMonth17.toInterval();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth.Property property30 = yearMonth29.monthOfYear();
        int int31 = property30.getMaximumValue();
        java.lang.String str32 = property30.getAsShortText();
        java.util.Locale locale33 = null;
        java.lang.String str34 = property30.getAsShortText(locale33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property30.getFieldType();
        int int36 = yearMonth17.get(dateTimeFieldType35);
        org.joda.time.YearMonth.Property property37 = yearMonth4.property(dateTimeFieldType35);
        org.joda.time.Chronology chronology38 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth(chronology38);
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        org.joda.time.Interval interval47 = yearMonth44.toInterval();
        org.joda.time.Chronology chronology48 = yearMonth44.getChronology();
        org.joda.time.YearMonth yearMonth49 = yearMonth40.withChronologyRetainFields(chronology48);
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth(chronology48);
        org.joda.time.YearMonth yearMonth51 = yearMonth39.withChronologyRetainFields(chronology48);
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((long) (short) 10, chronology48);
        int int53 = yearMonth52.getYear();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonth yearMonth56 = yearMonth52.withPeriodAdded(readablePeriod54, 1);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 12 + "'", int31 == 12);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Oct" + "'", str32, "Oct");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Oct" + "'", str34, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(yearMonth56);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property4.getFieldType();
        int int12 = property4.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonth yearMonth29 = yearMonth27.plus(readablePeriod28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.YearMonth yearMonth31 = yearMonth27.minus(readablePeriod30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate33 = yearMonth31.toLocalDate(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth31);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.Chronology chronology8 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth9 = yearMonth0.withChronologyRetainFields(chronology8);
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.YearMonth yearMonth12 = org.joda.time.YearMonth.now(chronology8);
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth(chronology8);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = yearMonth13.getFields();
        java.lang.Class<?> wildcardClass15 = yearMonth13.getClass();
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth.Property property10 = yearMonth9.monthOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        org.joda.time.YearMonth yearMonth19 = yearMonth14.plusMonths((int) (byte) 10);
        int int20 = property10.compareTo((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = yearMonth14.getChronology();
        org.joda.time.YearMonth yearMonth22 = org.joda.time.YearMonth.now(chronology21);
        org.joda.time.YearMonth yearMonth23 = yearMonth5.withChronologyRetainFields(chronology21);
        org.joda.time.YearMonth.Property property24 = yearMonth23.year();
        int int25 = property24.getMinimumValue();
        org.joda.time.YearMonth yearMonth26 = property24.getYearMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth28 = yearMonth26.withMonthOfYear((-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-292275054) + "'", int25 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonth26);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        boolean boolean28 = yearMonth20.isAfter((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.YearMonth yearMonth30 = yearMonth24.minus(readablePeriod29);
        boolean boolean31 = property4.equals((java.lang.Object) yearMonth24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType33 = yearMonth24.getFieldType(9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 9");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        int[] intArray16 = yearMonth5.getValues();
        org.joda.time.YearMonth yearMonth18 = yearMonth5.minusMonths(2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = yearMonth18.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.YearMonth yearMonth22 = yearMonth18.withPeriodAdded(readablePeriod20, 9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField24 = yearMonth18.getField(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[97, 10]");
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(yearMonth22);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth3.getFieldTypes();
        int[] intArray10 = yearMonth3.getValues();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        int int25 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.Chronology chronology26 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth27 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth28 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3, chronology26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = yearMonth29.toString("Jan");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: J");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[97, 10]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Interval interval6 = yearMonth3.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth3.getFieldTypes();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        boolean boolean21 = yearMonth13.isAfter((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        int int36 = property26.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.Chronology chronology37 = yearMonth30.getChronology();
        org.joda.time.YearMonth yearMonth38 = yearMonth17.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth39 = yearMonth3.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth41 = yearMonth3.minusYears(3);
        java.util.Locale locale43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = yearMonth41.toString("Oct", locale43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: O");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth yearMonth17 = yearMonth15.minusYears((int) (short) 0);
        int int18 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth17);
        java.lang.String str19 = yearMonth17.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0097-10" + "'", str19, "0097-10");
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property4.getFieldType();
        org.joda.time.YearMonth yearMonth14 = property4.addWrapFieldToCopy((int) (short) 0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(yearMonth14);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.YearMonth yearMonth8 = property4.addToCopy((int) (short) 0);
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology11 = yearMonth10.getChronology();
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((long) 3, chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = yearMonth12.getFieldType((int) (short) 1);
        int int15 = yearMonth8.indexOf(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        boolean boolean21 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth8.indexOf(dateTimeFieldType22);
        int int24 = yearMonth8.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonth8.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonth8.toInterval(dateTimeZone26);
        int[] intArray28 = yearMonth8.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = yearMonth8.getFieldType((int) (short) 1);
        org.joda.time.YearMonth yearMonth32 = yearMonth8.minusMonths((int) (short) -1);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.plusYears((int) (byte) 1);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth yearMonth41 = yearMonth39.minusYears((int) (short) 0);
        org.joda.time.Interval interval42 = yearMonth39.toInterval();
        org.joda.time.Chronology chronology43 = yearMonth39.getChronology();
        org.joda.time.YearMonth yearMonth44 = yearMonth35.withChronologyRetainFields(chronology43);
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth(chronology43);
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth(chronology43);
        org.joda.time.YearMonth yearMonth47 = org.joda.time.YearMonth.now(chronology43);
        org.joda.time.YearMonth yearMonth49 = yearMonth47.plusMonths(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = yearMonth47.getFieldType(0);
        boolean boolean52 = yearMonth32.equals((java.lang.Object) 0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[97, 10]");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.plusYears((int) '#');
        org.joda.time.YearMonth.Property property40 = yearMonth39.monthOfYear();
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) (byte) 1, 9);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology46);
        org.joda.time.YearMonth yearMonth49 = yearMonth47.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology52);
        org.joda.time.YearMonth yearMonth55 = yearMonth53.minusYears((int) (short) 0);
        int int56 = yearMonth53.size();
        boolean boolean57 = yearMonth49.isAfter((org.joda.time.ReadablePartial) yearMonth53);
        org.joda.time.YearMonth.Property property58 = yearMonth53.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property58.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property58.getFieldType();
        int int61 = yearMonth43.indexOf(dateTimeFieldType60);
        boolean boolean62 = yearMonth39.isSupported(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = yearMonth1.toInterval(dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.YearMonth yearMonth5 = yearMonth1.minus(readablePeriod4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.YearMonth yearMonth7 = yearMonth1.plus(readablePeriod6);
        int int9 = yearMonth7.getValue(0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        boolean boolean23 = yearMonth15.isAfter((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth.Property property28 = yearMonth27.monthOfYear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusMonths((int) (byte) 10);
        int int38 = property28.compareTo((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = yearMonth32.getChronology();
        org.joda.time.YearMonth yearMonth40 = yearMonth19.withChronologyRetainFields(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.YearMonth yearMonth43 = yearMonth40.withPeriodAdded(readablePeriod41, (int) 'a');
        org.joda.time.YearMonth yearMonth45 = yearMonth40.plusMonths(9);
        int int46 = yearMonth40.getYear();
        boolean boolean47 = yearMonth7.isEqual((org.joda.time.ReadablePartial) yearMonth40);
        int int48 = yearMonth7.getMonthOfYear();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        java.util.Locale locale6 = null;
        java.lang.String str7 = property4.getAsShortText(locale6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth9 = property4.setCopy(1980);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1980 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Oct" + "'", str7, "Oct");
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        java.lang.String str11 = property4.toString();
        org.joda.time.YearMonth yearMonth12 = property4.getYearMonth();
        java.util.Locale locale14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = yearMonth12.toString("monthOfYear", locale14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: o");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonth12);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        boolean boolean14 = yearMonth12.equals((java.lang.Object) 1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.YearMonth yearMonth16 = yearMonth12.minus(readablePeriod15);
        org.joda.time.YearMonth.Property property17 = yearMonth16.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        int int29 = yearMonth22.indexOf(dateTimeFieldType28);
        org.joda.time.YearMonth yearMonth31 = yearMonth22.plusMonths((-1));
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        int int38 = yearMonth35.size();
        org.joda.time.YearMonth yearMonth40 = yearMonth35.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        int int42 = yearMonth35.indexOf(dateTimeFieldType41);
        org.joda.time.Interval interval43 = yearMonth35.toInterval();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology46);
        org.joda.time.YearMonth.Property property48 = yearMonth47.monthOfYear();
        int int49 = property48.getMaximumValue();
        java.lang.String str50 = property48.getAsShortText();
        java.util.Locale locale51 = null;
        java.lang.String str52 = property48.getAsShortText(locale51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property48.getFieldType();
        int int54 = yearMonth35.get(dateTimeFieldType53);
        org.joda.time.YearMonth.Property property55 = yearMonth22.property(dateTimeFieldType53);
        org.joda.time.Chronology chronology56 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth57 = new org.joda.time.YearMonth(chronology56);
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology61);
        org.joda.time.YearMonth yearMonth64 = yearMonth62.minusYears((int) (short) 0);
        org.joda.time.Interval interval65 = yearMonth62.toInterval();
        org.joda.time.Chronology chronology66 = yearMonth62.getChronology();
        org.joda.time.YearMonth yearMonth67 = yearMonth58.withChronologyRetainFields(chronology66);
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth(chronology66);
        org.joda.time.YearMonth yearMonth69 = yearMonth57.withChronologyRetainFields(chronology66);
        org.joda.time.YearMonth yearMonth70 = new org.joda.time.YearMonth((long) (short) 10, chronology66);
        org.joda.time.YearMonth yearMonth71 = yearMonth16.withChronologyRetainFields(chronology66);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = yearMonth16.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 12 + "'", int49 == 12);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Oct" + "'", str50, "Oct");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Oct" + "'", str52, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertNotNull(yearMonth71);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        boolean boolean36 = yearMonth28.isAfter((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        int int51 = property41.compareTo((org.joda.time.ReadablePartial) yearMonth45);
        org.joda.time.Chronology chronology52 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth53 = yearMonth32.withChronologyRetainFields(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonth yearMonth56 = yearMonth53.withPeriodAdded(readablePeriod54, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = yearMonth56.indexOf(dateTimeFieldType57);
        boolean boolean59 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology67);
        org.joda.time.YearMonth yearMonth70 = yearMonth68.minusYears((int) (short) 0);
        int int71 = yearMonth68.size();
        org.joda.time.YearMonth yearMonth73 = yearMonth68.plusMonths((int) (byte) 10);
        int int74 = property64.compareTo((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean75 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean76 = yearMonth17.isAfter((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.YearMonth yearMonth79 = yearMonth21.withPeriodAdded(readablePeriod77, 12);
        int[] intArray80 = yearMonth21.getValues();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(yearMonth79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 10]");
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.YearMonth yearMonth27 = yearMonth3.plusYears(0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth.Property property32 = yearMonth31.monthOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        int int39 = yearMonth36.size();
        org.joda.time.YearMonth yearMonth41 = yearMonth36.plusMonths((int) (byte) 10);
        int int42 = property32.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth yearMonth48 = yearMonth46.minusYears((int) (short) 0);
        boolean boolean49 = yearMonth36.isAfter((org.joda.time.ReadablePartial) yearMonth46);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = yearMonth36.indexOf(dateTimeFieldType50);
        int int52 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth36);
        org.joda.time.YearMonth yearMonth54 = yearMonth36.minusYears(11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField56 = yearMonth54.getField((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(yearMonth48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(yearMonth54);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((long) (short) 1, chronology32);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(chronology32);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology32);
        int int38 = yearMonth36.getValue((int) (short) 1);
        int int39 = yearMonth36.getYear();
        org.joda.time.YearMonth.Property property40 = yearMonth36.year();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        int int46 = property45.getMaximumValue();
        java.util.Locale locale47 = null;
        int int48 = property45.getMaximumShortTextLength(locale47);
        java.util.Locale locale49 = null;
        int int50 = property45.getMaximumTextLength(locale49);
        org.joda.time.DurationField durationField51 = property45.getRangeDurationField();
        java.lang.String str52 = property45.toString();
        boolean boolean53 = property40.equals((java.lang.Object) property45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((java.lang.Object) property40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.YearMonth$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Property[monthOfYear]" + "'", str52, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth16 = yearMonth8.plusYears((int) (byte) 10);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((java.lang.Object) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Short");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth18);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        boolean boolean24 = yearMonth16.isAfter((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        int int39 = property29.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = yearMonth33.getChronology();
        org.joda.time.YearMonth yearMonth41 = yearMonth20.withChronologyRetainFields(chronology40);
        int int42 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.YearMonth yearMonth44 = yearMonth3.minusYears(10);
        org.joda.time.DurationFieldType durationFieldType45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth47 = yearMonth44.withFieldAdded(durationFieldType45, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(yearMonth44);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.plusYears((int) '#');
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.withYear((int) (byte) 1);
        boolean boolean45 = yearMonth37.equals((java.lang.Object) yearMonth44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((java.lang.Object) boolean45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy(100);
        java.lang.String str13 = property4.getAsString();
        int int14 = property4.getMaximumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "10" + "'", str13, "10");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        int int8 = yearMonth5.size();
        org.joda.time.YearMonth yearMonth10 = yearMonth5.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = yearMonth5.indexOf(dateTimeFieldType11);
        org.joda.time.YearMonth yearMonth14 = yearMonth5.plusMonths((-1));
        org.joda.time.YearMonth yearMonth16 = yearMonth5.plusMonths((-1));
        org.joda.time.YearMonth.Property property17 = yearMonth16.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonth yearMonth20 = yearMonth16.withPeriodAdded(readablePeriod18, (int) (byte) 10);
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.Chronology chronology23 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth(chronology23);
        org.joda.time.YearMonth yearMonth25 = yearMonth20.withChronologyRetainFields(chronology23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) (byte) 10, (int) (byte) -1, chronology23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonth25);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.toString();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property4.getAsText(locale12);
        int int14 = property4.getMaximumValue();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.YearMonth yearMonth30 = property19.getYearMonth();
        int int31 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "October" + "'", str13, "October");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.getMaximumValueOverall();
        java.util.Locale locale12 = null;
        int int13 = property4.getMaximumTextLength(locale12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth15 = property4.setCopy((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Interval interval6 = yearMonth3.toInterval();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.minusMonths((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = yearMonth3.toInterval(dateTimeZone9);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(interval10);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        int int10 = property4.getMinimumValue();
        java.lang.String str11 = property4.getName();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        org.joda.time.YearMonth yearMonth25 = yearMonth20.plusMonths((int) (byte) 10);
        int int26 = property16.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = yearMonth20.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((java.lang.Object) str11, chronology27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"monthOfYear\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "monthOfYear" + "'", str11, "monthOfYear");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        java.lang.String str19 = yearMonth8.toString();
        org.joda.time.YearMonth yearMonth21 = yearMonth8.withMonthOfYear(11);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        int int23 = yearMonth21.getMonthOfYear();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0097-10" + "'", str19, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 11 + "'", int23 == 11);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        boolean boolean36 = yearMonth28.isAfter((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        int int51 = property41.compareTo((org.joda.time.ReadablePartial) yearMonth45);
        org.joda.time.Chronology chronology52 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth53 = yearMonth32.withChronologyRetainFields(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonth yearMonth56 = yearMonth53.withPeriodAdded(readablePeriod54, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = yearMonth56.indexOf(dateTimeFieldType57);
        boolean boolean59 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology67);
        org.joda.time.YearMonth yearMonth70 = yearMonth68.minusYears((int) (short) 0);
        int int71 = yearMonth68.size();
        org.joda.time.YearMonth yearMonth73 = yearMonth68.plusMonths((int) (byte) 10);
        int int74 = property64.compareTo((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean75 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean76 = yearMonth17.isAfter((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.YearMonth yearMonth79 = yearMonth21.withPeriodAdded(readablePeriod77, 12);
        int int80 = yearMonth79.getMonthOfYear();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.YearMonth yearMonth84 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology83);
        org.joda.time.YearMonth.Property property85 = yearMonth84.monthOfYear();
        int int86 = property85.getMaximumValue();
        java.lang.String str87 = property85.getAsString();
        java.util.Locale locale89 = null;
        org.joda.time.YearMonth yearMonth90 = property85.setCopy("Sep", locale89);
        java.lang.String str91 = property85.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = property85.getFieldType();
        int int93 = yearMonth79.get(dateTimeFieldType92);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(yearMonth79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 12 + "'", int86 == 12);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "10" + "'", str87, "10");
        org.junit.Assert.assertNotNull(yearMonth90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "monthOfYear" + "'", str91, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10 + "'", int93 == 10);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonth yearMonth33 = yearMonth30.withPeriodAdded(readablePeriod31, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = yearMonth33.indexOf(dateTimeFieldType34);
        org.joda.time.Chronology chronology36 = yearMonth33.getChronology();
        java.lang.String str37 = yearMonth33.toString();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Interval interval39 = yearMonth33.toInterval(dateTimeZone38);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0097-10" + "'", str37, "0097-10");
        org.junit.Assert.assertNotNull(interval39);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.YearMonth yearMonth8 = property4.addToCopy((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        int int10 = property4.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.parse("0097-12", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        java.lang.String str6 = yearMonth3.toString();
        java.lang.String str7 = yearMonth3.toString();
        org.joda.time.YearMonth yearMonth9 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        int int16 = yearMonth13.size();
        org.joda.time.YearMonth yearMonth18 = yearMonth13.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonth13.indexOf(dateTimeFieldType19);
        org.joda.time.YearMonth yearMonth22 = yearMonth13.plusMonths((-1));
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        int int29 = yearMonth26.size();
        org.joda.time.YearMonth yearMonth31 = yearMonth26.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = yearMonth26.indexOf(dateTimeFieldType32);
        org.joda.time.Interval interval34 = yearMonth26.toInterval();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth.Property property39 = yearMonth38.monthOfYear();
        int int40 = property39.getMaximumValue();
        java.lang.String str41 = property39.getAsShortText();
        java.util.Locale locale42 = null;
        java.lang.String str43 = property39.getAsShortText(locale42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property39.getFieldType();
        int int45 = yearMonth26.get(dateTimeFieldType44);
        org.joda.time.YearMonth.Property property46 = yearMonth13.property(dateTimeFieldType44);
        org.joda.time.Chronology chronology47 = yearMonth13.getChronology();
        int int49 = yearMonth13.getValue(0);
        org.joda.time.Interval interval50 = yearMonth13.toInterval();
        boolean boolean51 = yearMonth9.equals((java.lang.Object) yearMonth13);
        int int52 = yearMonth13.size();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0097-10" + "'", str6, "0097-10");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0097-10" + "'", str7, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 12 + "'", int40 == 12);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Oct" + "'", str41, "Oct");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Oct" + "'", str43, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        int int47 = property46.getMinimumValue();
        java.util.Locale locale48 = null;
        int int49 = property46.getMaximumShortTextLength(locale48);
        org.joda.time.YearMonth yearMonth51 = property46.addToCopy((int) (short) 1);
        boolean boolean52 = yearMonth3.equals((java.lang.Object) yearMonth51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        int int59 = yearMonth56.size();
        org.joda.time.YearMonth yearMonth61 = yearMonth56.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        int int63 = yearMonth56.indexOf(dateTimeFieldType62);
        int int64 = yearMonth56.getYear();
        boolean boolean65 = yearMonth51.isBefore((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.YearMonth yearMonth67 = yearMonth56.minus(readablePeriod66);
        org.joda.time.YearMonth yearMonth70 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.YearMonth yearMonth72 = yearMonth70.withYear((int) (byte) 1);
        boolean boolean73 = yearMonth67.equals((java.lang.Object) yearMonth72);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate75 = yearMonth67.toLocalDate((int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(yearMonth72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy(100);
        int int13 = yearMonth12.getMonthOfYear();
        org.joda.time.YearMonth.Property property14 = yearMonth12.year();
        org.joda.time.YearMonth yearMonth16 = property14.setCopy((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property14.getFieldType();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth.Property property7 = yearMonth6.monthOfYear();
        int int8 = property7.getMaximumValue();
        java.util.Locale locale9 = null;
        int int10 = property7.getMaximumShortTextLength(locale9);
        java.util.Locale locale11 = null;
        int int12 = property7.getMaximumTextLength(locale11);
        java.lang.String str13 = property7.getName();
        org.joda.time.YearMonth yearMonth15 = property7.addWrapFieldToCopy(100);
        int int16 = yearMonth15.getMonthOfYear();
        org.joda.time.YearMonth.Property property17 = yearMonth15.year();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        int int24 = yearMonth21.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth21.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        int int28 = yearMonth21.indexOf(dateTimeFieldType27);
        org.joda.time.YearMonth yearMonth30 = yearMonth21.plusMonths((-1));
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        int int37 = yearMonth34.size();
        org.joda.time.YearMonth yearMonth39 = yearMonth34.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        int int41 = yearMonth34.indexOf(dateTimeFieldType40);
        org.joda.time.Interval interval42 = yearMonth34.toInterval();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        int int48 = property47.getMaximumValue();
        java.lang.String str49 = property47.getAsShortText();
        java.util.Locale locale50 = null;
        java.lang.String str51 = property47.getAsShortText(locale50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property47.getFieldType();
        int int53 = yearMonth34.get(dateTimeFieldType52);
        org.joda.time.YearMonth.Property property54 = yearMonth21.property(dateTimeFieldType52);
        org.joda.time.Chronology chronology55 = yearMonth21.getChronology();
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth(chronology55);
        org.joda.time.YearMonth yearMonth57 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology60);
        org.joda.time.YearMonth yearMonth63 = yearMonth61.minusYears((int) (short) 0);
        org.joda.time.Interval interval64 = yearMonth61.toInterval();
        org.joda.time.Chronology chronology65 = yearMonth61.getChronology();
        org.joda.time.YearMonth yearMonth66 = yearMonth57.withChronologyRetainFields(chronology65);
        org.joda.time.YearMonth yearMonth67 = new org.joda.time.YearMonth(chronology65);
        org.joda.time.YearMonth yearMonth68 = yearMonth56.withChronologyRetainFields(chronology65);
        org.joda.time.YearMonth yearMonth69 = yearMonth15.withChronologyRetainFields(chronology65);
        org.joda.time.YearMonth yearMonth70 = new org.joda.time.YearMonth((long) 12, chronology65);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth71 = new org.joda.time.YearMonth(11, 292278993, chronology65);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 12 + "'", int48 == 12);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Oct" + "'", str49, "Oct");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Oct" + "'", str51, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertNotNull(yearMonth69);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        boolean boolean36 = yearMonth28.isAfter((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        int int51 = property41.compareTo((org.joda.time.ReadablePartial) yearMonth45);
        org.joda.time.Chronology chronology52 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth53 = yearMonth32.withChronologyRetainFields(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonth yearMonth56 = yearMonth53.withPeriodAdded(readablePeriod54, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = yearMonth56.indexOf(dateTimeFieldType57);
        boolean boolean59 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology67);
        org.joda.time.YearMonth yearMonth70 = yearMonth68.minusYears((int) (short) 0);
        int int71 = yearMonth68.size();
        org.joda.time.YearMonth yearMonth73 = yearMonth68.plusMonths((int) (byte) 10);
        int int74 = property64.compareTo((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean75 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean76 = yearMonth17.isAfter((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.YearMonth yearMonth78 = yearMonth17.plusMonths(2);
        org.joda.time.YearMonth yearMonth80 = yearMonth17.minusYears(3);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.YearMonth yearMonth82 = yearMonth17.minus(readablePeriod81);
        org.joda.time.YearMonth yearMonth84 = yearMonth17.minusYears(10);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.YearMonth yearMonth86 = yearMonth84.minus(readablePeriod85);
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.YearMonth yearMonth88 = yearMonth84.minus(readablePeriod87);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertNotNull(yearMonth82);
        org.junit.Assert.assertNotNull(yearMonth84);
        org.junit.Assert.assertNotNull(yearMonth86);
        org.junit.Assert.assertNotNull(yearMonth88);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth.Property property10 = yearMonth9.monthOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        org.joda.time.YearMonth yearMonth19 = yearMonth14.plusMonths((int) (byte) 10);
        int int20 = property10.compareTo((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = yearMonth14.getChronology();
        org.joda.time.YearMonth yearMonth22 = org.joda.time.YearMonth.now(chronology21);
        org.joda.time.YearMonth yearMonth23 = yearMonth5.withChronologyRetainFields(chronology21);
        org.joda.time.YearMonth.Property property24 = yearMonth23.year();
        int int25 = property24.getMinimumValue();
        org.joda.time.YearMonth yearMonth26 = property24.getYearMonth();
        java.lang.String str27 = property24.getAsShortText();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-292275054) + "'", int25 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "97" + "'", str27, "97");
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth.Property property30 = yearMonth29.monthOfYear();
        int int31 = property30.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField32 = property30.getField();
        org.joda.time.YearMonth yearMonth34 = property30.addToCopy((int) (short) 0);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth.Property property39 = yearMonth38.monthOfYear();
        int int40 = property39.getMaximumValue();
        java.util.Locale locale41 = null;
        int int42 = property39.getMaximumShortTextLength(locale41);
        java.util.Locale locale43 = null;
        int int44 = property39.getMaximumTextLength(locale43);
        java.lang.String str45 = property39.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property39.getFieldType();
        boolean boolean47 = yearMonth34.isSupported(dateTimeFieldType46);
        int int48 = yearMonth3.get(dateTimeFieldType46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField50 = yearMonth3.getField((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 12 + "'", int40 == 12);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Oct" + "'", str45, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology6);
        org.joda.time.YearMonth.Property property8 = yearMonth7.monthOfYear();
        int int9 = property8.getMaximumValue();
        java.util.Locale locale10 = null;
        int int11 = property8.getMaximumShortTextLength(locale10);
        java.util.Locale locale12 = null;
        int int13 = property8.getMaximumTextLength(locale12);
        org.joda.time.DurationField durationField14 = property8.getRangeDurationField();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property8.getAsShortText(locale15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property8.getFieldType();
        boolean boolean18 = yearMonth3.isSupported(dateTimeFieldType17);
        int[] intArray19 = yearMonth3.getValues();
        org.joda.time.YearMonth yearMonth21 = yearMonth3.withMonthOfYear(11);
        int int22 = yearMonth21.getMonthOfYear();
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Oct" + "'", str16, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[97, 10]");
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 11 + "'", int22 == 11);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property4.getFieldType();
        int int12 = property4.getMinimumValue();
        java.lang.String str13 = property4.getName();
        int int14 = property4.getMinimumValueOverall();
        org.joda.time.DateTimeField dateTimeField15 = property4.getField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Interval interval11 = yearMonth3.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.lang.String str18 = property16.getAsShortText();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property16.getAsShortText(locale19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property16.getFieldType();
        int int22 = yearMonth3.get(dateTimeFieldType21);
        org.joda.time.Interval interval23 = yearMonth3.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = yearMonth3.toString(dateTimeFormatter24);
        int int26 = yearMonth3.getMonthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        int int37 = yearMonth30.indexOf(dateTimeFieldType36);
        org.joda.time.YearMonth yearMonth39 = yearMonth30.plusMonths((-1));
        org.joda.time.YearMonth yearMonth41 = yearMonth30.plusMonths((-1));
        org.joda.time.YearMonth.Property property42 = yearMonth41.monthOfYear();
        int int43 = property42.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property42.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property42.getFieldType();
        org.joda.time.YearMonth.Property property46 = yearMonth3.property(dateTimeFieldType45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        org.joda.time.YearMonth yearMonth55 = yearMonth50.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        int int57 = yearMonth50.indexOf(dateTimeFieldType56);
        org.joda.time.Interval interval58 = yearMonth50.toInterval();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology61);
        org.joda.time.YearMonth.Property property63 = yearMonth62.monthOfYear();
        int int64 = property63.getMaximumValue();
        java.lang.String str65 = property63.getAsShortText();
        java.util.Locale locale66 = null;
        java.lang.String str67 = property63.getAsShortText(locale66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = property63.getFieldType();
        int int69 = yearMonth50.get(dateTimeFieldType68);
        org.joda.time.Interval interval70 = yearMonth50.toInterval();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = null;
        java.lang.String str72 = yearMonth50.toString(dateTimeFormatter71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.YearMonth yearMonth75 = yearMonth50.withPeriodAdded(readablePeriod73, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.Interval interval77 = yearMonth50.toInterval(dateTimeZone76);
        int int78 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.Interval interval79 = yearMonth50.toInterval();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Oct" + "'", str18, "Oct");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0097-10" + "'", str25, "0097-10");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 12 + "'", int64 == 12);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Oct" + "'", str65, "Oct");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Oct" + "'", str67, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0097-10" + "'", str72, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth75);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(interval79);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = yearMonth8.toString(dateTimeFormatter15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        int int22 = property21.getMinimumValue();
        java.util.Locale locale23 = null;
        int int24 = property21.getMaximumShortTextLength(locale23);
        org.joda.time.DurationField durationField25 = property21.getDurationField();
        boolean boolean26 = yearMonth8.equals((java.lang.Object) property21);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        int int37 = yearMonth30.indexOf(dateTimeFieldType36);
        org.joda.time.YearMonth yearMonth39 = yearMonth30.plusMonths((-1));
        boolean boolean41 = yearMonth39.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        org.joda.time.YearMonth yearMonth55 = yearMonth50.plusMonths((int) (byte) 10);
        int int56 = property46.compareTo((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.YearMonth yearMonth57 = property46.getYearMonth();
        java.lang.String str58 = property46.getAsText();
        org.joda.time.YearMonth yearMonth59 = property46.getYearMonth();
        boolean boolean60 = yearMonth39.isBefore((org.joda.time.ReadablePartial) yearMonth59);
        org.joda.time.YearMonth yearMonth62 = yearMonth39.minusYears(3);
        int int63 = yearMonth8.compareTo((org.joda.time.ReadablePartial) yearMonth39);
        org.joda.time.DateTimeField[] dateTimeFieldArray64 = yearMonth8.getFields();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0097-10" + "'", str16, "0097-10");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "October" + "'", str58, "October");
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray64);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        int int47 = property46.getMinimumValue();
        java.util.Locale locale48 = null;
        int int49 = property46.getMaximumShortTextLength(locale48);
        org.joda.time.YearMonth yearMonth51 = property46.addToCopy((int) (short) 1);
        boolean boolean52 = yearMonth3.equals((java.lang.Object) yearMonth51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology55);
        org.joda.time.YearMonth yearMonth58 = yearMonth56.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology61);
        org.joda.time.YearMonth yearMonth64 = yearMonth62.minusYears((int) (short) 0);
        int int65 = yearMonth62.size();
        boolean boolean66 = yearMonth58.isAfter((org.joda.time.ReadablePartial) yearMonth62);
        org.joda.time.Interval interval67 = yearMonth58.toInterval();
        org.joda.time.YearMonth.Property property68 = yearMonth58.year();
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.YearMonth yearMonth70 = yearMonth58.minus(readablePeriod69);
        boolean boolean71 = yearMonth51.isEqual((org.joda.time.ReadablePartial) yearMonth70);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.YearMonth yearMonth75 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology74);
        org.joda.time.YearMonth yearMonth77 = yearMonth75.minusYears((int) (short) 0);
        int int78 = yearMonth75.size();
        org.joda.time.YearMonth yearMonth80 = yearMonth75.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = null;
        int int82 = yearMonth75.indexOf(dateTimeFieldType81);
        org.joda.time.YearMonth yearMonth84 = yearMonth75.plusMonths((-1));
        org.joda.time.YearMonth yearMonth86 = yearMonth75.plusMonths((-1));
        org.joda.time.YearMonth.Property property87 = yearMonth86.monthOfYear();
        int int88 = property87.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = property87.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = property87.getFieldType();
        org.joda.time.YearMonth.Property property91 = yearMonth51.property(dateTimeFieldType90);
        java.lang.String str92 = property91.getAsText();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(yearMonth77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(yearMonth84);
        org.junit.Assert.assertNotNull(yearMonth86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 9 + "'", int88 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "November" + "'", str92, "November");
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.YearMonth yearMonth8 = property4.addToCopy((int) (short) 0);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.plusMonths(1970);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth10);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = yearMonth8.toString(dateTimeFormatter15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        int int22 = property21.getMinimumValue();
        java.util.Locale locale23 = null;
        int int24 = property21.getMaximumShortTextLength(locale23);
        org.joda.time.DurationField durationField25 = property21.getDurationField();
        boolean boolean26 = yearMonth8.equals((java.lang.Object) property21);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        int int37 = yearMonth30.indexOf(dateTimeFieldType36);
        org.joda.time.YearMonth yearMonth39 = yearMonth30.plusMonths((-1));
        boolean boolean41 = yearMonth39.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        org.joda.time.YearMonth yearMonth55 = yearMonth50.plusMonths((int) (byte) 10);
        int int56 = property46.compareTo((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.YearMonth yearMonth57 = property46.getYearMonth();
        java.lang.String str58 = property46.getAsText();
        org.joda.time.YearMonth yearMonth59 = property46.getYearMonth();
        boolean boolean60 = yearMonth39.isBefore((org.joda.time.ReadablePartial) yearMonth59);
        org.joda.time.YearMonth yearMonth62 = yearMonth39.minusYears(3);
        int int63 = yearMonth8.compareTo((org.joda.time.ReadablePartial) yearMonth39);
        org.joda.time.YearMonth yearMonth65 = yearMonth39.plusMonths(1);
        org.joda.time.YearMonth.Property property66 = yearMonth39.year();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.YearMonth yearMonth70 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology69);
        org.joda.time.YearMonth.Property property71 = yearMonth70.monthOfYear();
        int int72 = property71.getMaximumValue();
        java.util.Locale locale73 = null;
        int int74 = property71.getMaximumShortTextLength(locale73);
        java.util.Locale locale75 = null;
        int int76 = property71.getMaximumTextLength(locale75);
        java.lang.String str77 = property71.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property71.getFieldType();
        int int79 = yearMonth39.get(dateTimeFieldType78);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = null;
        java.lang.String str81 = yearMonth39.toString(dateTimeFormatter80);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType83 = yearMonth39.getFieldType((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0097-10" + "'", str16, "0097-10");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "October" + "'", str58, "October");
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 12 + "'", int72 == 12);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 9 + "'", int76 == 9);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Oct" + "'", str77, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "0097-09" + "'", str81, "0097-09");
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth yearMonth39 = yearMonth32.withYear((int) (short) 0);
        org.joda.time.YearMonth yearMonth41 = yearMonth39.minusYears(11);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        java.lang.String str11 = property4.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property4.getFieldType();
        org.joda.time.DateTimeField dateTimeField13 = property4.getField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        int int11 = property4.get();
        java.lang.String str12 = property4.getAsString();
        int int13 = property4.getMaximumValue();
        java.util.Locale locale14 = null;
        java.lang.String str15 = property4.getAsText(locale14);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "10" + "'", str12, "10");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "October" + "'", str15, "October");
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.lang.String str11 = property4.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth yearMonth17 = yearMonth15.minusYears((int) (short) 0);
        int int18 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth17);
        int int19 = yearMonth17.getYear();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[monthOfYear]" + "'", str11, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.YearMonth yearMonth19 = property4.addWrapFieldToCopy((int) (byte) -1);
        java.lang.String str20 = property4.getAsString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "10" + "'", str20, "10");
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property15.getFieldType();
        int int18 = property15.getMaximumValueOverall();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property15.getAsShortText(locale19);
        org.joda.time.Chronology chronology21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((java.lang.Object) property15, chronology21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.YearMonth$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Sep" + "'", str20, "Sep");
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        int int15 = property14.getMaximumValue();
        java.util.Locale locale16 = null;
        int int17 = property14.getMaximumShortTextLength(locale16);
        java.util.Locale locale18 = null;
        int int19 = property14.getMaximumTextLength(locale18);
        java.lang.String str20 = property14.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property14.getFieldType();
        boolean boolean22 = property4.equals((java.lang.Object) property14);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth.Property property27 = yearMonth26.monthOfYear();
        int int28 = property27.getMinimumValue();
        java.util.Locale locale29 = null;
        int int30 = property27.getMaximumShortTextLength(locale29);
        org.joda.time.YearMonth yearMonth32 = property27.addToCopy((int) (short) 1);
        java.util.Locale locale33 = null;
        java.lang.String str34 = property27.getAsText(locale33);
        int int35 = property27.getMinimumValue();
        java.lang.String str36 = property27.getAsText();
        java.lang.String str37 = property27.toString();
        boolean boolean38 = property4.equals((java.lang.Object) property27);
        org.joda.time.ReadablePartial readablePartial39 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int40 = property4.compareTo(readablePartial39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "October" + "'", str34, "October");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "October" + "'", str36, "October");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[monthOfYear]" + "'", str37, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.parse("2020-11", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField11 = property4.getField();
        int int12 = property4.getMaximumValue();
        int int13 = property4.getMinimumValueOverall();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        int[] intArray18 = yearMonth17.getValues();
        org.joda.time.YearMonth yearMonth20 = yearMonth17.withYear(11);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        boolean boolean35 = yearMonth27.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth.Property property40 = yearMonth39.monthOfYear();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        int int47 = yearMonth44.size();
        org.joda.time.YearMonth yearMonth49 = yearMonth44.plusMonths((int) (byte) 10);
        int int50 = property40.compareTo((org.joda.time.ReadablePartial) yearMonth44);
        org.joda.time.Chronology chronology51 = yearMonth44.getChronology();
        org.joda.time.YearMonth yearMonth52 = yearMonth31.withChronologyRetainFields(chronology51);
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((long) (short) 1, chronology51);
        org.joda.time.YearMonth yearMonth54 = org.joda.time.YearMonth.now(chronology51);
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((java.lang.Object) yearMonth17, chronology51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth56 = new org.joda.time.YearMonth((java.lang.Object) int13, chronology51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[97, 10]");
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertNotNull(yearMonth54);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth5.getYear();
        org.joda.time.YearMonth yearMonth8 = yearMonth5.minusYears(0);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonth yearMonth11 = yearMonth8.withPeriodAdded(readablePeriod9, (int) (byte) 0);
        java.lang.String str12 = yearMonth8.toString();
        org.joda.time.YearMonth.Property property13 = yearMonth8.monthOfYear();
        java.util.Locale locale14 = null;
        int int15 = property13.getMaximumShortTextLength(locale14);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0097-10" + "'", str12, "0097-10");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.YearMonth yearMonth19 = property4.addWrapFieldToCopy((int) (byte) -1);
        java.util.Locale locale20 = null;
        java.lang.String str21 = property4.getAsShortText(locale20);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Oct" + "'", str21, "Oct");
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addToCopy((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        int int22 = property21.getMaximumValue();
        java.util.Locale locale23 = null;
        int int24 = property21.getMaximumShortTextLength(locale23);
        java.util.Locale locale25 = null;
        int int26 = property21.getMaximumTextLength(locale25);
        org.joda.time.DurationField durationField27 = property21.getRangeDurationField();
        java.util.Locale locale28 = null;
        java.lang.String str29 = property21.getAsShortText(locale28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property21.getFieldType();
        boolean boolean31 = yearMonth16.isSupported(dateTimeFieldType30);
        boolean boolean32 = property4.equals((java.lang.Object) dateTimeFieldType30);
        org.joda.time.DateTimeField dateTimeField33 = property4.getField();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property4.getAsShortText(locale34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth37 = property4.setCopy(97);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Oct" + "'", str29, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        int int7 = yearMonth4.size();
        org.joda.time.YearMonth yearMonth9 = yearMonth4.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = yearMonth4.indexOf(dateTimeFieldType10);
        org.joda.time.YearMonth yearMonth13 = yearMonth4.plusMonths((-1));
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        org.joda.time.YearMonth yearMonth22 = yearMonth17.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = yearMonth17.indexOf(dateTimeFieldType23);
        org.joda.time.Interval interval25 = yearMonth17.toInterval();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth.Property property30 = yearMonth29.monthOfYear();
        int int31 = property30.getMaximumValue();
        java.lang.String str32 = property30.getAsShortText();
        java.util.Locale locale33 = null;
        java.lang.String str34 = property30.getAsShortText(locale33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property30.getFieldType();
        int int36 = yearMonth17.get(dateTimeFieldType35);
        org.joda.time.YearMonth.Property property37 = yearMonth4.property(dateTimeFieldType35);
        org.joda.time.Chronology chronology38 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth(chronology38);
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        org.joda.time.Interval interval47 = yearMonth44.toInterval();
        org.joda.time.Chronology chronology48 = yearMonth44.getChronology();
        org.joda.time.YearMonth yearMonth49 = yearMonth40.withChronologyRetainFields(chronology48);
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth(chronology48);
        org.joda.time.YearMonth yearMonth51 = yearMonth39.withChronologyRetainFields(chronology48);
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((long) (short) 10, chronology48);
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((int) (byte) 1, 9);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology58);
        org.joda.time.YearMonth yearMonth61 = yearMonth59.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.YearMonth yearMonth65 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology64);
        org.joda.time.YearMonth yearMonth67 = yearMonth65.minusYears((int) (short) 0);
        int int68 = yearMonth65.size();
        boolean boolean69 = yearMonth61.isAfter((org.joda.time.ReadablePartial) yearMonth65);
        org.joda.time.YearMonth.Property property70 = yearMonth65.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property70.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = property70.getFieldType();
        int int73 = yearMonth55.indexOf(dateTimeFieldType72);
        boolean boolean74 = yearMonth52.isSupported(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 12 + "'", int31 == 12);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Oct" + "'", str32, "Oct");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Oct" + "'", str34, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        int int8 = yearMonth5.size();
        org.joda.time.YearMonth yearMonth10 = yearMonth5.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = yearMonth5.getFieldTypes();
        int[] intArray12 = yearMonth5.getValues();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth.Property property17 = yearMonth16.monthOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        int int24 = yearMonth21.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth21.plusMonths((int) (byte) 10);
        int int27 = property17.compareTo((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.Chronology chronology28 = yearMonth21.getChronology();
        org.joda.time.YearMonth yearMonth29 = org.joda.time.YearMonth.now(chronology28);
        org.joda.time.YearMonth yearMonth30 = org.joda.time.YearMonth.now(chronology28);
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((java.lang.Object) yearMonth5, chronology28);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (byte) 1, chronology28);
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((long) 1, chronology28);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[97, 10]");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth30);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.Chronology chronology8 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth9 = yearMonth0.withChronologyRetainFields(chronology8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        int int25 = property14.getMaximumValueOverall();
        org.joda.time.DurationField durationField26 = property14.getRangeDurationField();
        boolean boolean27 = yearMonth9.equals((java.lang.Object) property14);
        org.joda.time.YearMonth yearMonth29 = yearMonth9.plusYears((int) (byte) -1);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 12 + "'", int25 == 12);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(yearMonth29);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth.Property property12 = yearMonth11.monthOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        int int22 = property12.compareTo((org.joda.time.ReadablePartial) yearMonth16);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = yearMonth16.toInterval(dateTimeZone23);
        org.joda.time.YearMonth yearMonth26 = yearMonth16.minusYears((int) (short) 0);
        java.lang.String str27 = yearMonth16.toString();
        org.joda.time.YearMonth yearMonth29 = yearMonth16.withMonthOfYear(11);
        boolean boolean30 = property4.equals((java.lang.Object) 11);
        java.util.Locale locale31 = null;
        int int32 = property4.getMaximumShortTextLength(locale31);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0097-10" + "'", str27, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property15.getFieldType();
        org.joda.time.DurationField durationField18 = property15.getDurationField();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth yearMonth31 = yearMonth29.minusYears((int) (short) 0);
        int int32 = yearMonth29.size();
        boolean boolean33 = yearMonth25.isAfter((org.joda.time.ReadablePartial) yearMonth29);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth.Property property38 = yearMonth37.monthOfYear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        int int48 = property38.compareTo((org.joda.time.ReadablePartial) yearMonth42);
        org.joda.time.Chronology chronology49 = yearMonth42.getChronology();
        org.joda.time.YearMonth yearMonth50 = yearMonth29.withChronologyRetainFields(chronology49);
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth((long) (short) 1, chronology49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((java.lang.Object) durationField18, chronology49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(yearMonth50);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.get();
        org.joda.time.YearMonth yearMonth13 = property4.addToCopy(3);
        java.lang.String str14 = property4.getAsString();
        org.joda.time.YearMonth yearMonth16 = property4.addToCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth18 = yearMonth16.withMonthOfYear(100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertNotNull(yearMonth16);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth3.getFieldTypes();
        org.joda.time.YearMonth yearMonth17 = yearMonth3.minusMonths(0);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        boolean boolean36 = yearMonth28.isAfter((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        int int51 = property41.compareTo((org.joda.time.ReadablePartial) yearMonth45);
        org.joda.time.Chronology chronology52 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth53 = yearMonth32.withChronologyRetainFields(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonth yearMonth56 = yearMonth53.withPeriodAdded(readablePeriod54, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = yearMonth56.indexOf(dateTimeFieldType57);
        boolean boolean59 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        int int65 = property64.getMinimumValue();
        java.util.Locale locale66 = null;
        int int67 = property64.getMaximumShortTextLength(locale66);
        org.joda.time.YearMonth yearMonth69 = property64.addToCopy((int) (short) 1);
        boolean boolean70 = yearMonth21.equals((java.lang.Object) yearMonth69);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.YearMonth yearMonth74 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology73);
        org.joda.time.YearMonth yearMonth76 = yearMonth74.minusYears((int) (short) 0);
        int int77 = yearMonth74.size();
        org.joda.time.YearMonth yearMonth79 = yearMonth74.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        int int81 = yearMonth74.indexOf(dateTimeFieldType80);
        int int82 = yearMonth74.getYear();
        boolean boolean83 = yearMonth69.isBefore((org.joda.time.ReadablePartial) yearMonth74);
        org.joda.time.DateTimeField[] dateTimeFieldArray84 = yearMonth74.getFields();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = null;
        java.lang.String str86 = yearMonth74.toString(dateTimeFormatter85);
        boolean boolean87 = yearMonth17.isBefore((org.joda.time.ReadablePartial) yearMonth74);
        java.util.Locale locale89 = null;
        java.lang.String str90 = yearMonth74.toString("10", locale89);
        org.joda.time.YearMonth yearMonth92 = yearMonth74.minusYears((int) (byte) 1);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertNotNull(yearMonth69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(yearMonth79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0097-10" + "'", str86, "0097-10");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "10" + "'", str90, "10");
        org.junit.Assert.assertNotNull(yearMonth92);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property4.getFieldType();
        int int12 = property4.getMinimumValue();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property4.getAsText(locale13);
        java.util.Locale locale15 = null;
        int int16 = property4.getMaximumTextLength(locale15);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "October" + "'", str14, "October");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        org.joda.time.YearMonth yearMonth17 = property15.getYearMonth();
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property18.getAsText(locale19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth.Property property25 = yearMonth24.monthOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth yearMonth31 = yearMonth29.minusYears((int) (short) 0);
        int int32 = yearMonth29.size();
        org.joda.time.YearMonth yearMonth34 = yearMonth29.plusMonths((int) (byte) 10);
        int int35 = property25.compareTo((org.joda.time.ReadablePartial) yearMonth29);
        org.joda.time.YearMonth yearMonth37 = yearMonth29.plusYears((int) (byte) 10);
        boolean boolean38 = property18.equals((java.lang.Object) (byte) 10);
        org.joda.time.DurationField durationField39 = property18.getRangeDurationField();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "September" + "'", str20, "September");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(durationField39);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Interval interval6 = yearMonth3.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth3.getFieldTypes();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        boolean boolean21 = yearMonth13.isAfter((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        int int36 = property26.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.Chronology chronology37 = yearMonth30.getChronology();
        org.joda.time.YearMonth yearMonth38 = yearMonth17.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth39 = yearMonth3.withChronologyRetainFields(chronology37);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology46);
        org.joda.time.YearMonth yearMonth49 = yearMonth47.minusYears((int) (short) 0);
        int int50 = yearMonth47.size();
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.YearMonth yearMonth57 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology56);
        org.joda.time.YearMonth yearMonth59 = yearMonth57.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth yearMonth65 = yearMonth63.minusYears((int) (short) 0);
        int int66 = yearMonth63.size();
        boolean boolean67 = yearMonth59.isAfter((org.joda.time.ReadablePartial) yearMonth63);
        org.joda.time.Interval interval68 = yearMonth59.toInterval();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.YearMonth yearMonth72 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology71);
        org.joda.time.YearMonth yearMonth74 = yearMonth72.minusYears((int) (short) 0);
        int int75 = yearMonth72.size();
        org.joda.time.YearMonth yearMonth77 = yearMonth72.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = null;
        int int79 = yearMonth72.indexOf(dateTimeFieldType78);
        org.joda.time.Interval interval80 = yearMonth72.toInterval();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.YearMonth yearMonth84 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology83);
        org.joda.time.YearMonth.Property property85 = yearMonth84.monthOfYear();
        int int86 = property85.getMaximumValue();
        java.lang.String str87 = property85.getAsShortText();
        java.util.Locale locale88 = null;
        java.lang.String str89 = property85.getAsShortText(locale88);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = property85.getFieldType();
        int int91 = yearMonth72.get(dateTimeFieldType90);
        org.joda.time.YearMonth.Property property92 = yearMonth59.property(dateTimeFieldType90);
        boolean boolean93 = yearMonth53.isSupported(dateTimeFieldType90);
        org.joda.time.YearMonth yearMonth95 = yearMonth47.withField(dateTimeFieldType90, (int) (short) 10);
        boolean boolean96 = yearMonth43.isBefore((org.joda.time.ReadablePartial) yearMonth47);
        int int97 = yearMonth39.compareTo((org.joda.time.ReadablePartial) yearMonth47);
        org.joda.time.YearMonth yearMonth99 = yearMonth47.minusMonths((-292275054));
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(yearMonth77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 12 + "'", int86 == 12);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Oct" + "'", str87, "Oct");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Oct" + "'", str89, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(yearMonth95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(yearMonth99);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        org.joda.time.YearMonth yearMonth10 = property4.getYearMonth();
        org.joda.time.DurationField durationField11 = property4.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth13 = property4.setCopy(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Interval interval7 = yearMonth4.toInterval();
        org.joda.time.Chronology chronology8 = yearMonth4.getChronology();
        org.joda.time.YearMonth yearMonth9 = yearMonth0.withChronologyRetainFields(chronology8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        boolean boolean23 = yearMonth15.isAfter((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth.Property property28 = yearMonth27.monthOfYear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusMonths((int) (byte) 10);
        int int38 = property28.compareTo((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = yearMonth32.getChronology();
        org.joda.time.YearMonth yearMonth40 = yearMonth19.withChronologyRetainFields(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.YearMonth yearMonth43 = yearMonth40.withPeriodAdded(readablePeriod41, (int) 'a');
        org.joda.time.YearMonth yearMonth45 = yearMonth40.plusMonths(9);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        int int51 = property50.getMaximumValue();
        java.lang.String str52 = property50.getAsShortText();
        java.util.Locale locale53 = null;
        java.lang.String str54 = property50.getAsShortText(locale53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property50.getFieldType();
        int int56 = yearMonth40.get(dateTimeFieldType55);
        boolean boolean57 = yearMonth9.isSupported(dateTimeFieldType55);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.YearMonth yearMonth59 = yearMonth9.minus(readablePeriod58);
        org.joda.time.YearMonth yearMonth61 = yearMonth9.minusMonths((int) (byte) 0);
        java.lang.Class<?> wildcardClass62 = yearMonth61.getClass();
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 12 + "'", int51 == 12);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Oct" + "'", str52, "Oct");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Oct" + "'", str54, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth.Property property14 = yearMonth9.year();
        org.joda.time.YearMonth.Property property15 = yearMonth9.year();
        int int16 = property15.getMinimumValueOverall();
        int int17 = property15.getMinimumValue();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-292275054) + "'", int16 == (-292275054));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-292275054) + "'", int17 == (-292275054));
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        java.lang.String str19 = yearMonth8.toString();
        org.joda.time.YearMonth yearMonth21 = yearMonth8.withMonthOfYear(11);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth24 = property22.setCopy(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0097-10" + "'", str19, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonth yearMonth33 = yearMonth30.withPeriodAdded(readablePeriod31, (int) 'a');
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths(9);
        int int36 = yearMonth35.getYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 98 + "'", int36 == 98);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        java.lang.String str2 = yearMonth1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth12.withYear((int) (byte) 1);
        boolean boolean36 = yearMonth1.isEqual((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.YearMonth yearMonth38 = yearMonth35.plusYears(10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonth42.indexOf(dateTimeFieldType48);
        org.joda.time.YearMonth yearMonth51 = yearMonth42.plusMonths((-1));
        org.joda.time.YearMonth yearMonth53 = yearMonth42.plusMonths((-1));
        org.joda.time.YearMonth.Property property54 = yearMonth53.monthOfYear();
        int int55 = property54.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property54.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property54.getFieldType();
        org.joda.time.YearMonth.Property property58 = yearMonth35.property(dateTimeFieldType57);
        java.lang.String str59 = property58.getAsText();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01" + "'", str2, "1970-01");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "October" + "'", str59, "October");
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.plusYears((int) '#');
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.YearMonth yearMonth41 = yearMonth37.minus(readablePeriod40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.YearMonth yearMonth43 = yearMonth37.minus(readablePeriod42);
        java.lang.String str44 = yearMonth37.toString();
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1980-01" + "'", str44, "1980-01");
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        int int9 = property4.getMinimumValueOverall();
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy((int) ' ');
        java.util.Locale locale13 = null;
        java.lang.String str14 = property4.getAsText(locale13);
        int int15 = property4.getMinimumValue();
        org.joda.time.DurationField durationField16 = property4.getRangeDurationField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "October" + "'", str14, "October");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        boolean boolean36 = yearMonth28.isAfter((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        int int51 = property41.compareTo((org.joda.time.ReadablePartial) yearMonth45);
        org.joda.time.Chronology chronology52 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth53 = yearMonth32.withChronologyRetainFields(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonth yearMonth56 = yearMonth53.withPeriodAdded(readablePeriod54, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = yearMonth56.indexOf(dateTimeFieldType57);
        boolean boolean59 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology67);
        org.joda.time.YearMonth yearMonth70 = yearMonth68.minusYears((int) (short) 0);
        int int71 = yearMonth68.size();
        org.joda.time.YearMonth yearMonth73 = yearMonth68.plusMonths((int) (byte) 10);
        int int74 = property64.compareTo((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean75 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean76 = yearMonth17.isAfter((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.YearMonth yearMonth79 = yearMonth21.withPeriodAdded(readablePeriod77, 12);
        org.joda.time.DateTimeField dateTimeField81 = yearMonth21.getField(0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(yearMonth79);
        org.junit.Assert.assertNotNull(dateTimeField81);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addToCopy((int) (short) 1);
        java.util.Locale locale10 = null;
        java.lang.String str11 = property4.getAsText(locale10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth13 = property4.setCopy("0100-10");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0100-10\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "October" + "'", str11, "October");
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(1L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth3 = yearMonth1.withMonthOfYear((int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth.Property property38 = yearMonth32.year();
        java.lang.String str39 = yearMonth32.toString();
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01" + "'", str39, "1970-01");
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.util.Locale locale11 = null;
        int int12 = property4.getMaximumShortTextLength(locale11);
        int int13 = property4.getMaximumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth.Property property5 = yearMonth4.monthOfYear();
        int int6 = property5.getMaximumValue();
        java.util.Locale locale7 = null;
        int int8 = property5.getMaximumShortTextLength(locale7);
        java.util.Locale locale9 = null;
        int int10 = property5.getMaximumTextLength(locale9);
        java.lang.String str11 = property5.getName();
        org.joda.time.YearMonth yearMonth13 = property5.addWrapFieldToCopy(100);
        int int14 = yearMonth13.getMonthOfYear();
        org.joda.time.YearMonth.Property property15 = yearMonth13.year();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.YearMonth yearMonth28 = yearMonth19.plusMonths((-1));
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = yearMonth32.indexOf(dateTimeFieldType38);
        org.joda.time.Interval interval40 = yearMonth32.toInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth.Property property45 = yearMonth44.monthOfYear();
        int int46 = property45.getMaximumValue();
        java.lang.String str47 = property45.getAsShortText();
        java.util.Locale locale48 = null;
        java.lang.String str49 = property45.getAsShortText(locale48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property45.getFieldType();
        int int51 = yearMonth32.get(dateTimeFieldType50);
        org.joda.time.YearMonth.Property property52 = yearMonth19.property(dateTimeFieldType50);
        org.joda.time.Chronology chronology53 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth(chronology53);
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology58);
        org.joda.time.YearMonth yearMonth61 = yearMonth59.minusYears((int) (short) 0);
        org.joda.time.Interval interval62 = yearMonth59.toInterval();
        org.joda.time.Chronology chronology63 = yearMonth59.getChronology();
        org.joda.time.YearMonth yearMonth64 = yearMonth55.withChronologyRetainFields(chronology63);
        org.joda.time.YearMonth yearMonth65 = new org.joda.time.YearMonth(chronology63);
        org.joda.time.YearMonth yearMonth66 = yearMonth54.withChronologyRetainFields(chronology63);
        org.joda.time.YearMonth yearMonth67 = yearMonth13.withChronologyRetainFields(chronology63);
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((long) 12, chronology63);
        int[] intArray69 = yearMonth68.getValues();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "monthOfYear" + "'", str11, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Oct" + "'", str47, "Oct");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Oct" + "'", str49, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(yearMonth61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertNotNull(yearMonth66);
        org.junit.Assert.assertNotNull(yearMonth67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1970, 1]");
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth16 = property4.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTimeField dateTimeField17 = property4.getField();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonth yearMonth29 = yearMonth27.plus(readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth.Property property34 = yearMonth33.monthOfYear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth yearMonth40 = yearMonth38.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        int int47 = yearMonth44.size();
        boolean boolean48 = yearMonth40.isAfter((org.joda.time.ReadablePartial) yearMonth44);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology51);
        org.joda.time.YearMonth.Property property53 = yearMonth52.monthOfYear();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.YearMonth yearMonth57 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology56);
        org.joda.time.YearMonth yearMonth59 = yearMonth57.minusYears((int) (short) 0);
        int int60 = yearMonth57.size();
        org.joda.time.YearMonth yearMonth62 = yearMonth57.plusMonths((int) (byte) 10);
        int int63 = property53.compareTo((org.joda.time.ReadablePartial) yearMonth57);
        org.joda.time.Chronology chronology64 = yearMonth57.getChronology();
        org.joda.time.YearMonth yearMonth65 = yearMonth44.withChronologyRetainFields(chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.YearMonth yearMonth68 = yearMonth65.withPeriodAdded(readablePeriod66, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        int int70 = yearMonth68.indexOf(dateTimeFieldType69);
        boolean boolean71 = yearMonth33.isEqual((org.joda.time.ReadablePartial) yearMonth68);
        org.joda.time.YearMonth.Property property72 = yearMonth68.year();
        int int73 = yearMonth29.compareTo((org.joda.time.ReadablePartial) yearMonth68);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.Interval interval75 = yearMonth29.toInterval(dateTimeZone74);
        org.joda.time.DurationFieldType durationFieldType76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth78 = yearMonth29.withFieldAdded(durationFieldType76, 292278993);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(interval75);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.YearMonth yearMonth4 = yearMonth2.withYear((int) (byte) 1);
        java.lang.String str6 = yearMonth2.toString("0100-10");
        org.junit.Assert.assertNotNull(yearMonth4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0100-10" + "'", str6, "0100-10");
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        int int11 = property4.get();
        java.lang.String str12 = property4.getAsString();
        int int13 = property4.getMaximumValue();
        int int14 = property4.getMinimumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "10" + "'", str12, "10");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.lang.String str16 = property4.getAsText();
        org.joda.time.YearMonth yearMonth17 = property4.getYearMonth();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        boolean boolean36 = yearMonth28.isAfter((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth yearMonth47 = yearMonth45.minusYears((int) (short) 0);
        int int48 = yearMonth45.size();
        org.joda.time.YearMonth yearMonth50 = yearMonth45.plusMonths((int) (byte) 10);
        int int51 = property41.compareTo((org.joda.time.ReadablePartial) yearMonth45);
        org.joda.time.Chronology chronology52 = yearMonth45.getChronology();
        org.joda.time.YearMonth yearMonth53 = yearMonth32.withChronologyRetainFields(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.YearMonth yearMonth56 = yearMonth53.withPeriodAdded(readablePeriod54, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = yearMonth56.indexOf(dateTimeFieldType57);
        boolean boolean59 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth56);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.YearMonth yearMonth63 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology62);
        org.joda.time.YearMonth.Property property64 = yearMonth63.monthOfYear();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology67);
        org.joda.time.YearMonth yearMonth70 = yearMonth68.minusYears((int) (short) 0);
        int int71 = yearMonth68.size();
        org.joda.time.YearMonth yearMonth73 = yearMonth68.plusMonths((int) (byte) 10);
        int int74 = property64.compareTo((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean75 = yearMonth21.isEqual((org.joda.time.ReadablePartial) yearMonth68);
        boolean boolean76 = yearMonth17.isAfter((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.YearMonth yearMonth78 = yearMonth17.plusMonths(2);
        org.joda.time.YearMonth yearMonth80 = yearMonth17.minusYears(3);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.YearMonth yearMonth82 = yearMonth17.minus(readablePeriod81);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType84 = yearMonth17.getFieldType((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "October" + "'", str16, "October");
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(yearMonth78);
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertNotNull(yearMonth82);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.YearMonth yearMonth33 = yearMonth30.withPeriodAdded(readablePeriod31, (int) 'a');
        int int34 = yearMonth30.getYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        int int11 = property4.get();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth13 = property4.setCopy(97);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property4.getFieldType();
        int int12 = property4.getMinimumValue();
        java.lang.String str13 = property4.getName();
        org.joda.time.DurationField durationField14 = property4.getRangeDurationField();
        java.lang.Class<?> wildcardClass15 = property4.getClass();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth5.getYear();
        org.joda.time.YearMonth yearMonth8 = yearMonth5.minusYears(0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        org.joda.time.YearMonth yearMonth17 = yearMonth12.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = yearMonth12.indexOf(dateTimeFieldType18);
        org.joda.time.YearMonth yearMonth21 = yearMonth12.plusMonths((-1));
        org.joda.time.YearMonth yearMonth23 = yearMonth21.withMonthOfYear((int) (byte) 10);
        boolean boolean24 = yearMonth8.isBefore((org.joda.time.ReadablePartial) yearMonth23);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth.Property property5 = yearMonth4.monthOfYear();
        org.joda.time.YearMonth yearMonth6 = property5.getYearMonth();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth.Property property11 = yearMonth10.monthOfYear();
        int int12 = property11.getMaximumValue();
        java.lang.String str13 = property11.getAsShortText();
        org.joda.time.YearMonth yearMonth15 = property11.addWrapFieldToCopy((int) (short) -1);
        int[] intArray16 = yearMonth15.getValues();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = org.joda.time.YearMonth.now(chronology32);
        org.joda.time.YearMonth yearMonth34 = yearMonth15.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth6.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth(1L, chronology32);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.YearMonth yearMonth39 = yearMonth36.withPeriodAdded(readablePeriod37, (int) '#');
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Oct" + "'", str13, "Oct");
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[97, 9]");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth39);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        boolean boolean18 = yearMonth10.isAfter((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth.Property property23 = yearMonth22.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.YearMonth yearMonth27 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology26);
        org.joda.time.YearMonth yearMonth29 = yearMonth27.minusYears((int) (short) 0);
        int int30 = yearMonth27.size();
        org.joda.time.YearMonth yearMonth32 = yearMonth27.plusMonths((int) (byte) 10);
        int int33 = property23.compareTo((org.joda.time.ReadablePartial) yearMonth27);
        org.joda.time.Chronology chronology34 = yearMonth27.getChronology();
        org.joda.time.YearMonth yearMonth35 = yearMonth14.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonth yearMonth38 = yearMonth35.withPeriodAdded(readablePeriod36, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = yearMonth38.indexOf(dateTimeFieldType39);
        boolean boolean41 = yearMonth3.isEqual((org.joda.time.ReadablePartial) yearMonth38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        int int47 = property46.getMinimumValue();
        java.util.Locale locale48 = null;
        int int49 = property46.getMaximumShortTextLength(locale48);
        org.joda.time.YearMonth yearMonth51 = property46.addToCopy((int) (short) 1);
        boolean boolean52 = yearMonth3.equals((java.lang.Object) yearMonth51);
        java.lang.String str53 = yearMonth51.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField55 = yearMonth51.getField(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0097-11" + "'", str53, "0097-11");
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        int int31 = yearMonth28.size();
        boolean boolean32 = yearMonth24.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth.Property property37 = yearMonth36.monthOfYear();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minusYears((int) (short) 0);
        int int44 = yearMonth41.size();
        org.joda.time.YearMonth yearMonth46 = yearMonth41.plusMonths((int) (byte) 10);
        int int47 = property37.compareTo((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.Chronology chronology48 = yearMonth41.getChronology();
        org.joda.time.YearMonth yearMonth49 = yearMonth28.withChronologyRetainFields(chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.YearMonth yearMonth52 = yearMonth49.withPeriodAdded(readablePeriod50, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        int int54 = yearMonth52.indexOf(dateTimeFieldType53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth.Property property59 = yearMonth58.monthOfYear();
        int int60 = property59.getMaximumValue();
        java.lang.String str61 = property59.getAsShortText();
        java.util.Locale locale62 = null;
        java.lang.String str63 = property59.getAsShortText(locale62);
        org.joda.time.YearMonth yearMonth65 = property59.setCopy("October");
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = yearMonth65.toDateTime(readableInstant66);
        org.joda.time.DateTime dateTime68 = yearMonth52.toDateTime(readableInstant66);
        org.joda.time.DateTime dateTime69 = yearMonth8.toDateTime((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.YearMonth yearMonth71 = yearMonth8.minusMonths((int) (short) 10);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.YearMonth yearMonth75 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology74);
        org.joda.time.YearMonth yearMonth77 = yearMonth75.minusYears((int) (short) 0);
        int int78 = yearMonth75.size();
        org.joda.time.YearMonth yearMonth80 = yearMonth75.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = null;
        int int82 = yearMonth75.indexOf(dateTimeFieldType81);
        org.joda.time.YearMonth yearMonth84 = yearMonth75.plusMonths((-1));
        org.joda.time.YearMonth yearMonth86 = yearMonth75.plusMonths((-1));
        org.joda.time.YearMonth.Property property87 = yearMonth86.monthOfYear();
        int int88 = property87.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = property87.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = property87.getFieldType();
        org.joda.time.YearMonth.Property property91 = yearMonth8.property(dateTimeFieldType90);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 12 + "'", int60 == 12);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Oct" + "'", str61, "Oct");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Oct" + "'", str63, "Oct");
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertNotNull(yearMonth77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(yearMonth80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(yearMonth84);
        org.junit.Assert.assertNotNull(yearMonth86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 9 + "'", int88 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertNotNull(property91);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(9, 10);
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((long) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = yearMonth4.toInterval(dateTimeZone5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth.Property property11 = yearMonth10.monthOfYear();
        int int12 = property11.getMaximumValue();
        java.util.Locale locale13 = null;
        int int14 = property11.getMaximumShortTextLength(locale13);
        java.util.Locale locale15 = null;
        int int16 = property11.getMaximumTextLength(locale15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        int int22 = property21.getMaximumValue();
        java.util.Locale locale23 = null;
        int int24 = property21.getMaximumShortTextLength(locale23);
        java.util.Locale locale25 = null;
        int int26 = property21.getMaximumTextLength(locale25);
        java.lang.String str27 = property21.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property21.getFieldType();
        boolean boolean29 = property11.equals((java.lang.Object) property21);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property21.getFieldType();
        org.joda.time.YearMonth.Property property31 = yearMonth4.property(dateTimeFieldType30);
        boolean boolean32 = yearMonth2.isSupported(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Oct" + "'", str27, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.Chronology chronology15 = yearMonth8.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = yearMonth19.indexOf(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        org.joda.time.YearMonth.Property property37 = yearMonth19.property(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth8.property(dateTimeFieldType36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = yearMonth42.indexOf(dateTimeFieldType48);
        org.joda.time.YearMonth yearMonth51 = yearMonth42.plusMonths((-1));
        boolean boolean53 = yearMonth51.equals((java.lang.Object) 1);
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((long) 100);
        boolean boolean56 = yearMonth51.isBefore((org.joda.time.ReadablePartial) yearMonth55);
        int int57 = yearMonth8.compareTo((org.joda.time.ReadablePartial) yearMonth51);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.YearMonth yearMonth60 = yearMonth51.withPeriodAdded(readablePeriod58, (int) (byte) -1);
        org.joda.time.YearMonth.Property property61 = yearMonth51.monthOfYear();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertNotNull(property61);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        java.lang.String str9 = property4.getAsString();
        org.joda.time.YearMonth yearMonth10 = property4.getYearMonth();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property4.getAsText(locale11);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10" + "'", str9, "10");
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "October" + "'", str12, "October");
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(0L);
        java.lang.String str2 = yearMonth1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth12.withYear((int) (byte) 1);
        boolean boolean36 = yearMonth1.isEqual((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = yearMonth1.getFieldTypes();
        int int38 = yearMonth1.getMonthOfYear();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01" + "'", str2, "1970-01");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getName();
        org.joda.time.YearMonth yearMonth12 = property4.addWrapFieldToCopy(100);
        int int13 = yearMonth12.getMonthOfYear();
        org.joda.time.YearMonth.Property property14 = yearMonth12.year();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.YearMonth yearMonth27 = yearMonth18.plusMonths((-1));
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        int int34 = yearMonth31.size();
        org.joda.time.YearMonth yearMonth36 = yearMonth31.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        int int38 = yearMonth31.indexOf(dateTimeFieldType37);
        org.joda.time.Interval interval39 = yearMonth31.toInterval();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth.Property property44 = yearMonth43.monthOfYear();
        int int45 = property44.getMaximumValue();
        java.lang.String str46 = property44.getAsShortText();
        java.util.Locale locale47 = null;
        java.lang.String str48 = property44.getAsShortText(locale47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property44.getFieldType();
        int int50 = yearMonth31.get(dateTimeFieldType49);
        org.joda.time.YearMonth.Property property51 = yearMonth18.property(dateTimeFieldType49);
        org.joda.time.Chronology chronology52 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth(chronology52);
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonth yearMonth58 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology57);
        org.joda.time.YearMonth yearMonth60 = yearMonth58.minusYears((int) (short) 0);
        org.joda.time.Interval interval61 = yearMonth58.toInterval();
        org.joda.time.Chronology chronology62 = yearMonth58.getChronology();
        org.joda.time.YearMonth yearMonth63 = yearMonth54.withChronologyRetainFields(chronology62);
        org.joda.time.YearMonth yearMonth64 = new org.joda.time.YearMonth(chronology62);
        org.joda.time.YearMonth yearMonth65 = yearMonth53.withChronologyRetainFields(chronology62);
        org.joda.time.YearMonth yearMonth66 = yearMonth12.withChronologyRetainFields(chronology62);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType68 = yearMonth12.getFieldType((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 12 + "'", int45 == 12);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Oct" + "'", str46, "Oct");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Oct" + "'", str48, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth66);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonth yearMonth29 = yearMonth27.plus(readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth.Property property34 = yearMonth33.monthOfYear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth yearMonth40 = yearMonth38.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        int int47 = yearMonth44.size();
        boolean boolean48 = yearMonth40.isAfter((org.joda.time.ReadablePartial) yearMonth44);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology51);
        org.joda.time.YearMonth.Property property53 = yearMonth52.monthOfYear();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.YearMonth yearMonth57 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology56);
        org.joda.time.YearMonth yearMonth59 = yearMonth57.minusYears((int) (short) 0);
        int int60 = yearMonth57.size();
        org.joda.time.YearMonth yearMonth62 = yearMonth57.plusMonths((int) (byte) 10);
        int int63 = property53.compareTo((org.joda.time.ReadablePartial) yearMonth57);
        org.joda.time.Chronology chronology64 = yearMonth57.getChronology();
        org.joda.time.YearMonth yearMonth65 = yearMonth44.withChronologyRetainFields(chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.YearMonth yearMonth68 = yearMonth65.withPeriodAdded(readablePeriod66, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        int int70 = yearMonth68.indexOf(dateTimeFieldType69);
        boolean boolean71 = yearMonth33.isEqual((org.joda.time.ReadablePartial) yearMonth68);
        org.joda.time.YearMonth.Property property72 = yearMonth68.year();
        int int73 = yearMonth29.compareTo((org.joda.time.ReadablePartial) yearMonth68);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.YearMonth yearMonth77 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology76);
        org.joda.time.YearMonth.Property property78 = yearMonth77.monthOfYear();
        int int79 = property78.getMaximumValue();
        java.lang.String str80 = property78.getAsShortText();
        java.util.Locale locale81 = null;
        java.lang.String str82 = property78.getAsShortText(locale81);
        int int83 = property78.getMinimumValueOverall();
        org.joda.time.DurationField durationField84 = property78.getRangeDurationField();
        org.joda.time.YearMonth yearMonth86 = property78.addWrapFieldToCopy((int) ' ');
        org.joda.time.YearMonth yearMonth88 = property78.addWrapFieldToCopy(2);
        org.joda.time.YearMonth yearMonth90 = property78.setCopy(9);
        boolean boolean91 = yearMonth68.isEqual((org.joda.time.ReadablePartial) yearMonth90);
        int[] intArray92 = yearMonth90.getValues();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 12 + "'", int79 == 12);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Oct" + "'", str80, "Oct");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Oct" + "'", str82, "Oct");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(yearMonth86);
        org.junit.Assert.assertNotNull(yearMonth88);
        org.junit.Assert.assertNotNull(yearMonth90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[97, 9]");
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        boolean boolean24 = yearMonth16.isAfter((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        int int39 = property29.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = yearMonth33.getChronology();
        org.joda.time.YearMonth yearMonth41 = yearMonth20.withChronologyRetainFields(chronology40);
        int int42 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        int int43 = yearMonth20.getYear();
        org.joda.time.YearMonth.Property property44 = yearMonth20.year();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((-1), (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((int) '#', (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((long) (short) 1, chronology32);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(chronology32);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology32);
        int int38 = yearMonth36.getValue((int) (short) 1);
        int int39 = yearMonth36.getYear();
        org.joda.time.YearMonth.Property property40 = yearMonth36.year();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.YearMonth yearMonth42 = yearMonth36.plus(readablePeriod41);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(yearMonth42);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth3.getFieldTypes();
        org.joda.time.DateTimeField[] dateTimeFieldArray10 = yearMonth3.getFields();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        int int25 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = yearMonth19.toInterval(dateTimeZone26);
        org.joda.time.YearMonth yearMonth29 = yearMonth19.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth yearMonth41 = yearMonth39.minusYears((int) (short) 0);
        int int42 = yearMonth39.size();
        boolean boolean43 = yearMonth35.isAfter((org.joda.time.ReadablePartial) yearMonth39);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology46);
        org.joda.time.YearMonth.Property property48 = yearMonth47.monthOfYear();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology51);
        org.joda.time.YearMonth yearMonth54 = yearMonth52.minusYears((int) (short) 0);
        int int55 = yearMonth52.size();
        org.joda.time.YearMonth yearMonth57 = yearMonth52.plusMonths((int) (byte) 10);
        int int58 = property48.compareTo((org.joda.time.ReadablePartial) yearMonth52);
        org.joda.time.Chronology chronology59 = yearMonth52.getChronology();
        org.joda.time.YearMonth yearMonth60 = yearMonth39.withChronologyRetainFields(chronology59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.YearMonth yearMonth63 = yearMonth60.withPeriodAdded(readablePeriod61, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        int int65 = yearMonth63.indexOf(dateTimeFieldType64);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.YearMonth yearMonth69 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology68);
        org.joda.time.YearMonth.Property property70 = yearMonth69.monthOfYear();
        int int71 = property70.getMaximumValue();
        java.lang.String str72 = property70.getAsShortText();
        java.util.Locale locale73 = null;
        java.lang.String str74 = property70.getAsShortText(locale73);
        org.joda.time.YearMonth yearMonth76 = property70.setCopy("October");
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = yearMonth76.toDateTime(readableInstant77);
        org.joda.time.DateTime dateTime79 = yearMonth63.toDateTime(readableInstant77);
        org.joda.time.DateTime dateTime80 = yearMonth19.toDateTime((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.YearMonth yearMonth82 = yearMonth19.minusMonths((int) (short) 10);
        boolean boolean83 = yearMonth3.isBefore((org.joda.time.ReadablePartial) yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(dateTimeFieldArray10);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(yearMonth54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 12 + "'", int71 == 12);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Oct" + "'", str72, "Oct");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Oct" + "'", str74, "Oct");
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(yearMonth82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Interval interval6 = yearMonth3.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonth3.getFieldTypes();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth yearMonth19 = yearMonth17.minusYears((int) (short) 0);
        int int20 = yearMonth17.size();
        boolean boolean21 = yearMonth13.isAfter((org.joda.time.ReadablePartial) yearMonth17);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth.Property property26 = yearMonth25.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        int int36 = property26.compareTo((org.joda.time.ReadablePartial) yearMonth30);
        org.joda.time.Chronology chronology37 = yearMonth30.getChronology();
        org.joda.time.YearMonth yearMonth38 = yearMonth17.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth39 = yearMonth3.withChronologyRetainFields(chronology37);
        org.joda.time.YearMonth yearMonth41 = yearMonth3.minusYears(3);
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        java.util.Locale locale10 = null;
        int int11 = property4.getMaximumTextLength(locale10);
        int int12 = property4.getMaximumValue();
        int int13 = property4.get();
        int int14 = property4.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
    }

    @Test
    @Ignore
  public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        java.lang.String str11 = property4.getAsString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.YearMonth yearMonth15 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology14);
        org.joda.time.YearMonth.Property property16 = yearMonth15.monthOfYear();
        int int17 = property16.getMaximumValue();
        java.util.Locale locale18 = null;
        int int19 = property16.getMaximumShortTextLength(locale18);
        int int20 = property16.getMaximumValueOverall();
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        org.joda.time.Interval interval28 = yearMonth25.toInterval();
        org.joda.time.Chronology chronology29 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth21.withChronologyRetainFields(chronology29);
        boolean boolean31 = property16.equals((java.lang.Object) yearMonth21);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Interval interval33 = yearMonth21.toInterval(dateTimeZone32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth21.plus(readablePeriod34);
        int int36 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth38 = yearMonth35.minusYears(292278993);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Maximum value exceeded for add");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10" + "'", str11, "10");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Interval interval17 = yearMonth8.toInterval();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        int int24 = yearMonth21.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth21.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        int int28 = yearMonth21.indexOf(dateTimeFieldType27);
        org.joda.time.Interval interval29 = yearMonth21.toInterval();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth.Property property34 = yearMonth33.monthOfYear();
        int int35 = property34.getMaximumValue();
        java.lang.String str36 = property34.getAsShortText();
        java.util.Locale locale37 = null;
        java.lang.String str38 = property34.getAsShortText(locale37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property34.getFieldType();
        int int40 = yearMonth21.get(dateTimeFieldType39);
        org.joda.time.YearMonth.Property property41 = yearMonth8.property(dateTimeFieldType39);
        boolean boolean42 = yearMonth2.isSupported(dateTimeFieldType39);
        org.joda.time.YearMonth.Property property43 = yearMonth2.year();
        java.lang.String str44 = property43.toString();
        int int45 = property43.get();
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 12 + "'", int35 == 12);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Oct" + "'", str36, "Oct");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Oct" + "'", str38, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Property[year]" + "'", str44, "Property[year]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(9, (int) (byte) 1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth.Property property7 = yearMonth6.monthOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        int int14 = yearMonth11.size();
        org.joda.time.YearMonth yearMonth16 = yearMonth11.plusMonths((int) (byte) 10);
        int int17 = property7.compareTo((org.joda.time.ReadablePartial) yearMonth11);
        org.joda.time.YearMonth yearMonth18 = property7.getYearMonth();
        java.lang.String str19 = property7.getAsText();
        org.joda.time.YearMonth yearMonth20 = property7.getYearMonth();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth.Property property25 = yearMonth24.monthOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology28);
        org.joda.time.YearMonth yearMonth31 = yearMonth29.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        int int38 = yearMonth35.size();
        boolean boolean39 = yearMonth31.isAfter((org.joda.time.ReadablePartial) yearMonth35);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth.Property property44 = yearMonth43.monthOfYear();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonth yearMonth48 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology47);
        org.joda.time.YearMonth yearMonth50 = yearMonth48.minusYears((int) (short) 0);
        int int51 = yearMonth48.size();
        org.joda.time.YearMonth yearMonth53 = yearMonth48.plusMonths((int) (byte) 10);
        int int54 = property44.compareTo((org.joda.time.ReadablePartial) yearMonth48);
        org.joda.time.Chronology chronology55 = yearMonth48.getChronology();
        org.joda.time.YearMonth yearMonth56 = yearMonth35.withChronologyRetainFields(chronology55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.YearMonth yearMonth59 = yearMonth56.withPeriodAdded(readablePeriod57, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        int int61 = yearMonth59.indexOf(dateTimeFieldType60);
        boolean boolean62 = yearMonth24.isEqual((org.joda.time.ReadablePartial) yearMonth59);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth.Property property67 = yearMonth66.monthOfYear();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.YearMonth yearMonth71 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology70);
        org.joda.time.YearMonth yearMonth73 = yearMonth71.minusYears((int) (short) 0);
        int int74 = yearMonth71.size();
        org.joda.time.YearMonth yearMonth76 = yearMonth71.plusMonths((int) (byte) 10);
        int int77 = property67.compareTo((org.joda.time.ReadablePartial) yearMonth71);
        boolean boolean78 = yearMonth24.isEqual((org.joda.time.ReadablePartial) yearMonth71);
        boolean boolean79 = yearMonth20.isAfter((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.YearMonth yearMonth81 = yearMonth20.plusMonths(2);
        org.joda.time.YearMonth yearMonth83 = yearMonth20.minusYears(3);
        boolean boolean84 = yearMonth2.isEqual((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.YearMonth yearMonth86 = yearMonth2.withYear((int) (byte) 1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "October" + "'", str19, "October");
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(yearMonth53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(yearMonth76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(yearMonth81);
        org.junit.Assert.assertNotNull(yearMonth83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(yearMonth86);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) (-292275054));
        java.lang.String str3 = yearMonth1.toString("10");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "10" + "'", str3, "10");
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        java.util.Locale locale10 = null;
        int int11 = property4.getMaximumTextLength(locale10);
        java.lang.String str12 = property4.getAsString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "10" + "'", str12, "10");
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int) (short) 0);
        int int23 = yearMonth20.size();
        boolean boolean24 = yearMonth16.isAfter((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth yearMonth35 = yearMonth33.minusYears((int) (short) 0);
        int int36 = yearMonth33.size();
        org.joda.time.YearMonth yearMonth38 = yearMonth33.plusMonths((int) (byte) 10);
        int int39 = property29.compareTo((org.joda.time.ReadablePartial) yearMonth33);
        org.joda.time.Chronology chronology40 = yearMonth33.getChronology();
        org.joda.time.YearMonth yearMonth41 = yearMonth20.withChronologyRetainFields(chronology40);
        int int42 = yearMonth3.compareTo((org.joda.time.ReadablePartial) yearMonth20);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonth yearMonth46 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology45);
        org.joda.time.YearMonth.Property property47 = yearMonth46.monthOfYear();
        int int48 = property47.getMaximumValue();
        java.util.Locale locale49 = null;
        int int50 = property47.getMaximumShortTextLength(locale49);
        java.util.Locale locale51 = null;
        int int52 = property47.getMaximumTextLength(locale51);
        org.joda.time.DurationField durationField53 = property47.getRangeDurationField();
        java.util.Locale locale54 = null;
        java.lang.String str55 = property47.getAsShortText(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property47.getFieldType();
        org.joda.time.YearMonth yearMonth58 = yearMonth3.withField(dateTimeFieldType56, 11);
        org.joda.time.DateTimeField[] dateTimeFieldArray59 = yearMonth3.getFields();
        org.joda.time.Chronology chronology60 = yearMonth3.getChronology();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 12 + "'", int48 == 12);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Oct" + "'", str55, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(yearMonth58);
        org.junit.Assert.assertNotNull(dateTimeFieldArray59);
        org.junit.Assert.assertNotNull(chronology60);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth((long) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray2 = yearMonth1.getFields();
        org.junit.Assert.assertNotNull(dateTimeFieldArray2);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property4.getAsShortText(locale11);
        int int13 = property4.getMinimumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth15 = property4.setCopy("0097-10");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0097-10\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Oct" + "'", str12, "Oct");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        org.joda.time.YearMonth yearMonth17 = property15.getYearMonth();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        int int24 = yearMonth21.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth21.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        int int28 = yearMonth21.indexOf(dateTimeFieldType27);
        org.joda.time.YearMonth yearMonth30 = yearMonth21.plusMonths((-1));
        org.joda.time.YearMonth yearMonth32 = yearMonth21.plusMonths((-1));
        org.joda.time.YearMonth.Property property33 = yearMonth32.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.YearMonth yearMonth36 = yearMonth32.withPeriodAdded(readablePeriod34, (int) (short) -1);
        org.joda.time.YearMonth yearMonth38 = yearMonth32.plusMonths((int) (short) 10);
        boolean boolean39 = yearMonth17.isEqual((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth yearMonth45 = yearMonth43.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        int int60 = property50.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth62 = org.joda.time.YearMonth.now(chronology61);
        org.joda.time.YearMonth yearMonth63 = yearMonth45.withChronologyRetainFields(chronology61);
        org.joda.time.YearMonth.Property property64 = yearMonth63.year();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology67);
        org.joda.time.YearMonth.Property property69 = yearMonth68.monthOfYear();
        int int70 = property69.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField71 = property69.getField();
        org.joda.time.YearMonth yearMonth73 = property69.addToCopy((int) (short) 0);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.YearMonth yearMonth77 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology76);
        org.joda.time.YearMonth.Property property78 = yearMonth77.monthOfYear();
        int int79 = property78.getMaximumValue();
        java.util.Locale locale80 = null;
        int int81 = property78.getMaximumShortTextLength(locale80);
        java.util.Locale locale82 = null;
        int int83 = property78.getMaximumTextLength(locale82);
        java.lang.String str84 = property78.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = property78.getFieldType();
        boolean boolean86 = yearMonth73.isSupported(dateTimeFieldType85);
        int int87 = yearMonth63.indexOf(dateTimeFieldType85);
        int int88 = yearMonth32.get(dateTimeFieldType85);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(yearMonth45);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 12 + "'", int79 == 12);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 9 + "'", int83 == 9);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Oct" + "'", str84, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 9 + "'", int88 == 9);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.plusYears((int) '#');
        java.lang.String str40 = yearMonth39.toString();
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2015-01" + "'", str40, "2015-01");
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.parse("Sep", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        int int15 = property14.getMaximumValue();
        java.util.Locale locale16 = null;
        int int17 = property14.getMaximumShortTextLength(locale16);
        java.util.Locale locale18 = null;
        int int19 = property14.getMaximumTextLength(locale18);
        java.lang.String str20 = property14.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property14.getFieldType();
        boolean boolean22 = property4.equals((java.lang.Object) property14);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth.Property property27 = yearMonth26.monthOfYear();
        int int28 = property27.getMinimumValue();
        java.util.Locale locale29 = null;
        int int30 = property27.getMaximumShortTextLength(locale29);
        org.joda.time.YearMonth yearMonth32 = property27.addToCopy((int) (short) 1);
        java.util.Locale locale33 = null;
        java.lang.String str34 = property27.getAsText(locale33);
        int int35 = property27.getMinimumValue();
        java.lang.String str36 = property27.getAsText();
        java.lang.String str37 = property27.toString();
        boolean boolean38 = property4.equals((java.lang.Object) property27);
        java.lang.String str39 = property27.getName();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Oct" + "'", str20, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "October" + "'", str34, "October");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "October" + "'", str36, "October");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[monthOfYear]" + "'", str37, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "monthOfYear" + "'", str39, "monthOfYear");
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        org.joda.time.YearMonth yearMonth17 = property15.getYearMonth();
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property18.getAsText(locale19);
        org.joda.time.DurationField durationField21 = property18.getRangeDurationField();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "September" + "'", str20, "September");
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth yearMonth6 = yearMonth4.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        boolean boolean14 = yearMonth6.isAfter((org.joda.time.ReadablePartial) yearMonth10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.Chronology chronology30 = yearMonth23.getChronology();
        org.joda.time.YearMonth yearMonth31 = yearMonth10.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((long) (short) 1, chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.YearMonth yearMonth35 = yearMonth32.withPeriodAdded(readablePeriod33, 100);
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusYears(10);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.YearMonth yearMonth39 = yearMonth37.plus(readablePeriod38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.YearMonth yearMonth41 = yearMonth37.minus(readablePeriod40);
        org.junit.Assert.assertNotNull(yearMonth6);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertNotNull(yearMonth41);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        java.lang.String str9 = property4.getName();
        java.lang.String str10 = property4.getAsString();
        int int11 = property4.getMaximumValue();
        java.lang.String str12 = property4.toString();
        java.lang.String str13 = property4.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "monthOfYear" + "'", str9, "monthOfYear");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "10" + "'", str10, "10");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[monthOfYear]" + "'", str12, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Property[monthOfYear]" + "'", str13, "Property[monthOfYear]");
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((int) (short) 1, 11);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth yearMonth18 = yearMonth16.minusYears((int) (short) 0);
        int int19 = yearMonth16.size();
        org.joda.time.YearMonth yearMonth21 = yearMonth16.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = yearMonth16.indexOf(dateTimeFieldType22);
        org.joda.time.Interval interval24 = yearMonth16.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMaximumValue();
        java.lang.String str31 = property29.getAsShortText();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property29.getAsShortText(locale32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        int int35 = yearMonth16.get(dateTimeFieldType34);
        org.joda.time.YearMonth.Property property36 = yearMonth3.property(dateTimeFieldType34);
        org.joda.time.Chronology chronology37 = yearMonth3.getChronology();
        org.joda.time.YearMonth yearMonth38 = org.joda.time.YearMonth.now(chronology37);
        org.joda.time.DateTimeField[] dateTimeFieldArray39 = yearMonth38.getFields();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Oct" + "'", str31, "Oct");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(dateTimeFieldArray39);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        boolean boolean14 = yearMonth12.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.YearMonth yearMonth30 = property19.getYearMonth();
        java.lang.String str31 = property19.getAsText();
        org.joda.time.YearMonth yearMonth32 = property19.getYearMonth();
        boolean boolean33 = yearMonth12.isBefore((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.YearMonth yearMonth35 = yearMonth12.minusYears(3);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonth yearMonth39 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology38);
        org.joda.time.YearMonth.Property property40 = yearMonth39.monthOfYear();
        int int41 = property40.getMaximumValue();
        java.util.Locale locale42 = null;
        int int43 = property40.getMaximumShortTextLength(locale42);
        java.util.Locale locale44 = null;
        int int45 = property40.getMaximumTextLength(locale44);
        org.joda.time.DurationField durationField46 = property40.getRangeDurationField();
        java.util.Locale locale47 = null;
        java.lang.String str48 = property40.getAsShortText(locale47);
        int int49 = property40.getMinimumValueOverall();
        java.util.Locale locale51 = null;
        org.joda.time.YearMonth yearMonth52 = property40.setCopy("9", locale51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property40.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth55 = yearMonth35.withField(dateTimeFieldType53, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "October" + "'", str31, "October");
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 12 + "'", int41 == 12);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Oct" + "'", str48, "Oct");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.YearMonth yearMonth10 = property4.setCopy("October");
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = yearMonth10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology15);
        org.joda.time.YearMonth.Property property17 = yearMonth16.monthOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth yearMonth23 = yearMonth21.minusYears((int) (short) 0);
        int int24 = yearMonth21.size();
        org.joda.time.YearMonth yearMonth26 = yearMonth21.plusMonths((int) (byte) 10);
        int int27 = property17.compareTo((org.joda.time.ReadablePartial) yearMonth21);
        org.joda.time.Chronology chronology28 = yearMonth21.getChronology();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonth yearMonth32 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology31);
        org.joda.time.YearMonth yearMonth34 = yearMonth32.minusYears((int) (short) 0);
        int int35 = yearMonth32.size();
        org.joda.time.YearMonth yearMonth37 = yearMonth32.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = yearMonth32.indexOf(dateTimeFieldType38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonth yearMonth43 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology42);
        org.joda.time.YearMonth.Property property44 = yearMonth43.monthOfYear();
        int int45 = property44.getMaximumValue();
        java.lang.String str46 = property44.getAsShortText();
        java.util.Locale locale47 = null;
        java.lang.String str48 = property44.getAsShortText(locale47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property44.getFieldType();
        org.joda.time.YearMonth.Property property50 = yearMonth32.property(dateTimeFieldType49);
        org.joda.time.YearMonth.Property property51 = yearMonth21.property(dateTimeFieldType49);
        int int52 = yearMonth10.indexOf(dateTimeFieldType49);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.YearMonth yearMonth55 = yearMonth10.withPeriodAdded(readablePeriod53, 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = yearMonth55.getFieldTypes();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(yearMonth34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 12 + "'", int45 == 12);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Oct" + "'", str46, "Oct");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Oct" + "'", str48, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.YearMonth yearMonth17 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology16);
        org.joda.time.YearMonth.Property property18 = yearMonth17.monthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        int int25 = yearMonth22.size();
        org.joda.time.YearMonth yearMonth27 = yearMonth22.plusMonths((int) (byte) 10);
        int int28 = property18.compareTo((org.joda.time.ReadablePartial) yearMonth22);
        org.joda.time.Chronology chronology29 = yearMonth22.getChronology();
        org.joda.time.YearMonth yearMonth30 = yearMonth9.withChronologyRetainFields(chronology29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology33);
        org.joda.time.YearMonth yearMonth36 = yearMonth34.minusYears((int) (short) 0);
        int int37 = yearMonth34.size();
        org.joda.time.YearMonth yearMonth39 = yearMonth34.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        int int41 = yearMonth34.indexOf(dateTimeFieldType40);
        org.joda.time.YearMonth yearMonth43 = yearMonth34.plusMonths((-1));
        boolean boolean44 = yearMonth9.isEqual((org.joda.time.ReadablePartial) yearMonth43);
        org.joda.time.Interval interval45 = yearMonth9.toInterval();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval45);
    }

    @Test
    @Ignore
  public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        org.joda.time.Interval interval8 = yearMonth5.toInterval();
        org.joda.time.Chronology chronology9 = yearMonth5.getChronology();
        org.joda.time.YearMonth yearMonth10 = yearMonth1.withChronologyRetainFields(chronology9);
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((long) (byte) 0, chronology9);
        org.joda.time.YearMonth yearMonth12 = org.joda.time.YearMonth.now(chronology9);
        int[] intArray13 = yearMonth12.getValues();
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[2020, 11]");
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        boolean boolean14 = yearMonth12.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonth yearMonth23 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology22);
        org.joda.time.YearMonth yearMonth25 = yearMonth23.minusYears((int) (short) 0);
        int int26 = yearMonth23.size();
        org.joda.time.YearMonth yearMonth28 = yearMonth23.plusMonths((int) (byte) 10);
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) yearMonth23);
        org.joda.time.YearMonth yearMonth30 = property19.getYearMonth();
        java.lang.String str31 = property19.getAsText();
        org.joda.time.YearMonth yearMonth32 = property19.getYearMonth();
        boolean boolean33 = yearMonth12.isBefore((org.joda.time.ReadablePartial) yearMonth32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth.Property property38 = yearMonth37.monthOfYear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        org.joda.time.YearMonth yearMonth47 = yearMonth42.plusMonths((int) (byte) 10);
        int int48 = property38.compareTo((org.joda.time.ReadablePartial) yearMonth42);
        org.joda.time.Chronology chronology49 = yearMonth42.getChronology();
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((java.lang.Object) yearMonth12, chronology49);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "October" + "'", str31, "October");
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonth yearMonth5 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology4);
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonth yearMonth11 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology10);
        org.joda.time.YearMonth yearMonth13 = yearMonth11.minusYears((int) (short) 0);
        int int14 = yearMonth11.size();
        boolean boolean15 = yearMonth7.isAfter((org.joda.time.ReadablePartial) yearMonth11);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth.Property property20 = yearMonth19.monthOfYear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth yearMonth26 = yearMonth24.minusYears((int) (short) 0);
        int int27 = yearMonth24.size();
        org.joda.time.YearMonth yearMonth29 = yearMonth24.plusMonths((int) (byte) 10);
        int int30 = property20.compareTo((org.joda.time.ReadablePartial) yearMonth24);
        org.joda.time.Chronology chronology31 = yearMonth24.getChronology();
        org.joda.time.YearMonth yearMonth32 = yearMonth11.withChronologyRetainFields(chronology31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) ' ', (int) (byte) -1, chronology31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(yearMonth32);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth.Property property5 = yearMonth4.monthOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        org.joda.time.YearMonth yearMonth14 = yearMonth9.plusMonths((int) (byte) 10);
        int int15 = property5.compareTo((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        boolean boolean22 = yearMonth9.isAfter((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = yearMonth9.indexOf(dateTimeFieldType23);
        int int25 = yearMonth9.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = yearMonth9.getFieldTypes();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology30);
        org.joda.time.YearMonth yearMonth33 = yearMonth31.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.minusYears((int) (short) 0);
        int int40 = yearMonth37.size();
        boolean boolean41 = yearMonth33.isAfter((org.joda.time.ReadablePartial) yearMonth37);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        org.joda.time.YearMonth yearMonth55 = yearMonth50.plusMonths((int) (byte) 10);
        int int56 = property46.compareTo((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.Chronology chronology57 = yearMonth50.getChronology();
        org.joda.time.YearMonth yearMonth58 = yearMonth37.withChronologyRetainFields(chronology57);
        org.joda.time.YearMonth yearMonth59 = new org.joda.time.YearMonth((long) (short) 1, chronology57);
        org.joda.time.YearMonth yearMonth60 = new org.joda.time.YearMonth((java.lang.Object) yearMonth9, chronology57);
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth(chronology57);
        org.joda.time.YearMonth yearMonth62 = new org.joda.time.YearMonth((long) (short) 0, chronology57);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(yearMonth58);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology3);
        org.joda.time.YearMonth.Property property5 = yearMonth4.monthOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        org.joda.time.YearMonth yearMonth14 = yearMonth9.plusMonths((int) (byte) 10);
        int int15 = property5.compareTo((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Chronology chronology16 = yearMonth9.getChronology();
        org.joda.time.YearMonth yearMonth17 = org.joda.time.YearMonth.now(chronology16);
        org.joda.time.YearMonth yearMonth18 = org.joda.time.YearMonth.now(chronology16);
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((java.lang.Object) "0097-10", chronology16);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth(chronology16);
        java.util.Locale locale22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = yearMonth20.toString("", locale22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(yearMonth17);
        org.junit.Assert.assertNotNull(yearMonth18);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(2, 2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = yearMonth2.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonth2.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField11 = property4.getField();
        org.joda.time.DurationField durationField12 = property4.getDurationField();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property4.getAsShortText(locale13);
        int int15 = property4.getMaximumValueOverall();
        int int16 = property4.getMaximumValue();
        org.joda.time.YearMonth yearMonth18 = property4.addWrapFieldToCopy(2020);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonth yearMonth22 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology21);
        org.joda.time.YearMonth yearMonth24 = yearMonth22.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        int int31 = yearMonth28.size();
        boolean boolean32 = yearMonth24.isAfter((org.joda.time.ReadablePartial) yearMonth28);
        org.joda.time.Interval interval33 = yearMonth24.toInterval();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth yearMonth39 = yearMonth37.minusYears((int) (short) 0);
        int int40 = yearMonth37.size();
        org.joda.time.YearMonth yearMonth42 = yearMonth37.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        int int44 = yearMonth37.indexOf(dateTimeFieldType43);
        org.joda.time.Interval interval45 = yearMonth37.toInterval();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        int int51 = property50.getMaximumValue();
        java.lang.String str52 = property50.getAsShortText();
        java.util.Locale locale53 = null;
        java.lang.String str54 = property50.getAsShortText(locale53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property50.getFieldType();
        int int56 = yearMonth37.get(dateTimeFieldType55);
        org.joda.time.YearMonth.Property property57 = yearMonth24.property(dateTimeFieldType55);
        boolean boolean58 = yearMonth18.isSupported(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Oct" + "'", str14, "Oct");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(yearMonth42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 12 + "'", int51 == 12);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Oct" + "'", str52, "Oct");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Oct" + "'", str54, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = yearMonth3.getFieldTypes();
        java.lang.Class<?> wildcardClass16 = dateTimeFieldTypeArray15.getClass();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth3.getFieldTypes();
        int[] intArray10 = yearMonth3.getValues();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        org.joda.time.YearMonth yearMonth24 = yearMonth19.plusMonths((int) (byte) 10);
        int int25 = property15.compareTo((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.Chronology chronology26 = yearMonth19.getChronology();
        org.joda.time.YearMonth yearMonth27 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth28 = org.joda.time.YearMonth.now(chronology26);
        org.joda.time.YearMonth yearMonth29 = new org.joda.time.YearMonth((java.lang.Object) yearMonth3, chronology26);
        org.joda.time.YearMonth yearMonth31 = new org.joda.time.YearMonth(0L);
        java.lang.String str32 = yearMonth31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth yearMonth38 = yearMonth36.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth yearMonth44 = yearMonth42.minusYears((int) (short) 0);
        int int45 = yearMonth42.size();
        boolean boolean46 = yearMonth38.isAfter((org.joda.time.ReadablePartial) yearMonth42);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth.Property property51 = yearMonth50.monthOfYear();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology54);
        org.joda.time.YearMonth yearMonth57 = yearMonth55.minusYears((int) (short) 0);
        int int58 = yearMonth55.size();
        org.joda.time.YearMonth yearMonth60 = yearMonth55.plusMonths((int) (byte) 10);
        int int61 = property51.compareTo((org.joda.time.ReadablePartial) yearMonth55);
        org.joda.time.Chronology chronology62 = yearMonth55.getChronology();
        org.joda.time.YearMonth yearMonth63 = yearMonth42.withChronologyRetainFields(chronology62);
        org.joda.time.YearMonth yearMonth65 = yearMonth42.withYear((int) (byte) 1);
        boolean boolean66 = yearMonth31.isEqual((org.joda.time.ReadablePartial) yearMonth65);
        boolean boolean67 = yearMonth3.isAfter((org.joda.time.ReadablePartial) yearMonth31);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.YearMonth yearMonth71 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology70);
        org.joda.time.YearMonth.Property property72 = yearMonth71.monthOfYear();
        int int73 = property72.getMaximumValue();
        java.util.Locale locale74 = null;
        int int75 = property72.getMaximumShortTextLength(locale74);
        java.util.Locale locale76 = null;
        int int77 = property72.getMaximumTextLength(locale76);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property72.getFieldType();
        int int79 = yearMonth31.indexOf(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[97, 10]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(yearMonth24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01" + "'", str32, "1970-01");
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(yearMonth44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(yearMonth63);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 12 + "'", int73 == 12);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 3 + "'", int75 == 3);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 9 + "'", int77 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        java.lang.String str6 = yearMonth3.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonth yearMonth10 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology9);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.minusYears((int) (short) 0);
        int int13 = yearMonth10.size();
        org.joda.time.YearMonth yearMonth15 = yearMonth10.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = yearMonth10.indexOf(dateTimeFieldType16);
        int int18 = yearMonth10.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = yearMonth10.getFieldType(1);
        boolean boolean21 = yearMonth3.isSupported(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0097-10" + "'", str6, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property4.getFieldType();
        int int12 = property4.getMinimumValue();
        java.lang.String str13 = property4.getName();
        int int14 = property4.getMinimumValueOverall();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth.Property property19 = yearMonth18.monthOfYear();
        int int20 = property19.getMaximumValue();
        java.lang.String str21 = property19.getAsShortText();
        java.util.Locale locale22 = null;
        java.lang.String str23 = property19.getAsShortText(locale22);
        org.joda.time.YearMonth yearMonth25 = property19.setCopy("October");
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = yearMonth25.toDateTime(readableInstant26);
        int int28 = property4.compareTo((org.joda.time.ReadableInstant) dateTime27);
        int int29 = property4.getMinimumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Oct" + "'", str21, "Oct");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Oct" + "'", str23, "Oct");
        org.junit.Assert.assertNotNull(yearMonth25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField7 = property4.getField();
        org.joda.time.YearMonth yearMonth9 = property4.setCopy("Oct");
        org.joda.time.YearMonth yearMonth11 = property4.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.YearMonth yearMonth13 = property4.addToCopy((int) (byte) 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(yearMonth13);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.YearMonth.Property property15 = yearMonth5.year();
        int[] intArray16 = yearMonth5.getValues();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Interval interval18 = yearMonth5.toInterval(dateTimeZone17);
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((long) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = yearMonth20.toInterval(dateTimeZone21);
        int int24 = yearMonth20.getValue((int) (short) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonth20.getFieldTypes();
        boolean boolean26 = yearMonth5.equals((java.lang.Object) dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[97, 10]");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth.Property property14 = yearMonth9.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property14.getAsShortText(locale16);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "97" + "'", str17, "97");
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        org.joda.time.YearMonth yearMonth9 = property4.addToCopy((int) (short) 1);
        java.lang.String str10 = property4.getName();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonth yearMonth6 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology5);
        org.joda.time.YearMonth yearMonth8 = yearMonth6.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonth yearMonth12 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology11);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.minusYears((int) (short) 0);
        int int15 = yearMonth12.size();
        boolean boolean16 = yearMonth8.isAfter((org.joda.time.ReadablePartial) yearMonth12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.Chronology chronology32 = yearMonth25.getChronology();
        org.joda.time.YearMonth yearMonth33 = yearMonth12.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonth yearMonth34 = new org.joda.time.YearMonth((long) (short) 1, chronology32);
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth(chronology32);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) (byte) 100, (int) (short) 10, chronology32);
        int int38 = yearMonth36.getValue((int) (short) 1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth.Property property43 = yearMonth42.monthOfYear();
        int int44 = property43.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField45 = property43.getField();
        org.joda.time.YearMonth yearMonth47 = property43.addToCopy((int) (short) 0);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonth yearMonth51 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology50);
        org.joda.time.YearMonth.Property property52 = yearMonth51.monthOfYear();
        int int53 = property52.getMaximumValue();
        java.util.Locale locale54 = null;
        int int55 = property52.getMaximumShortTextLength(locale54);
        java.util.Locale locale56 = null;
        int int57 = property52.getMaximumTextLength(locale56);
        java.lang.String str58 = property52.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property52.getFieldType();
        boolean boolean60 = yearMonth47.isSupported(dateTimeFieldType59);
        int int61 = yearMonth36.compareTo((org.joda.time.ReadablePartial) yearMonth47);
        org.joda.time.DurationFieldType durationFieldType62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth64 = yearMonth36.withFieldAdded(durationFieldType62, 98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(yearMonth47);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 12 + "'", int53 == 12);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Oct" + "'", str58, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone15);
        org.joda.time.YearMonth yearMonth18 = yearMonth8.minusYears((int) (short) 0);
        java.lang.String str19 = yearMonth8.toString();
        org.joda.time.YearMonth yearMonth21 = yearMonth8.withMonthOfYear(11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = yearMonth8.toString(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0097-10" + "'", str19, "0097-10");
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0097-10" + "'", str23, "0097-10");
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = yearMonth8.toString(dateTimeFormatter15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology19);
        org.joda.time.YearMonth.Property property21 = yearMonth20.monthOfYear();
        int int22 = property21.getMinimumValue();
        java.util.Locale locale23 = null;
        int int24 = property21.getMaximumShortTextLength(locale23);
        org.joda.time.DurationField durationField25 = property21.getDurationField();
        boolean boolean26 = yearMonth8.equals((java.lang.Object) property21);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth yearMonth32 = yearMonth30.minusYears((int) (short) 0);
        int int33 = yearMonth30.size();
        org.joda.time.YearMonth yearMonth35 = yearMonth30.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        int int37 = yearMonth30.indexOf(dateTimeFieldType36);
        org.joda.time.YearMonth yearMonth39 = yearMonth30.plusMonths((-1));
        boolean boolean41 = yearMonth39.equals((java.lang.Object) 1);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonth yearMonth45 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology44);
        org.joda.time.YearMonth.Property property46 = yearMonth45.monthOfYear();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.YearMonth yearMonth50 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology49);
        org.joda.time.YearMonth yearMonth52 = yearMonth50.minusYears((int) (short) 0);
        int int53 = yearMonth50.size();
        org.joda.time.YearMonth yearMonth55 = yearMonth50.plusMonths((int) (byte) 10);
        int int56 = property46.compareTo((org.joda.time.ReadablePartial) yearMonth50);
        org.joda.time.YearMonth yearMonth57 = property46.getYearMonth();
        java.lang.String str58 = property46.getAsText();
        org.joda.time.YearMonth yearMonth59 = property46.getYearMonth();
        boolean boolean60 = yearMonth39.isBefore((org.joda.time.ReadablePartial) yearMonth59);
        org.joda.time.YearMonth yearMonth62 = yearMonth39.minusYears(3);
        int int63 = yearMonth8.compareTo((org.joda.time.ReadablePartial) yearMonth39);
        org.joda.time.YearMonth yearMonth65 = yearMonth39.plusMonths(1);
        int int66 = yearMonth65.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth67 = new org.joda.time.YearMonth((java.lang.Object) int66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0097-10" + "'", str16, "0097-10");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(yearMonth32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(yearMonth35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(yearMonth39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonth52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "October" + "'", str58, "October");
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = yearMonth8.getFields();
        org.joda.time.YearMonth yearMonth11 = yearMonth8.plusYears((int) (byte) 1);
        org.joda.time.YearMonth.Property property12 = yearMonth8.monthOfYear();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.Interval interval14 = yearMonth5.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = yearMonth18.indexOf(dateTimeFieldType24);
        org.joda.time.Interval interval26 = yearMonth18.toInterval();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonth yearMonth30 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology29);
        org.joda.time.YearMonth.Property property31 = yearMonth30.monthOfYear();
        int int32 = property31.getMaximumValue();
        java.lang.String str33 = property31.getAsShortText();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property31.getFieldType();
        int int37 = yearMonth18.get(dateTimeFieldType36);
        org.joda.time.YearMonth.Property property38 = yearMonth5.property(dateTimeFieldType36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology41);
        org.joda.time.YearMonth.Property property43 = yearMonth42.monthOfYear();
        org.joda.time.DurationField durationField44 = property43.getDurationField();
        java.util.Locale locale45 = null;
        int int46 = property43.getMaximumShortTextLength(locale45);
        java.lang.String str47 = property43.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property43.getFieldType();
        boolean boolean49 = yearMonth5.isSupported(dateTimeFieldType48);
        org.joda.time.YearMonth yearMonth51 = yearMonth5.minusYears((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType53 = yearMonth51.getFieldType(11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Oct" + "'", str33, "Oct");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "10" + "'", str47, "10");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(yearMonth51);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = yearMonth8.getFields();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        int int16 = yearMonth13.size();
        org.joda.time.YearMonth yearMonth18 = yearMonth13.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        int int20 = yearMonth13.indexOf(dateTimeFieldType19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology23);
        org.joda.time.YearMonth.Property property25 = yearMonth24.monthOfYear();
        int int26 = property25.getMaximumValue();
        java.lang.String str27 = property25.getAsShortText();
        java.util.Locale locale28 = null;
        java.lang.String str29 = property25.getAsShortText(locale28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property25.getFieldType();
        org.joda.time.YearMonth.Property property31 = yearMonth13.property(dateTimeFieldType30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.YearMonth yearMonth35 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology34);
        org.joda.time.YearMonth yearMonth37 = yearMonth35.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonth yearMonth41 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology40);
        org.joda.time.YearMonth yearMonth43 = yearMonth41.minusYears((int) (short) 0);
        int int44 = yearMonth41.size();
        boolean boolean45 = yearMonth37.isAfter((org.joda.time.ReadablePartial) yearMonth41);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.YearMonth yearMonth49 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology48);
        org.joda.time.YearMonth.Property property50 = yearMonth49.monthOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonth yearMonth54 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology53);
        org.joda.time.YearMonth yearMonth56 = yearMonth54.minusYears((int) (short) 0);
        int int57 = yearMonth54.size();
        org.joda.time.YearMonth yearMonth59 = yearMonth54.plusMonths((int) (byte) 10);
        int int60 = property50.compareTo((org.joda.time.ReadablePartial) yearMonth54);
        org.joda.time.Chronology chronology61 = yearMonth54.getChronology();
        org.joda.time.YearMonth yearMonth62 = yearMonth41.withChronologyRetainFields(chronology61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth yearMonth68 = yearMonth66.minusYears((int) (short) 0);
        int int69 = yearMonth66.size();
        org.joda.time.YearMonth yearMonth71 = yearMonth66.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        int int73 = yearMonth66.indexOf(dateTimeFieldType72);
        org.joda.time.Interval interval74 = yearMonth66.toInterval();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.YearMonth yearMonth78 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology77);
        org.joda.time.YearMonth.Property property79 = yearMonth78.monthOfYear();
        int int80 = property79.getMaximumValue();
        java.lang.String str81 = property79.getAsShortText();
        java.util.Locale locale82 = null;
        java.lang.String str83 = property79.getAsShortText(locale82);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = property79.getFieldType();
        int int85 = yearMonth66.get(dateTimeFieldType84);
        boolean boolean86 = yearMonth62.isSupported(dateTimeFieldType84);
        boolean boolean87 = yearMonth13.isSupported(dateTimeFieldType84);
        boolean boolean88 = yearMonth8.isSupported(dateTimeFieldType84);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.YearMonth yearMonth90 = yearMonth8.minus(readablePeriod89);
        org.joda.time.YearMonth yearMonth92 = yearMonth8.plusMonths(1970);
        java.util.Locale locale94 = null;
        java.lang.String str95 = yearMonth8.toString("97", locale94);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(yearMonth18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Oct" + "'", str27, "Oct");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Oct" + "'", str29, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonth37);
        org.junit.Assert.assertNotNull(yearMonth43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(yearMonth56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 12 + "'", int80 == 12);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Oct" + "'", str81, "Oct");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Oct" + "'", str83, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(yearMonth90);
        org.junit.Assert.assertNotNull(yearMonth92);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "97" + "'", str95, "97");
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.YearMonth yearMonth8 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology7);
        org.joda.time.YearMonth yearMonth10 = yearMonth8.minusYears((int) (short) 0);
        int int11 = yearMonth8.size();
        org.joda.time.YearMonth yearMonth13 = yearMonth8.plusMonths((int) (byte) 10);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) yearMonth8);
        org.joda.time.YearMonth yearMonth15 = property4.getYearMonth();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property4.getAsShortText(locale16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonth yearMonth21 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology20);
        org.joda.time.YearMonth.Property property22 = yearMonth21.monthOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.YearMonth yearMonth26 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology25);
        org.joda.time.YearMonth yearMonth28 = yearMonth26.minusYears((int) (short) 0);
        int int29 = yearMonth26.size();
        org.joda.time.YearMonth yearMonth31 = yearMonth26.plusMonths((int) (byte) 10);
        int int32 = property22.compareTo((org.joda.time.ReadablePartial) yearMonth26);
        org.joda.time.YearMonth yearMonth33 = property22.getYearMonth();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property22.getAsShortText(locale34);
        org.joda.time.YearMonth yearMonth36 = property22.getYearMonth();
        boolean boolean37 = property4.equals((java.lang.Object) yearMonth36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.YearMonth yearMonth39 = yearMonth36.plus(readablePeriod38);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Oct" + "'", str17, "Oct");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonth28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(yearMonth31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Oct" + "'", str35, "Oct");
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(yearMonth39);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth yearMonth11 = yearMonth9.minusYears((int) (short) 0);
        int int12 = yearMonth9.size();
        boolean boolean13 = yearMonth5.isAfter((org.joda.time.ReadablePartial) yearMonth9);
        org.joda.time.YearMonth.Property property14 = yearMonth9.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property14.getFieldType();
        int int17 = property14.get();
        java.util.Locale locale18 = null;
        int int19 = property14.getMaximumTextLength(locale18);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology8);
        org.joda.time.YearMonth.Property property10 = yearMonth9.monthOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth yearMonth16 = yearMonth14.minusYears((int) (short) 0);
        int int17 = yearMonth14.size();
        org.joda.time.YearMonth yearMonth19 = yearMonth14.plusMonths((int) (byte) 10);
        int int20 = property10.compareTo((org.joda.time.ReadablePartial) yearMonth14);
        org.joda.time.Chronology chronology21 = yearMonth14.getChronology();
        org.joda.time.YearMonth yearMonth22 = org.joda.time.YearMonth.now(chronology21);
        org.joda.time.YearMonth yearMonth23 = yearMonth5.withChronologyRetainFields(chronology21);
        org.joda.time.YearMonth.Property property24 = yearMonth23.year();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth.Property property29 = yearMonth28.monthOfYear();
        int int30 = property29.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField31 = property29.getField();
        org.joda.time.YearMonth yearMonth33 = property29.addToCopy((int) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.YearMonth yearMonth37 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology36);
        org.joda.time.YearMonth.Property property38 = yearMonth37.monthOfYear();
        int int39 = property38.getMaximumValue();
        java.util.Locale locale40 = null;
        int int41 = property38.getMaximumShortTextLength(locale40);
        java.util.Locale locale42 = null;
        int int43 = property38.getMaximumTextLength(locale42);
        java.lang.String str44 = property38.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property38.getFieldType();
        boolean boolean46 = yearMonth33.isSupported(dateTimeFieldType45);
        int int47 = yearMonth23.indexOf(dateTimeFieldType45);
        int[] intArray48 = yearMonth23.getValues();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(yearMonth22);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Oct" + "'", str44, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, 10]");
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.getMaximumValueOverall();
        java.util.Locale locale12 = null;
        int int13 = property4.getMaximumTextLength(locale12);
        int int14 = property4.get();
        java.lang.String str15 = property4.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth17 = property4.setCopy("Property[year]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[year]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "monthOfYear" + "'", str15, "monthOfYear");
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth8 = property4.addWrapFieldToCopy((int) (short) -1);
        int[] intArray9 = yearMonth8.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth.Property property14 = yearMonth13.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonth yearMonth18 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology17);
        org.joda.time.YearMonth yearMonth20 = yearMonth18.minusYears((int) (short) 0);
        int int21 = yearMonth18.size();
        org.joda.time.YearMonth yearMonth23 = yearMonth18.plusMonths((int) (byte) 10);
        int int24 = property14.compareTo((org.joda.time.ReadablePartial) yearMonth18);
        org.joda.time.Chronology chronology25 = yearMonth18.getChronology();
        org.joda.time.YearMonth yearMonth26 = org.joda.time.YearMonth.now(chronology25);
        org.joda.time.YearMonth yearMonth27 = yearMonth8.withChronologyRetainFields(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.YearMonth yearMonth29 = yearMonth27.plus(readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.YearMonth yearMonth33 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology32);
        org.joda.time.YearMonth.Property property34 = yearMonth33.monthOfYear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonth yearMonth38 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology37);
        org.joda.time.YearMonth yearMonth40 = yearMonth38.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonth yearMonth44 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology43);
        org.joda.time.YearMonth yearMonth46 = yearMonth44.minusYears((int) (short) 0);
        int int47 = yearMonth44.size();
        boolean boolean48 = yearMonth40.isAfter((org.joda.time.ReadablePartial) yearMonth44);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonth yearMonth52 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology51);
        org.joda.time.YearMonth.Property property53 = yearMonth52.monthOfYear();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.YearMonth yearMonth57 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology56);
        org.joda.time.YearMonth yearMonth59 = yearMonth57.minusYears((int) (short) 0);
        int int60 = yearMonth57.size();
        org.joda.time.YearMonth yearMonth62 = yearMonth57.plusMonths((int) (byte) 10);
        int int63 = property53.compareTo((org.joda.time.ReadablePartial) yearMonth57);
        org.joda.time.Chronology chronology64 = yearMonth57.getChronology();
        org.joda.time.YearMonth yearMonth65 = yearMonth44.withChronologyRetainFields(chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.YearMonth yearMonth68 = yearMonth65.withPeriodAdded(readablePeriod66, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        int int70 = yearMonth68.indexOf(dateTimeFieldType69);
        boolean boolean71 = yearMonth33.isEqual((org.joda.time.ReadablePartial) yearMonth68);
        org.joda.time.YearMonth.Property property72 = yearMonth68.year();
        int int73 = yearMonth29.compareTo((org.joda.time.ReadablePartial) yearMonth68);
        org.joda.time.YearMonth yearMonth75 = yearMonth29.plusMonths((int) (short) 100);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[97, 9]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonth26);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertNotNull(yearMonth29);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(yearMonth40);
        org.junit.Assert.assertNotNull(yearMonth46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(yearMonth59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(yearMonth62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(yearMonth65);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(yearMonth75);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        int int11 = property4.getMaximumValueOverall();
        java.lang.Class<?> wildcardClass12 = property4.getClass();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        java.util.Locale locale8 = null;
        int int9 = property4.getMaximumTextLength(locale8);
        java.lang.String str10 = property4.getAsShortText();
        org.joda.time.DateTimeField dateTimeField11 = property4.getField();
        org.joda.time.DurationField durationField12 = property4.getDurationField();
        org.joda.time.YearMonth yearMonth14 = property4.addToCopy(1980);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Oct" + "'", str10, "Oct");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(yearMonth14);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMinimumValue();
        java.util.Locale locale6 = null;
        int int7 = property4.getMaximumShortTextLength(locale6);
        int int8 = property4.getMaximumValue();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth.Property property4 = yearMonth3.monthOfYear();
        int int5 = property4.getMaximumValue();
        java.lang.String str6 = property4.getAsShortText();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property4.getFieldType();
        org.joda.time.YearMonth yearMonth10 = property4.getYearMonth();
        int int11 = yearMonth10.size();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = yearMonth10.getValue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oct" + "'", str6, "Oct");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Oct" + "'", str8, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.YearMonth yearMonth14 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology13);
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.getMaximumValue();
        java.lang.String str17 = property15.getAsShortText();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property15.getAsShortText(locale18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property15.getFieldType();
        org.joda.time.YearMonth.Property property21 = yearMonth3.property(dateTimeFieldType20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonth yearMonth25 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology24);
        org.joda.time.YearMonth yearMonth27 = yearMonth25.minusYears((int) (short) 0);
        int int28 = yearMonth25.size();
        org.joda.time.YearMonth yearMonth30 = yearMonth25.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = yearMonth25.indexOf(dateTimeFieldType31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology35);
        org.joda.time.YearMonth.Property property37 = yearMonth36.monthOfYear();
        int int38 = property37.getMaximumValue();
        java.lang.String str39 = property37.getAsShortText();
        java.util.Locale locale40 = null;
        java.lang.String str41 = property37.getAsShortText(locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property37.getFieldType();
        org.joda.time.YearMonth.Property property43 = yearMonth25.property(dateTimeFieldType42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology46);
        org.joda.time.YearMonth yearMonth49 = yearMonth47.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.YearMonth yearMonth53 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology52);
        org.joda.time.YearMonth yearMonth55 = yearMonth53.minusYears((int) (short) 0);
        int int56 = yearMonth53.size();
        boolean boolean57 = yearMonth49.isAfter((org.joda.time.ReadablePartial) yearMonth53);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonth yearMonth61 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology60);
        org.joda.time.YearMonth.Property property62 = yearMonth61.monthOfYear();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonth yearMonth66 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology65);
        org.joda.time.YearMonth yearMonth68 = yearMonth66.minusYears((int) (short) 0);
        int int69 = yearMonth66.size();
        org.joda.time.YearMonth yearMonth71 = yearMonth66.plusMonths((int) (byte) 10);
        int int72 = property62.compareTo((org.joda.time.ReadablePartial) yearMonth66);
        org.joda.time.Chronology chronology73 = yearMonth66.getChronology();
        org.joda.time.YearMonth yearMonth74 = yearMonth53.withChronologyRetainFields(chronology73);
        org.joda.time.YearMonth yearMonth75 = new org.joda.time.YearMonth((java.lang.Object) yearMonth25, chronology73);
        boolean boolean76 = yearMonth3.isBefore((org.joda.time.ReadablePartial) yearMonth25);
        org.joda.time.YearMonth yearMonth78 = yearMonth25.minusYears((int) 'a');
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Oct" + "'", str17, "Oct");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Oct" + "'", str19, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonth27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 12 + "'", int38 == 12);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Oct" + "'", str39, "Oct");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Oct" + "'", str41, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(yearMonth49);
        org.junit.Assert.assertNotNull(yearMonth55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(yearMonth68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(yearMonth71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(yearMonth74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(yearMonth78);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth9 = new org.joda.time.YearMonth(1, 12);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology12);
        org.joda.time.YearMonth yearMonth15 = yearMonth13.minusYears((int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology18);
        org.joda.time.YearMonth yearMonth21 = yearMonth19.minusYears((int) (short) 0);
        int int22 = yearMonth19.size();
        boolean boolean23 = yearMonth15.isAfter((org.joda.time.ReadablePartial) yearMonth19);
        org.joda.time.Interval interval24 = yearMonth15.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.YearMonth yearMonth28 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology27);
        org.joda.time.YearMonth yearMonth30 = yearMonth28.minusYears((int) (short) 0);
        int int31 = yearMonth28.size();
        org.joda.time.YearMonth yearMonth33 = yearMonth28.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = yearMonth28.indexOf(dateTimeFieldType34);
        org.joda.time.Interval interval36 = yearMonth28.toInterval();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonth yearMonth40 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology39);
        org.joda.time.YearMonth.Property property41 = yearMonth40.monthOfYear();
        int int42 = property41.getMaximumValue();
        java.lang.String str43 = property41.getAsShortText();
        java.util.Locale locale44 = null;
        java.lang.String str45 = property41.getAsShortText(locale44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property41.getFieldType();
        int int47 = yearMonth28.get(dateTimeFieldType46);
        org.joda.time.YearMonth.Property property48 = yearMonth15.property(dateTimeFieldType46);
        boolean boolean49 = yearMonth9.isSupported(dateTimeFieldType46);
        org.joda.time.YearMonth yearMonth51 = yearMonth3.withField(dateTimeFieldType46, (int) (short) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.YearMonth yearMonth55 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology54);
        org.joda.time.YearMonth yearMonth57 = yearMonth55.minusYears((int) (short) 0);
        int int58 = yearMonth55.size();
        org.joda.time.YearMonth yearMonth60 = yearMonth55.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        int int62 = yearMonth55.indexOf(dateTimeFieldType61);
        org.joda.time.YearMonth yearMonth64 = yearMonth55.plusMonths((-1));
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonth yearMonth68 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology67);
        org.joda.time.YearMonth yearMonth70 = yearMonth68.minusYears((int) (short) 0);
        int int71 = yearMonth68.size();
        org.joda.time.YearMonth yearMonth73 = yearMonth68.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        int int75 = yearMonth68.indexOf(dateTimeFieldType74);
        org.joda.time.Interval interval76 = yearMonth68.toInterval();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.YearMonth yearMonth80 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology79);
        org.joda.time.YearMonth.Property property81 = yearMonth80.monthOfYear();
        int int82 = property81.getMaximumValue();
        java.lang.String str83 = property81.getAsShortText();
        java.util.Locale locale84 = null;
        java.lang.String str85 = property81.getAsShortText(locale84);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = property81.getFieldType();
        int int87 = yearMonth68.get(dateTimeFieldType86);
        org.joda.time.YearMonth.Property property88 = yearMonth55.property(dateTimeFieldType86);
        int int89 = yearMonth3.get(dateTimeFieldType86);
        org.joda.time.DurationFieldType durationFieldType90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth92 = yearMonth3.withFieldAdded(durationFieldType90, 98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth15);
        org.junit.Assert.assertNotNull(yearMonth21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(yearMonth33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 12 + "'", int42 == 12);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Oct" + "'", str43, "Oct");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Oct" + "'", str45, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(yearMonth51);
        org.junit.Assert.assertNotNull(yearMonth57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(yearMonth60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(yearMonth64);
        org.junit.Assert.assertNotNull(yearMonth70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(yearMonth73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 12 + "'", int82 == 12);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Oct" + "'", str83, "Oct");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Oct" + "'", str85, "Oct");
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10 + "'", int87 == 10);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((int) 'a', (int) (byte) 10, chronology2);
        org.joda.time.YearMonth yearMonth5 = yearMonth3.minusYears((int) (short) 0);
        int int6 = yearMonth3.size();
        org.joda.time.YearMonth yearMonth8 = yearMonth3.plusMonths((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = yearMonth3.indexOf(dateTimeFieldType9);
        org.joda.time.YearMonth yearMonth12 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth yearMonth14 = yearMonth3.plusMonths((-1));
        org.joda.time.YearMonth.Property property15 = yearMonth14.monthOfYear();
        int int16 = property15.get();
        java.util.Locale locale17 = null;
        int int18 = property15.getMaximumShortTextLength(locale17);
        org.joda.time.DateTimeField dateTimeField19 = property15.getField();
        int int20 = property15.get();
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
    }
}


/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 03:30:10 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BoundFunction;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.Delegator;
import com.google.javascript.rhino.head.EcmaError;
import com.google.javascript.rhino.head.EvaluatorException;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeBoolean;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeJavaConstructor;
import com.google.javascript.rhino.head.NativeJavaPackage;
import com.google.javascript.rhino.head.NativeJavaTopPackage;
import com.google.javascript.rhino.head.NativeNumber;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.TopLevel;
import java.lang.reflect.Member;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      BoundFunction boundFunction0 = new BoundFunction(context0, importerTopLevel0, nativeJavaClass0, importerTopLevel0, (Object[]) null);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(scriptable0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      doReturn((Scriptable) null, (Scriptable) null).when(scriptable0).getParentScope();
      Byte byte0 = new Byte((byte) (-89));
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(scriptable0, byte0, (byte) (-89));
      assertEquals("object", scriptableObject0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeNumber nativeNumber0 = new NativeNumber((-2900));
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(nativeArray0, nativeNumber0, 0);
      assertFalse(scriptableObject0.isEmpty());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      NativeError nativeError0 = new NativeError();
      NativeJavaPackage nativeJavaPackage0 = nativeJavaTopPackage0.forcePackage("~KkK%", nativeError0);
      NativeJavaPackage nativeJavaPackage1 = (NativeJavaPackage)nativeJavaPackage0.get("v(t", (Scriptable) nativeJavaTopPackage0);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      importerTopLevel0.defineConst("language version", nativeContinuation0);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      nativeBoolean0.defineConst("error reporter", (Scriptable) null);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      // Undeclared exception!
      try { 
        nativeCall0.setAttributes((-3), (-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Class<NativeJavaConstructor> class0 = NativeJavaConstructor.class;
      NativeJavaConstructor nativeJavaConstructor0 = ScriptableObject.getTypedProperty((Scriptable) importerTopLevel0, 11, class0);
      assertNull(nativeJavaConstructor0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Context context0 = Context.getCurrentContext();
      TopLevel topLevel0 = new TopLevel();
      nativeArray0.defineOwnProperty(context0, objectArray0[1], (ScriptableObject) topLevel0, true);
      assertTrue(context0.isGeneratingSource());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<BoundFunction> class0 = BoundFunction.class;
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      NativeString nativeString0 = new NativeString("error reporter");
      nativeString0.put(293, scriptable0, (Object) class0);
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Delegator delegator0 = new Delegator(nativeIterator_StopIteration0);
      boolean boolean0 = nativeIterator_StopIteration0.has(0, (Scriptable) delegator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NativeString nativeString0 = new NativeString(stringBuilder0);
      String string0 = nativeString0.getTypeOf();
      assertEquals("object", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      ScriptableObject.redefineProperty(nativeJavaTopPackage0, (String) null, false);
      assertTrue(nativeJavaTopPackage0.isExtensible());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test13()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ImporterTopLevel importerTopLevel1 = (ImporterTopLevel)context0.initStandardObjects((ScriptableObject) importerTopLevel0, true);
      assertTrue(importerTopLevel1.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      ContextFactory contextFactory0 = new ContextFactory();
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(topLevel0, contextFactory0, (-1618351819));
      topLevel0.putConst("_vrk", scriptableObject0, false);
      assertTrue(topLevel0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Member member0 = mock(Member.class, new ViolatedAssumptionAnswer());
      NativeString nativeString0 = new NativeString((CharSequence) null);
      // Undeclared exception!
      try { 
        nativeString0.putConst((String) null, (Scriptable) null, member0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      NativeError nativeError0 = new NativeError();
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, scriptable0, (Object) nativeError0, 2);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test17()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-805L));
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      // Undeclared exception!
      try { 
        nativeArray0.getDefaultValue(class0);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.ImporterTopLevel
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1953L);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      // Undeclared exception!
      try { 
        nativeArray0.defineOwnProperty(context0, (Object) nativeBoolean0, (ScriptableObject) null, false);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test19()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ScriptableObject.isFalse(nativeIterator_StopIteration0);
  }
}

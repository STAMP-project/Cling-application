/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 04:13:59 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckAccessControls;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeSimplifyRegExp;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.ReorderConstantExpression;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.TernaryValue;
import java.io.ByteArrayInputStream;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      doReturn(false, false, true, true, false).when(codingConvention0).isConstantKey(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "com.google.javascript.rhino.jstype.TemplateType");
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertFalse(node0.hasOneChild());
      assertEquals(33, node0.getType());
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.TemplateType", 1707, 122);
      NodeUtil.copyNameAnnotations(node0, node0);
      assertEquals(6991994, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      doReturn(false, false, true, false, true).when(codingConvention0).isConstantKey(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "com.google.javascript.rhino.jstype.TemplateType");
      boolean boolean0 = node0.isUnscopedQualifiedName();
      assertEquals((-1), node0.getCharno());
      assertTrue(boolean0);
      assertFalse(node0.isName());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "2m$3bCw)");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        peepholeRemoveDeadCode0.tryFoldDo(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "2m$3bCw)");
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertFalse(boolean0);
      
      NodeUtil.getVarsDeclaredInBranch(node0);
      assertTrue(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isRegExp());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "QW??XVm");
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals((-1), node0.getSourcePosition());
      assertNull(string0);
      assertEquals(38, node0.getType());
      assertTrue(node0.isName());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      doReturn(false, false, true, true, false).when(codingConvention0).isConstantKey(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "com.google.javascript.rhino.jstype.TemplateType");
      NodeUtil.getPureBooleanValue(node0);
      assertEquals(33, node0.getType());
      assertFalse(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.getStringValue(node1);
      assertEquals(43, node0.getType());
      assertEquals(122, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = Node.newNumber(13.78989603222125);
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("13.78989603222125", string0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.TemplateType");
      NodeUtil.getImpureBooleanValue(node0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      doReturn(false, false, true, false, true).when(codingConvention0).isConstantKey(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "com.google.javascript.rhino.jstype.TemplateType");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertFalse(boolean0);
      
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
      assertEquals(2, node1.getChildCount());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      doReturn(true, false, true, true, true).when(codingConvention0).isConstantKey(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "com.google.javascript.rhino.jstype.TemplateType");
      Node node1 = NodeUtil.booleanNode(true);
      NodeUtil.getStringValue(node1);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(boolean0);
      assertFalse(node0.isString());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.evaluatesToLocalValue(node0);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("false", string0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-1212)).when(node0).getType();
      NodeUtil.isSymmetricOperation(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node1).getParent();
      doReturn(2, 0, 0, 0).when(node1).getType();
      doReturn((String) null).when(node1).toString();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodenull
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = NodeUtil.opToStr(89);
      assertEquals("&=", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(95);
      assertEquals("*=", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "2m$3bCw)");
      NodeUtil.isImmutableValue(node0);
      String string0 = NodeUtil.opToStr(553);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = NodeUtil.opToStr(44);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(43);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 43: FALSE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = NodeUtil.numberNode(2361.391303468, node0);
      assertEquals(39, node1.getType());
      assertEquals((-1), node1.getCharno());
      
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(node0).getType();
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(node1).getType();
      boolean boolean1 = NodeUtil.mayHaveSideEffects(node1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      boolean boolean1 = NodeUtil.isNullOrUndefined(node0);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isFalse());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertFalse(boolean0);
      
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertTrue(node0.isFalse());
      assertEquals("false", string0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.evaluatesToLocalValue(node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.valueCheck(node0, nodeUtil_MatchShallowStatement0);
      assertTrue(boolean0);
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertEquals(44, node0.getType());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node(7, 8233, 8233);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.mayHaveSideEffects(node0);
      assertEquals(33726463, node0.getSourcePosition());
      assertEquals(7, node0.getType());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TernaryValue ternaryValue0 = NodeUtil.isStrWhiteSpaceChar(39);
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(ternaryValue0, ternaryValue0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.numberNode(2361.391303468, node0);
      NodeUtil.isSimpleOperator(node1);
      // Undeclared exception!
      try { 
        NodeUtil.newHasLocalResult(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = new Node(7, 8233, 8233);
      boolean boolean0 = NodeUtil.isStatementBlock(node0);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.mayHaveSideEffects(node0);
      assertEquals(33726463, node0.getSourcePosition());
      assertEquals(7, node0.getType());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      doReturn(true, false, true, false, true).when(codingConvention0).isConstantKey(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "com.google.javascript.rhino.jstype.TemplateType");
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(4);
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 10, nodeUtil_MatchNodeType0);
      assertEquals(33, node0.getType());
      assertEquals(0, int0);
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.rhino.jstype.TemplateType");
      boolean boolean0 = NodeUtil.referencesThis(node0);
      assertFalse(node0.hasOneChild());
      assertEquals(33, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newString(500, "2B9<)");
      Predicate<Node> predicate0 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(predicate0).apply(any(com.google.javascript.rhino.Node.class));
      boolean boolean0 = NodeUtil.has(node0, predicate0, predicate0);
      assertEquals(500, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "C^M:q");
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getNext();
      // Undeclared exception!
      try { 
        NodeUtil.newVarNode(":", node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      assertFalse(node0.isTypeOf());
      
      Node node1 = NodeUtil.newVarNode("xiC8^rS?", node0);
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(118, node1.getType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Predicate<Node> predicate0 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(predicate0).apply(any(com.google.javascript.rhino.Node.class));
      boolean boolean0 = NodeUtil.has(node0, predicate0, predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName(";G^3*zTor[k_");
      boolean boolean1 = NodeUtil.isSimpleOperatorType((-1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node(7, 8233, 8233);
      node0.isUnscopedQualifiedName();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
      assertEquals(7, node0.getType());
      assertEquals(33726463, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.evaluatesToLocalValue(node0);
      assertFalse(node0.isCall());
      
      boolean boolean0 = NodeUtil.isFunctionObjectCall(node0);
      assertFalse(boolean0);
      assertEquals(44, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(true).when(node0).isExprResult();
      // Undeclared exception!
      try { 
        NodeUtil.isExprAssign(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(node0).getType();
      boolean boolean0 = NodeUtil.isLoopStructure(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.getLoopCodeBlock(node0);
      assertEquals(43, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.newUndefinedNode(node0);
      int int0 = NodeUtil.getInverseOperator(38);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertTrue(node1.isVoid());
      assertEquals((-1), node1.getCharno());
      
      NodeUtil.isSimpleOperator(node0);
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst(" AGQ))LTF-MS");
      SourceFile sourceFile0 = syntheticAst0.getSourceFile();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(sourceFile0, " AGQ))LTF-MS").when(node0).getProp(anyInt());
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, "", node0, "");
      node1.removeFirstChild();
      assertEquals(0, node1.getCharno());
      assertEquals(38, node1.getType());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      doReturn(false, false, true, true, false).when(codingConvention0).isConstantKey(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "com.google.javascript.rhino.jstype.TemplateType");
      assertTrue(node0.hasChildren());
      
      node0.detachChildren();
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      doReturn(false, false, true, false, true).when(codingConvention0).isConstantKey(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "com.google.javascript.rhino.jstype.TemplateType");
      NodeUtil.isStrWhiteSpaceChar(11);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertEquals(2, node0.getChildCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.evaluatesToLocalValue(node0);
      NodeUtil.isStrWhiteSpaceChar(18);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(54, (-356), 16).when(node0).getType();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, (Predicate<Node>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(105).when(node0).getType();
      doReturn(false).when(node0).isFunction();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.rhino.jstype.TemplateType");
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertFalse(boolean0);
      assertEquals(2, node0.getChildCount());
      assertEquals(33, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      doReturn(false, false, true, false, true).when(codingConvention0).isConstantKey(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "com.google.javascript.rhino.jstype.TemplateType");
      assertEquals(2, node0.getChildCount());
      assertTrue(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      
      Double double0 = NodeUtil.getStringNumberValue("com.google.javascript.rhino.jstype.TemplateType");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      doReturn(true, false, true, false, true).when(codingConvention0).isConstantKey(anyString());
      NodeUtil.newQualifiedNameNode(codingConvention0, "com.google.javascript.rhino.jstype.TemplateType");
      int int0 = NodeUtil.getInverseOperator(1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.isLiteralValue(node0, false);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node(7, 8233, 8233);
      node0.setCharno(87);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertEquals(87, node0.getCharno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NodeUtil.isSimpleOperatorType((-3221));
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)4, (byte)113);
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(byteArrayInputStream0, byteArrayInputStream0).when(node0).getProp(anyInt());
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, "", node0, "");
      Node node2 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "com.google.common.collect.ImmutableMultimap$EntryCollection", node1, "com.google.common.collect.ImmutableMultimap$EntryCollection");
      assertEquals(33, node2.getType());
      assertEquals(0, node2.getCharno());
      assertEquals(38, node1.getType());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newNumber(13.78989603222125);
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertFalse(boolean0);
      
      node0.setOptionalArg(false);
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.isAssignmentOp(node0);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertTrue(node0.isFalse());
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = new Node(7, 8233, 8233);
      Node node1 = new Node(53, node0, node0, node0, (-197), 2);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 53
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
      assertFalse(node0.isFunction());
      
      boolean boolean1 = NodeUtil.referencesThis(node0);
      assertEquals((-1), node0.getLineno());
      assertEquals(43, node0.getType());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Node node1 = NodeUtil.newQualifiedNameNode(codingConvention0, "QW??XVm");
      NodeUtil.isLiteralValue(node0, false);
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      
      boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
      assertTrue(boolean0);
      assertEquals(38, node1.getType());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
      assertFalse(node0.isName());
      
      boolean boolean1 = NodeUtil.isVarDeclaration(node0);
      assertFalse(boolean1 == boolean0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newString(8239, "+infinity", 8239, (-2634));
      node0.children();
      assertEquals((-1), node0.getCharno());
      assertEquals(8239, node0.getType());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst(" AGQ))LTF-MS");
      SourceFile sourceFile0 = syntheticAst0.getSourceFile();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(sourceFile0, " AGQ))LTF-MS").when(node0).getProp(anyInt());
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, "", node0, "");
      Node node2 = new Node((-432), node1, node1, node1, node1);
      node2.children();
      assertEquals((-432), node2.getType());
      assertTrue(node1.isName());
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(53, nodeArray0, 40, 599);
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 53
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "2m$3bCw)");
      String string0 = node0.toString();
      assertEquals("NAME 2m$3bCw)", string0);
      
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertFalse(boolean0);
      assertTrue(node0.isName());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      doReturn(false, false, true, true, false).when(codingConvention0).isConstantKey(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "com.google.javascript.rhino.jstype.TemplateType");
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(153);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 153
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = new Node(94, 6158, 116);
      String string0 = node0.toString(true, false, false);
      assertEquals(116, node0.getCharno());
      assertEquals("ASSIGN_SUB 6158", string0);
      assertEquals(94, node0.getType());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString((-2865), "no next sibling.", (-4096), (-4096));
      Node node1 = new Node((-2865), node0, node0);
      Node node2 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node1).when(node2).getLastChild();
      doReturn(true).when(node2).isGetProp();
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypeClassName(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2865
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      doReturn(false, false, true, false, true).when(codingConvention0).isConstantKey(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "com.google.javascript.rhino.jstype.TemplateType");
      node0.setLineno((-1572));
      assertEquals(2, node0.getChildCount());
      assertEquals(33, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      doReturn(true, false, true, true, true).when(codingConvention0).isConstantKey(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "com.google.javascript.rhino.jstype.TemplateType");
      boolean boolean0 = node0.isQualifiedName();
      assertEquals(2, node0.getChildCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node(7, 8233, 8233);
      boolean boolean0 = NodeUtil.isConstantName(node0);
      boolean boolean1 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, node0.getType());
      assertEquals(33726463, node0.getSourcePosition());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test071()  throws Throwable  {
      TernaryValue ternaryValue0 = NodeUtil.isStrWhiteSpaceChar(39);
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(ternaryValue0, ternaryValue0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.numberNode(2361.391303468, node0);
      String string0 = node1.toString(false, true, false);
      assertEquals("NUMBER 2361.391303468 [originalname: false] [source_file: false]", string0);
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // TRUE is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      doReturn(false, false, true, false, true).when(codingConvention0).isConstantKey(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "com.google.javascript.rhino.jstype.TemplateType");
      node0.setSourceEncodedPositionForTree(11);
      assertEquals(11, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      doReturn(false, false, true, true, false).when(codingConvention0).isConstantKey(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "com.google.javascript.rhino.jstype.TemplateType");
      String string0 = node0.getQualifiedName();
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getCharno());
      assertNotNull(string0);
      assertEquals("com.google.javascript.rhino.jstype.TemplateType", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("\u0006atD{3z2{@cgh1]N");
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      Node node0 = syntheticAst0.getAstRoot(abstractCompiler0);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assignment op:SCRIPT [source_file: \u0006atD{3z2{@cgh1]N] [input_id: InputId: \u0006atD{3z2{@cgh1]N]
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      doReturn(true, false, true, true, true).when(codingConvention0).isConstantKey(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "com.google.javascript.rhino.jstype.TemplateType");
      node0.addChildToFront(node0);
      NodeUtil.getBestLValueOwner(node0);
      assertEquals(3, node0.getChildCount());
      assertTrue(node0.isGetProp());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((JSDocInfo) null).when(node0).getJSDocInfo();
      doReturn(true, false).when(node0).isFunction();
      NodeUtil.getFunctionJSDocInfo(node0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node0).getChildCount();
      doReturn(true).when(node0).isTry();
      boolean boolean0 = NodeUtil.hasFinally(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(16, 1466, 1536, 43).when(node0).getType();
      NodeUtil.mayBeStringHelper(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node1).getParent();
      doReturn(0, 0, 0, 0).when(node1).getType();
      doReturn((String) null).when(node1).toString();
      Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1, predicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodenull
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(36);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 36
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(130, 1141, 100, 1141, 100).when(node0).getType();
      doReturn(true).when(node0).isNull();
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(node0).isNull();
      boolean boolean0 = NodeUtil.isNullOrUndefined(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(23);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(16);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newNumber(13.78989603222125);
      boolean boolean0 = NodeUtil.isBooleanResult(node0);
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newNumber(2.0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.valueCheck(node0, nodeUtil_MayBeStringResultPredicate0);
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.isBooleanResult(node0);
      assertTrue(boolean0);
      assertEquals(44, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1, 43, 48, 40, 11).when(node0).getType();
      doReturn(true).when(node0).isNull();
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newString(500, "2B9<)");
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node1).getParent();
      doReturn(true).when(node1).isFunction();
      doReturn(true).when(node1).isName();
      NodeUtil.getVarsDeclaredInBranch(node1);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
      assertEquals(500, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(false).when(node0).isFunction();
      doReturn(false).when(node0).isName();
      NodeUtil.getVarsDeclaredInBranch(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(node1).getType();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      doReturn(true, false, true, false, true).when(codingConvention0).isConstantKey(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "com.google.javascript.rhino.jstype.TemplateType");
      int int0 = NodeUtil.getNameReferenceCount(node0, ".2B9<)");
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasMoreThanOneChild());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "2m$3bCw)");
      Node node1 = new Node(319, node0, node0, node0, node0);
      Node node2 = node1.removeFirstChild();
      assertEquals(319, node1.getType());
      assertTrue(node2.isName());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newString(")");
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
      assertFalse(node0.isExprResult());
      
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertEquals((-1), node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = new Node(7, 8233, 8233);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      DiagnosticType diagnosticType0 = CheckAccessControls.DEPRECATED_PROP;
      // Undeclared exception!
      try { 
        peepholeSimplifyRegExp0.error(diagnosticType0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 7
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.getInputId(node0);
      assertFalse(node0.isScript());
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node0).getType();
      doReturn(false).when(node0).isCall();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0, abstractCompiler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node0).getType();
      doReturn(false).when(node0).isNew();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0, abstractCompiler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.isEmptyBlock(node0);
      Double double0 = NodeUtil.getNumberValue(node1);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertEquals(43, node0.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(122, node1.getType());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      boolean boolean1 = NodeUtil.isTryFinallyNode(node0, node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(node0.isTry());
      assertEquals(43, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = new Node((-493));
      assertFalse(node0.isName());
      
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getFirstChild();
      doReturn(true).when(node1).isNew();
      doReturn(false).when(node1).isNoSideEffectsCall();
      boolean boolean0 = NodeUtil.constructorCallHasSideEffects(node1);
      assertTrue(boolean0);
      assertEquals((-493), node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((JSDocInfo) null).when(node0).getJSDocInfo();
      doReturn((Node) null).when(node0).getParent();
      JSDocInfo jSDocInfo0 = NodeUtil.getBestJSDocInfo(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.isAssociative(36);
      boolean boolean1 = NodeUtil.isSimpleOperator(node0);
      assertTrue(node0.isFalse());
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst(" AGQ))LTF-MS");
      SourceFile sourceFile0 = syntheticAst0.getSourceFile();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(sourceFile0, " AGQ))LTF-MS").when(node0).getProp(anyInt());
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, "", node0, "");
      boolean boolean0 = node1.isQualifiedName();
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(572, 2014, 18).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, abstractCompiler0);
      assertTrue(boolean0);
      
      Node node1 = Node.newString(572, ",oOv1TXurtzvo", 1, 31);
      NodeUtil.isExprAssign(node1);
      assertEquals(572, node1.getType());
      assertEquals(4127, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.isSimpleOperator(node0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-998));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -998
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "2m$3bCw)");
      boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      assertFalse(boolean0);
      assertEquals(38, node0.getType());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      doReturn(false, false, true, false, true).when(codingConvention0).isConstantKey(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "com.google.javascript.rhino.jstype.TemplateType");
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isTryFinallyNode(node0, node0);
      assertEquals(33, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(21).when(node0).getType();
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = NodeUtil.getInverseOperator(17);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = NodeUtil.numberNode(0.0, node0);
      NodeUtil.evaluatesToLocalValue(node1);
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.isNumber());
      assertFalse(node0.isTrue());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "2m$3bCw)");
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      boolean boolean1 = NodeUtil.isLoopStructure(node0);
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(38, node0.getType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = new Node(7, 8233, 8233);
      NodeUtil.getNearestFunctionName(node0);
      assertEquals(7, node0.getType());
      assertEquals(33726463, node0.getSourcePosition());
      assertEquals(8233, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(34, 88, 53).when(node0).getType();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(32, 32).when(node0).getType();
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.evaluatesToLocalValue(node0);
      Node node1 = new Node(46, node0, node0, node0, 16, 48);
      assertEquals(65584, node1.getSourcePosition());
      assertEquals(46, node1.getType());
      assertTrue(node0.isTrue());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.isLiteralValue(node0, false);
      Double double0 = NodeUtil.getNumberValue(node1);
      assertNotNull(double0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node1.getSourcePosition());
      assertTrue(node1.isVoid());
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "&");
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0, abstractCompiler0);
      assertFalse(boolean0);
      assertTrue(node0.isName());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      node1.addChildToFront(node0);
      assertTrue(node1.hasMoreThanOneChild());
      
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(node0.isFalse());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = Node.newString(51, "com.google.javascript.rhino.jstype.TemplateType", 21, 15);
      NodeUtil.isSimpleOperator(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(node0).isGetProp();
      Node node1 = NodeUtil.getPrototypeClassName(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      node0.addChildrenToFront(node0);
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      doReturn(true, false, true, false, true).when(codingConvention0).isConstantKey(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "com.google.javascript.rhino.jstype.TemplateType");
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      assertFalse(boolean0);
      assertEquals(33, node0.getType());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = new Node((-922), 1168, (-356));
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst(" AGQ))LTF-MS");
      SourceFile sourceFile0 = syntheticAst0.getSourceFile();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(sourceFile0, " AGQ))LTF-MS").when(node0).getProp(anyInt());
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, "", node0, "");
      Node node2 = NodeUtil.getRootOfQualifiedName(node1);
      assertTrue(node1.isName());
      assertEquals(0, node2.getCharno());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName("infinity");
      assertTrue(boolean0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 08:47:38 GMT 2019
 */

package org.mockito.asm.util;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mockito.asm.FieldVisitor;
import org.mockito.asm.MethodVisitor;
import org.mockito.asm.util.ASMifierClassVisitor;
import org.mockito.asm.util.AbstractVisitor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ASMifierClassVisitor_ESTest extends ASMifierClassVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod(128, "*|;", "V1_4", ".class", aSMifierClassVisitor0.TYPES);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visitMethod(8192, "mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {", "", "mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {", aSMifierClassVisitor0.TYPES);
      aSMifierClassVisitor0.visit(745, 420, "", ");\n\n", "J?ZV", (String[]) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visit(8192, 8192, "", "Opcodes.UNINITIALIZED_THIS", "xBw}]?c.]", aSMifierClassVisitor0.OPCODES);
      aSMifierClassVisitor0.visit(745, 420, "", ");\n\n", "J?ZV", (String[]) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visit(8192, 8192, "+-m", "", "D}rg>#9a*adj4", aSMifierClassVisitor0.OPCODES);
      Object object0 = new Object();
      FieldVisitor fieldVisitor0 = aSMifierClassVisitor0.visitField(127, "!g0P", "!g0P", "d,Tqy[", object0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      String[] stringArray0 = new String[0];
      aSMifierClassVisitor0.visit(16384, 8192, "new boolean[] {", "{\n", "9:-l_'k40_cf2*G=z", stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visit(196653, (-1293), "cw.visitInnerClass(", "@ia$7j", "cw.visitInnerClass(", aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitMethod(3590, "", "z*,#6WHY#N1", "a<VPh:", aSMifierClassVisitor0.OPCODES);
      aSMifierClassVisitor0.visit(196653, 48, "", "r#WOn", "8(KRdAO84UJr", aSMifierClassVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visit(16384, (-1248), "k2cIB^aHsgQuBr>-UC", "}, ", ",{=Ognd$$S&PV:q;", (String[]) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      FieldVisitor fieldVisitor0 = aSMifierClassVisitor0.visitField(16377, "J", "J", "g", "g");
      FieldVisitor fieldVisitor1 = aSMifierClassVisitor0.visitField(1672, "|K0Z,NY^`;u9J", ">", "g", fieldVisitor0);
      assertNotSame(fieldVisitor0, fieldVisitor1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ZK@nVGNd,Tqy[";
      aSMifierClassVisitor0.visit(64, 76, "ZK@nVGNd,Tqy[", "j2u}(5c}Ayvs9u", "j2u}(5c}Ayvs9u", stringArray0);
      try { 
        ASMifierClassVisitor.main(stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Class not found
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitInnerClass("@ia$7j", "@ia$7j", "@ia$7j", (-2846));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Fz+]}j";
      try { 
        ASMifierClassVisitor.main(stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Class not found
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visit(192, 192, "4LFg}&^\"'g/[5q&", "mv.visitMaxs(", "new Double(\"", aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod(8192, "s&<9M>6,<0=!", "s&<9M>6,<0=!", "s&<9M>6,<0=!", stringArray0);
      aSMifierClassVisitor0.visit(8192, 8192, "s&<9M>6,<0=!", "s&<9M>6,<0=!", "ACCAgN#_O1TON", ((AbstractVisitor) methodVisitor0).TYPES);
      ASMifierClassVisitor.main(aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visit(48, 48, "Con]twntValue", "Opcodes.NULL.class", "Opcodes.NULL.class", aSMifierClassVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod(8192, "mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {", "mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {", "mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {", aSMifierClassVisitor0.TYPES);
      aSMifierClassVisitor0.visit(8192, 8192, "mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {", "Opcodes.UNINITIALIZED_THIS", "xBw}]?c.]", aSMifierClassVisitor0.OPCODES);
      aSMifierClassVisitor0.visit(48, (-991), "Opcodes.UNINITIALIZED_THIS", "", "<#\"c:U", ((AbstractVisitor) methodVisitor0).OPCODES);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitMethod(8192, "s&<9M>6,<0=!", "s&<9M>6,<0=!", "s&<9M>6,<0=!", stringArray0);
      aSMifierClassVisitor0.visit(46, 2540, "Opcodes.NULL.class", "]NzWpFizBgQx&3ukB", "s&<9M>6,<0=!", stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod(8192, "mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {", "", "mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {", aSMifierClassVisitor0.TYPES);
      MethodVisitor methodVisitor1 = aSMifierClassVisitor0.visitMethod(745, "oB/xE]", "2Oa9s[WS]1?$", "ACC_PRIVATE", (String[]) null);
      assertNotSame(methodVisitor1, methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visit(8192, 8192, "", "Opcodes.UNINITIALIZED_THIS", "xBw}]?c.]", aSMifierClassVisitor0.OPCODES);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod(745, "oB/xE]", "2Oa9s[WS]1?$", "ACC_PRIVATE", (String[]) null);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visit(8192, 8192, "+-m", "f')loCfr:)W]Sp9[1P", "i]v5q\"n&s:7s2$", aSMifierClassVisitor0.OPCODES);
      aSMifierClassVisitor0.visit(47, (-1965), "ZK@nVGNd,Tqy[.class", "{O.}rKw%l~", "TZtweyWH7Zv[", aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitField((-572), "\"`J~[(UJ", (String) null, "xM{19<lWv)Li38}!", "&czSF!(0MKb`/MmuNY");
      aSMifierClassVisitor0.visit(47, 47, "7jf Y2", "\"`J~[(UJ", "xM{19<lWv)Li38}!", (String[]) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.appendAccess((-1608));
      Object object0 = new Object();
      FieldVisitor fieldVisitor0 = aSMifierClassVisitor0.visitField(32767, "s&<9M>6,<0=!", "UHbF>KdP<", "a01NQ", object0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitInnerClass("a01NQ", "a01NQ", "", (-1608));
      aSMifierClassVisitor0.visit(49, 30, "Opcodes.UNINITIALIZED_THIS", "Opcodes.NULL", "^@>b0k<", (String[]) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitField((-425), (String) null, (String) null, (String) null, "<pJ*w,1OC!,9UQ");
      aSMifierClassVisitor0.visit(634, 16384, "J", "J", (String) null, aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod((-770), "Qir.class", "mv.visitLocalVariable(", "Qir.class", aSMifierClassVisitor0.TYPES);
      MethodVisitor methodVisitor1 = aSMifierClassVisitor0.visitMethod(1504, "G9rD-cf#zc^9>c", "value ", "mv.visitLocalVariable(", aSMifierClassVisitor0.TYPES);
      assertNotSame(methodVisitor1, methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      String[] stringArray0 = new String[6];
      aSMifierClassVisitor0.visit(49, 16384, "Opcodes.UNINITIALIZED_THIS", "Opcodes.UNINITIALIZED_THIS", (String) null, stringArray0);
      Object object0 = new Object();
      FieldVisitor fieldVisitor0 = aSMifierClassVisitor0.visitField(49, "a01NQ", stringArray0[5], "ln)s.I", object0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitInnerClass("a01NQ", "a01NQ", "", (-1608));
      aSMifierClassVisitor0.visit(49, 16384, "Opcodes.UNINITIALIZED_THIS", "Opcodes.UNINITIALIZED_THIS", (String) null, aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitMethod(65535, "import java.util.*;\n", "import java.util.*;\n", "import java.util.*;\n", stringArray0);
      ASMifierClassVisitor.main(aSMifierClassVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitField(16384, "J", "J", ">", ">");
      ASMifierClassVisitor.main(aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitField((-425), (String) null, (String) null, (String) null, "<pJ*w,1OC!,9UQ");
      ASMifierClassVisitor.main(aSMifierClassVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visit(76, (-5712), "ACC_ANNOTATION", "ACC_ANNOTATION", "ZK@nVGNd,Tqy[", stringArray0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "ZK@nVGNd,Tqy[";
      try { 
        ASMifierClassVisitor.main(stringArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Class not found
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitMethod(0, "rZzJN*Lix'W\"vQV8*{", "", "pZ", stringArray0);
      Object object0 = new Object();
      FieldVisitor fieldVisitor0 = aSMifierClassVisitor0.visitField(32767, "s&<9M>6,<0=!", "UHbF>KdP<", "a01NQ", object0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitMethod(11, "pZ", "", "rZzJN*Lix'W\"vQV8*{", stringArray0);
      aSMifierClassVisitor0.visit(50, (-12), "Opcodes.NULL.class", "", "", aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod((-2304), "40jO+P`XbQCvVG", "F[NfxY'Dy", "40jO+P`XbQCvVG", stringArray0);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visit(46, 8, "!", "B3/H[]'DHb,ox", ", new int[] {.class", stringArray0);
      aSMifierClassVisitor0.visit((-313), (-313), "rX2w=ElkL@", "v9,", "./M", stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod((-1608), "", "a01NQ", "{\n.class", (String[]) null);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.appendAccess(199);
      aSMifierClassVisitor0.visit(49, 16384, "Opcodes.UNINITIALIZED_THIS", "Opcodes.UNINITIALIZED_THIS", (String) null, aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visit(49, 1504, "rZzJN*Lix'W\"vQV8*{", "G9rD-cf#zc^9>c", "", aSMifierClassVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Fz+]}j.class";
      try { 
        ASMifierClassVisitor.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Fz+]}j.class (No such file or directory)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visit(30, (-372), "Cng9bq9pOL5^/j.WH", "^@>b0k<", "d}N{NsG5@ia$7j.class", stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitInnerClass("s", "s", "#+b^", 16389);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visit(125, 16384, "%Gy{@1", "%Gy{@1", "%Gy{@1", stringArray0);
      FieldVisitor fieldVisitor0 = aSMifierClassVisitor0.visitField(16384, "%Gy{@1", "?HM;3.class", "#+b^.class", "?HM;3.class");
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      FieldVisitor fieldVisitor0 = aSMifierClassVisitor0.visitField(16389, "", "", ">", ">");
      aSMifierClassVisitor0.visit(196653, 16389, "KMC&ct^", (String) null, "J`L?02[QwAT#em", ((AbstractVisitor) fieldVisitor0).OPCODES);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      FieldVisitor fieldVisitor0 = aSMifierClassVisitor0.visitField(16384, "J", "J", ">", ">");
      aSMifierClassVisitor0.visit(46, 16384, "r Du", ">", ">", ((AbstractVisitor) fieldVisitor0).TYPES);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.appendAccess((-1608));
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod(16384, (String) null, "NI++VBBI&`!4>B", "UHbF>KdP<", aSMifierClassVisitor0.TYPES);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitMethod(16384, (String) null, "NI++VBBI&`!4>B", "UHbF>KdP<", aSMifierClassVisitor0.TYPES);
      Object object0 = new Object();
      FieldVisitor fieldVisitor0 = aSMifierClassVisitor0.visitField(32767, "s&<9M>6,<0=!", "UHbF>KdP<", "a01NQ", object0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      FieldVisitor fieldVisitor0 = aSMifierClassVisitor0.visitField(16384, "J", "J", ">", ">");
      aSMifierClassVisitor0.visitMethod(16384, "d}N{NsG5@ia$7j", "NI++VBBI&`!4DB", "d}N{NsG5@ia$7j", ((AbstractVisitor) fieldVisitor0).OPCODES);
      aSMifierClassVisitor0.visit(16, 1992, "s", "?HM;3.class", "AR8", ((AbstractVisitor) fieldVisitor0).TYPES);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitInnerClass("new byte[] {", "", "id{mG?s", 16384);
      ASMifierClassVisitor.main(aSMifierClassVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitInnerClass("new byte[] {", "", "id{mG?s", 16384);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod(1024, "`m)D-<`WfW|f?e:", "new byte[] {", "9pomX<SET.class", (String[]) null);
      assertNotNull(methodVisitor0);
  }
}

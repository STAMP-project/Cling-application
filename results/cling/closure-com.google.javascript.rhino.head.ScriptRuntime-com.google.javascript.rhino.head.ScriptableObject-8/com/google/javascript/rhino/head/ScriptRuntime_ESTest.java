/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 04:44:09 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Arguments;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.EcmaError;
import com.google.javascript.rhino.head.EvaluatorException;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeBoolean;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeFunction;
import com.google.javascript.rhino.head.NativeJavaPackage;
import com.google.javascript.rhino.head.NativeWith;
import com.google.javascript.rhino.head.ScriptRuntime;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ScriptRuntime_ESTest extends ScriptRuntime_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ScriptRuntime.toNumber(objectArray0, 124);
      NativeArray nativeArray0 = new NativeArray(5201L);
      // Undeclared exception!
      try { 
        ScriptRuntime.newObject((Context) null, (Scriptable) nativeArray0, "", objectArray0);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Constructor for \"\" not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = ScriptRuntime.testUint32String("com.google.javascript.rhino.head.Context@42766fda");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = Context.getCurrentContext();
      Object object0 = ScriptRuntime.add((Object) contextFactory0, (Object) contextFactory0, context0);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = ScriptRuntime.getIndexObject("msg.change.property.accessor.to.data.with.configurable.false");
      assertEquals("msg.change.property.accessor.to.data.with.configurable.false", object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ScriptRuntime.enumInit((Object) "msg.change.property.accessor.to.data.with.configurable.false", context0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage(true, "__proto__", (ClassLoader) null);
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      NativeJavaPackage nativeJavaPackage1 = (NativeJavaPackage)ScriptRuntime.setName(nativeJavaPackage0, nativeJavaPackage0, context0, nativeJavaPackage0, "language version");
      assertTrue(nativeJavaPackage1.isExtensible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ScriptRuntime.enumInit((Object) "msg.change.property.accessor.to.data.with.configurable.false", context0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Scriptable) null).when(scriptable0).getPrototype();
      doReturn(false).when(scriptable0).has(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      Scriptable scriptable1 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      NativeWith nativeWith0 = new NativeWith(scriptable0, scriptable1);
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      Object object0 = ScriptRuntime.setConst(scriptable0, nativeWith0, context0, "error reporter");
      assertSame(nativeWith0, object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(scriptable0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      doReturn((Scriptable) null).when(scriptable0).getParentScope();
      Object object0 = ScriptRuntime.name(context0, scriptable0, "language version");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage(true, "__proto__", (ClassLoader) null);
      assertFalse(nativeJavaPackage0.isSealed());
      
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      Object object0 = ScriptRuntime.delete((Object) nativeJavaPackage0, (Object) nativeJavaPackage0, context0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Scriptable) null).when(scriptable0).getParentScope();
      doReturn((Scriptable) null).when(scriptable0).getPrototype();
      doReturn(false).when(scriptable0).has(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      Scriptable scriptable1 = ScriptRuntime.bind(context0, scriptable0, ";");
      assertNull(scriptable1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test11()  throws Throwable  {
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(context0).toString();
      double double0 = ScriptRuntime.toNumber((Object) context0);
      assertEquals(Double.NaN, double0, 0.01);
      
      NativeFunction nativeFunction0 = mock(NativeFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(nativeFunction0).getLanguageVersion();
      doReturn(0).when(nativeFunction0).getParamAndVarCount();
      doReturn(0).when(nativeFunction0).getParamCount();
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      Object[] objectArray0 = new Object[0];
      NativeCall nativeCall0 = new NativeCall(nativeFunction0, nativeBoolean0, objectArray0);
      assertTrue(nativeCall0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeFunction nativeFunction0 = mock(NativeFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(nativeFunction0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      doReturn(0, 0).when(nativeFunction0).getLanguageVersion();
      doReturn(0).when(nativeFunction0).getParamAndVarCount();
      doReturn(0).when(nativeFunction0).getParamCount();
      doReturn((Scriptable) null, (Scriptable) null, (Scriptable) null, (Scriptable) null, (Scriptable) null).when(nativeFunction0).getParentScope();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(nativeFunction0).toString();
      NativeCall nativeCall0 = new NativeCall(nativeFunction0, nativeFunction0, (Object[]) null);
      Arguments arguments0 = new Arguments(nativeCall0);
      ScriptableObject scriptableObject0 = arguments0.getOwnPropertyDescriptor((Context) null, (Object) null);
      assertNull(scriptableObject0);
      assertTrue(arguments0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test14()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      ScriptRuntime.enumInit((Object) importerTopLevel0, context0, 9);
      // Undeclared exception!
      try { 
        ScriptRuntime.getObjectElem((Scriptable) importerTopLevel0, (Object) importerTopLevel0, (Context) null);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 04:45:13 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.EcmaError;
import com.google.javascript.rhino.head.EvaluatorException;
import com.google.javascript.rhino.head.GeneratedClassLoader;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeJavaConstructor;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.TopLevel;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NativeArray_ESTest extends NativeArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1999L));
      // Undeclared exception!
      try { 
        nativeArray0.initPrototypeId(14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test01()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1L);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      Short short0 = new Short((short)5);
      nativeArray0.getOwnPropertyDescriptor(context0, short0);
      assertEquals(1L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeArray nativeArray0 = new NativeArray(1431655764L);
      nativeArray0.delete(0);
      assertTrue(nativeArray0.isEmpty());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeArray nativeArray0 = new NativeArray((-8228041688891786180L));
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes(110);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property 110 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(502L);
      NativeArray.init(nativeArray0, false);
      LinkedHashSet<NativeArray> linkedHashSet0 = new LinkedHashSet<NativeArray>();
      NativeArray nativeArray1 = new NativeArray(2);
      nativeArray1.put(0, (Scriptable) nativeArray0, (Object) linkedHashSet0);
      assertEquals(502L, nativeArray0.jsGet_length());
      assertEquals(502L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeArray nativeArray0 = new NativeArray(4096L);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes((-2475));
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property -2475 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeArray nativeArray0 = new NativeArray(140);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes(13);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property 13 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeArray.setMaximumInitialCapacity(160);
      NativeArray nativeArray0 = new NativeArray(1006L);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes(180);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property 180 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      NativeArray nativeArray0 = new NativeArray(1031L);
      nativeArray0.delete(5);
      assertFalse(nativeArray0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeArray nativeArray0 = new NativeArray(12);
      Long long0 = new Long(180);
      nativeArray0.getOwnPropertyDescriptor(context0, long0);
      assertEquals("Array", nativeArray0.getClassName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeArray nativeArray0 = new NativeArray(12);
      assertEquals(12L, nativeArray0.jsGet_length());
      
      Object[] objectArray0 = nativeArray0.getIds();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeArray nativeArray0 = new NativeArray(12);
      Class<NativeJavaConstructor> class0 = NativeJavaConstructor.class;
      // Undeclared exception!
      try { 
        nativeArray0.getDefaultValue(class0);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.NativeJavaConstructor
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(scriptable0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      doReturn((Scriptable) null, (Scriptable) null, (Scriptable) null, (Scriptable) null, (Scriptable) null).when(scriptable0).getParentScope();
      NativeArray.init(scriptable0, false);
      NativeArray nativeArray0 = new NativeArray(566L);
      nativeArray0.delete((-404));
      assertEquals("object", nativeArray0.getTypeOf());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test13()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483647L);
      nativeArray0.lastIndexOf((Object) null);
      Context context0 = Context.enter((Context) null);
      IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(12, (Scriptable) null, false);
      // Undeclared exception!
      try { 
        nativeArray0.execIdCall(idFunctionObject0, (Context) null, (Scriptable) null, nativeArray0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test14()  throws Throwable  {
      Context context0 = new Context();
      ContextFactory contextFactory0 = new ContextFactory();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeArray nativeArray0 = new NativeArray(10);
      nativeArray0.defineOwnProperty(context0, (Object) contextFactory0, (ScriptableObject) importerTopLevel0, false);
      BaseFunction baseFunction0 = new BaseFunction();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(baseFunction0, context0, (-77), 17);
      IdFunctionObject idFunctionObject1 = nativeArray0.exportAsJSClass(8, importerTopLevel0, true);
      // Undeclared exception!
      try { 
        nativeArray0.execIdCall(idFunctionObject1, (Context) null, idFunctionObject0, idFunctionObject1, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.has(10000, (Scriptable) null);
      NativeArray nativeArray1 = new NativeArray(objectArray0);
      Context context0 = Context.enter();
      IdFunctionObject idFunctionObject0 = nativeArray1.exportAsJSClass(5, nativeArray0, true);
      NativeArray nativeArray2 = (NativeArray)nativeArray1.execIdCall(idFunctionObject0, context0, (Scriptable) null, nativeArray0, objectArray0);
      assertFalse(idFunctionObject0.isEmpty());
      assertEquals(4L, nativeArray2.jsGet_length());
      assertEquals(1, idFunctionObject0.methodId());
      assertEquals(1, idFunctionObject0.getArity());
      assertEquals(4L, nativeArray0.getLength());
      assertTrue(idFunctionObject0.isSealed());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeArray nativeArray1 = new NativeArray(objectArray0);
      nativeArray1.indexOf(nativeArray0);
      Context context0 = Context.enter();
      IdFunctionObject idFunctionObject0 = nativeArray1.exportAsJSClass(5, nativeArray0, true);
      nativeArray1.execIdCall(idFunctionObject0, context0, (Scriptable) null, nativeArray0, objectArray0);
      assertTrue(nativeArray1.isSealed());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test17()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483647L);
      Context context0 = Context.enter((Context) null);
      nativeArray0.has((-2147317123), (Scriptable) null);
      IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(12, (Scriptable) null, false);
      // Undeclared exception!
      try { 
        nativeArray0.execIdCall(idFunctionObject0, (Context) null, (Scriptable) null, nativeArray0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test18()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2475L));
      TopLevel topLevel0 = new TopLevel();
      nativeArray0.put("UQ)p/'M7 YPX=", (Scriptable) topLevel0, (Object) topLevel0);
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertTrue(importerTopLevel0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483647L);
      nativeArray0.getIndexIds();
      NativeArray.init(nativeArray0, true);
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(2147483647L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test20()  throws Throwable  {
      Context context0 = new Context();
      ContextFactory contextFactory0 = new ContextFactory();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeArray nativeArray0 = new NativeArray(10);
      nativeArray0.defineOwnProperty(context0, (Object) contextFactory0, (ScriptableObject) importerTopLevel0, false);
      nativeArray0.defineOwnProperty(context0, (Object) importerTopLevel0, (ScriptableObject) importerTopLevel0, true);
      assertEquals(10L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test21()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Double double0 = new Double(4);
      nativeArray0.defineOwnProperty(context0, (Object) double0, (ScriptableObject) importerTopLevel0, true);
      assertEquals(5L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Context context0 = Context.enter();
      GeneratedClassLoader generatedClassLoader0 = context0.createClassLoader((ClassLoader) null);
      NativeArray nativeArray0 = new NativeArray(6);
      nativeArray0.getOwnPropertyDescriptor(context0, generatedClassLoader0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertTrue(importerTopLevel0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test23()  throws Throwable  {
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      NativeArray nativeArray0 = new NativeArray(549L);
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn(nativeArray0).when(scriptable0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      // Undeclared exception!
      try { 
        NativeArray.getLengthProperty(context0, scriptable0);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.delete(10000);
      NativeArray.init((Scriptable) null, false);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      Double double0 = new Double(10);
      nativeArray0.setInstanceIdValue(1, double0);
      assertEquals(10L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483647L);
      Context context0 = Context.enter((Context) null);
      nativeArray0.getOwnPropertyDescriptor(context0, context0);
      NativeArray.init(nativeArray0, true);
      assertEquals(2147483647L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.getIds();
      NativeArray.init((Scriptable) null, false);
  }
}

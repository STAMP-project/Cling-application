/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 20:02:09 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = StringUtils.substring("org.apache.commons.lang3.CharUtils", (-1), (-1));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringUtils.normalizeSpace((String) null);
      String string0 = StringUtils.repeat("U$S/4}P ?e_.", 1);
      assertNotNull(string0);
      assertEquals("U$S/4}P ?e_.", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = StringUtils.repeat("U$S/4}P ?e_.", 1);
      String string1 = StringUtils.normalizeSpace(string0);
      assertNotNull(string1);
      assertEquals("U$S/4}P ?e_.", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = StringUtils.repeat(".P]$OXU_uNlD[{", 1);
      assertNotNull(string0);
      assertEquals(".P]$OXU_uNlD[{", string0);
      
      boolean boolean0 = StringUtils.endsWith(",vq`i64gi^?7", ".P]$OXU_uNlD[{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = StringUtils.repeat("su(hwl0mlqtbg!b.ur is not available", 1);
      assertEquals("su(hwl0mlqtbg!b.ur is not available", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("su(hwl0mlqtbg!b.ur is not available", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithAny((String) null, (String[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat(".wt{L)f", 1);
      assertNotNull(string0);
      assertEquals(".wt{L)f", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, "i^82<g)v`yi0i");
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat(".wt{L)f", 1);
      assertNotNull(string0);
      assertEquals(".wt{L)f", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[3];
      boolean boolean0 = StringUtils.endsWithAny("arguments cannot both be null", stringArray0);
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat("U$S/4}P ?e_.", 1);
      assertEquals("U$S/4}P ?e_.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = StringUtils.repeat("", 2);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[3];
      boolean boolean0 = StringUtils.endsWithAny("org.apache.commons.lang3.ArrayUtils", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringUtils.repeat("", 1305);
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = StringUtils.repeat("", 94);
      String string1 = StringUtils.normalizeSpace("");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringUtils.repeat("tr", 10);
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("The character ");
      String string1 = StringUtils.repeat("hj<c=b6N0mKP", "The character", 1420);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = StringUtils.repeat("", 1305);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "r 7:wHpQgxY:xlBU");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = StringUtils.repeat("cs!?\"w@", 2);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "cs!?\"w@cs!?\"w@";
      boolean boolean0 = StringUtils.endsWithAny("cs!?\"w@", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = StringUtils.repeat("", 94);
      assertNotNull(string0);
      
      String string1 = "\\u00";
      String[] stringArray0 = new String[0];
      boolean boolean0 = StringUtils.endsWithAny(string1, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = StringUtils.repeat("ng3.s", 93);
      assertEquals("ng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.s", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("ng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.sng3.s", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringUtils.endsWithIgnoreCase((String) null, (String) null);
      String string0 = StringUtils.repeat("", 7);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = StringUtils.repeat("O", 1305);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWith((String) null, "Cannot clone Cloneable type ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringUtils.endsWithAny("", (String[]) null);
      String string0 = StringUtils.repeat("", 1305);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = StringUtils.repeat("Array and element cannot both be null", 94);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = StringUtils.repeat("", 1305);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWith((String) null, "Cannot clone Cloneable type ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.repeat("b", 7);
      assertEquals("bbbbbbb", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = StringUtils.repeat("::D54ereY_&*cN", 432);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("::D54ereY_&*cN", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = StringUtils.repeat("su(hwl0mlqtbg!b.ur is not available", 1);
      assertEquals("su(hwl0mlqtbg!b.ur is not available", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "su(hwl0mlqtbg!b.ur is not available";
      boolean boolean0 = StringUtils.endsWithAny("su(hwl0mlqtbg!b.ur is not available", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = StringUtils.repeat("", 1305);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      boolean boolean0 = StringUtils.endsWithAny("Yb\"%nJ%wi", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = StringUtils.repeat("CVU.W-", 3130);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "CVU.W-";
      boolean boolean0 = StringUtils.endsWithAny("CVU.W-", stringArray0);
      assertTrue(boolean0);
  }
}

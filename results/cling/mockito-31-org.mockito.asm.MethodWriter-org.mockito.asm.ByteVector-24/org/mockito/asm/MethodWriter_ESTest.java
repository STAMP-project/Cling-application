/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 09:29:27 GMT 2019
 */

package org.mockito.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mockito.asm.Attribute;
import org.mockito.asm.ByteVector;
import org.mockito.asm.ClassReader;
import org.mockito.asm.ClassVisitor;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.Item;
import org.mockito.asm.Label;
import org.mockito.asm.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MethodWriter_ESTest extends MethodWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-208));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Code";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 16777218, "Code", "iDj&Cg_x92n2nsjzx55", "iDj&Cg_x92n2nsjzx55", stringArray0, false, false);
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, (-3087), "ZpXQ%R?KD*TsP(TFZ", "Code", "Code", stringArray0, false, false);
      methodWriter0.visitVarInsn(16777218, 3428);
      assertNotSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(classWriter0).newClass(anyString());
      doReturn((-208), (-208)).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[1];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-208), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray0, false, false);
      methodWriter0.visitMaxs((-208), 2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn((-208), (-208)).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-208), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray0, false, false);
      methodWriter0.visitMaxs((-208), 2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1469);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.mockitoasm.MethodWriter";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1469, ";[", "PHF/.()1/", "org.mockitoasm.MethodWriter", stringArray0, true, true);
      methodWriter0.visitIincInsn(1, 1);
      int int0 = methodWriter0.getSize();
      assertEquals(47, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1479);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1255, "AhQ?g", ">/z4;", "RuntimeVisibleParameterAnnotations", stringArray0, false, false);
      methodWriter0.visitLdcInsn("RuntimeVisibleParameterAnnotations");
      int int0 = methodWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1469);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.mockitoasm.MethodWriter";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1469, ";3[", "PHF/.()1/", "org.mockitoasm.MethodWriter", stringArray0, true, true);
      methodWriter0.classReaderOffset = 1;
      methodWriter0.getSize();
      MethodWriter methodWriter1 = null;
      try {
        methodWriter1 = new MethodWriter(classWriter0, 2, ")V", " Xb}A8-", "!", stringArray0, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-208));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "n", "P1P/n)-\"w(eW,..rZH]", "P1P/n)-\"w(eW,..rZH]", (String[]) null, true, true);
      methodWriter0.visitIincInsn(16777243, 17);
      methodWriter0.getSize();
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, (-208), "P1P/n)-\"w(eW,..rZH]", "P1P/n)-\"w(eW,..rZH]", "P1P/n)-\"w(eW,..rZH]", (String[]) null, true, true);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassWriter classWriter0 = new ClassWriter((-208));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "n", "P1P/n)-\"w(eW,..rZH]", "AnnotationDefault", stringArray0, false, true);
      methodWriter0.visitIincInsn(293, (-1015));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-197));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "P1P/n)-\"w(eW,..rZH]";
      stringArray0[1] = "P1P/n)-\"w(eW,..rZH]";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "P1P/n)-\"w(eW,..rZH]", "P1P/n)-\"w(eW,..rZH]", "P1P/n)-\"w(eW,..rZH]", stringArray0, true, false);
      methodWriter0.visitIincInsn(3091, 2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-208));
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "P1P/n)-\"w(eW,..rZH]", "P1P/n)-\"w(eW,..rZH]", "P1P/n)-\"w(eW,..rZH]", stringArray0, true, false);
      methodWriter0.visitIincInsn(86, 14);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-197));
      ClassReader classReader0 = new ClassReader("org.mockito.asm.MethodWriter");
      // Undeclared exception!
      classReader0.accept((ClassVisitor) classWriter0, 1594);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1474);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "RuntimeVisibleParameterAnnotations", "AhQ||", "AhQ||", stringArray0, false, false);
      methodWriter0.visitVarInsn((-282), 11);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1469);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 21, "RuntimeVisibleParameterAnnotations", "AhQ?g", "AhQ?g", stringArray0, false, false);
      methodWriter0.visitFieldInsn(1157, "RLz@H,Mec#", "RLz@H,Mec#", "AhQ?g");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-208));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "fillInStackTrace", "P1P/n)-\"w(eW,..rZH]", "P1P/n)-\"w(eW,..rZH]", (String[]) null, false, false);
      methodWriter0.visitFieldInsn(1, "P1P/n)-\"w(eW,..rZH]", "P1P/n)-\"w(eW,..rZH]", "xyBLF1h%Gd+");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1492);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1309, "L", "L", "off", stringArray0, false, false);
      methodWriter0.visitFrame(2048, 58, stringArray0, 2, stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1469);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.mockitoasm.MethodWriter";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1469, ";3[", "PHF/.()1/", "org.mockitoasm.MethodWriter", stringArray0, true, true);
      methodWriter0.visitVarInsn(22, 1);
      MethodWriter methodWriter1 = null;
      try {
        methodWriter1 = new MethodWriter(classWriter0, (-3601), ";3", "", "(S", (String[]) null, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-37));
      ClassReader classReader0 = new ClassReader("java/lang/Throwable");
      classReader0.accept((ClassVisitor) classWriter0, (-37));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 4801, "n>>WAY3zsez=-{Rc ", "n>>WAY3zsez=-{Rc ", "n>>WAY3zsez=-{Rc ", (String[]) null, false, false);
      methodWriter0.visitMethodInsn(1, "java/lang/Throwable", "org.mockito.asm.MethodWriter", "java/lang/Throwable");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1469);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 21, "RuntimeVisibleParameterAnnotations", "RuntimeVisibleParameterAnnotations", "RuntimeVisibleParameterAnnotations", stringArray0, false, false);
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(4, 40, stringArray0, 1469, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn((-208)).when(classWriter0).newClass(anyString());
      doReturn((-208), (-208)).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[1];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2838, "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray0, false, false);
      methodWriter0.visitInsn((-2590));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1469);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 21, "RuntimeVisibleParameterAnnotations", "AhQ?g", "AhQ?g", stringArray0, false, false);
      methodWriter0.visitInsn(127);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn((-208), (-208)).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-208), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray0, false, false);
      methodWriter0.visitFrame(1, (-5463), stringArray0, 2183, stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = MethodWriter.getNewOffset(intArray0, intArray0, (-764), 4801);
      assertEquals(5565, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[3] = 914;
      Label label0 = mock(Label.class, new ViolatedAssumptionAnswer());
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(classWriter0).newClass(anyString());
      doReturn(914, 36).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[1];
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, (-1882), "<init>", ";##ej>N", "org.mockito.asm.ClassReader", stringArray0, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn((-208), (-208)).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-208), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray0, false, false);
      int[] intArray0 = new int[7];
      intArray0[1] = 1;
      Label label0 = new Label();
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-208));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "n", "P1P/n)-\"w(eW,..rZH]", "P1P/n)-\"w(eW,..rZH]", (String[]) null, true, true);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      Label label0 = new Label();
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 2, "P1P/n)-\"w(eW,..rZH]", "P1P/n)-\"w(eW,..rZH]", "P1P/n)-\"w(eW,..rZH]", (String[]) null, true, true);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[9];
      MethodWriter.getNewOffset(intArray0, intArray0, 12, (-1105));
      ClassWriter classWriter0 = new ClassWriter((-1021));
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, 1, "OKv>Rt^U<j", "I,UHeoG0 TB|BFppF", "I,UHeoG0 TB|BFppF", (String[]) null, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[9];
      MethodWriter.getNewOffset(intArray0, intArray0, 12, (-1105));
      ClassWriter classWriter0 = new ClassWriter((-1012));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Q";
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, (-105), "org.mockito.asm.ClassWriter", "Q", "InnerClasses", stringArray0, true, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-197));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "P1P/n)-\"w(eW,..rZH]";
      stringArray0[1] = "P1P/n)-\"w(eW,..rZH]";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "P1P/n)-\"w(eW,..rZH]", "P1P/n)-\"w(eW,..rZH]", "P1P/n)-\"w(eW,..rZH]", stringArray0, true, false);
      Label label0 = new Label();
      methodWriter0.visitLocalVariable("P1P/n)-\"w(eW,..rZH]", "P1P/n)-\"w(eW,..rZH]", "l,#n{9O1*c+:", label0, label0, (-2790));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(52, (-208), (-2500), (-2500), (-208)).when(classWriter0).newClass(anyString());
      doReturn((-208), (-208), (-208), (-208), (-208)).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[8];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-208), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray0, false, false);
      Label label0 = new Label();
      methodWriter0.visitLocalVariable("Deprecated", "RuntimeInvisibleAnnotations", "printEnclosedStackTrace", label0, label0, 2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-197));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 8, "6X>", "6X>", "P1P/n)-\"w(eW,..rZH]", (String[]) null, false, false);
      Label label0 = new Label();
      methodWriter0.visitLocalVariable("Deprecated", ";a1,;}", "EncloingMetod", label0, label0, 1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-208));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "", "P1P/n)-\"w(eW,..rZH]", "P1P/n)-\"w(eW,..rZH]", (String[]) null, true, true);
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, (-208), "", "-384@#+$_", "P1P/n)-\"w(eW,..rZH]", (String[]) null, false, false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(142, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-208));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "n", "P1P/n)-\"w(eW,..rZH]", "P1P/n)-\"w(eW,..rZH]", (String[]) null, true, true);
      methodWriter0.getSize();
      methodWriter0.visitIincInsn(16777243, 17);
      ByteVector byteVector0 = classWriter0.pool;
      methodWriter0.put(byteVector0);
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, (-208), "P1P/n)-\"w(eW,..rZH]", "P1P/n)-\"w(eW,..rZH]", "P1P/n)-\"w(eW,..rZH]", (String[]) null, true, true);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-37));
      ClassReader classReader0 = new ClassReader("java/lang/Throwable");
      classReader0.accept((ClassVisitor) classWriter0, (-37));
      ByteVector byteVector0 = new ByteVector(1);
      ByteVector byteVector1 = byteVector0.putLong((-2886L));
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1469);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 21, "RuntimeVisibleParameterAnnotations", "AhQ?g", "AhQ?g", stringArray0, false, false);
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 158, "AhQ?g", "AhQ?g", "1-3", stringArray0, false, false);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(1, 285212675, objectArray0, 1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn((-208), (-208)).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-208), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray0, false, false);
      ClassWriter classWriter1 = new ClassWriter((-208));
      Item item0 = classWriter1.newLong((-2817L));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1479);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1255, "AQ?g", "Tn/y=S` <P?cKm=t", "RuntimeVisibleParameterAnnotations", stringArray0, false, false);
      methodWriter0.visitLdcInsn("RuntimeVisibleParameterAnnotations");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(20, 2280).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, (-1316), "}3Lzv=t", "}3Lzv=t", "}3Lzv=t", stringArray0, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-183));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1813, "P1P/n)-\"w(eW,..rZH]", "u^rtZ( |z-*Qs`9va", (String) null, (String[]) null, false, false);
      methodWriter0.visitAnnotation("org.mockito.asm.MethodWriter", false);
      ByteVector byteVector0 = classWriter0.pool;
      methodWriter0.put(byteVector0);
      String[] stringArray0 = new String[4];
      MethodWriter methodWriter1 = null;
      try {
        methodWriter1 = new MethodWriter(classWriter0, 407, "Ljava/lang/Synthetic;", "u^rtZ( |z-*Qs`9va", "D*]", stringArray0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1047);
      ClassReader classReader0 = new ClassReader("org.mockito.asm.ClassReader");
      Attribute[] attributeArray0 = new Attribute[0];
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 1);
      assertEquals(4, ClassReader.SKIP_FRAMES);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-183));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1813, "P1P/n)-\"w(eW,..rZH]", "u^rtZ( |z-*Qs`9va", (String) null, (String[]) null, false, false);
      methodWriter0.visitIincInsn(1, 2);
      ByteVector byteVector0 = classWriter0.pool;
      methodWriter0.put(byteVector0);
      String[] stringArray0 = new String[4];
      MethodWriter methodWriter1 = null;
      try {
        methodWriter1 = new MethodWriter(classWriter0, 407, "Ljava/lang/Synthetic;", "u^rtZ( |z-*Qs`9va", "D*]", stringArray0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn((-208), (-208), 0, 0, 0).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-208), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray0, false, false);
      methodWriter0.visitIincInsn(1008, 55);
      Label label0 = new Label();
      methodWriter0.visitLocalVariable("printEnclosedStackTrace", "org.mockitoasm.MethodWriter", "^q^1]o9*uk[7R`", label0, label0, 1008);
      ByteVector byteVector0 = new ByteVector(76);
      methodWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1492);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "RuntimeVisibleParameterAnnotations", "L", "L", stringArray0, false, false);
      methodWriter0.visitIincInsn(1492, 1);
      ByteVector byteVector0 = classWriter0.pool;
      methodWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassWriter classWriter0 = new ClassWriter((-208));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, ",V_", "org.mockitoasm.MethodWriter", (String) null, stringArray0, false, false);
      ByteVector byteVector0 = new ByteVector(76);
      methodWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1492);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "RuntimeVisibleParameterAnnotations", "L", "L", stringArray0, false, false);
      methodWriter0.exceptionCount = 1492;
      ByteVector byteVector0 = classWriter0.pool;
      // Undeclared exception!
      try { 
        methodWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(classWriter0).newClass(anyString());
      doReturn((-208), (-208), 0, 0, 0).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[1];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-208), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray0, false, false);
      ByteVector byteVector0 = new ByteVector(1);
      methodWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-37));
      ClassReader classReader0 = new ClassReader("java/lang/Throwable");
      classReader0.accept((ClassVisitor) classWriter0, (-37));
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2828, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-208));
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "P1P/n)-\"w(eW,..rZH]", "P1P/n)-\"w(eW,..rZH]", "P1P/n)-\"w(eW,..rZH]", stringArray0, true, false);
      methodWriter0.visitIincInsn((-83), (-2691));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      ClassReader classReader0 = new ClassReader("java/lang/Throwable");
      classReader0.accept((ClassVisitor) classWriter0, 2);
      assertEquals(4801, classReader0.header);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1492);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1309, "L", "L", "off", stringArray0, false, false);
      methodWriter0.getSize();
      methodWriter0.visitAnnotation(")V", false);
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 16, "org.mockito.asm.MethodWriter", "off", (String) null, stringArray0, false, false);
      ByteVector byteVector0 = classWriter0.pool;
      methodWriter0.put(byteVector0);
      assertNotSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-197));
      ClassReader classReader0 = new ClassReader("java/lang/Throwable");
      classReader0.accept((ClassVisitor) classWriter0, 2);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 8, "6X>", "6X>", "P1P/n)-\"w(eW,..rZH]", (String[]) null, false, false);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn((-208), (-208)).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-208), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray0, false, false);
      ByteVector byteVector0 = new ByteVector(1);
      ByteVector byteVector1 = byteVector0.put11(1, 2);
      assertSame(byteVector1, byteVector0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(classWriter0).newClass(anyString());
      doReturn((-208), (-208)).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[1];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-208), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray0, false, false);
      ByteVector byteVector0 = new ByteVector(1);
      ByteVector byteVector1 = byteVector0.putLong(2);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn((-208), (-208)).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-208), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray0, false, false);
      ByteVector byteVector0 = new ByteVector(1);
      ByteVector byteVector1 = byteVector0.putLong(2);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn((-208), (-208)).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-208), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", stringArray0, false, false);
      ClassWriter classWriter1 = new ClassWriter((-208));
      classWriter1.visitOuterClass("zxx?", "StackMapTable", "EPBF&G~8b");
      classWriter1.visitInnerClass("^q^1]o9*uk[7R`", ",V_", "EPBF&G~8b", (-208));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }
}

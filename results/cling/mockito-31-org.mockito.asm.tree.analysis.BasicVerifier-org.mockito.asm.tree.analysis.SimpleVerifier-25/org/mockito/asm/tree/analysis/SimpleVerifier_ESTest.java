/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 08:06:50 GMT 2019
 */

package org.mockito.asm.tree.analysis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.Type;
import org.mockito.asm.tree.FieldInsnNode;
import org.mockito.asm.tree.InsnNode;
import org.mockito.asm.tree.IntInsnNode;
import org.mockito.asm.tree.MethodInsnNode;
import org.mockito.asm.tree.TypeInsnNode;
import org.mockito.asm.tree.VarInsnNode;
import org.mockito.asm.tree.analysis.AnalyzerException;
import org.mockito.asm.tree.analysis.BasicValue;
import org.mockito.asm.tree.analysis.BasicVerifier;
import org.mockito.asm.tree.analysis.SimpleVerifier;
import org.mockito.asm.tree.analysis.SourceValue;
import org.mockito.asm.tree.analysis.Value;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SimpleVerifier_ESTest extends SimpleVerifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      VarInsnNode varInsnNode0 = new VarInsnNode(33, 18);
      Value value0 = simpleVerifier0.copyOperation(varInsnNode0, basicValue0);
      assertSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      Type type0 = Type.getReturnType("[B");
      BasicValue basicValue0 = new BasicValue(type0);
      VarInsnNode varInsnNode0 = new VarInsnNode(48, 30);
      Value value0 = simpleVerifier0.copyOperation(varInsnNode0, basicValue0);
      assertSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      InsnNode insnNode0 = new InsnNode(40);
      LinkedHashSet<FieldInsnNode> linkedHashSet0 = new LinkedHashSet<FieldInsnNode>();
      SourceValue sourceValue0 = new SourceValue(177, linkedHashSet0);
      Value value0 = simpleVerifier0.copyOperation(insnNode0, sourceValue0);
      assertEquals(177, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      IntInsnNode intInsnNode0 = new IntInsnNode(119, 2095);
      try { 
        simpleVerifier0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: AnalyzerException");
      
      } catch(AnalyzerException e) {
         //
         // Expected D, but found I
         //
         verifyException("org.mockito.asm.tree.analysis.BasicVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      Type type0 = Type.getReturnType("[B");
      BasicValue basicValue0 = new BasicValue(type0);
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(42, "L0;`/mE(<;", "[B", "L0;`/mE(<;");
      BasicValue basicValue1 = (BasicValue)simpleVerifier0.copyOperation(methodInsnNode0, basicValue0);
      assertTrue(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(46, "V]{|_?", "V]{|_?", "V]{|_?");
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      Value value0 = simpleVerifier0.copyOperation(methodInsnNode0, basicValue0);
      assertSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(124, "[B", "[B", "[B");
      SourceValue sourceValue0 = new SourceValue(5);
      // Undeclared exception!
      try { 
        simpleVerifier0.unaryOperation(fieldInsnNode0, sourceValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      VarInsnNode varInsnNode0 = new VarInsnNode(44, 44);
      BasicValue basicValue1 = (BasicValue)simpleVerifier0.copyOperation(varInsnNode0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicVerifier basicVerifier0 = new BasicVerifier();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(47, "First argument");
      Value value0 = basicVerifier0.copyOperation(typeInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      VarInsnNode varInsnNode0 = new VarInsnNode(39, 39);
      Value value0 = simpleVerifier0.copyOperation(varInsnNode0, basicValue0);
      assertSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(43, "pAdS_^bZ4+,e8PlKM`", "k-Dx/o!8+#-M ", "H}+@hm ~A:BhAL,$");
      Value value0 = simpleVerifier0.copyOperation(methodInsnNode0, basicValue0);
      assertSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<MethodInsnNode> linkedList0 = new LinkedList<MethodInsnNode>();
      SimpleVerifier simpleVerifier0 = new SimpleVerifier((Type) null, (Type) null, linkedList0, true);
      InsnNode insnNode0 = new InsnNode(122);
      Value value0 = simpleVerifier0.newValue((Type) null);
      // Undeclared exception!
      try { 
        simpleVerifier0.unaryOperation(insnNode0, value0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(128, "[B", "[B", "[B");
      SourceValue sourceValue0 = new SourceValue(5);
      // Undeclared exception!
      try { 
        simpleVerifier0.unaryOperation(fieldInsnNode0, sourceValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      VarInsnNode varInsnNode0 = new VarInsnNode(36, 36);
      Value value0 = simpleVerifier0.copyOperation(varInsnNode0, basicValue0);
      assertSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      Type type0 = Type.getReturnType("[B");
      BasicValue basicValue0 = new BasicValue(type0);
      VarInsnNode varInsnNode0 = new VarInsnNode(37, 1825);
      Value value0 = simpleVerifier0.copyOperation(varInsnNode0, basicValue0);
      assertSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      Type type0 = Type.getReturnType("[B");
      BasicValue basicValue0 = new BasicValue(type0);
      VarInsnNode varInsnNode0 = new VarInsnNode(35, 1825);
      Value value0 = simpleVerifier0.copyOperation(varInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      Type type0 = Type.getReturnType("[B");
      BasicValue basicValue0 = new BasicValue(type0);
      IntInsnNode intInsnNode0 = new IntInsnNode(31, (-3728));
      Value value0 = simpleVerifier0.copyOperation(intInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(27, ";^A<o5N,", ";^A<o5N,", "H}+@hm ~A:BhAL,$");
      BasicValue basicValue1 = (BasicValue)simpleVerifier0.copyOperation(methodInsnNode0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      InsnNode insnNode0 = new InsnNode(25);
      LinkedHashSet<FieldInsnNode> linkedHashSet0 = new LinkedHashSet<FieldInsnNode>();
      SourceValue sourceValue0 = new SourceValue(177, linkedHashSet0);
      // Undeclared exception!
      try { 
        simpleVerifier0.copyOperation(insnNode0, sourceValue0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.analysis.SourceValue cannot be cast to org.mockito.asm.tree.analysis.BasicValue
         //
         verifyException("org.mockito.asm.tree.analysis.BasicVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      VarInsnNode varInsnNode0 = new VarInsnNode(22, 18);
      try { 
        simpleVerifier0.copyOperation(varInsnNode0, basicValue0);
        fail("Expecting exception: AnalyzerException");
      
      } catch(AnalyzerException e) {
         //
         // Expected J, but found D
         //
         verifyException("org.mockito.asm.tree.analysis.BasicVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      Type type0 = Type.getReturnType("[B");
      BasicValue basicValue0 = new BasicValue(type0);
      VarInsnNode varInsnNode0 = new VarInsnNode(30, 7);
      BasicValue basicValue1 = (BasicValue)simpleVerifier0.copyOperation(varInsnNode0, basicValue0);
      assertTrue(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      VarInsnNode varInsnNode0 = new VarInsnNode(23, 18);
      try { 
        simpleVerifier0.copyOperation(varInsnNode0, basicValue0);
        fail("Expecting exception: AnalyzerException");
      
      } catch(AnalyzerException e) {
         //
         // Expected F, but found D
         //
         verifyException("org.mockito.asm.tree.analysis.BasicVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      Type type0 = Type.getReturnType("[B");
      BasicValue basicValue0 = new BasicValue(type0);
      VarInsnNode varInsnNode0 = new VarInsnNode(41, 1825);
      Value value0 = simpleVerifier0.copyOperation(varInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }
}

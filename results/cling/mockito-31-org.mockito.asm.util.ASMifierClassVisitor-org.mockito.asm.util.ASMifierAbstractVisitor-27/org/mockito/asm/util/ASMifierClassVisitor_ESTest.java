/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 08:49:33 GMT 2019
 */

package org.mockito.asm.util;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mockito.asm.FieldVisitor;
import org.mockito.asm.MethodVisitor;
import org.mockito.asm.util.ASMifierClassVisitor;
import org.mockito.asm.util.ASMifierMethodVisitor;
import org.mockito.asm.util.AbstractVisitor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ASMifierClassVisitor_ESTest extends ASMifierClassVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod(128, "mv.visitFrame(Opcodes.F_NEW, ", "NSIENT", "';7fzp8b5=bO,VbP`\"", aSMifierClassVisitor0.TYPES);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitMethod(0, ":!V aRvtV", "", ":!V aRvtV", aSMifierClassVisitor0.TYPES);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ":!V aRvtV";
      try { 
        ASMifierClassVisitor.main(stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Class not found
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      String[] stringArray0 = new String[0];
      aSMifierClassVisitor0.visitMethod(32, "*`G2", "*`G2", "*`G2", stringArray0);
      aSMifierClassVisitor0.visit(67, (-849), "*`G2", "~]|lwq$SX", "~]|lwq$SX", stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      ASMifierMethodVisitor aSMifierMethodVisitor0 = aSMifierClassVisitor0.createASMifierMethodVisitor();
      aSMifierClassVisitor0.visit(196653, 91, "w]ER>L5", "w]ER>L5", "w]ER>L5", aSMifierMethodVisitor0.TYPES);
      aSMifierClassVisitor0.visit((-551), 1024, "w]ER>L5", "new short[] {", "ConstantValue", aSMifierMethodVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitMethod(3410, "N.class", "ACC_DEPRECATED", "N.class", aSMifierClassVisitor0.OPCODES);
      aSMifierClassVisitor0.visit(224, 8192, "org.mockito.asm.Type", "ACC_DEPRECATED", "mv.visitMaxs(", aSMifierClassVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cr`S9N/j/.{[w";
      aSMifierClassVisitor0.visit((-472), 91, "~]|lwq$SX", "cr`S9N/j/.{[w", "mv", stringArray0);
      try { 
        ASMifierClassVisitor.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // cr`S9N/j/.{[w (No such file or directory)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visit(46, 3773, "qYp", "cw", ")z4~;U21DkH2gfveC:", aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitMethod(64, "(short)", "c/L,dYn=F!.class", "c/L,dYn=F!.class", (String[]) null);
      aSMifierClassVisitor0.appendAccess(8192);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitMethod(64, "(short)", "c/L,dYn=F!.class", "c/L,dYn=F!.class", (String[]) null);
      aSMifierClassVisitor0.visit(1, 8192, "c/L,dYn=F!.class", "ACC_PRIVATE", "FBhI", aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visit(7, 3316, "Opcodes.DOUBLE.class", "FLF6VfnMXT)", "FBhI", aSMifierClassVisitor0.TYPES);
      FieldVisitor fieldVisitor0 = aSMifierClassVisitor0.visitField(16380, "", "}", (String) null, (Object) null);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitField(8192, "000", "000", "000", "000");
      aSMifierClassVisitor0.visit(47, 47, "!,g&D/0^Tgagk?,i1$", "%X3$oWS<8`_&", "qvod", aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitMethod(3439, ":!V aRvtV", "ACC_DEPRECATED", ":!V aRvtV", aSMifierClassVisitor0.TYPES);
      aSMifierClassVisitor0.visit(224, 8192, "W6H`'vljm", "p$1<@O!Pe_ZM)C", "(short)", aSMifierClassVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitMethod((-2782), "ource(", "cw.visitSource(", "ource(", (String[]) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      try { 
        ASMifierClassVisitor.main(stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Class not found
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visit(50, (-472), "i", "i", "8y[08C%q", aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visitMethod((-472), "R2Tj0+2035\";e", "vpI7<;;H&>*tX71K", "<xt[|<A{e1^q", aSMifierClassVisitor0.OPCODES);
      aSMifierClassVisitor0.visit(49, 49, "R2Tj0+2035\";e", (String) null, " gXJa", aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod(3439, ":!V aRvtV", "ACC_DEPRECATED", ":!V aRvtV", aSMifierClassVisitor0.OPCODES);
      aSMifierClassVisitor0.visit(8192, 16384, "(short)", "CX'Wb'E7YYo8o 9", ":!V aRvtV", ((AbstractVisitor) methodVisitor0).TYPES);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      ASMifierClassVisitor.main(aSMifierClassVisitor0.TYPES);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod(65535, "47", "ACC_TRANSIENT", "", aSMifierClassVisitor0.OPCODES);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      Object object0 = new Object();
      ASMifierClassVisitor.main(aSMifierClassVisitor0.OPCODES);
      FieldVisitor fieldVisitor0 = aSMifierClassVisitor0.visitField(16384, (String) null, "J2+4kC4\"a5:6aWG:", "vJU1a5E", object0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      ASMifierClassVisitor.main(aSMifierClassVisitor0.TYPES);
      ASMifierMethodVisitor aSMifierMethodVisitor0 = aSMifierClassVisitor0.createASMifierMethodVisitor();
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod((-1567), "w]ER>L5", "w]ER>L5", "public class ", aSMifierMethodVisitor0.OPCODES);
      assertNotSame(methodVisitor0, aSMifierMethodVisitor0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test19()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cr`S9N/j/.{[w";
      aSMifierClassVisitor0.visitMethod((-472), "qYp.class", "(short).class", "mv.visitIincInsn(", stringArray0);
      try { 
        ASMifierClassVisitor.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // cr`S9N/j/.{[w (No such file or directory)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      FieldVisitor fieldVisitor0 = aSMifierClassVisitor0.visitField(16384, "wg2|Y+axi_u", "cw.visitSource(.class", "qYp.class", "F&-O@6u&/F,d7B=cwaV");
      aSMifierClassVisitor0.visit(173, 0, "F&-O@6u&/F,d7B=cwaV", "cw.visitSource(.class", "qYp.class", ((AbstractVisitor) fieldVisitor0).OPCODES);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitField(16384, "", "", (String) null, (Object) null);
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod((-1027), ";Z^.class", "", "[?Ze/=:@uHf1", stringArray0);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod(16384, "&MxYSMOta|{)S]", "wg2|Y+axi_u", "&MxYSMOta|{)S]", (String[]) null);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitField(16384, "c", "", (String) null, (Object) null);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod(536, "", "8%<o]GP 5% ", "\"yORpH]R@3hQoV", (String[]) null);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitMethod((-4038), "r9:o_'~", "r9:o_'~", "mv.visitIincInsn(", (String[]) null);
      aSMifierClassVisitor0.visit(46, 46, "~]|lwq$SX", "av", "av", (String[]) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      Object object0 = new Object();
      aSMifierClassVisitor0.visit(16384, 16384, "J2+4kC4\"a5:6aWG:", "2m[Y`lB_v}8,5p,Pf", "2m[Y`lB_v}8,5p,Pf", aSMifierClassVisitor0.TYPES);
      FieldVisitor fieldVisitor0 = aSMifierClassVisitor0.visitField(16384, (String) null, "J2+4kC4\"a5:6aWG:", "vJU1a5E", object0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visit(47, 199, "r>&)uhnS", "2Cx;q;U?J|^rsgq", "sp)&gt,YUqM&#_Yf", (String[]) null);
      FieldVisitor fieldVisitor0 = aSMifierClassVisitor0.visitField((-962), "mv$}GfFW`G,R@DIC\"K.class", "mv$}GfFW`G,R@DIC\"K.class", "i_", "i_");
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      FieldVisitor fieldVisitor0 = aSMifierClassVisitor0.visitField(16384, "", "", (String) null, (Object) null);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod((-1027), ";Z^.class", "", "[?Ze/=:@uHf1", ((AbstractVisitor) fieldVisitor0).TYPES);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      ASMifierMethodVisitor aSMifierMethodVisitor0 = aSMifierClassVisitor0.createASMifierMethodVisitor();
      aSMifierClassVisitor0.visit(196653, 91, "w]ER>L5", "w]ER>L5", "w]ER>L5", aSMifierMethodVisitor0.TYPES);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod((-1567), "w]ER>L5", "w]ER>L5", "public class ", aSMifierMethodVisitor0.OPCODES);
      assertNotSame(methodVisitor0, aSMifierMethodVisitor0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      ASMifierMethodVisitor aSMifierMethodVisitor0 = aSMifierClassVisitor0.createASMifierMethodVisitor();
      aSMifierClassVisitor0.visit(50, 91, "Opcodes.DOUBLE", "Opcodes.DOUBLE", "w]ER>L5", aSMifierMethodVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visit(48, 198, "%kI)35=3;0MW9sPCAM(", "Y^{zPe.Qj1@PF!\"D", "short)", aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.appendAccess((-566));
      String[] stringArray0 = new String[7];
      aSMifierClassVisitor0.visitInnerClass(stringArray0[4], "new double[] {", (String) null, 16384);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visitInnerClass((String) null, "c/L,dYn=F!.class", "Class not found", 16384);
      aSMifierClassVisitor0.appendAccess(66);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visit(0, 1556, "Pm:>/,@r~", "Pm:>/,@r~", "Pm:>/,@r~", aSMifierClassVisitor0.OPCODES);
      String[] stringArray0 = new String[7];
      aSMifierClassVisitor0.visitInnerClass(stringArray0[4], "new double[] {", (String) null, 16384);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visitInnerClass((String) null, "c/L,dYn=F!.class", "Class not found", 16384);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod((-488), "}Ma*lI.Ec", "}Ma*lI.Ec", ";?", aSMifierClassVisitor0.OPCODES);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visitInnerClass((String) null, "c/L,dYn=F!.class", "Class not found", 16384);
      aSMifierClassVisitor0.visit((-2849), 46, "mv.visitIincInsn(", "// ATTRIBUTE ", "r9:o_'~", (String[]) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      aSMifierClassVisitor0.visitMethod(16384, "qYp.class", "b[>/bjDy", "qYp.class", aSMifierClassVisitor0.TYPES);
      aSMifierClassVisitor0.visit(49, 46, "qYp.class", (String) null, "<xt[|<A{e1^q", aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      ASMifierClassVisitor.main(aSMifierClassVisitor0.OPCODES);
      String[] stringArray0 = new String[7];
      aSMifierClassVisitor0.visitInnerClass(stringArray0[4], "new double[] {", (String) null, 16384);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod((-2595), (String) null, "Prints the ASM code to generate the given class.", "ource(", stringArray0);
      MethodVisitor methodVisitor1 = aSMifierClassVisitor0.visitMethod(65535, "Opcodes.DOUBLE.class", "@gvWad,Ucg94o0S", (String) null, ((AbstractVisitor) methodVisitor0).OPCODES);
      assertNotSame(methodVisitor0, methodVisitor1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod(16384, "qYp.class", "b[>/bjDy", "qYp.class", aSMifierClassVisitor0.TYPES);
      aSMifierClassVisitor0.visit(46, 46, "<xt[|<A{e1^q", "xn'3y!IUxlgJ.lass", "b[>/bjDy", ((AbstractVisitor) methodVisitor0).OPCODES);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visitInnerClass((String) null, "c/L,dYn=F!.class", "Class not found", 16384);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod(5, (String) null, (String) null, "qYp.class", (String[]) null);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(printWriter0);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod(16384, "qYp.class", "b[>/bjDy", "qYp.class", aSMifierClassVisitor0.TYPES);
      aSMifierClassVisitor0.visit(32, (-1), "b[>/bjDy", "52OG8i_%|O)QluqS", "qYp.class", ((AbstractVisitor) methodVisitor0).OPCODES);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 04:55:22 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.EcmaError;
import com.google.javascript.rhino.head.EvaluatorException;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeFunction;
import com.google.javascript.rhino.head.NativeWith;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import java.util.LinkedHashSet;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NativeArray_ESTest extends NativeArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(10L);
      Object[] objectArray0 = new Object[7];
      nativeArray0.toArray(objectArray0);
      LinkedHashSet<NativeWith> linkedHashSet0 = new LinkedHashSet<NativeWith>();
      boolean boolean0 = nativeArray0.containsAll(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      int int0 = nativeArray0.size();
      assertEquals(7, int0);
      
      IdFunctionObject idFunctionObject0 = mock(IdFunctionObject.class, new ViolatedAssumptionAnswer());
      doReturn(nativeArray0, nativeArray0, nativeArray0, nativeArray0, nativeArray0).when(idFunctionObject0).getParentScope();
      nativeArray0.fillConstructorProperties(idFunctionObject0);
      assertFalse(nativeArray0.isSealed());
      assertTrue(nativeArray0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      NativeArray nativeArray0 = new NativeArray(0L);
      NativeFunction nativeFunction0 = mock(NativeFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(nativeFunction0).getLanguageVersion();
      doReturn(0).when(nativeFunction0).getParamAndVarCount();
      doReturn(0).when(nativeFunction0).getParamCount();
      NativeCall nativeCall0 = new NativeCall(nativeFunction0, nativeArray0, objectArray0);
      int int0 = nativeArray0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(scriptable0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      doReturn((Scriptable) null, (Scriptable) null, (Scriptable) null, (Scriptable) null, (Scriptable) null).when(scriptable0).getParentScope();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(scriptable0).toString();
      NativeArray.init(scriptable0, false);
      Object[] objectArray0 = new Object[6];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      TreeSet<ImporterTopLevel> treeSet0 = new TreeSet<ImporterTopLevel>();
      nativeArray0.containsAll(treeSet0);
      assertTrue(nativeArray0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertFalse(nativeContinuation0.isSealed());
      
      NativeArray.init(nativeContinuation0, true);
      NativeArray nativeArray0 = new NativeArray(0);
      Object[] objectArray0 = new Object[6];
      Object[] objectArray1 = nativeArray0.toArray(objectArray0);
      assertEquals(6, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(scriptable0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      doReturn((Scriptable) null, (Scriptable) null, (Scriptable) null, (Scriptable) null, (Scriptable) null).when(scriptable0).getParentScope();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(scriptable0).toString();
      NativeArray.init(scriptable0, false);
      NativeArray nativeArray0 = new NativeArray(10L);
      Object[] objectArray0 = new Object[7];
      Object[] objectArray1 = nativeArray0.toArray(objectArray0);
      assertEquals(10, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.size();
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        nativeArray0.getDefaultValue(class0);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.lastIndexOf(object0);
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        nativeArray0.getDefaultValue(class0);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      TreeSet<ImporterTopLevel> treeSet0 = new TreeSet<ImporterTopLevel>();
      nativeArray0.containsAll(treeSet0);
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      nativeArray0.defineOwnProperty(context0, objectArray0[1], (ScriptableObject) nativeArray0, false);
      assertFalse(nativeArray0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) objectArray0;
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      int int0 = nativeArray0.indexOf((Object) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      assertEquals(0L, nativeArray0.jsGet_length());
      
      boolean boolean0 = nativeArray0.contains((Object) null);
      assertFalse(boolean0);
      assertTrue(nativeArray0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(334L);
      assertFalse(nativeArray0.isSealed());
      
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(nativeArray0, context0, 8);
      assertTrue(nativeArray0.isEmpty());
      assertTrue(scriptableObject0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<NativeContinuation> class0 = NativeContinuation.class;
      NativeArray nativeArray0 = new NativeArray(0);
      // Undeclared exception!
      try { 
        nativeArray0.getDefaultValue(class0);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.NativeContinuation
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      Context context1 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = null;
      try {
        importerTopLevel0 = new ImporterTopLevel(context1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ImporterTopLevel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      int int0 = nativeArray0.lastIndexOf(object0);
      assertEquals((-1), int0);
      
      IdFunctionObject idFunctionObject0 = mock(IdFunctionObject.class, new ViolatedAssumptionAnswer());
      doReturn(nativeArray0, nativeArray0, nativeArray0, nativeArray0, nativeArray0).when(idFunctionObject0).getParentScope();
      nativeArray0.fillConstructorProperties(idFunctionObject0);
      assertFalse(nativeArray0.isSealed());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(scriptable0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      doReturn((Scriptable) null, (Scriptable) null, (Scriptable) null, (Scriptable) null, (Scriptable) null).when(scriptable0).getParentScope();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(scriptable0).toString();
      NativeArray.init(scriptable0, false);
      NativeArray nativeArray0 = new NativeArray(10L);
      nativeArray0.indexOf(nativeArray0);
      assertTrue(nativeArray0.isExtensible());
  }
}

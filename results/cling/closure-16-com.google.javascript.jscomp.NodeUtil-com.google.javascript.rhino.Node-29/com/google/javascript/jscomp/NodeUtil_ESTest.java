/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 05:54:13 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.GlobalNamespace;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.ReorderConstantExpression;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(node0).getBooleanProp(anyInt());
      NodeUtil.copyNameAnnotations(node0, node0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = Node.newNumber((double) 8233);
      NodeUtil.copyNameAnnotations(node0, node0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(16);
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = NodeUtil.opToStr(991);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = new Node(1048576);
      assertFalse(node0.isExprResult());
      
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertFalse(boolean0);
      assertEquals(1048576, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newNumber(884.9636729);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        peepholeRemoveDeadCode0.tryFoldDo(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = Node.newString(" line ", (-1192), 97);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName("Infinity");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = Node.newString("");
      Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
      assertEquals((-1), node1.getCharno());
      assertEquals(40, node1.getType());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString(2, "SykJ1");
      NodeUtil.getPureBooleanValue(node0);
      assertEquals(2, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThrow());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = Node.newString(" line ", (-1192), 97);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getFirstChild();
      String string0 = NodeUtil.arrayToString(node1);
      assertEquals(" line ", string0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = Node.newString("ShEP", (-544), (-2398));
      Node node1 = NodeUtil.newUndefinedNode(node0);
      String string0 = NodeUtil.getStringValue(node1);
      assertTrue(node0.isString());
      assertTrue(node1.isVoid());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals("undefined", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node(122);
      // Undeclared exception!
      try { 
        NodeUtil.getPureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.evaluatesToLocalValue(node0);
      assertEquals(43, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newNumber(0.15);
      NodeUtil.evaluatesToLocalValue(node0);
      boolean boolean0 = NodeUtil.isRelationalOperation(node0);
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("true", string0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(127);
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
      assertTrue(node0.isTrue());
      assertEquals((-1), node0.getCharno());
      assertEquals(44, node0.getType());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = Node.newNumber(884.9636729);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("884.9636729", string0);
      
      NodeUtil.evaluatesToLocalValue(node0);
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(42);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 42: THIS
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = NodeUtil.opToStr(44);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(43, (-3389), 50, 44).when(node0).getType();
      NodeUtil.evaluatesToLocalValue(node0, (Predicate<Node>) null);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node1).getSideEffectFlags();
      doReturn(true).when(node1).isCall();
      boolean boolean0 = NodeUtil.callHasLocalResult(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(node0).getType();
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node1).getType();
      boolean boolean1 = NodeUtil.isSimpleOperator(node1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1211, 7).when(node0).getType();
      NodeUtil.isLiteralValue(node0, true);
      Node node1 = Node.newString(4454, "+", (-750), 43);
      Node node2 = new Node(894, node1, node1, node1, node1);
      assertEquals(4454, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertEquals(894, node2.getType());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node((-2903));
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = new Node(122);
      assertFalse(node0.isString());
      
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      boolean boolean0 = NodeUtil.has(node0, sourceMap_DetailLevel0, sourceMap_DetailLevel0);
      assertFalse(boolean0);
      assertTrue(node0.isVoid());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newString("ShEP", (-544), (-2398));
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(8292, 47, 1).when(node1).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      NodeUtil.mayEffectMutableState(node1, abstractCompiler0);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newString(2610, "inlineConstants");
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0, abstractCompiler0);
      boolean boolean1 = NodeUtil.isStatementBlock(node0);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals(2610, node0.getType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      int int0 = NodeUtil.getCount(node0, nodeUtil_NumbericResultPredicate0, nodeUtil_NumbericResultPredicate0);
      assertEquals(0, int0);
      assertTrue(node0.isTrue());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, "UNSPECIFIED").when(node0).getProp(anyInt());
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, "-zMRx;89@?vtlg7>p", node0, ".");
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      boolean boolean0 = NodeUtil.has(node1, sourceMap_DetailLevel0, sourceMap_DetailLevel0);
      assertEquals(0, node1.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node(1048576);
      assertEquals(1048576, node0.getType());
      
      Node node1 = NodeUtil.newVarNode("U}u\"R$K", node0);
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(118, node1.getType());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("Input already exists: ", (Node) null);
      assertEquals(118, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newNumber((double) 130);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getFirstChild();
      doReturn(130).when(node1).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1, abstractCompiler0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidSimpleName("OBJECT_TYPE");
      assertTrue(boolean0);
      
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(43, (-3389), 50, 44).when(node0).getType();
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0, (Predicate<Node>) null);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, abstractCompiler0);
      boolean boolean1 = NodeUtil.isValidPropertyName("0Y3'{ry>g#-q l)");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = new Node(122);
      NodeUtil.evaluatesToLocalValue(node0, (Predicate<Node>) null);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(36);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 36
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(88).when(node0).getType();
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1211, 32).when(node0).getType();
      NodeUtil.isLiteralValue(node0, true);
      Node node1 = Node.newString(4454, "+", (-750), 43);
      boolean boolean0 = NodeUtil.isLoopStructure(node1);
      assertFalse(boolean0);
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(4454, node1.getType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(888).when(node0).getChildCount();
      doReturn(true).when(node0).isFor();
      NodeUtil.isForIn(node0);
      Node node1 = Node.newString(4, "8~n)", 32, 36);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeRETURN 8~n) 32
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newString("ShEP", (-544), (-2398));
      NodeUtil.evaluatesToLocalValue(node0);
      NodeUtil.isForIn(node0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(node0).isExprResult();
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1211, 7).when(node1).getType();
      boolean boolean1 = NodeUtil.isLiteralValue(node1, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(true).when(node0).isExprResult();
      // Undeclared exception!
      try { 
        NodeUtil.isPrototypePropertyDeclaration(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newNumber(0.15);
      NodeUtil.getLoopCodeBlock(node0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = new Node(113, 2468, 29);
      NodeUtil.getLoopCodeBlock(node0);
      assertEquals(10108957, node0.getSourcePosition());
      assertEquals(113, node0.getType());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node((-2749), (-2749), (-2749));
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node1).getFirstChild();
      doReturn(node0, node0).when(node1).getParent();
      doReturn((-3181)).when(node1).getType();
      doReturn(true).when(node1).isGetElem();
      doReturn(false).when(node1).isGetProp();
      NodeUtil.getBestLValueOwner(node1);
      assertEquals((-2749), node0.getType());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newNumber((double) 8233);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "]aTET?C[i+7-LQ", node0, "]aTET?C[i+7-LQ");
      int int0 = NodeUtil.getInverseOperator(37);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(45, 2, 51).when(node0).getType();
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
      
      Node node1 = Node.newString(138, "_:D;V3/?.'\".H:R");
      Node node2 = node1.cloneTree();
      assertEquals(138, node2.getType());
      assertNotSame(node2, node1);
      assertEquals((-1), node2.getCharno());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(45, 2, 51).when(node0).getType();
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
      
      Node node1 = Node.newString(138, "_:D;V3/?.'\".H:R");
      Node node2 = node1.removeFirstChild();
      assertEquals(138, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newNumber(4512.039449363294, (-687), 300);
      Node node1 = node0.removeChildren();
      assertNull(node1);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(11);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("");
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Double double0 = NodeUtil.getStringNumberValue(" of ");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(127);
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
      assertEquals(44, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      Node node0 = Node.newString(4454, "+", (-750), 43);
      Node node1 = NodeUtil.newName(googleCodingConvention0, "^5", node0, ".*S=Wv");
      NodeUtil.getNumberValue(node1);
      assertEquals(4454, node0.getType());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.isName());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newNumber((double) 12);
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = NodeUtil.numberNode((-3118.417962293), node0);
      assertEquals((-1), node1.getLineno());
      assertEquals(39, node1.getType());
      assertFalse(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      // Undeclared exception!
      try { 
        node0.addChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(45, 2, 51).when(node0).getType();
      NodeUtil.mayEffectMutableState(node0);
      Object object0 = new Object();
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, "UNSPECIFIED").when(node1).getProp(anyInt());
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node2 = NodeUtil.newName(googleCodingConvention0, "-zMRx;89@?vtlg7>p", node1, ".");
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      boolean boolean0 = NodeUtil.has(node2, sourceMap_DetailLevel0, sourceMap_DetailLevel0);
      assertFalse(node2.isCall());
      assertEquals(0, node2.getCharno());
      assertTrue(boolean0);
      assertFalse(node2.isNew());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newNumber(0.15);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node1 = peepholeRemoveDeadCode0.tryOptimizeBlock(node0);
      NodeUtil.evaluatesToLocalValue(node1);
      assertEquals((-1), node1.getLineno());
      assertEquals(39, node1.getType());
      assertFalse(node0.isRegExp());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(39);
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1211, 7).when(node0).getType();
      boolean boolean1 = NodeUtil.isLiteralValue(node0, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = Node.newNumber(0.15);
      NodeUtil.isImmutableValue(node0);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1211, 32).when(node0).getType();
      NodeUtil.isLiteralValue(node0, true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      Node node1 = Node.newString(4454, "+", (-750), 43);
      Node node2 = NodeUtil.newName(googleCodingConvention0, "^5", node1, ".*S=Wv");
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: NAME ^5 [originalname: .*S=Wv]
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1211, 32).when(node0).getType();
      NodeUtil.isLiteralValue(node0, true);
      Node node1 = Node.newString(4454, "+", (-750), 43);
      node1.setSourceEncodedPositionForTree(31);
      assertEquals(31, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newNumber((double) 8233);
      Node node1 = new Node(8233, node0, node0, node0, 61, 32);
      assertEquals(249888, node1.getSourcePosition());
      assertEquals(8233, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      
      NodeUtil.getBestLValueOwner(node0);
      NodeUtil.evaluatesToLocalValue(node0);
      assertFalse(node0.isGetElem());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(987).when(node0).getType();
      NodeUtil.isImmutableValue(node0);
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("!=", "com.google.javascript.jscomp.CheckMissingGetCssName").when(node1).getProp(anyInt());
      Node node2 = NodeUtil.newQualifiedNameNode(codingConvention0, "!=", node1, "!=");
      boolean boolean0 = NodeUtil.mayBeStringHelper(node2);
      assertTrue(boolean0);
      assertEquals(38, node2.getType());
      assertEquals(0, node2.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = new Node(1872);
      NodeUtil.isImmutableValue(node0);
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node1 = NodeUtil.newQualifiedNameNode(codingConvention0, "=", node0, "=");
      assertEquals(38, node1.getType());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newNumber(0.15);
      NodeUtil.isImmutableValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NUMBER 0.15 does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = new Node(1048551);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(16, 48).when(node1).getType();
      boolean boolean0 = NodeUtil.isBooleanResult(node1);
      boolean boolean1 = NodeUtil.isImmutableValue(node0);
      assertEquals(1048551, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newString(4, "8~n)", 32, 36);
      Node node1 = new Node(306, node0, node0, node0, 29, 42);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeBANG 29
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1211, 7).when(node0).getType();
      NodeUtil.isLiteralValue(node0, true);
      Node node1 = Node.newString(4454, "+", (-750), 43);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
      assertEquals(4454, node1.getType());
      assertTrue(boolean0);
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newNumber(884.9636729);
      Node node1 = Node.newNumber(0.15, 4095, 93);
      assertEquals(16773213, node1.getSourcePosition());
      assertTrue(node1.isNumber());
      
      Node node2 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node2).getFirstChild();
      doReturn(node0, node0).when(node2).getParent();
      doReturn(true, true).when(node2).isFunction();
      String string0 = NodeUtil.getNearestFunctionName(node2);
      assertNotNull(string0);
      assertEquals("884.9636729", string0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newNumber(884.9636729);
      node0.getInputId();
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getFirstChild();
      doReturn(node0, node0).when(node1).getParent();
      doReturn(true, true).when(node1).isFunction();
      String string0 = NodeUtil.getNearestFunctionName(node1);
      assertNotNull(string0);
      assertEquals((-1), node0.getCharno());
      assertEquals("884.9636729", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = Node.newString("ShEP", (-544), (-2398));
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(39, 12).when(node1).getType();
      boolean boolean0 = NodeUtil.isBooleanResult(node1);
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(node0.isString());
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = Node.newString("ShEP", (-544), (-2398));
      node0.addSuppression("*S=Wv.");
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(87).when(node0).getType();
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newNumber((double) 39, 49, (-1138));
      NodeUtil.getPureBooleanValue(node0);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = new Node(1048576);
      boolean boolean0 = node0.isQualifiedName();
      assertFalse(boolean0);
      assertEquals(1048576, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(20).when(node0).getType();
      doReturn("mEsl)Y!fZx").when(node0).toString();
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assignment op:mEsl)Y!fZx
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node((-2749), (-2749), (-2749));
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node1).getFirstChild();
      doReturn(node0, node0).when(node1).getParent();
      doReturn((-2806)).when(node1).getType();
      doReturn(true).when(node1).isGetProp();
      NodeUtil.getBestLValueOwner(node1);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2749
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = new Node(1048551);
      boolean boolean0 = NodeUtil.referencesThis(node0);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isImmutableValue(node0);
      assertEquals((-1), node0.getLineno());
      assertEquals(1048551, node0.getType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = new Node(122);
      assertFalse(node0.isName());
      
      boolean boolean0 = NodeUtil.isVarDeclaration(node0);
      assertFalse(boolean0);
      assertTrue(node0.isVoid());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstantKey(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("3j(RYp?/sy|>MS4ZjO").when(node0).getString();
      doReturn(147).when(node0).getType();
      doReturn(false).when(node0).isGetProp();
      boolean boolean0 = NodeUtil.isConstantByConvention(codingConvention0, node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getLastChild();
      doReturn("+infinity").when(node0).getString();
      doReturn((-3507)).when(node0).getType();
      doReturn(true).when(node0).isGetProp();
      boolean boolean0 = NodeUtil.isConstantByConvention(codingConvention0, node0, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Predicate<Node> predicate0 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.Node.class));
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = null;
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(node1).isTry();
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2231);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.isImmutableValue(node1);
      assertFalse(node0.isNull());
      assertTrue(boolean0);
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = NodeUtil.precedence(31);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      Node node0 = Node.newNumber((double) 2231);
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isImmutableValue(node0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = Node.newString("SykJ1", 51, 51);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertEquals(208947, node0.getSourcePosition());
      assertTrue(boolean0);
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = new Node(122);
      NodeUtil.evaluatesToLocalValue(node0, (Predicate<Node>) null);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertFalse(boolean0);
      assertTrue(node0.isVoid());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = new Node(42, 2, 31);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(127);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
      assertFalse(boolean0);
      assertEquals(8223, node0.getSourcePosition());
      assertEquals(42, node0.getType());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(43, (-3389), 50, 44).when(node0).getType();
      NodeUtil.evaluatesToLocalValue(node0, (Predicate<Node>) null);
      int int0 = NodeUtil.getInverseOperator(4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newString("ShEP", (-544), (-2398));
      Node node1 = NodeUtil.newUndefinedNode(node0);
      Node node2 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node1).when(node2).getParent();
      doReturn(true).when(node2).isFunction();
      doReturn(true).when(node2).isName();
      NodeUtil.redeclareVarsInsideBranch(node2);
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1, abstractCompiler0);
      assertEquals(40, node0.getType());
      assertTrue(node1.isVoid());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(false).when(node0).isFunction();
      doReturn(false).when(node0).isName();
      NodeUtil.redeclareVarsInsideBranch(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(node1).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1, abstractCompiler0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      int int0 = NodeUtil.getCount(node0, nodeUtil_BooleanResultPredicate0, nodeUtil_BooleanResultPredicate0);
      assertTrue(node0.isTrue());
      assertEquals(1, int0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(node0).getQualifiedName();
      NodeUtil.isPrototypeProperty(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node1).getParent();
      doReturn(0, 0, 0, 0).when(node1).getType();
      doReturn((String) null).when(node1).toString();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1, (Predicate<Node>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodenull
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newString(2610, "inlineConstants");
      Node node1 = new Node((-305), node0, node0, node0, 45, 3173);
      node1.removeFirstChild();
      boolean boolean0 = NodeUtil.isSimpleOperator(node1);
      assertEquals(2610, node0.getType());
      assertEquals((-305), node1.getType());
      assertFalse(boolean0);
      assertEquals(187493, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newString("ShEP", (-544), (-2398));
      NodeUtil.getSourceName(node0);
      assertEquals(40, node0.getType());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      Node node0 = Node.newString(1073741823, "undefined", 1073741823, 1073741823);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(abstractCompiler0, node0);
      globalNamespace0.getSlot("com.google.javascript.jscomp.NameAnonymousFunctionsMapped");
      assertEquals(1073741823, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getParent();
      doReturn((StaticSourceFile) null).when(node0).getStaticSourceFile();
      StaticSourceFile staticSourceFile0 = NodeUtil.getSourceFile(node0);
      assertNull(staticSourceFile0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test100()  throws Throwable  {
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("}3`Li", false);
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getParent();
      doReturn((StaticSourceFile) null).when(node0).getStaticSourceFile();
      StaticSourceFile staticSourceFile0 = NodeUtil.getSourceFile(node0);
      assertEquals("}3`Li", staticSourceFile0.getName());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = new Node(1048576);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      Node node2 = mock(Node.class, new ViolatedAssumptionAnswer());
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node2;
      Node node3 = NodeUtil.newCallNode(node0, nodeArray0);
      assertEquals(1048576, node0.getType());
      assertEquals((-1), node3.getSourcePosition());
      assertTrue(node3.hasMoreThanOneChild());
      assertTrue(node3.isCall());
      assertFalse(node3.isGetElem());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newString(2610, "inlineConstants");
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getParent();
      doReturn("inlineConstants").when(node1).getSourceFileName();
      String string0 = NodeUtil.getSourceName(node1);
      assertNotNull(string0);
      assertEquals("inlineConstants", string0);
      assertEquals(2610, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newNumber(0.15);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getFirstChild();
      doReturn(54).when(node1).getType();
      boolean boolean0 = NodeUtil.containsType(node1, 16);
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals(83, node0.getType());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got TRUE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newString(2610, "inlineConstants");
      Node node1 = new Node(16, node0, node0, node0, node0);
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1, abstractCompiler0);
      assertEquals(16, node1.getType());
      assertTrue(boolean0);
      assertEquals(2610, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(node0).isCall();
      doReturn(true).when(node0).isNoSideEffectsCall();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.functionCallHasSideEffects(node0, abstractCompiler0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got TRUE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(true).when(node0).isNew();
      doReturn(false).when(node0).isNoSideEffectsCall();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0, abstractCompiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(true).when(node0).isCall();
      doReturn(false).when(node0).isNoSideEffectsCall();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0, abstractCompiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(node0).isNew();
      doReturn(true).when(node0).isNoSideEffectsCall();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.constructorCallHasSideEffects(node0, abstractCompiler0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node(122);
      NodeUtil.getBestJSDocInfo(node0);
      assertTrue(node0.isVoid());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      NodeUtil.isCommutative(39);
      Node node0 = Node.newString(4454, "+", (-750), 43);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0, abstractCompiler0);
      assertEquals(4454, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newNumber(0.15);
      NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      
      boolean boolean0 = NodeUtil.isAssociative(43);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue(" of% ");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = new Node(1048576);
      // Undeclared exception!
      try { 
        node0.getChildBefore(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(node0).isExprResult();
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(boolean0);
      
      Node node1 = Node.newString(4454, "+", (-750), 43);
      boolean boolean1 = NodeUtil.mayEffectMutableState(node1, abstractCompiler0);
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(4454, node1.getType());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      Node node0 = Node.newString(4454, "+", (-750), 43);
      Node node1 = NodeUtil.newName(googleCodingConvention0, "^5", node0, ".*S=Wv");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0, abstractCompiler0);
      boolean boolean1 = NodeUtil.mayEffectMutableState(node1);
      assertEquals(4454, node0.getType());
      assertTrue(node1.isName());
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), node1.getLineno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(node0).isExprResult();
      boolean boolean0 = NodeUtil.isExprCall(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(node1).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = NodeUtil.mayEffectMutableState(node1, abstractCompiler0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-2251), (-2251), 77, 41).when(node0).getType();
      NodeUtil.evaluatesToLocalValue(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node1).getLastSibling();
      Node node2 = NodeUtil.booleanNode(true);
      node2.addChildAfter(node1, (Node) null);
      assertEquals(1, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newString(113, "[O*^-b;o%O3!J-/");
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(node0.isWhile());
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      Node node0 = Node.newString(4454, "+", (-750), 43);
      Node node1 = NodeUtil.newName(googleCodingConvention0, "^5", node0, ".*S=Wv");
      NodeUtil.mayEffectMutableState(node0, abstractCompiler0);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      boolean boolean0 = NodeUtil.isNameReferenced(node1, "I", nodeUtil_NumbericResultPredicate0);
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.isName());
      assertEquals(4454, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newString("ShEP", (-544), (-2398));
      Node node1 = NodeUtil.newUndefinedNode(node0);
      Node node2 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node1).when(node2).getFirstChild();
      doReturn(true).when(node2).isExprResult();
      boolean boolean0 = NodeUtil.isExprCall(node2);
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = NodeUtil.mayEffectMutableState(node1, abstractCompiler0);
      assertTrue(boolean1 == boolean0);
      assertEquals(122, node1.getType());
      assertTrue(node0.isString());
      assertEquals((-1), node1.getLineno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newString("ShEP", (-544), (-2398));
      Node node1 = NodeUtil.newUndefinedNode(node0);
      Node node2 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(39, 12).when(node2).getType();
      NodeUtil.isBooleanResult(node2);
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1, abstractCompiler0);
      assertEquals((-1), node1.getCharno());
      assertEquals(122, node1.getType());
      assertTrue(node0.isString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = Node.newString(291, ",LPN=l4ej[se;P]");
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0, node0).when(node1).getParent();
      doReturn(true).when(node1).isFunction();
      Node node2 = NodeUtil.getBestLValue(node1);
      assertEquals(291, node0.getType());
      assertNull(node2);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAssign());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = Node.newString("ShEP", (-544), (-2398));
      assertFalse(node0.isFunction());
      
      NodeUtil.getNearestFunctionName(node0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(45, 2, 51).when(node0).getType();
      NodeUtil.mayEffectMutableState(node0);
      Node node1 = Node.newString(4, "8~n)", 32, 36);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeRETURN 8~n) 32
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1211, 7).when(node0).getType();
      boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
      assertFalse(boolean0);
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      Node node1 = Node.newString(4454, "+", (-750), 43);
      Node node2 = NodeUtil.newName(googleCodingConvention0, "^5", node1, ".*S=Wv");
      boolean boolean1 = NodeUtil.mayEffectMutableState(node2);
      assertEquals(38, node2.getType());
      assertEquals(4454, node1.getType());
      assertEquals((-1), node2.getCharno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newNumber(0.15);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertTrue(boolean0);
      
      boolean boolean1 = peepholeRemoveDeadCode0.mayEffectMutableState(node0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getParent();
      doReturn(112, (-1811), 112, (-259)).when(node0).getType();
      doReturn((String) null).when(node0).toString();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodenull
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(42).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0, abstractCompiler0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(45, 2, 51).when(node0).getType();
      NodeUtil.mayEffectMutableState(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(node1).getProp(anyInt());
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node2 = NodeUtil.newName(googleCodingConvention0, "-zMRx;89@?vtlg7>p", node1, ".");
      boolean boolean0 = NodeUtil.isPrototypeProperty(node2);
      assertFalse(boolean0);
      assertEquals(0, node2.getSourcePosition());
      assertEquals(38, node2.getType());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = Node.newString("ShEP", (-544), (-2398));
      Node node1 = NodeUtil.newUndefinedNode(node0);
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1, abstractCompiler0);
      assertFalse(boolean0);
      
      NodeUtil.isForIn(node1);
      assertFalse(node1.isFor());
      assertTrue(node0.isString());
      assertEquals(122, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getLastChild();
      doReturn(true).when(node1).isGetProp();
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypeClassName(node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // TRUE is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = new Node(134);
      assertFalse(node0.isGetProp());
      
      NodeUtil.getPrototypeClassName(node0);
      assertEquals(134, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newString("ShEP", (-544), (-2398));
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      NodeUtil.mayEffectMutableState(node0, abstractCompiler0);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(node0.isString());
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newString("ShEP", (-544), (-2398));
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getFirstChild();
      doReturn(true).when(node1).isExprResult();
      boolean boolean0 = NodeUtil.isExprCall(node1);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(node0.isString());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(node0).getProp(anyInt());
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, "-zMRx;89@?vtlg7>p", node0, ".");
      String string0 = NodeUtil.getStringValue(node1);
      assertNull(string0);
      assertEquals(0, node1.getCharno());
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = Node.newString(4454, "+", (-750), 43);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 23:30:23 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DateTimeFieldType;
import org.joda.time.LocalTime;
import org.joda.time.TimeOfDay;
import org.joda.time.YearMonth;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class TimeOfDay_ESTest extends TimeOfDay_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((long) 836);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      timeOfDay0.isSupported(dateTimeFieldType0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(0, timeOfDay0.getMinuteOfHour());
      assertEquals(836, timeOfDay0.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L);
      int[] intArray0 = localTime0.getValues();
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Calendar calendar0 = mock(Calendar.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(calendar0).get(anyInt());
      TimeOfDay timeOfDay0 = TimeOfDay.fromCalendarFields(calendar0);
      String string0 = timeOfDay0.toString();
      assertEquals("T00:00:00.000", string0);
      assertEquals(4, timeOfDay0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      // Undeclared exception!
      try { 
        yearMonth0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'null' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }
}

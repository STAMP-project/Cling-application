/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 09:16:31 GMT 2019
 */

package org.mockito.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.AnnotationVisitor;
import org.mockito.asm.AnnotationWriter;
import org.mockito.asm.ByteVector;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.FieldVisitor;
import org.mockito.asm.Item;
import org.mockito.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AnnotationWriter_ESTest extends AnnotationWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3191);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "h#I3A8p[iI)Roz?<bPL";
      stringArray0[1] = "";
      stringArray0[2] = "";
      classWriter0.visit(3191, (-1103), "SourceDebugExtension", "", "h#I3A8p[iI)Roz?<bPL", stringArray0);
      classWriter0.toByteArray();
      FieldVisitor fieldVisitor0 = classWriter0.visitField(2, "int", "l^/? et+{6)jTZ Mn(", "vxD@NjS/", "l^/? et+{6)jTZ Mn(");
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("Synthetic", false);
      String[] stringArray0 = new String[0];
      classWriter0.visit((-4), (-2146), "", "", "vxD@NjS/", stringArray0);
      Boolean boolean0 = Boolean.FALSE;
      annotationVisitor0.visit("", boolean0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(147, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      classWriter0.newMethodItem("", "Synthetic", "", false);
      String[] stringArray0 = new String[0];
      classWriter0.visit((-4), (-2146), "", "", "vxD@NjS/", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(105, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3221);
      classWriter0.visitInnerClass((String) null, (String) null, "RuntimeVisibleAnnotations", 3221);
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      Item item0 = classWriter0.newLong((-2987L));
      classWriter0.visitAnnotation("F|TP=6].;;QUYlf[}h", false);
      Item item1 = classWriter0.newLong((-2987L));
      assertSame(item1, item0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(96, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      Short short0 = new Short((short) (-831));
      classWriter0.visitField((-1083), "org.mockito.asm.Label", "YV*2es%0VB", "InnerClasses", short0);
      classWriter0.visitAnnotation("SourceDebugExtension", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(235, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.visitAnnotation("F|TP=6].;;QUYlf[}h", false);
      classWriter0.toByteArray();
      FieldVisitor fieldVisitor0 = classWriter0.visitField((-737), "F|TP=6].;;QUYlf[}h", "wwLn*.pbUte\"ll_Om", "/7p#CMp]Q4Nis", "F|TP=6].;;QUYlf[}h");
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-862));
      Boolean boolean0 = new Boolean(false);
      classWriter0.visitField((-2193), "?", "?", "d", boolean0);
      classWriter0.visitAnnotation("Synthetic", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(168, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3191);
      classWriter0.visitAnnotation("", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(69, byteArray0.length);
      
      classWriter0.addType("l^/? et+{6)jTZ Mn(");
      int int0 = classWriter0.addType("NB+@}3");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3191);
      classWriter0.visitAnnotation("", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(69, byteArray0.length);
      
      int int0 = classWriter0.addType("l^/? et+{6)jTZ Mn(");
      int int1 = classWriter0.addType("l^/? et+{6)jTZ Mn(");
      assertEquals(1, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-22));
      classWriter0.visitAnnotation("sS?z[&chz9", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(79, byteArray0.length);
      
      int int0 = classWriter0.addUninitializedType("SourceFile", (-22));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      Byte byte0 = new Byte((byte)106);
      classWriter0.newConst(byte0);
      ByteVector byteVector0 = new ByteVector();
      classWriter0.toByteArray();
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector0, 2);
      annotationWriter0.visit("", byte0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.newLong((-2987L));
      classWriter0.newLong((-2987L));
      FieldVisitor fieldVisitor0 = classWriter0.visitField((-737), "F|TP=6].;;QUYlf[}h", "wwLn*.pbUte\"ll_Om", "/7p#CMp]Q4Nis", "F|TP=6].;;QUYlf[}h");
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      classWriter0.addType("sS?z[&chz9");
      classWriter0.addType("sS?z[&chz9");
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("sS?z[&chz9", true);
      ByteVector byteVector0 = new ByteVector();
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("Kcl", byteVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.ByteVector@22c5b9fb
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      Type type0 = Type.getObjectType("^N]@#i,");
      classWriter0.visitField(9, "", "", "^N]@#i,", type0);
      classWriter0.addUninitializedType("^N]@#i,", 1);
      int int0 = classWriter0.addType("");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.newLong((-2987L));
      classWriter0.visitAnnotation("F|TP=6].;;QUYlf[}h", true);
      classWriter0.newLong((-2987L));
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(94, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      classWriter0.visitOuterClass("sS?z[&chz9", "sS?z[&chz9", "sS?z[&chz9");
      classWriter0.newMethodItem("sS?z[&chz9", "sS?z[&chz9", "sS?z[&chz9", true);
      classWriter0.visitAnnotation("sS?z[&chz9", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(118, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.visitAnnotation("F|TP=6].;;QUYlf[}h", true);
      classWriter0.toByteArray();
      FieldVisitor fieldVisitor0 = classWriter0.visitField(4, "F|TP=6].;;QUYlf[}h", "w!Ln*.pbUteKll$O ", "/7p#CMp]Q4Nis", "F|TP=6].;;QUYlf[}h");
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      classWriter0.visitAnnotation("Synthetic", true);
      classWriter0.toByteArray();
      Boolean boolean0 = Boolean.FALSE;
      FieldVisitor fieldVisitor0 = classWriter0.visitField(19, "2lXyU?y", "Synthetic", "Synthetic", boolean0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.visitAnnotation("Class not found", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(82, byteArray0.length);
      
      classWriter0.addType("java/lang/Object");
      int int0 = classWriter0.addType("b<&4 5Uy%H");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      classWriter0.addType("short");
      int int0 = classWriter0.addType("short");
      assertEquals(1, int0);
      
      classWriter0.visitAnnotation("short", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(72, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      classWriter0.visitAnnotation("Synthetic", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(76, byteArray0.length);
      
      int int0 = classWriter0.addUninitializedType("NFH<#(=Q_?21hGQTlH", 1034);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.newLong('^');
      classWriter0.newLong('^');
      classWriter0.visitSource("F|TP=6].;;QUYlf[}h", "F|TP=6].;;QUYlf[}h");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(122, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      Short short0 = Short.valueOf((short)219);
      classWriter0.visitField((-4), "", "", (String) null, short0);
      classWriter0.visitSource("", "Kool Fb-");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(159, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      classWriter0.visitField((-14), "k$t?^x{chJ+ERP~", "k$t?^x{chJ+ERP~", "k$t?^x{chJ+ERP~", "k$t?^x{chJ+ERP~");
      classWriter0.visitField((-14), "k$t?^x{chJ+ERP~", "k$t?^x{chJ+ERP~", "\u0005U`*7Up@Or7{EGt", "k$t?^x{chJ+ERP~");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(188, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      int int0 = classWriter0.newMethod("double", "double", "double", true);
      assertEquals(4, int0);
      
      classWriter0.visitSource("double", ".0jAoEvo|.");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(106, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      classWriter0.visitField((-4), "Iz$`LQ`4rc^F1WK(", "Iz$`LQ`4rc^F1WK(", "Iz$`LQ`4rc^F1WK(", "Iz$`LQ`4rc^F1WK(");
      classWriter0.visitSource("s>B8*i5", "ConstantValue");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(208, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-859));
      Boolean boolean0 = Boolean.TRUE;
      classWriter0.visitField(28, "?", "?", "d", boolean0);
      classWriter0.visitSource("d", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(139, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-7));
      int int0 = classWriter0.newField(".0jAoEvo|.", "char", "fYXXTak@/_)#sN4");
      assertEquals(6, int0);
      
      classWriter0.visitSource("double", ".0jAoEvo|.");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(144, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-859));
      Boolean boolean0 = new Boolean(false);
      classWriter0.visitField((-2193), "?", "?", "d", boolean0);
      classWriter0.visitSource("d", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(176, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      int int0 = classWriter0.addType("short");
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("short");
      assertEquals(1, int1);
      
      classWriter0.visitSource("ConstantValue", "O1[uizL");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(97, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-7));
      classWriter0.visitSource("oKle", ".0jAoEvo|.");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(91, byteArray0.length);
      
      classWriter0.addUninitializedType("SourceFile", 532);
      int int0 = classWriter0.addUninitializedType("oKle", (-1012));
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      Byte byte0 = new Byte((byte)106);
      int int0 = classWriter0.newConst(byte0);
      assertEquals(1, int0);
      
      classWriter0.visitAnnotation("", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(74, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3191);
      Byte byte0 = new Byte((byte)3);
      classWriter0.visitField((-1430), "", "", "_pV!_[KZwA*$_", byte0);
      classWriter0.visitSource("", "_pV!_[KZwA*$_");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(200, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      Boolean boolean0 = Boolean.TRUE;
      classWriter0.newConstItem(boolean0);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("sS?z[&chz9", false);
      classWriter0.toByteArray();
      annotationVisitor0.visit("", boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.visitAnnotation("", true);
      Boolean boolean0 = new Boolean(true);
      classWriter0.visitField((-763), "+eZxj-_!s@z,M<ioggS", "A/|5opV2m!i", "=!8/]2", boolean0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(206, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      classWriter0.visitAnnotation("Synthetic", true);
      Type type0 = Type.getObjectType("+eZxj-_!s@z,M<ioggS");
      classWriter0.visitField((-4), "", "gQ=2r+@zp&Kxk", ";]@#Ri,", type0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(208, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      Type type0 = Type.getObjectType("^N]@#i,");
      classWriter0.visitField(9, "", "", "^N]@#i,", type0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(92, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3191);
      classWriter0.newFloat(3191);
      classWriter0.newFloat(3191);
      Boolean boolean0 = new Boolean("d");
      classWriter0.visitField((-2193), "d", "?", "d", boolean0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(131, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3191);
      classWriter0.newFloat(3191);
      classWriter0.newFloat(3191);
      classWriter0.visitOuterClass(",O.", (String) null, "Deprecated");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3182);
      classWriter0.newFloat(3182);
      classWriter0.newFloat(3182);
      classWriter0.visitInnerClass("", "u5", "o|ih!s", (-992));
      classWriter0.visitInnerClass((String) null, "", "", 512);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3191);
      classWriter0.newFloat(3191);
      classWriter0.newFloat(3191);
      classWriter0.visitOuterClass("", "Deprecated", "e1");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3191);
      classWriter0.newFloat(3191);
      classWriter0.newFloat(3191);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "h#I3A8p[iI)Roz?<bPL";
      stringArray0[1] = "";
      stringArray0[2] = "";
      classWriter0.visit(3191, (-1103), "SourceDebugExtension", "", "h#I3A8p[iI)Roz?<bPL", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(131, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3191);
      classWriter0.newFloat(3191);
      classWriter0.newFloat(3191);
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3191);
      classWriter0.newFloat(3191);
      classWriter0.newFloat(3191);
      classWriter0.visitSource((String) null, (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3191);
      Item item0 = classWriter0.newFloat(3191);
      Item item1 = classWriter0.newFloat(3191);
      assertSame(item1, item0);
      
      classWriter0.visitSource("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "x8`y3");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(307, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.newDouble(4);
      classWriter0.newDouble(4);
      classWriter0.visitField(4, "F|TP=6].;;QUYlf[}h", "w!Ln*.pbUteKll$O ", "/7p#CMp]Q4Nis", "F|TP=6].;;QUYlf[}h");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(145, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.newDouble(4);
      classWriter0.newDouble(4);
      classWriter0.visitOuterClass("+s&MlNsT@lMnu", "long", "long");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.newDouble(4);
      classWriter0.newDouble(4);
      classWriter0.visitOuterClass("Exceptions", "Exceptions", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.newDouble(1544.3);
      classWriter0.newDouble(1544.3);
      classWriter0.visitInnerClass("RntimeViibleParameterAnnotations", (String) null, "#.rkT;\"`", 131084);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      Item item0 = classWriter0.newDouble(4);
      Item item1 = classWriter0.newDouble(4);
      assertSame(item1, item0);
      
      classWriter0.visitSource("b&", "b&");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(90, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      classWriter0.visitOuterClass("sS?z[&chz9", "sS?z[&chz9", "sS?z[&chz9");
      Type type0 = Type.DOUBLE_TYPE;
      FieldVisitor fieldVisitor0 = classWriter0.visitField(45, "RuntimeVisibleAnnotations", "", "", type0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-9));
      Type type0 = Type.FLOAT_TYPE;
      classWriter0.visitField(964, "vxD@NjS/", "Signature", "I|,'#4", type0);
      classWriter0.visitOuterClass("Exceptions", "Signature", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-7));
      classWriter0.visitSource("oKle", "oKle");
      Type type0 = Type.SHORT_TYPE;
      FieldVisitor fieldVisitor0 = classWriter0.visitField((-859), "oKle", "8g96WoZhE3b U#", "java/lang/Object", type0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      classWriter0.visitOuterClass("sS?z[&chz9", "sS?z[&chz9", "sS?z[&chz9");
      classWriter0.newMethodItem("sS?z[&chz9", "sS?z[&chz9", "sS?z[&chz9", false);
      Short short0 = new Short((short) (-1));
      classWriter0.visitField((-1333), "", "L", "", short0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(179, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-26));
      classWriter0.newMethod("Class not found", "Class not found", "", false);
      classWriter0.newNameType("Class not found", "");
      classWriter0.visitOuterClass("3$)/kEfq8?+cId9fX5n", (String) null, "Exceptions");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      classWriter0.visitOuterClass("sS?z[&chz9", "sS?z[&chz9", "sS?z[&chz9");
      classWriter0.newMethodItem("sS?z[&chz9", "sS?z[&chz9", "sS?z[&chz9", false);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("sS?z[&chz9", false);
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("$c#thx*", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.ClassWriter@7c60cd4
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      int int0 = classWriter0.newMethod("Class not found", "Class not found", "Class not found", false);
      assertEquals(4, int0);
      
      classWriter0.newNameType("Class not found", "Class not found");
      classWriter0.visitAnnotation("Class not found", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(95, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      classWriter0.visitOuterClass("sS?z[&chz9", "sS?z[&chz9", "sS?z[&chz9");
      classWriter0.newMethodItem("sS?z[&chz9", "sS?z[&chz9", "sS?z[&chz9", false);
      classWriter0.visitOuterClass("", "", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.newMethod("Class not found", "Class not found", "Class not found", false);
      classWriter0.newNameType("Class not found", "Class not found");
      classWriter0.visitInnerClass("X,H$}&b2+! -''dd~Y", (String) null, "X,H$}&b2+! -''dd~Y", 4);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      classWriter0.visitOuterClass("sS?z[&chz9", "sS?z[&chz9", "sS?z[&chz9");
      classWriter0.newMethodItem("sS?z[&chz9", "sS?z[&chz9", "sS?z[&chz9", false);
      classWriter0.visitAnnotation("sS?z[&chz9", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(120, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-18));
      classWriter0.newMethod("Class not found", "Class not found", "Class not found", true);
      classWriter0.newNameType("Class not found", "Class not found");
      classWriter0.visitInnerClass("Synthetic", "Synthetic", "Class not found", 953);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.newMethod("Class not found", "Class not found", "", false);
      classWriter0.newNameType("Class not found", "");
      classWriter0.visitSource((String) null, "aL$O:v");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      classWriter0.visitOuterClass("sS?z[&chz9", "sS?z[&chz9", "sS?z[&chz9");
      classWriter0.newMethodItem("sS?z[&chz9", "sS?z[&chz9", "sS?z[&chz9", false);
      classWriter0.visitSource("AH'WE>/Leg2Be", "sS?z[&chz9");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(154, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3191);
      classWriter0.visitOuterClass(",O.", (String) null, "Deprecated");
      ByteVector byteVector0 = classWriter0.pool;
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 3191);
      // Undeclared exception!
      try { 
        annotationWriter0.visit((String) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      ClassWriter classWriter0 = new ClassWriter(101);
      classWriter0.visitInnerClass("", "", "", 101);
      Item item0 = classWriter0.newFloat(3);
      classWriter0.visitInnerClass("", "RuntimeVisibleParameterAnnotations", "", 11);
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector0, 1);
      // Undeclared exception!
      try { 
        annotationWriter0.visit("PIiT;;&iw6}", item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.Item@10606924
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Object object0 = new Object();
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.visitInnerClass("InnerClasses", "Synthetic", (String) null, 4);
      ByteVector byteVector0 = new ByteVector(220);
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 222);
      // Undeclared exception!
      try { 
        annotationWriter0.visit(">HZ[d{", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@26d5520b
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      Type type0 = Type.INT_TYPE;
      classWriter0.visitField(8, "Iz$`LQ`4rc^F1WK(", "]6?&", (String) null, type0);
      classWriter0.visitSource((String) null, (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3191);
      ByteVector byteVector0 = classWriter0.pool;
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector0, (-2117));
      classWriter0.visitSource("", "_pV!_[KZwA*$_");
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        annotationWriter0.visit("", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      classWriter0.newLong((-2987L));
      String[] stringArray0 = new String[0];
      classWriter0.visit((-4), (-2146), "", "", "vxD@NjS/", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(92, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3191);
      classWriter0.newFloat(3191);
      classWriter0.newFloat(3191);
      classWriter0.visitAnnotation("", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(74, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3191);
      classWriter0.newFloat(3191);
      classWriter0.newFloat(3191);
      classWriter0.visitAnnotation("", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(72, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3191);
      classWriter0.newFloat(3191);
      classWriter0.newFloat(3191);
      classWriter0.visitInnerClass((String) null, "", "", (-2832));
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(66, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      Item item0 = classWriter0.newDouble(4);
      classWriter0.visitAnnotation("F|TP=6].;;QUYlf[}h", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(96, byteArray0.length);
      
      Item item1 = classWriter0.newDouble(4);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      Item item0 = classWriter0.newDouble(4);
      classWriter0.visitAnnotation("F|TP=6].;;QUYlf[}h", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(94, byteArray0.length);
      
      Item item1 = classWriter0.newDouble(4);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3191);
      Item item0 = classWriter0.newDouble(12.443320688330482);
      classWriter0.visitInnerClass("Z7IGYW|U", "", "", 3191);
      Item item1 = classWriter0.newDouble(12.443320688330482);
      assertSame(item1, item0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(84, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      Type type0 = Type.SHORT_TYPE;
      classWriter0.visitField((-1491), "MqV`~mbe", "MqV`~mbe", "MqV`~mbe", type0);
      classWriter0.visitInnerClass("+%b", "", "Deprecated", (-2620));
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(177, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.visitInnerClass("Deprecated", "Deprecated", "1`46}rD4", 4);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(82, byteArray0.length);
      
      int int0 = classWriter0.addType("Class not found");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      int int0 = classWriter0.newMethod("Class not found", "Class not found", "Class not found", false);
      assertEquals(4, int0);
      
      classWriter0.visitInnerClass("Deprecated", "Deprecated", "1`46}rD4", 4);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(113, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3221);
      classWriter0.visitInnerClass((String) null, (String) null, "RuntimeVisibleAnnotations", 3221);
      ByteVector byteVector0 = new ByteVector();
      classWriter0.toByteArray();
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 53);
      // Undeclared exception!
      try { 
        annotationWriter0.visit("RuntimeVisibleAnnotations", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      classWriter0.visitAnnotation("sS?z[&chz9", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(79, byteArray0.length);
      
      int int0 = classWriter0.newMethod("sS?z[&chz9", "Class not found", "sS?z[&chz9", true);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      classWriter0.newMethodItem("sS?z[&chz9", "sS?z[&chz9", "sS?z[&chz9", true);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("sS?z[&chz9", true);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("sS?z[&chz9", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@7e8a9487
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-9));
      classWriter0.visitAnnotation("Synthetic", false);
      Type type0 = Type.FLOAT_TYPE;
      classWriter0.visitField(964, "vxD@NjS/", "Signature", "I|,'#4", type0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(157, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      Type type0 = Type.LONG_TYPE;
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
      
      classWriter0.visitAnnotation("<SBd6dB~re", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(85, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("Synthetic", true);
      classWriter0.newFieldItem("Synthetic", "", "");
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      classWriter0.visitAnnotation("Synthetic", true);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newFieldItem("Synthetic", "", "");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      Item item0 = classWriter0.newDouble(4);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("F|TP=6].;;QUYlf[}h", false);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("", item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.Item@7c8e08ae
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      Item item0 = classWriter0.newDouble(4);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("F|TP=6].;;QUYlf[}h", true);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("", item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.Item@6de0d999
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      String[] stringArray0 = new String[0];
      classWriter0.visit((-4), (-2146), "", "", "vxD@NjS/", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      classWriter0.visitField((-494), "vxD@NjS/", "Signature", "I|,'#4", type0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(145, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      Character character0 = Character.valueOf('^');
      classWriter0.visitAnnotation("F|TP=6].;;QUYlf[}h", false);
      classWriter0.toByteArray();
      FieldVisitor fieldVisitor0 = classWriter0.visitField(4, "MqV`~mbe", "MqV`~mbe", "", character0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3191);
      classWriter0.visitSource("", (String) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(48, byteArray0.length);
      
      Character character0 = new Character(',');
      int int0 = classWriter0.newConst(character0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(101);
      classWriter0.visitField(101, "IuB9IMhq", "", "", "");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(101, 101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      classWriter0.visitAnnotation("sS?z[&chz9", true);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(83, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.visitSource("double", ".0jAoEvo|.");
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1603, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.visitAnnotation("F|TP=6].;;QUYlf[}h", false);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newFieldItem("F|TP=6].;;QUYlf[}h", "F|TP=6].;;QUYlf[}h", "F|TP=6].;;QUYlf[}h");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.visitAnnotation("F|TP=6].;;QUYlf[}h", true);
      classWriter0.toByteArray();
      Character character0 = Character.valueOf('^');
      FieldVisitor fieldVisitor0 = classWriter0.visitField(4, "MqV`~mbe", "MqV`~mbe", "", character0);
      assertNotNull(fieldVisitor0);
  }
}

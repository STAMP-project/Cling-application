/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 09:15:35 GMT 2019
 */

package org.mockito.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.AnnotationVisitor;
import org.mockito.asm.AnnotationWriter;
import org.mockito.asm.Attribute;
import org.mockito.asm.ByteVector;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.FieldVisitor;
import org.mockito.asm.Item;
import org.mockito.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AnnotationWriter_ESTest extends AnnotationWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-206));
      Item[] itemArray0 = new Item[2];
      classWriter0.typeTable = itemArray0;
      classWriter0.addType("]\"!^$-WOoK2UV7:");
      int int0 = classWriter0.addType("0K95{9?OfZZ+o");
      assertEquals(2, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(24, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.invalidFrames = true;
      classWriter0.newDouble(1);
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      classWriter0.visitAnnotation("b", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(70, byteArray0.length);
      
      Short short0 = new Short((short)1798);
      int int0 = classWriter0.newConst(short0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      Item item0 = classWriter0.newConstItem("dSz'MOlup");
      Item item1 = classWriter0.newConstItem("dSz'MOlup");
      assertSame(item1, item0);
      
      classWriter0.visitAnnotation("dSz'MOlup", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(81, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3213));
      classWriter0.visitAnnotation("(;5gb8l", false);
      classWriter0.newDouble((-3213));
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(85, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.visitInnerClass("org.mockito.asm.ClassReader", "org.mockito.asm.ClassReader", "org.mockito.asm.ClassReader", 2592);
      classWriter0.visitAnnotation("org.mockito.asm.ClassReader", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(130, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      classWriter0.visitAnnotation("mGHE\"Z20ij", false);
      classWriter0.toByteArray();
      Boolean boolean0 = Boolean.TRUE;
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      classWriter0.addUninitializedType("Y+tm|xiM", 2);
      classWriter0.visitAnnotation("mGHE\"Z20ij", false);
      int int0 = classWriter0.addUninitializedType("Y+tm|xiM", 1);
      assertEquals(2, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(79, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-207));
      classWriter0.addType("Deprecated");
      int int0 = classWriter0.addType("Deprecated");
      assertEquals(1, int0);
      
      classWriter0.visitAnnotation("", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(69, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1039);
      Type type0 = Type.getObjectType("Y1#");
      int int0 = classWriter0.newConst(type0);
      int int1 = classWriter0.addType("Y1#");
      assertEquals(1, int1);
      
      int int2 = classWriter0.addUninitializedType("Bi7=&@(9r>1F=", (-596));
      assertTrue(int2 == int0);
      assertEquals(2, int2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("mGHE\"Z20ij", true);
      classWriter0.addType("KA&e39");
      Attribute attribute0 = new Attribute("KA&e39");
      classWriter0.addType("KA&e39");
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("java/lang/String", attribute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.Attribute@54b857ea
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2411);
      classWriter0.newLong((-148));
      classWriter0.newLong((-148));
      classWriter0.visitAnnotation("Label offset position has not been resolved yet", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(123, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Short short0 = new Short((short) (-1277));
      ClassWriter classWriter0 = new ClassWriter((short) (-810));
      classWriter0.visitAnnotation("'GY5p57", true);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newConstItem(short0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      classWriter0.newConst("mGHE\"Z20ij");
      classWriter0.visitAnnotation("mGHE\"Z20ij", true);
      int int0 = classWriter0.newConst("mGHE\"Z20ij");
      assertEquals(2, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(80, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((short) (-810));
      classWriter0.visitAnnotation("'GY5p57", true);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newMethodItem("dSz'MOlup", "dSz'MOlup", "dSz'MOlup", false);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131077);
      classWriter0.newDouble(1);
      classWriter0.visitAnnotation("mGHE\"Z20ij", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(86, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      classWriter0.visitAnnotation("(;5gb8l", true);
      classWriter0.toByteArray();
      Boolean boolean0 = Boolean.FALSE;
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1039);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("Y1#", true);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("Y1#", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.ClassWriter@7a93acf4
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      classWriter0.visitAnnotation("(;5gb8l", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(74, byteArray0.length);
      
      int int0 = classWriter0.addType("(;5gb8l");
      assertEquals(1, int0);
      
      int int1 = classWriter0.addUninitializedType("(;5gb8l", 1);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("mGHE\"Z20ij", true);
      classWriter0.toByteArray();
      Boolean boolean0 = new Boolean(true);
      annotationVisitor0.visit("mGHE\"Z20ij", boolean0);
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2411);
      Item item0 = classWriter0.newLong((-191));
      Item item1 = classWriter0.newLong((-191));
      assertSame(item1, item0);
      
      classWriter0.visitSource("h&V@&|MaG?", "h&V@&|MaG?");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(106, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      Short short0 = new Short((short) (-1787));
      int int0 = classWriter0.newConst(short0);
      assertEquals(1, int0);
      
      classWriter0.visitSource("Synthetic", ":3");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(93, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      classWriter0.newConst("mGHE\"Z20ij");
      int int0 = classWriter0.newConst("mGHE\"Z20ij");
      assertEquals(2, int0);
      
      classWriter0.visitSource("java/lang/Throwable", "mGHE\"Z20ij");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(122, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(6);
      classWriter0.visitSource("'GY5p57", "Deprecated");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(94, byteArray0.length);
      
      int int0 = classWriter0.newMethod("", "l", "B2Xkz8Zc6CM%)", true);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131074);
      classWriter0.newDouble(1);
      classWriter0.visitSource("w|r>ey&`2tu", "mjHE\"Z20igu");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(109, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      Boolean boolean0 = new Boolean(true);
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
      
      classWriter0.visitSource("$|", "$|");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(86, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1039);
      classWriter0.visitSource("Y1#", "Y1#");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(83, byteArray0.length);
      
      int int0 = classWriter0.newField("Y1#", "", "");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1039);
      classWriter0.visitSource("Y1#", "Y1#");
      classWriter0.toByteArray();
      Item item0 = classWriter0.newFloat(1.0F);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1039);
      classWriter0.visitSource("Y1#", "Y1#");
      classWriter0.toByteArray();
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("Y1#", true);
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("Y1#", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.ClassWriter@2c0cda21
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1039);
      classWriter0.visitSource("Y1#", "Y1#");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(83, byteArray0.length);
      
      int int0 = classWriter0.addType("Y1#");
      assertEquals(1, int0);
      
      int int1 = classWriter0.addUninitializedType("Bi7=&@(9r>1F=", (-596));
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((byte)24);
      classWriter0.visitSource("8%X_fM)", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(84, byteArray0.length);
      
      Boolean boolean0 = Boolean.FALSE;
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-207));
      classWriter0.addType("Deprecated");
      int int0 = classWriter0.addType("Deprecated");
      assertEquals(1, int0);
      
      classWriter0.visitSource("Deprecated", "Deprecated");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(97, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      Byte byte0 = new Byte((byte)20);
      int int0 = classWriter0.newConst(byte0);
      assertEquals(1, int0);
      
      classWriter0.visitAnnotation("SourceDebugExtension", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(94, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      Byte byte0 = new Byte((byte)6);
      int int0 = classWriter0.newConst(byte0);
      assertEquals(1, int0);
      
      classWriter0.visitAnnotation("AKw#'<", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(78, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3213));
      classWriter0.visitSource("Signattke", "java/lang/Object");
      classWriter0.toByteArray();
      Byte byte0 = new Byte((byte) (-11));
      Item item0 = classWriter0.newConstItem(byte0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3213));
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("(;5gb8l", false);
      classWriter0.toByteArray();
      Boolean boolean0 = new Boolean("T3");
      classWriter0.newConstItem(boolean0);
      annotationVisitor0.visit("=~zQQ&T6", boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2543));
      Type type0 = Type.getObjectType("dSz'MOlup");
      classWriter0.newConstItem(type0);
      classWriter0.visitAnnotation("dSz'MOlup", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(81, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.invalidFrames = true;
      classWriter0.visitAnnotation("", true);
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-107));
      classWriter0.newMethodItem("dS'nMOlu", "dS'nMOlu", "dS'nMOlu", false);
      classWriter0.newMethodItem("dS'nMOlu", "dS'nMOlu", "dS'nMOlu", false);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("kvhT~1*h", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-107));
      classWriter0.newMethodItem("dS'nMOlu", "dS'nMOlu", "dS'nMOlu", false);
      classWriter0.newMethodItem("dS'nMOlu", "dS'nMOlu", "dS'nMOlu", false);
      classWriter0.visitInnerClass((String) null, "8|NBE*O]glF%", "dS'nMOlu", (byte)39);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-80));
      classWriter0.newMethodItem("dS'nMOlu", "APiZ D0nQ>.bB", "dS'nMOlu", false);
      classWriter0.newMethodItem("dS'nMOlu", "APiZ D0nQ>.bB", "dS'nMOlu", false);
      classWriter0.visitOuterClass("dS'nMOlu", (String) null, (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-107));
      classWriter0.newMethodItem("dS'nMOlu", "APiZ D0nQ>.bB", "dS'nMOlu", false);
      classWriter0.newMethodItem("dS'nMOlu", "APiZ D0nQ>.bB", "dS'nMOlu", false);
      classWriter0.visitOuterClass("int", "ZuSY95", "APiZ D0nQ>.bB");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-80));
      classWriter0.newMethodItem("dS'nMOlu", "APiZ D0nQ>.bB", "dS'nMOlu", false);
      classWriter0.newMethodItem("dS'nMOlu", "APiZ D0nQ>.bB", "dS'nMOlu", false);
      classWriter0.visitOuterClass("M}Z!VsVI]Lw", "", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-107));
      classWriter0.newMethodItem("dSz'MOlup", "APiZ D0nQ>.bB", "dSz'MOlup", false);
      classWriter0.newMethodItem("dSz'MOlup", "APiZ D0nQ>.bB", "dSz'MOlup", false);
      classWriter0.visitInnerClass("dSz'MOlup", (String) null, (String) null, (-107));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-107));
      Item item0 = classWriter0.newMethodItem("dS'nMOlu", "APiZ D0nQ>.bB", "dS'nMOlu", false);
      Item item1 = classWriter0.newMethodItem("dS'nMOlu", "APiZ D0nQ>.bB", "dS'nMOlu", false);
      assertSame(item1, item0);
      
      classWriter0.visitSource("InnerClasses", "ZuSY95");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(135, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.newDouble(1);
      classWriter0.newDouble(1);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.newDouble(1);
      classWriter0.newDouble(1);
      classWriter0.visitOuterClass("oq%Wq:3vzhMq6,E}", "", "EnclosingMethod");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      Item item0 = classWriter0.newDouble(1);
      classWriter0.visitInnerClass("short", "short", "#KOh8t", 2);
      Item item1 = classWriter0.newDouble(1);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-206));
      Type type0 = Type.VOID_TYPE;
      classWriter0.newConst(type0);
      classWriter0.visitOuterClass("", (String) null, "Y#");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2391);
      classWriter0.visitInnerClass("l", "l", (String) null, 2);
      classWriter0.visitInnerClass("", "", "l", 1);
      Type type0 = Type.BYTE_TYPE;
      int int0 = classWriter0.newConst(type0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-206));
      Type type0 = Type.VOID_TYPE;
      classWriter0.newConst(type0);
      classWriter0.visitOuterClass("boolean", "fS", ")'J{<");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-206));
      Type type0 = Type.VOID_TYPE;
      classWriter0.visitOuterClass("ou{)<", "ou{)<", (String) null);
      int int0 = classWriter0.newConst(type0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1039);
      Type type0 = Type.VOID_TYPE;
      classWriter0.newConst(type0);
      classWriter0.visitInnerClass("RuntimeVisibleAnnotations", (String) null, "", (-980));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-206));
      Type type0 = Type.VOID_TYPE;
      classWriter0.newConst(type0);
      classWriter0.visitSource((String) null, "Z");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1039);
      Type type0 = Type.INT_TYPE;
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
      
      classWriter0.visitSource("Y1#", "Y1#");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(90, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      Attribute attribute0 = new Attribute("Y++m|xikWM]");
      classWriter0.visitAttribute(attribute0);
      classWriter0.newConst("Y++m|xikWM]");
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-206));
      classWriter0.visitOuterClass("M}Z!VsVI]w", (String) null, (String) null);
      classWriter0.visitOuterClass("M}Z!VsVI]w", "M}Z!VsVI]w", "M}Z!VsVI]w");
      classWriter0.visitOuterClass("$xQ8_x\rj!i", "M}Z!VsVI]w", "M}Z!VsVI]w");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      ByteVector byteVector0 = classWriter0.pool;
      classWriter0.visitOuterClass("M}Z!VsVI]Lw", "M}Z!VsVI]Lw", "Synthetic");
      classWriter0.visitOuterClass("o5{:)<", "M}Z!VsVI]Lw", "Synthetic");
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 1);
      // Undeclared exception!
      try { 
        annotationWriter0.visit("o5{:)<", byteVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.ByteVector@533b024d
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.visitOuterClass("M}Z!VsVI]Lw", "M}Z!VsVI]Lw", "Synthetic");
      classWriter0.visitOuterClass("o5{:)<", "M}Z!VsVI]Lw", "Synthetic");
      classWriter0.visitAnnotation("Synthetic", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(138, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-207));
      classWriter0.newFieldItem("Deprecated", "Deprecated", "Deprecated");
      classWriter0.visitOuterClass("Deprecated", "Deprecated", "Deprecated");
      classWriter0.visitOuterClass("Deprecated", "", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.visitOuterClass("M}Z!VsVI]Lw", "M}Z!VsVI]Lw", "M}Z!VsVI]Lw");
      classWriter0.visitInnerClass("ou{:)<", "M}Z!VsVI]Lw", "(*i", (-2664));
      classWriter0.visitOuterClass("ou{:)<", "M}Z!VsVI]Lw", "M}Z!VsVI]Lw");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.visitAnnotation("$i<lSg=\u0002)cA_$k", false);
      classWriter0.visitOuterClass("M}Z!VsVI]Lw", "M}Z!VsVI]Lw", "Synthetic");
      classWriter0.visitOuterClass("oZ{:)<", "M}Z!VsVI]Lw", "Synthetic");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(157, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.visitOuterClass("M}Z!VsVI]Lw", "M}Z!VsVI]Lw", "Sntget!ic");
      classWriter0.visitOuterClass("o5{:)<", "M}Z!VsVI]Lw", "Sntget!ic");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Label offset position has not been resolved yet";
      stringArray0[1] = "o5{:)<";
      stringArray0[2] = "Sntget!ic";
      stringArray0[3] = "Label offset position has not been resolved yet";
      stringArray0[4] = "";
      stringArray0[5] = "e~[qY3z0pQE";
      stringArray0[6] = "e~[qY3z0pQE";
      stringArray0[7] = "o5{:)<";
      classWriter0.visit(1, 2, "Sntget!ic", "e~[qY3z0pQE", "Label offset position has not been resolved yet", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(214, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.visitOuterClass("M}Z!VsVI]Lw", "M}Z!VsVI]Lw", "Synthetic");
      classWriter0.visitOuterClass("o5{:)<", "M}Z!VsVI]Lw", "Synthetic");
      classWriter0.visitInnerClass((String) null, (String) null, "M}Z!VsVI]Lw", 1);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(129, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.visitOuterClass("M}Z!VsVI]Lw", "M}Z!VsVI]Lw", "Synthetic");
      classWriter0.visitOuterClass("o5{:)<", "M}Z!VsVI]Lw", "Synthetic");
      classWriter0.visitSource("Synthetic", ":3");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(150, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      Type type0 = Type.VOID_TYPE;
      classWriter0.visitField(2, "mGHE\"Z20ij", "|]=)QhpPS7:`@", "mGHE\"Z20ij", type0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(112, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", false);
      classWriter0.visitSource("Y++m|xikWM]", (String) null);
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("DX$#W1L[Pp&!+>", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.ClassWriter@48083d41
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 1);
      classWriter0.visitInnerClass("", "qt/4", "", 1);
      ByteVector byteVector0 = new ByteVector(7);
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 2020);
      // Undeclared exception!
      try { 
        annotationWriter0.visit("'GE,", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.ClassWriter@6f3c65b6
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1039);
      Type type0 = Type.getObjectType("Y1#");
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
      
      classWriter0.visitSource("Y1#", "Y1#");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(86, byteArray0.length);
      
      int int1 = classWriter0.newField("Y1#", "", "");
      assertEquals(7, int1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      classWriter0.visitAnnotation("mGHE\"Z20ij", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(79, byteArray0.length);
      
      Item item0 = classWriter0.newLong(8);
      Item item1 = classWriter0.newLong(8);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      int int0 = classWriter0.newConst("mGHE\"Z20ij");
      assertEquals(2, int0);
      
      Item item0 = classWriter0.newLong(8);
      Item item1 = classWriter0.newLong(8);
      assertNotNull(item1);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3213));
      classWriter0.visitAnnotation("(;5gb8l", false);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newFloat(2);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      ByteVector byteVector0 = classWriter0.pool;
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 1);
      classWriter0.newFloat(4325.5F);
      // Undeclared exception!
      try { 
        annotationWriter0.visit("o5{:)<", byteVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.ByteVector@369cd57
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      classWriter0.visitAnnotation("mGHE\"Z20ij", true);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newFloat((-1970.0F));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-80));
      Item item0 = classWriter0.newMethodItem("dS'nMOlu", "APiZ D0nQ>.bB", "dS'nMOlu", false);
      Item item1 = classWriter0.newMethodItem("dS'nMOlu", "APiZ D0nQ>.bB", "dS'nMOlu", false);
      assertSame(item1, item0);
      
      classWriter0.visitAnnotation("dS'nMOlu", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(106, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-107));
      Item item0 = classWriter0.newMethodItem("dS'nMOlu", "APiZ D0nQ>.bB", "dS'nMOlu", false);
      Item item1 = classWriter0.newConstItem("dS'nMOlu");
      assertNotNull(item1);
      
      Item item2 = classWriter0.newMethodItem("dS'nMOlu", "APiZ D0nQ>.bB", "dS'nMOlu", false);
      assertNotSame(item2, item1);
      assertSame(item2, item0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.newDouble(1);
      classWriter0.newDouble(1);
      ByteVector byteVector0 = new ByteVector(1);
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector0, 1036);
      // Undeclared exception!
      try { 
        annotationWriter0.visit("<init>", byteVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.ByteVector@507f6cc9
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      Item item0 = classWriter0.newDouble(1);
      Item item1 = classWriter0.newDouble(1);
      assertSame(item1, item0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(33, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.visitInnerClass("org.mockito.asm.ClassReader", "org.mockito.asm.ClassReader", "org.mockito.asm.ClassReader", 2592);
      classWriter0.toByteArray();
      Type type0 = Type.FLOAT_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      classWriter0.visitAnnotation("mGHE\"Z20ij", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(77, byteArray0.length);
      
      int int0 = classWriter0.addType("KA&e39");
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("KA&e39");
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      classWriter0.visitInnerClass("mGHE\"Z20ij", "mGHE\"Z20ij", "mGHE\"Z20ij", 2);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(71, byteArray0.length);
      
      int int0 = classWriter0.addType("KA&e39");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.newMethodItem("dSz'MOlup", "APiZ D0nQ>.bB", "dSz'MOlup", true);
      classWriter0.visitAnnotation("dSz'MOlup", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(107, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-143));
      Item item0 = classWriter0.newConstItem("dSz'MOlup");
      Item item1 = classWriter0.newMethodItem("dSz'MOlup", "APiZ D0nQ>.bB", "dSz'MOlup", true);
      assertNotSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      classWriter0.visitAnnotation("(;5gb8l", true);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newMethodItem("dSz'MOlup", "dSz'MOlup", "(;5gb8l", true);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-107));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "dSz'MOlup";
      stringArray0[1] = "=af^%q588{J?k(&aA$";
      stringArray0[2] = "=af^%q588{J?k(&aA$";
      classWriter0.visit((-107), 65535, "=af^%q588{J?k(&aA$", "=af^%q588{J?k(&aA$", (String) null, stringArray0);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newMethodItem("dSz'MOlup", "APiZ D0nQ>.bB", "dSz'MOlup", true);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.visitAnnotation("org.mockito.asm.ClassReader", false);
      classWriter0.toByteArray();
      Type type0 = Type.FLOAT_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      classWriter0.visitAnnotation("mGHE\"Z20ij", true);
      classWriter0.toByteArray();
      Type type0 = Type.VOID_TYPE;
      FieldVisitor fieldVisitor0 = classWriter0.visitField(2, "mGHE\"Z20ij", "|]=)QhpPS7:`@", "mGHE\"Z20ij", type0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3213));
      int int0 = classWriter0.newField("'(VOer@yHMJOi;", "", "Ljava/lang/Synthetic;");
      assertEquals(6, int0);
      
      classWriter0.visitAnnotation("java/lang/Object", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(142, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1039);
      classWriter0.visitAnnotation("Y1#", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(70, byteArray0.length);
      
      int int0 = classWriter0.newField("Y1#", "", "");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-107));
      classWriter0.newConstItem("dSz'MOlup");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "dSz'MOlup";
      stringArray0[1] = "=af^%q588{J?k(&aA$";
      stringArray0[2] = "=af^%q588{J?k(&aA$";
      classWriter0.visit((-107), 65535, "=af^%q588{J?k(&aA$", "=af^%q588{J?k(&aA$", (String) null, stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(92, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("$i<lSg=\u0002)cA_$k", false);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("M}Z!VsVI]Lw", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.ClassWriter@ef7c8a7
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1039);
      Type type0 = Type.getObjectType("Y1#");
      classWriter0.newConst(type0);
      classWriter0.visitAnnotation("Y1#", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(73, byteArray0.length);
      
      int int0 = classWriter0.newField("Y1#", "", "");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Character character0 = Character.valueOf(':');
      ClassWriter classWriter0 = new ClassWriter((-107));
      int int0 = classWriter0.newConst(character0);
      assertEquals(1, int0);
      
      classWriter0.visitAnnotation("]Q`M?Ec}7mA+PXRY", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(90, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      classWriter0.visitAnnotation("mGHE\"Z20ij", true);
      classWriter0.toByteArray();
      Character character0 = Character.valueOf('D');
      FieldVisitor fieldVisitor0 = classWriter0.visitField(1, "mGHE\"Z20ij", "mGHE\"Z20ij", "mGHE\"Z20ij", character0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((short) (-1277));
      Character character0 = Character.valueOf('u');
      classWriter0.newConst(character0);
      classWriter0.visitSource("org.mockito.asm.MethodWriter", "org.mockito.asm.MethodWriter");
      classWriter0.toByteArray();
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector0, 'u');
      annotationWriter0.visit("", character0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      classWriter0.visitAnnotation("mGHE\"Z20ij", false);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(74, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1039);
      Type type0 = Type.getObjectType("Y1#");
      classWriter0.newConst(type0);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1, 90);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      classWriter0.visitAnnotation("mGHE\"Z20ij", true);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(675, (-938));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1039);
      classWriter0.visitSource("Y1#", "Y1#");
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1, 90);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.getCommonSuperClass("org.mockito.asm.ClassReader", "org.mockito.asm.ClassReader");
      classWriter0.visitAnnotation("org.mockito.asm.ClassReader", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(96, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.getCommonSuperClass("org.mockito.asm.ClassReader", "org.mockito.asm.ClassReader");
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("org.mockito.asm.ClassReader", false);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@6131638
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.getCommonSuperClass("org.mockito.asm.ClassReader", "org.mockito.asm.ClassReader");
      classWriter0.visitAnnotation("org.mockito.asm.ClassReader", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(94, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.getCommonSuperClass("org.mockito.asm.ClassReader", "org.mockito.asm.ClassReader");
      classWriter0.visitSource("f(H+s+f|{4,v3;", "o,Fo^ePXLM^,-4");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(105, byteArray0.length);
  }
}

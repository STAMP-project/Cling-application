/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 07:49:50 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.BoundFunction;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.Delegator;
import com.google.javascript.rhino.head.EcmaError;
import com.google.javascript.rhino.head.EvaluatorException;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeGenerator;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.NativeWith;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NativeArray_ESTest extends NativeArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test00()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      BoundFunction boundFunction0 = new BoundFunction(context0, importerTopLevel0, nativeContinuation0, importerTopLevel0, context0.emptyArgs);
      double double0 = Context.toNumber(boundFunction0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test01()  throws Throwable  {
      Context context0 = Context.enter();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      nativeArray0.defineProperty("", (Object) nativeArray0, 6);
      assertEquals(0L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      Context context0 = new Context();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      nativeArray0.defineProperty(" m~", (Object) " m~", 8);
      assertEquals(0L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      Context context0 = Context.getContext();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      BaseFunction baseFunction0 = new BaseFunction(importerTopLevel0, nativeArray0);
      // Undeclared exception!
      try { 
        nativeArray0.defineProperty("+Sq8sM;.3B}V7", (Object) baseFunction0, 514);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 514
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1253L);
      int int0 = nativeArray0.findPrototypeId("com.google.javascript.rhino.head.Context");
      assertEquals(0, int0);
      assertEquals(1253L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      int int0 = nativeArray0.findPrototypeId("g%/.n/xhn`^C,");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      Scriptable scriptable0 = context0.initStandardObjects((ScriptableObject) nativeArray0);
      // Undeclared exception!
      try { 
        nativeArray0.exportAsJSClass(12, scriptable0, true);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Cannot modify a property of a sealed object: Array.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-267L));
      int int0 = nativeArray0.findPrototypeId("_Oc-8NYHv");
      assertEquals((-267L), nativeArray0.getLength());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes(2524);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property 2524 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4294967295L);
      TreeSet<Delegator> treeSet0 = new TreeSet<Delegator>();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context(contextFactory0);
      nativeArray0.defineOwnProperty(context0, (Object) treeSet0, (ScriptableObject) nativeArray0, false);
      assertEquals(4294967295L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Context context0 = new Context();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      nativeArray0.setAttributes((-765), 1);
      Integer[] integerArray0 = nativeArray0.getIndexIds();
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[28];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.setInstanceIdAttributes(1, 1);
      Integer[] integerArray0 = nativeArray0.getIndexIds();
      assertEquals(28, integerArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1250L));
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes((-4190));
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property -4190 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test13()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4294967295L);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes(24);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property 24 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test14()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-7273132090830278359L));
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        nativeArray0.defineOwnProperty(context0, (Object) context0, (ScriptableObject) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4294967295L);
      ContextFactory contextFactory0 = new ContextFactory();
      nativeArray0.getOwnPropertyDescriptor((Context) null, contextFactory0);
      assertEquals(4294967295L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      int int0 = nativeArray0.getAttributes(8);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test17()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1930L));
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes(0);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property 0 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeArray nativeArray0 = new NativeArray(3);
      NativeArray nativeArray1 = new NativeArray(1);
      IdFunctionObject idFunctionObject0 = nativeArray1.exportAsJSClass(120, nativeArray0, true);
      nativeArray0.execIdCall(idFunctionObject0, context0, idFunctionObject0, nativeArray1, context0.emptyArgs);
      assertEquals(3L, nativeArray0.jsGet_length());
      assertEquals(1, idFunctionObject0.getArity());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      ScriptableObject scriptableObject0 = nativeArray0.getOwnPropertyDescriptor(context0, context0.VERSION_1_5);
      assertNull(scriptableObject0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Context context0 = Context.enter();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      // Undeclared exception!
      try { 
        Context.toNumber(nativeArray0);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2L);
      assertEquals(2L, nativeArray0.getLength());
      
      Object[] objectArray0 = nativeArray0.getAllIds();
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeString nativeString0 = new NativeString("language version");
      long long0 = NativeArray.getLengthProperty(context0, nativeString0);
      assertEquals(16L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      nativeArray0.put((-2148), (Scriptable) nativeArray0, (Object) nativeJavaClass0);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Class<NativeIterator> class0 = NativeIterator.class;
      NativeArray nativeArray0 = new NativeArray((-1));
      nativeArray0.put("JSON", (Scriptable) importerTopLevel0, (Object) class0);
      assertEquals((-1L), nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-52L));
      NativeWith nativeWith0 = new NativeWith(nativeArray0, nativeArray0);
      boolean boolean0 = nativeArray0.has(4, (Scriptable) nativeWith0);
      assertFalse(boolean0);
      assertEquals((-52L), nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1002L);
      IdFunctionObject idFunctionObject0 = mock(IdFunctionObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(idFunctionObject0).hasTag(any());
      doReturn((RuntimeException) null).when(idFunctionObject0).unknown();
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        nativeArray0.execIdCall(idFunctionObject0, context0, idFunctionObject0, nativeArray0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object[] objectArray0 = new Object[28];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.setInstanceIdAttributes(1, 1);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      nativeArray0.defineOwnProperty(context0, (Object) null, scriptableObject0, false);
      assertEquals(28L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        nativeArray0.defineOwnProperty(context0, (Object) "0", (ScriptableObject) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object[] objectArray0 = new Object[28];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      ScriptableObject scriptableObject0 = nativeArray0.getOwnPropertyDescriptor(context0, (Object) null);
      assertNull(scriptableObject0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test30()  throws Throwable  {
      Context context0 = Context.getContext();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeArray0, false);
      nativeArray0.defineOwnProperty(context0, (Object) context0, (ScriptableObject) nativeGenerator0, false);
      ScriptableObject.putProperty((Scriptable) nativeArray0, 20, (Object) nativeArray0);
      int int0 = nativeArray0.indexOf(context0);
      assertEquals(21L, nativeArray0.getLength());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      nativeArray0.delete((-1));
      assertEquals(0L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Context context0 = new Context();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      nativeArray0.delete(518);
      assertFalse(nativeArray0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(5);
      nativeArray0.has((-2147273583), (Scriptable) null);
      assertEquals(5L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1));
      NativeArray.init(nativeArray0, false);
      nativeArray0.delete(9);
      assertEquals(0L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(334L);
      nativeArray0.delete(3);
      assertEquals(334L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test36()  throws Throwable  {
      Context context0 = Context.getContext();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      ScriptableObject.putProperty((Scriptable) nativeArray0, 20, (Object) nativeArray0);
      int int0 = nativeArray0.indexOf(context0);
      assertEquals(21L, nativeArray0.jsGet_length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray((-9223372036854775808L));
      Object object0 = nativeArray0.defaultGet("75!fElw~rDK{[6m:");
      NativeArray nativeArray1 = new NativeArray(objectArray0);
      nativeArray1.put(0, (Scriptable) nativeArray0, object0);
      assertEquals(1L, nativeArray0.getLength());
      assertTrue(nativeArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-43L));
      nativeArray0.activatePrototypeMap(586);
      // Undeclared exception!
      try { 
        nativeArray0.getIndexIds();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 24
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      ScriptableObject.putProperty((Scriptable) nativeArray0, 0, (Object) nativeArray0);
      assertEquals(10L, nativeArray0.getLength());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(10L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test40()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      Class<NativeIterator> class0 = NativeIterator.class;
      Scriptable scriptable0 = Context.toObject((Object) context0, (Scriptable) importerTopLevel0, (Class<?>) class0);
      assertEquals("JavaObject", scriptable0.getClassName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      NativeArray nativeArray0 = new NativeArray((-1555L));
      Object[] objectArray0 = new Object[3];
      IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(2, nativeArray0, false);
      Context context0 = contextFactory0.enterContext();
      nativeArray0.execIdCall(idFunctionObject0, context0, nativeArray0, idFunctionObject0, objectArray0);
      assertEquals(0L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      Short short0 = new Short((short)1);
      ScriptableObject scriptableObject0 = nativeArray0.getOwnPropertyDescriptor(context0, short0);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test43()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeArray.getLengthProperty(context0, importerTopLevel0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 08:23:27 GMT 2019
 */

package org.mockito.asm.tree.analysis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.Label;
import org.mockito.asm.tree.FieldInsnNode;
import org.mockito.asm.tree.IincInsnNode;
import org.mockito.asm.tree.LabelNode;
import org.mockito.asm.tree.LdcInsnNode;
import org.mockito.asm.tree.MethodInsnNode;
import org.mockito.asm.tree.MultiANewArrayInsnNode;
import org.mockito.asm.tree.analysis.BasicValue;
import org.mockito.asm.tree.analysis.BasicVerifier;
import org.mockito.asm.tree.analysis.SourceValue;
import org.mockito.asm.tree.analysis.Value;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BasicVerifier_ESTest extends BasicVerifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      MethodInsnNode methodInsnNode0 = new MethodInsnNode((-2995), ">W^I", ">W^I", ">W^I");
      SourceValue sourceValue0 = new SourceValue((-295));
      basicVerifier0.copyOperation(methodInsnNode0, sourceValue0);
      IincInsnNode iincInsnNode0 = new IincInsnNode(11, (-1202));
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      Value value0 = basicVerifier0.unaryOperation(iincInsnNode0, basicValue0);
      assertSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicVerifier0);
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(11, "Fq=N[.C_Ugnj/B", "", "Fq=N[.C_Ugnj/B");
      Value value0 = basicVerifier0.newOperation(fieldInsnNode0);
      Value value1 = basicVerifier0.copyOperation(ldcInsnNode0, value0);
      assertSame(value0, value1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      Label label0 = new Label();
      LabelNode labelNode0 = new LabelNode(label0);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      basicVerifier0.copyOperation(labelNode0, basicValue0);
      // Undeclared exception!
      try { 
        basicVerifier0.newOperation(labelNode0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicVerifier0);
      Value value0 = basicVerifier0.newOperation(ldcInsnNode0);
      BasicValue basicValue0 = (BasicValue)basicVerifier0.copyOperation(ldcInsnNode0, value0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      MultiANewArrayInsnNode multiANewArrayInsnNode0 = new MultiANewArrayInsnNode("", 39);
      SourceValue sourceValue0 = new SourceValue(4);
      basicVerifier0.copyOperation(multiANewArrayInsnNode0, sourceValue0);
      LinkedList<MethodInsnNode> linkedList0 = new LinkedList<MethodInsnNode>();
      // Undeclared exception!
      try { 
        basicVerifier0.naryOperation(multiANewArrayInsnNode0, linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.asm.Type", e);
      }
  }
}

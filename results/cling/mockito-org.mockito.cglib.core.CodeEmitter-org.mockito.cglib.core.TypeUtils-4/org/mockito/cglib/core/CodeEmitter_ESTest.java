/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 13:13:20 GMT 2019
 */

package org.mockito.cglib.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mockito.asm.Label;
import org.mockito.asm.MethodVisitor;
import org.mockito.asm.Type;
import org.mockito.cglib.core.ClassEmitter;
import org.mockito.cglib.core.ClassInfo;
import org.mockito.cglib.core.CodeEmitter;
import org.mockito.cglib.core.ProcessSwitchCallback;
import org.mockito.cglib.core.Signature;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class CodeEmitter_ESTest extends CodeEmitter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.DOUBLE_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      Signature signature0 = new Signature("", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 7, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      codeEmitter0.push(true);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.BYTE_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      codeEmitter0.push(false);
      codeEmitter0.box(type0);
      assertEquals(124, CodeEmitter.USHR);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.BYTE_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      Signature signature0 = new Signature("", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 7, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      int[] intArray0 = new int[5];
      intArray0[0] = 104;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.BYTE_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      Signature signature0 = new Signature("", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 7, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      int[] intArray0 = new int[3];
      intArray0[2] = 112;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.BYTE_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      Signature signature0 = new Signature("", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 7, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      codeEmitter0.push(0.0);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.BYTE_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = type0;
      Signature signature0 = new Signature("kHawq>yakMxG ?ChZ{>", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, (-73), signature0, typeArray0);
      codeEmitter0.create_arg_array();
      codeEmitter0.push((float) 2);
      assertEquals(128, CodeEmitter.OR);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.BYTE_TYPE;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      Signature signature0 = new Signature("double", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      codeEmitter0.push((double) 126);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 43, signature0, typeArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push(0.0);
      assertEquals(100, CodeEmitter.SUB);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 43, signature0, typeArray0);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push((double) 0);
      assertEquals(96, CodeEmitter.ADD);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 43, signature0, typeArray0);
      codeEmitter0.push(188.548F);
      Type type0 = Type.BOOLEAN_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(0, Type.VOID);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 43, signature0, typeArray0);
      codeEmitter0.push((float) (-1581));
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(10, Type.OBJECT);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.BYTE_TYPE;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      Signature signature0 = new Signature("double", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      codeEmitter0.push(2228.0F);
      Type type1 = Type.INT_TYPE;
      codeEmitter0.newarray(type1);
      assertEquals(155, CodeEmitter.LT);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 57, signature0, typeArray0);
      codeEmitter0.push(188.548F);
      Type type0 = Type.SHORT_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(100, CodeEmitter.SUB);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.BYTE_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("kHawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[6];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      codeEmitter0.push((-1.0F));
      codeEmitter0.newarray(type0);
      assertEquals(4, Type.SHORT);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.VOID_TYPE;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 147, signature0, typeArray0);
      codeEmitter0.push(0.5F);
      codeEmitter0.newarray(type0);
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      ClassEmitter classEmitter0 = mock(ClassEmitter.class, new ViolatedAssumptionAnswer());
      doReturn((ClassInfo) null).when(classEmitter0).getClassInfo();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[1];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 4, signature0, typeArray0);
      codeEmitter0.push((float) 2);
      codeEmitter0.newarray(type0);
      assertEquals(3, type0.getSort());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[1];
      Type type0 = Type.DOUBLE_TYPE;
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 45, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      codeEmitter0.push((float) 2);
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()");
      Type[] typeArray0 = new Type[0];
      Type type0 = Type.FLOAT_TYPE;
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 10, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      codeEmitter0.push((float) 108);
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      Type type0 = Type.DOUBLE_TYPE;
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 45, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      codeEmitter0.push((-1082.0F));
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassEmitter classEmitter0 = mock(ClassEmitter.class, new ViolatedAssumptionAnswer());
      doReturn((ClassInfo) null).when(classEmitter0).getClassInfo();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 13, signature0, typeArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push((double) 483.8013F);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 43, signature0, typeArray0);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push((-1385.8321555));
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassEmitter classEmitter0 = mock(ClassEmitter.class, new ViolatedAssumptionAnswer());
      doReturn((ClassInfo) null).when(classEmitter0).getClassInfo();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[1];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 4, signature0, typeArray0);
      Type type0 = Type.SHORT_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push((double) 4);
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "&)V");
      Type[] typeArray0 = new Type[1];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 579, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      codeEmitter0.push((double) 4);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassEmitter classEmitter0 = mock(ClassEmitter.class, new ViolatedAssumptionAnswer());
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      Type type0 = Type.getReturnType("()V");
      ClassEmitter classEmitter1 = new ClassEmitter(classEmitter0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter1, methodVisitor0, 45, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      codeEmitter0.push((double) 157);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.BYTE_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("kHawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[6];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      codeEmitter0.push(1.0);
      assertEquals(128, CodeEmitter.OR);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()");
      Type[] typeArray0 = new Type[0];
      Type type0 = Type.FLOAT_TYPE;
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 10, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      codeEmitter0.push((double) 8);
      assertEquals(153, CodeEmitter.EQ);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassEmitter classEmitter0 = mock(ClassEmitter.class, new ViolatedAssumptionAnswer());
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      Type type0 = Type.DOUBLE_TYPE;
      ClassEmitter classEmitter1 = new ClassEmitter(classEmitter0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter1, methodVisitor0, 45, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      codeEmitter0.push((double) 7);
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Type type0 = Type.CHAR_TYPE;
      ClassEmitter classEmitter0 = mock(ClassEmitter.class, new ViolatedAssumptionAnswer());
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      Signature signature0 = new Signature("D", type0, typeArray0);
      ClassEmitter classEmitter1 = new ClassEmitter(classEmitter0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter1, methodVisitor0, 10, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      codeEmitter0.push((float) 2);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("kHawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[6];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      codeEmitter0.push(true);
      codeEmitter0.push(1.0);
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.DOUBLE_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      Signature signature0 = new Signature("", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 7, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      codeEmitter0.cast_numeric((Type) null, type0);
      assertEquals(6, Type.FLOAT);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.BYTE_TYPE;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      Signature signature0 = new Signature("double", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      Type type1 = Type.INT_TYPE;
      codeEmitter0.cast_numeric(type1, type0);
      assertEquals(155, CodeEmitter.LT);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      ClassEmitter classEmitter0 = mock(ClassEmitter.class, new ViolatedAssumptionAnswer());
      doReturn((ClassInfo) null).when(classEmitter0).getClassInfo();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[1];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 4, signature0, typeArray0);
      codeEmitter0.not();
      codeEmitter0.cast_numeric(type0, (Type) null);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      Type type0 = Type.DOUBLE_TYPE;
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 7, signature0, typeArray0);
      codeEmitter0.not();
      Type type1 = Type.CHAR_TYPE;
      codeEmitter0.cast_numeric(type0, type1);
      assertEquals(8, Type.DOUBLE);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.BYTE_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("kHawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[3];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 7, signature0, typeArray0);
      Type type1 = Type.INT_TYPE;
      codeEmitter0.unbox_or_zero(type0);
      codeEmitter0.cast_numeric(type0, type1);
      assertEquals(0, Type.VOID);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()");
      Type[] typeArray0 = new Type[0];
      Type type0 = Type.FLOAT_TYPE;
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 10, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-870);
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(128, CodeEmitter.OR);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.BYTE_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("kHawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[6];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      codeEmitter0.unbox(type0);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.BYTE_TYPE;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      Signature signature0 = new Signature("double", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      codeEmitter0.newarray(type0);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.BYTE_TYPE;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      Signature signature0 = new Signature("double", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      Type type1 = Type.INT_TYPE;
      codeEmitter0.unbox(type0);
      codeEmitter0.newarray(type1);
      assertEquals(0, Type.VOID);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.BYTE_TYPE;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      Signature signature0 = new Signature("double", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      Type type1 = Type.INT_TYPE;
      codeEmitter0.newarray(type1);
      assertEquals(0, Type.VOID);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Type type0 = Type.CHAR_TYPE;
      ClassInfo classInfo0 = mock(ClassInfo.class, new ViolatedAssumptionAnswer());
      ClassEmitter classEmitter0 = mock(ClassEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(classInfo0).when(classEmitter0).getClassInfo();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("intValue", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      ClassEmitter classEmitter1 = new ClassEmitter();
      codeEmitter0.unbox(type0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        classEmitter1.visit(156, 40, "y-IQm{p3H6M^", (String) null, "intValue", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Type type0 = Type.CHAR_TYPE;
      ClassInfo classInfo0 = mock(ClassInfo.class, new ViolatedAssumptionAnswer());
      ClassEmitter classEmitter0 = mock(ClassEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(classInfo0).when(classEmitter0).getClassInfo();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("intValue", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      ClassEmitter classEmitter1 = new ClassEmitter();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        classEmitter1.visit(156, 40, "y-IQm{p3H6M^", (String) null, "intValue", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Type type0 = Type.CHAR_TYPE;
      ClassEmitter classEmitter0 = mock(ClassEmitter.class, new ViolatedAssumptionAnswer());
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      Signature signature0 = new Signature("D", type0, typeArray0);
      ClassEmitter classEmitter1 = new ClassEmitter(classEmitter0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter1, methodVisitor0, 10, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      codeEmitter0.newarray(typeArray0[0]);
      assertFalse(codeEmitter0.isStaticHook());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 43, signature0, typeArray0);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(112, CodeEmitter.REM);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.VOID_TYPE;
      Type type1 = Type.BYTE_TYPE;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type1;
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", type1, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 147, signature0, typeArray0);
      codeEmitter0.unbox(type1);
      codeEmitter0.newarray(type0);
      assertEquals(100, CodeEmitter.SUB);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.VOID_TYPE;
      Type type1 = Type.BYTE_TYPE;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type1;
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", type1, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 147, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      codeEmitter0.newarray(type0);
      assertEquals(1, Type.BOOLEAN);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 57, signature0, typeArray0);
      Type type0 = Type.SHORT_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.unbox(type0);
      assertEquals(2, Type.CHAR);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.DOUBLE_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      Signature signature0 = new Signature("", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 7, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      Type type1 = Type.SHORT_TYPE;
      codeEmitter0.newarray(type1);
      assertNotSame(type1, type0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()");
      Type[] typeArray0 = new Type[0];
      Type type0 = Type.FLOAT_TYPE;
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 10, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      codeEmitter0.unbox(type0);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 43, signature0, typeArray0);
      String[] stringArray0 = new String[3];
      codeEmitter0.create_arg_array();
      // Undeclared exception!
      try { 
        classEmitter0.visit(156, (-741166923), "()V", "()V", "y-IQm{p3H6M^", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.BYTE_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("kHawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[6];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      codeEmitter0.push(1.0);
      codeEmitter0.unbox(type0);
      assertEquals(10, Type.OBJECT);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("kHawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[6];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      codeEmitter0.push(1.0);
      codeEmitter0.create_arg_array();
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.DOUBLE_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      Signature signature0 = new Signature("", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 7, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      codeEmitter0.newarray(type0);
      assertEquals(0, Type.VOID);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[1];
      Type type0 = Type.DOUBLE_TYPE;
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 45, signature0, typeArray0);
      codeEmitter0.unbox_or_zero(type0);
      codeEmitter0.newarray(type0);
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      ClassEmitter classEmitter0 = mock(ClassEmitter.class, new ViolatedAssumptionAnswer());
      doReturn((ClassInfo) null).when(classEmitter0).getClassInfo();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 4, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[2];
      intArray0[1] = 112;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      ClassEmitter classEmitter0 = mock(ClassEmitter.class, new ViolatedAssumptionAnswer());
      doReturn((ClassInfo) null).when(classEmitter0).getClassInfo();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[1];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[7];
      intArray0[0] = 128;
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.BYTE_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[1];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("kHawq>yakMxG ?ChZ{>", "()");
      Type[] typeArray0 = new Type[3];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 7, signature0, typeArray0);
      Type type0 = Type.INT_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[6];
      intArray0[0] = 130;
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, (ProcessSwitchCallback) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 43, signature0, typeArray0);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[3];
      intArray0[2] = 158;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertArrayEquals(new int[] {0, 0, 158}, intArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 43, signature0, typeArray0);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[3];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassEmitter classEmitter0 = mock(ClassEmitter.class, new ViolatedAssumptionAnswer());
      doReturn((ClassInfo) null).when(classEmitter0).getClassInfo();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 4, signature0, typeArray0);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[3];
      intArray0[0] = 100;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 43, signature0, typeArray0);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[0];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 43, signature0, typeArray0);
      Type type0 = Type.VOID_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[0];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 57, signature0, typeArray0);
      Type type0 = Type.SHORT_TYPE;
      int[] intArray0 = new int[1];
      codeEmitter0.newarray(type0);
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()");
      Type[] typeArray0 = new Type[0];
      Type type0 = Type.FLOAT_TYPE;
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 10, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[5];
      intArray0[1] = 9;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()");
      Type type0 = Type.FLOAT_TYPE;
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, (Type[]) null);
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[1];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ClassEmitter classEmitter0 = mock(ClassEmitter.class, new ViolatedAssumptionAnswer());
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("byte", "()V");
      Type[] typeArray0 = new Type[0];
      ClassEmitter classEmitter1 = new ClassEmitter(classEmitter0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter1, methodVisitor0, 45, signature0, typeArray0);
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[1];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      Type type0 = Type.DOUBLE_TYPE;
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, (-11), signature0, typeArray0);
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[5];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0, false);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[1];
      Type type0 = Type.DOUBLE_TYPE;
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, (-2135), signature0, typeArray0);
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[4];
      intArray0[2] = 124;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      Type type0 = Type.DOUBLE_TYPE;
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 45, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[0];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.BYTE_TYPE;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      Signature signature0 = new Signature("double", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      Label label0 = new Label();
      codeEmitter0.if_cmp(type0, 124, label0);
      assertEquals(3, Type.BYTE);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      Type type0 = Type.FLOAT_TYPE;
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      Type[] typeArray1 = new Type[1];
      typeArray1[0] = type0;
      Signature signature1 = new Signature("floatVlu", type0, typeArray1);
      CodeEmitter codeEmitter1 = new CodeEmitter(classEmitter0, codeEmitter0, 130, signature1, typeArray0);
      codeEmitter1.create_arg_array();
      Label label0 = new Label();
      codeEmitter0.if_cmp(type0, 2815, label0);
      assertEquals(5, Type.INT);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Type type0 = Type.VOID_TYPE;
      ClassInfo classInfo0 = mock(ClassInfo.class, new ViolatedAssumptionAnswer());
      ClassEmitter classEmitter0 = mock(ClassEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(classInfo0).when(classEmitter0).getClassInfo();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      Label label0 = new Label();
      codeEmitter0.if_cmp(type0, 156, label0);
      assertFalse(codeEmitter0.isStaticHook());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Type type0 = Type.CHAR_TYPE;
      ClassEmitter classEmitter0 = mock(ClassEmitter.class, new ViolatedAssumptionAnswer());
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      Signature signature0 = new Signature("D", type0, typeArray0);
      ClassEmitter classEmitter1 = new ClassEmitter(classEmitter0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter1, methodVisitor0, 10, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      codeEmitter0.push((float) 9);
      assertFalse(codeEmitter0.isStaticHook());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.BYTE_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = type0;
      Signature signature0 = new Signature("sgKT$.r aH7iuJyI", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 50, signature0, typeArray0);
      codeEmitter0.push((float) 50);
      codeEmitter0.push(1L);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[1];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 45, signature0, typeArray0);
      codeEmitter0.push((float) 0);
      codeEmitter0.push((float) 2);
      assertEquals(96, CodeEmitter.ADD);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 43, signature0, typeArray0);
      codeEmitter0.push((float) (-1581));
      codeEmitter0.push((double) 0);
      assertEquals(128, CodeEmitter.OR);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("]Hawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[1];
      Type type0 = Type.DOUBLE_TYPE;
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 45, signature0, typeArray0);
      codeEmitter0.push((float) 0);
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.BYTE_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      Signature signature0 = new Signature("intValue", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2228, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      codeEmitter0.push((float) 2228);
      assertEquals(96, CodeEmitter.ADD);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.BYTE_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = type0;
      Signature signature0 = new Signature("kHawq>yakMxG ?ChZ{>", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, (-73), signature0, typeArray0);
      codeEmitter0.create_arg_array();
      codeEmitter0.push((float) 0);
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("kHawq>yakMxG ?ChZ{>", "()V");
      Type[] typeArray0 = new Type[6];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      codeEmitter0.push((-1.0F));
      codeEmitter0.push(1.0);
      assertEquals(124, CodeEmitter.USHR);
  }
}

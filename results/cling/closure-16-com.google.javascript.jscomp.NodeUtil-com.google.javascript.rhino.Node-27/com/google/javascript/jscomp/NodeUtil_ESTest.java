/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 05:47:17 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.ErrorFormat;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.ReorderConstantExpression;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.BufferedInputStream;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
      assertEquals((-1), node1.getCharno());
      assertTrue(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(780).when(node0).getType();
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Node node0 = Node.newString("@x");
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("@x", string0);
      assertNotNull(string0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      NodeUtil.isRelationalOperation(node0);
      assertTrue(node0.isParamList());
      assertFalse(node0.isThrow());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = NodeUtil.opToStr(149);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(37);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 37: CALL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, (AbstractCompiler) null);
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(googleCodingConvention0, object0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "/=", node0, "");
      NodeUtil.isTryFinallyNode(node1, node1);
      assertEquals(0, node1.getSourcePosition());
      assertEquals(38, node1.getType());
      assertFalse(node1.isTry());
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Node node0 = new Node(51);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getFirstChild();
      doReturn(51).when(node1).getType();
      doReturn(false).when(node1).isName();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      boolean boolean0 = NodeUtil.isNameReferenced(node1, "", nodeUtil_BooleanResultPredicate0);
      assertFalse(boolean0);
      assertTrue(node0.isIn());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(611);
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(nodeUtil_MatchNodeType0, nodeUtil_MatchNodeType0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler", node0, ".");
      int int0 = NodeUtil.getNodeTypeReferenceCount(node1, 12, nodeUtil_MatchNodeType0);
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getSourcePosition());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      assertEquals(44, node0.getType());
      
      Node node1 = NodeUtil.newVarNode(": .", node0);
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node1.getCharno());
      assertEquals(118, node1.getType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      NodeUtil.has(node0, nodeUtil_MatchDeclaration0, nodeUtil_MatchDeclaration0);
      assertFalse(node0.isGetElem());
      assertEquals(83, node0.getType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName("");
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-1003)).when(node0).getType();
      boolean boolean1 = NodeUtil.isSimpleOperator(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      assertFalse(node0.isExprResult());
      
      boolean boolean0 = NodeUtil.isExprCall(node0);
      boolean boolean1 = NodeUtil.isLiteralValue(node0, false);
      assertFalse(boolean1 == boolean0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node1).getFirstChild();
      doReturn(node0).when(node1).getNext();
      doReturn(true).when(node1).isExprResult();
      doReturn("node is not a child").when(node1).toString();
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node2 = new Node(37, node0, node1);
      // Undeclared exception!
      try { 
        exploitAssigns0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 21);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(googleCodingConvention0, sequenceInputStream0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "/=", node0, "");
      NodeUtil.isLoopStructure(node1);
      assertEquals(0, node1.getSourcePosition());
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Node node0 = Node.newNumber(1112.0, 963, 963);
      NodeUtil.getLoopCodeBlock(node0);
      assertEquals(3945411, node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      ErrorFormat errorFormat0 = ErrorFormat.SOURCELESS;
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(errorFormat0, errorFormat0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler", node0, ".");
      // Undeclared exception!
      try { 
        NodeUtil.isVarDeclaration(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "\n\nSubtree2: .");
      Node node1 = node0.cloneTree();
      assertEquals(2, node1.getChildCount());
      assertFalse(node0.hasOneChild());
      assertTrue(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(33, node1.getType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("");
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      boolean boolean0 = node0.isNoSideEffectsCall();
      assertFalse(boolean0);
      assertEquals(83, node0.getType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst(".");
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      Node node0 = syntheticAst0.getAstRoot(abstractCompiler0);
      NodeUtil.isForIn(node0);
      assertEquals(132, node0.getType());
      assertTrue(node0.isScript());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(623);
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(nodeUtil_MatchNodeType0, nodeUtil_MatchNodeType0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler", node0, ".");
      node1.addChildrenToBack(node1);
      assertEquals(0, node1.getCharno());
      assertTrue(node1.isName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      Node node1 = NodeUtil.newName(jqueryCodingConvention0, "w^-EnyM.MR)PIx^jr", node0, "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler");
      assertTrue(node1.isName());
      assertEquals((-1), node1.getLineno());
      
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Node node0 = new Node(15);
      NodeUtil.isSimpleOperator(node0);
      // Undeclared exception!
      try { 
        node0.getAncestor((-477));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      assertTrue(node0.isTrue());
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      Node node1 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "\n\nSubtree2: .");
      node1.isEquivalentToTyped(node0);
      assertEquals(2, node1.getChildCount());
      assertFalse(node0.isString());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(33, node1.getType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = NodeUtil.numberNode((-1.0), node0);
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(39, node1.getType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString((String) null, (-2), 204);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "\n\nSubtree2: .");
      boolean boolean0 = NodeUtil.isConstantName(node0);
      assertEquals((-1), node0.getLineno());
      assertEquals(2, node0.getChildCount());
      assertFalse(boolean0);
      assertEquals(33, node0.getType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      node0.setLineno(49);
      node0.setLineno(353);
      assertEquals(353, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ErrorFormat errorFormat0 = ErrorFormat.LEGACY;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(errorFormat0, node0).when(node1).getProp(anyInt());
      Node node2 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "/=", node1, "");
      // Undeclared exception!
      try { 
        NodeUtil.setDebugInformation(node2, node0, "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FALSE does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(googleCodingConvention0, object0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "/=", node0, "");
      node1.setVarArgs(false);
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      assertFalse(node0.isFunction());
      
      boolean boolean0 = NodeUtil.referencesThis(node0);
      boolean boolean1 = NodeUtil.isLiteralValue(node0, false);
      assertTrue(node0.isFalse());
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Node node0 = Node.newNumber(2475.782);
      assertFalse(node0.isName());
      
      boolean boolean0 = NodeUtil.isVarDeclaration(node0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(googleCodingConvention0, object0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "/=", node0, "");
      NodeUtil.isConstantByConvention(googleCodingConvention0, node1, node1);
      assertEquals(0, node1.getSourcePosition());
      assertEquals(38, node1.getType());
      assertTrue(node1.isName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = Node.newString(117, " ");
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node1).getLastChild();
      doReturn(true).when(node1).isGetProp();
      boolean boolean0 = NodeUtil.isConstantByConvention(codingConvention0, node0, node1);
      assertEquals(117, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(3094).when(node0).getChildCount();
      doReturn(true).when(node0).isTry();
      boolean boolean0 = NodeUtil.hasFinally(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertFalse(boolean0);
      assertTrue(node0.isTrue());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("true", string0);
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(44);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Node node0 = Node.newNumber(1112.0, 963, 963);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      boolean boolean0 = nodeUtil_BooleanResultPredicate0.apply(node0);
      assertTrue(node0.isNumber());
      assertEquals(3945411, node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.isBooleanResult(node0);
      assertTrue(boolean0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Node node0 = Node.newNumber(1112.0, 967, 967);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertEquals(3961799, node0.getSourcePosition());
      assertTrue(node0.isNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Node node0 = new Node(32);
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertTrue(boolean0);
      assertEquals(32, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(googleCodingConvention0, object0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "/=", node0, "");
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Node node0 = Node.newString("@x", 63743, 69);
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertEquals(261091397, node0.getSourcePosition());
      assertTrue(boolean0);
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(googleCodingConvention0, object0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "/=", node0, "");
      boolean boolean0 = NodeUtil.isNumericResultHelper(node1);
      assertFalse(boolean0);
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Node node0 = Node.newNumber(2475.782);
      Node node1 = new Node(26, node0, 48, 2);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
      assertEquals(196610, node1.getSourcePosition());
      assertTrue(node1.isNot());
      assertTrue(node0.isNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(googleCodingConvention0, object0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "/=", node0, "");
      NodeUtil.redeclareVarsInsideBranch(node1);
      assertEquals(0, node1.getCharno());
      assertTrue(node1.isName());
      assertFalse(node1.isFunction());
      assertEquals(38, node1.getType());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(0, 0, 0, 0, 0).when(node0).getType();
      doReturn(false, false).when(node0).isNull();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      int int0 = NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("/=").when(node0).getQualifiedName();
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "\n\nSubtree2: .");
      NodeUtil.isPrototypePropertyDeclaration(node0);
      assertEquals(2, node0.getChildCount());
      assertTrue(node0.isGetProp());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, abstractCompiler0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(node1).getQualifiedName();
      boolean boolean1 = NodeUtil.isPrototypeProperty(node1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.getSourceName(node0);
      assertEquals(44, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Node node0 = new Node(15);
      NodeUtil.getInputId(node0);
      assertEquals(15, node0.getType());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Node node0 = Node.newString("@x");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got FALSE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(611);
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(nodeUtil_MatchNodeType0, nodeUtil_MatchNodeType0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler", node0, ".");
      NodeUtil.isEmptyBlock(node1);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1, (AbstractCompiler) null);
      assertFalse(boolean0);
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((JSDocInfo) null).when(node0).getJSDocInfo();
      doReturn((Node) null).when(node0).getParent();
      JSDocInfo jSDocInfo0 = NodeUtil.getBestJSDocInfo(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Node node0 = Node.newNumber(1112.0, 963, 963);
      boolean boolean0 = NodeUtil.isCommutative(31);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(node0.isNumber());
      assertEquals(3945411, node0.getSourcePosition());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler", "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler", node0, ".");
      CodingConvention codingConvention1 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention1).isConstant(anyString());
      Node node2 = NodeUtil.newQualifiedNameNode(codingConvention1, "", node1, ")lHlU");
      boolean boolean0 = NodeUtil.isSimpleOperator(node2);
      assertEquals(0, node2.getSourcePosition());
      assertEquals(38, node2.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Node node0 = new Node(15);
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertTrue(boolean0);
      
      node0.addSuppression("m");
      assertEquals((-1), node0.getCharno());
      assertEquals(15, node0.getType());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("@x");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(15).when(node0).getType();
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      Node node1 = Node.newString(46, "?M8pI");
      boolean boolean1 = NodeUtil.isExprCall(node1);
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(boolean1 == boolean0);
      assertEquals(46, node1.getType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(0);
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(44).when(node0).getType();
      boolean boolean1 = NodeUtil.isNumericResultHelper(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(89, node0, node0, node0, 129, 4);
      assertEquals(89, node1.getType());
      assertEquals(528388, node1.getSourcePosition());
      
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertFalse(boolean0);
      assertEquals(83, node0.getType());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = NodeUtil.getInverseOperator((-884));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.isLiteralValue(node0, false);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FALSE does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(node0).isFunction();
      String string0 = NodeUtil.getNearestFunctionName(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(110).when(node0).getType();
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(81, 50, (-2284)).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, abstractCompiler0);
      Node node1 = NodeUtil.booleanNode(true);
      boolean boolean1 = NodeUtil.isBooleanResult(node1);
      assertTrue(node1.isTrue());
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), node1.getLineno());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Node node0 = new Node(51);
      assertFalse(node0.isGetProp());
      
      NodeUtil.getPrototypeClassName(node0);
      assertEquals(51, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isIn());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(googleCodingConvention0, object0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "/=", node0, "");
      boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node1, node1);
      assertFalse(boolean0);
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(611);
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(nodeUtil_MatchNodeType0, nodeUtil_MatchNodeType0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler", node0, ".");
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got NAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "\n\nSubtree2: .");
      String string0 = NodeUtil.getPrototypePropertyName(node0);
      assertEquals(": .", string0);
      assertEquals(33, node0.getType());
      assertFalse(node0.isString());
      assertEquals(2, node0.getChildCount());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(node0).isGetProp();
      doReturn(false).when(node0).isName();
      doReturn(false).when(node0).isThis();
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName("PeN");
      assertTrue(boolean0);
  }
}

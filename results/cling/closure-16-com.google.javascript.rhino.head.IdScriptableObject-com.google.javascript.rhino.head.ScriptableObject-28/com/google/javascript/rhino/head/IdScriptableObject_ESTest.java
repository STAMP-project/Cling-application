/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 03:54:04 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.BoundFunction;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.EcmaError;
import com.google.javascript.rhino.head.EvaluatorException;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeJavaArray;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeNumber;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.Synchronizer;
import com.google.javascript.rhino.head.TopLevel;
import com.google.javascript.rhino.head.UniqueTag;
import com.google.javascript.rhino.head.WrapFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class IdScriptableObject_ESTest extends IdScriptableObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      NativeNumber nativeNumber0 = new NativeNumber(2);
      baseFunction0.exportAsJSClass(8, nativeNumber0, true);
      Context context0 = Context.getCurrentContext();
      nativeNumber0.defineOwnProperty(context0, context0, baseFunction0);
      assertTrue(baseFunction0.isSealed());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeString nativeString0 = new NativeString("bUic");
      NativeCall nativeCall0 = new NativeCall();
      UniqueTag uniqueTag0 = (UniqueTag)Scriptable.NOT_FOUND;
      boolean boolean0 = nativeCall0.sameValue(nativeString0, uniqueTag0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      boolean boolean0 = baseFunction0.sameValue(baseFunction0.CONST, baseFunction0.CONST);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = ScriptableObject.isFalse((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test04()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(1624.977);
      nativeNumber0.activatePrototypeMap(13);
      boolean boolean0 = ScriptableObject.isFalse(nativeNumber0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      UniqueTag uniqueTag0 = (UniqueTag)Scriptable.NOT_FOUND;
      boolean boolean0 = baseFunction0.sameValue(uniqueTag0, uniqueTag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(baseFunction0, baseFunction0.CONST, 53);
      boolean boolean0 = baseFunction0.sameValue(scriptableObject0, scriptableObject0.DONTENUM);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(scriptable0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      doReturn((Scriptable) null, (Scriptable) null, (Scriptable) null, (Scriptable) null, (Scriptable) null).when(scriptable0).getParentScope();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(scriptable0).toString();
      NativeString.init(scriptable0, false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ScriptableObject.defineConstProperty(importerTopLevel0, "qB{UYX-B5eli^Y");
      assertFalse(importerTopLevel0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        baseFunction0.defineProperty("' 1nS}+>|5/'", class0, (-3576));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3575
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Context context0 = Context.enter();
      NativeNumber nativeNumber0 = new NativeNumber(409.649712952);
      BaseFunction baseFunction0 = new BaseFunction(nativeNumber0, nativeNumber0);
      nativeNumber0.defineOwnProperty(context0, context0, baseFunction0);
      assertTrue(baseFunction0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = ScriptableObject.getPropertyIds((Scriptable) null);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod(context0, (Scriptable) importerTopLevel0, "error reporter", (Object[]) null);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: error reporter is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      NativeNumber nativeNumber0 = new NativeNumber(2);
      Context context0 = Context.enter();
      baseFunction0.defineOwnProperties(context0, nativeNumber0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      Object[] objectArray0 = ScriptableObject.getPropertyIds(baseFunction0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Object[] objectArray1 = nativeArray0.toArray();
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      ScriptableObject.putConstProperty(nativeCall0, "Dh5KzF :UYqKmOAKe", (Object) null);
      assertFalse(nativeCall0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      Context context0 = Context.getCurrentContext();
      Synchronizer synchronizer0 = new Synchronizer(baseFunction0);
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(baseFunction0, synchronizer0, 19);
      // Undeclared exception!
      try { 
        baseFunction0.defineOwnProperties(context0, scriptableObject0);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Expected argument of type object, but instead had type function
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      ScriptableObject scriptableObject0 = ScriptableObject.ensureScriptableObject(baseFunction0);
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      Object[] objectArray0 = new Object[7];
      Context context0 = new Context();
      BoundFunction boundFunction0 = new BoundFunction(context0, baseFunction0, baseFunction0, baseFunction0, objectArray0);
      assertTrue(boundFunction0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context();
      NativeArray nativeArray0 = new NativeArray(1);
      ScriptableObject scriptableObject0 = context0.initStandardObjects((ScriptableObject) nativeArray0, false);
      // Undeclared exception!
      try { 
        NativeJavaArray.wrap((Scriptable) scriptableObject0, (Object) contextFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Array expected
         //
         verifyException("com.google.javascript.rhino.head.NativeJavaArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(baseFunction0, baseFunction0, 106);
      boolean boolean0 = baseFunction0.isGenericDescriptor(scriptableObject0);
      assertTrue(baseFunction0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.String;
      Scriptable scriptable0 = importerTopLevel0.getBuiltinPrototype(topLevel_Builtins0);
      ScriptableObject.putProperty(scriptable0, 100, (Object) context0);
      assertEquals(0, context0.getOptimizationLevel());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) baseFunction0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      ScriptableObject.redefineProperty(baseFunction0, "o#$e2)}", false);
      assertTrue(baseFunction0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      Scriptable scriptable0 = context0.initStandardObjects((ScriptableObject) nativeError0);
      // Undeclared exception!
      try { 
        nativeError0.exportAsJSClass(739, scriptable0, true);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Cannot modify a property of a sealed object: Error.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeArray0, 8);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      Class<Synchronizer> class0 = Synchronizer.class;
      ScriptableObject.getTypedProperty((Scriptable) baseFunction0, "", class0);
      assertTrue(baseFunction0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptable(nativeArray0.EMPTY);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Expected argument of type object, but instead had type number
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Scriptable scriptable0 = ScriptableObject.ensureScriptable(nativeCall0);
      assertSame(nativeCall0, scriptable0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeError0, "{}sZ>1&peb{wd}%");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      assertFalse(baseFunction0.isSealed());
      
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(baseFunction0, "vgg[C4I>_8\"TvU~", 8);
      NativeNumber nativeNumber0 = new NativeNumber(2);
      assertTrue(nativeNumber0.isExtensible());
      
      Context context0 = Context.enter();
      nativeNumber0.defineOwnProperty(context0, "language version", scriptableObject0);
      assertTrue(baseFunction0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      NativeString nativeString0 = new NativeString("error reporter");
      IdFunctionObject idFunctionObject0 = nativeString0.exportAsJSClass(6, baseFunction0, true);
      ScriptableObject.getTopScopeValue(nativeString0, idFunctionObject0);
      assertTrue(nativeString0.isSealed());
      assertTrue(idFunctionObject0.isSealed());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Class<Synchronizer> class0 = Synchronizer.class;
      NativeJavaClass nativeJavaClass1 = null;
      try {
        nativeJavaClass1 = new NativeJavaClass(nativeJavaClass0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      NativeString nativeString0 = new NativeString("error reporter");
      IdFunctionObject idFunctionObject0 = nativeString0.exportAsJSClass(6, baseFunction0, true);
      boolean boolean0 = baseFunction0.isGenericDescriptor(idFunctionObject0);
      assertTrue(nativeString0.isSealed());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test35()  throws Throwable  {
      Context context0 = Context.getContext();
      WrapFactory wrapFactory0 = context0.getWrapFactory();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      // Undeclared exception!
      try { 
        importerTopLevel0.associateValue(wrapFactory0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test36()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "}*%c;;";
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        baseFunction0.defineFunctionProperties(stringArray0, class0, 1973);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Method \"}*%c;;\" not found in \"java.lang.String\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext((Context) null);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Class<Synchronizer> class0 = Synchronizer.class;
      Synchronizer synchronizer0 = ScriptableObject.getTypedProperty((Scriptable) importerTopLevel0, 1, class0);
      assertNull(synchronizer0);
  }
}

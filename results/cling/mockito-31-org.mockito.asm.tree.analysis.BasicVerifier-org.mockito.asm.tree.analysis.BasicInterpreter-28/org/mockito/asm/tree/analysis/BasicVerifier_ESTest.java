/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 08:27:27 GMT 2019
 */

package org.mockito.asm.tree.analysis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mockito.asm.Type;
import org.mockito.asm.tree.AbstractInsnNode;
import org.mockito.asm.tree.FieldInsnNode;
import org.mockito.asm.tree.IincInsnNode;
import org.mockito.asm.tree.IntInsnNode;
import org.mockito.asm.tree.LabelNode;
import org.mockito.asm.tree.LdcInsnNode;
import org.mockito.asm.tree.MultiANewArrayInsnNode;
import org.mockito.asm.tree.TableSwitchInsnNode;
import org.mockito.asm.tree.analysis.BasicValue;
import org.mockito.asm.tree.analysis.BasicVerifier;
import org.mockito.asm.tree.analysis.SourceValue;
import org.mockito.asm.tree.analysis.Value;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BasicVerifier_ESTest extends BasicVerifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      AbstractInsnNode abstractInsnNode0 = mock(AbstractInsnNode.class, new ViolatedAssumptionAnswer());
      doReturn(512).when(abstractInsnNode0).getOpcode();
      Type type0 = Type.BOOLEAN_TYPE;
      Value value0 = basicVerifier0.newValue(type0);
      SourceValue sourceValue0 = new SourceValue(8);
      basicVerifier0.copyOperation(abstractInsnNode0, sourceValue0);
      LabelNode labelNode0 = new LabelNode();
      TableSwitchInsnNode tableSwitchInsnNode0 = new TableSwitchInsnNode(1, 5, labelNode0, (LabelNode[]) null);
      Value value1 = basicVerifier0.unaryOperation(tableSwitchInsnNode0, value0);
      assertNull(value1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      IntInsnNode intInsnNode0 = new IntInsnNode(157, 157);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      basicVerifier0.copyOperation(intInsnNode0, basicValue0);
      IincInsnNode iincInsnNode0 = new IincInsnNode(4, 53);
      // Undeclared exception!
      try { 
        basicVerifier0.newOperation(iincInsnNode0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicVerifier0);
      Value value0 = basicVerifier0.newOperation(ldcInsnNode0);
      BasicValue basicValue0 = (BasicValue)basicVerifier0.copyOperation(ldcInsnNode0, value0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      AbstractInsnNode abstractInsnNode0 = mock(AbstractInsnNode.class, new ViolatedAssumptionAnswer());
      doReturn(198).when(abstractInsnNode0).getOpcode();
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      basicVerifier0.copyOperation(abstractInsnNode0, basicValue0);
      MultiANewArrayInsnNode multiANewArrayInsnNode0 = new MultiANewArrayInsnNode("[", 14);
      LinkedList<BasicValue> linkedList0 = new LinkedList<BasicValue>();
      // Undeclared exception!
      try { 
        basicVerifier0.naryOperation(multiANewArrayInsnNode0, linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.mockito.asm.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      Type type0 = Type.BOOLEAN_TYPE;
      Value value0 = basicVerifier0.newValue(type0);
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(33, "|)UENdC", "", "OJ");
      Value value1 = basicVerifier0.copyOperation(fieldInsnNode0, value0);
      assertEquals(1, value1.getSize());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      Value value0 = basicVerifier0.getElementValue(basicValue0);
      AbstractInsnNode abstractInsnNode0 = mock(AbstractInsnNode.class, new ViolatedAssumptionAnswer());
      doReturn(191, 0).when(abstractInsnNode0).getOpcode();
      // Undeclared exception!
      try { 
        basicVerifier0.unaryOperation(abstractInsnNode0, value0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }
}

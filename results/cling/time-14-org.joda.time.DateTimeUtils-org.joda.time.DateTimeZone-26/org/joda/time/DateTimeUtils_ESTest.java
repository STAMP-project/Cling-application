/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 01:30:33 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.MutableInterval;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DateTimeUtils_ESTest extends DateTimeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalTime.fromMillisOfDay(66987222L);
      Chronology chronology0 = DateTimeUtils.getInstantChronology((ReadableInstant) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalTime.fromMillisOfDay(128870144L);
      DateTimeUtils.setCurrentMillisOffset(0L);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalTime.fromMillisOfDay((long) (-607));
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInterval) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone.forOffsetMillis(0);
      LocalTime localTime0 = LocalTime.fromMillisOfDay((long) 0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(3, 3);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      LocalTime.fromMillisOfDay((-5280L), (Chronology) buddhistChronology0);
      assertEquals("+03:03", dateTimeZone0.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      LocalTime.fromMillisOfDay((long) 2);
      long long0 = DateTimeUtils.getInstantMillis((ReadableInstant) null);
      assertEquals(1566091828382L, long0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-2416L), (Chronology) null);
      localTime0.plusMinutes((-120));
      DateTime dateTime0 = localTime0.toDateTimeToday();
      long long0 = DateTimeUtils.getInstantMillis(dateTime0);
      assertEquals(1566082797584L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTimeZone.setDefault(dateTimeZone0);
      LocalTime localTime0 = LocalTime.fromMillisOfDay((long) 1);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-2416L), (Chronology) null);
      LocalTime localTime1 = localTime0.plusMinutes((-120));
      boolean boolean0 = DateTimeUtils.isContiguous(localTime1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(1636L);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalTime.fromMillisOfDay(1449L);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("+\", jBl.c)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+\", jBl.c)\" is malformed at \"\", jBl.c)\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test11()  throws Throwable  {
      ReadableInterval readableInterval0 = mock(ReadableInterval.class, new ViolatedAssumptionAnswer());
      doReturn("a").when(readableInterval0).toString();
      doReturn((Chronology) null).when(readableInterval0).getChronology();
      ReadableInterval readableInterval1 = DateTimeUtils.getReadableInterval(readableInterval0);
      ReadableInstant readableInstant0 = mock(ReadableInstant.class, new ViolatedAssumptionAnswer());
      doReturn((Chronology) null).when(readableInstant0).getChronology();
      Chronology chronology0 = DateTimeUtils.getInstantChronology(readableInstant0);
      assertNotNull(chronology0);
      
      Chronology chronology1 = DateTimeUtils.getIntervalChronology(readableInterval1);
      assertNotNull(chronology1);
      
      DateMidnight dateMidnight0 = new DateMidnight(0L, chronology0);
      Date date0 = dateMidnight0.toDate();
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      localDate0.minusDays(1);
      assertEquals("Wed Dec 31 16:00:00 MST 1969", date0.toString());
      assertEquals((-3600000L), dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInterval) mutableInterval0);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test13()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-2416L), (Chronology) null);
      localTime0.plusMinutes((-120));
      DateTime dateTime0 = localTime0.toDateTimeToday();
      DateTimeUtils.getIntervalChronology((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertEquals(1566082797584L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-2416L), (Chronology) null);
      localTime0.plusMinutes((-120));
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1913);
      assertEquals("+00:00:01.913", dateTimeZone0.toString());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("-18:00", dateTimeZone1.getID());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test15()  throws Throwable  {
      LocalTime.fromMillisOfDay((long) 973);
      ReadableInterval readableInterval0 = DateTimeUtils.getReadableInterval((ReadableInterval) null);
      assertEquals(1566091824556L, readableInterval0.getEndMillis());
      assertNotNull(readableInterval0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalTime.fromMillisOfDay((long) 989);
      // Undeclared exception!
      try { 
        DateTimeUtils.setCurrentMillisProvider((DateTimeUtils.MillisProvider) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The MillisProvider must not be null
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeUtils.FixedMillisProvider dateTimeUtils_FixedMillisProvider0 = new DateTimeUtils.FixedMillisProvider((-270L));
      LocalTime localTime0 = new LocalTime((-2416L), (Chronology) null);
      localTime0.plusMinutes((-120));
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_FixedMillisProvider0);
      assertEquals((-270L), dateTimeUtils_FixedMillisProvider0.getMillis());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalTime.fromMillisOfDay((-284L));
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalTime.fromMillisOfDay(66987222L);
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInstant) null, (ReadableInstant) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalTime.fromMillisOfDay(1636L);
      DateTimeUtils.setCurrentMillisOffset(1326L);
  }
}

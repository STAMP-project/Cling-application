/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 03:54:08 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BoundFunction;
import com.google.javascript.rhino.head.Callable;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.EcmaError;
import com.google.javascript.rhino.head.EvaluatorException;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.InterpretedFunction;
import com.google.javascript.rhino.head.InterpreterData;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeGenerator;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJSON;
import com.google.javascript.rhino.head.NativeJavaTopPackage;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.NativeWith;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.TopLevel;
import com.google.javascript.rhino.head.WrapFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class IdScriptableObject_ESTest extends IdScriptableObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test00()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.Error;
      IdFunctionObject idFunctionObject0 = (IdFunctionObject)importerTopLevel0.getBuiltinCtor(topLevel_Builtins0);
      idFunctionObject0.getOwnPropertyDescriptor(context0, importerTopLevel0);
      assertFalse(idFunctionObject0.isSealed());
      assertEquals(1, idFunctionObject0.getLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeArray nativeArray0 = new NativeArray(571L);
      boolean boolean0 = nativeArray0.sameValue(nativeIterator_StopIteration0.DONTENUM, nativeArray0.UNINITIALIZED_CONST);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = ScriptableObject.isFalse("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      boolean boolean0 = ScriptableObject.isFalse(nativeIterator_StopIteration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Context context0 = Context.getCurrentContext();
      boolean boolean0 = nativeIterator_StopIteration0.sameValue(nativeCall0, context0.VERSION_1_1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      boolean boolean0 = nativeIterator_StopIteration0.sameValue(nativeCall0, nativeCall0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(scriptable0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      doReturn((Scriptable) null, (Scriptable) null).when(scriptable0).getParentScope();
      doReturn((String) null, (String) null).when(scriptable0).toString();
      NativeJSON.init(scriptable0, true);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Class<Object> class0 = Object.class;
      nativeCall0.defineProperty("com.google.javascript.rhino.head.VMBridge_custom", class0, 0);
      assertFalse(nativeCall0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod(context0, (Scriptable) nativeCall0, "language version", (Object[]) null);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: language version is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      NativeArray nativeArray0 = new NativeArray(0L);
      importerTopLevel0.defineOwnProperties(context0, nativeArray0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeIterator_StopIteration0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      EvaluatorException evaluatorException0 = new EvaluatorException("QwjI#]NqcP+[kqJA'^");
      nativeError0.setStackProvider(evaluatorException0);
      assertFalse(nativeError0.isSealed());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeContinuation0.put("", (Scriptable) nativeIterator_StopIteration0, (Object) null);
      // Undeclared exception!
      try { 
        ScriptableObject.putConstProperty(nativeIterator_StopIteration0, "", "");
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // TypeError: redeclaration of var .
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      int int0 = nativeArray0.lastIndexOf("[object Object]");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ScriptableObject.putConstProperty(nativeIterator_StopIteration0, "language version", nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptableObject((Object) null);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Expected argument of type object, but instead had type object
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      ScriptableObject scriptableObject0 = ScriptableObject.ensureScriptableObject(nativeCall0);
      assertTrue(scriptableObject0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(importerTopLevel0, true);
      nativeGenerator0.sealObject();
      assertTrue(importerTopLevel0.isEmpty());
      assertTrue(nativeGenerator0.isSealed());
      assertTrue(nativeGenerator0.isEmpty());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test18()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      Callable callable0 = mock(Callable.class, new ViolatedAssumptionAnswer());
      BoundFunction boundFunction0 = new BoundFunction(context0, importerTopLevel0, callable0, importerTopLevel0, (Object[]) null);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Context context0 = Context.enter();
      WrapFactory wrapFactory0 = context0.getWrapFactory();
      NativeCall nativeCall0 = new NativeCall();
      ScriptableObject scriptableObject0 = context0.initStandardObjects((ScriptableObject) nativeCall0, false);
      Class<String> class0 = String.class;
      Scriptable scriptable0 = wrapFactory0.wrapAsJavaObject(context0, scriptableObject0, nativeCall0, class0);
      assertEquals("JavaObject", scriptable0.getClassName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      boolean boolean0 = nativeCall0.isGenericDescriptor(nativeJavaTopPackage0);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      ScriptableObject.putProperty((Scriptable) nativeCall0, 52, (Object) nativeCall0);
      assertFalse(nativeCall0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeError0, (-3838));
      assertFalse(boolean0);
      assertTrue(nativeError0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ScriptableObject.redefineProperty(importerTopLevel0, "", false);
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test24()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      Scriptable scriptable0 = context0.initStandardObjects((ScriptableObject) nativeObject0);
      // Undeclared exception!
      try { 
        nativeObject0.exportAsJSClass(101, scriptable0, true);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Cannot modify a property of a sealed object: Object.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2L);
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeArray0, 1);
      assertTrue(boolean0);
      assertTrue(nativeArray0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Class<NativeWith> class0 = NativeWith.class;
      ScriptableObject.getTypedProperty((Scriptable) nativeIterator_StopIteration0, "#%P\"`Ym7rW[>9 u4#", class0);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test27()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptable(contextFactory0);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Invalid JavaScript value of type com.google.javascript.rhino.head.ContextFactory
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeCall0, (String) null);
      assertTrue(nativeCall0.isExtensible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(nativeCall0, nativeCall0, 0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      importerTopLevel0.defineOwnProperty(context0, scriptableObject0.READONLY, scriptableObject0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeWith nativeWith0 = new NativeWith((Scriptable) null, nativeCall0);
      ScriptableObject.getTopScopeValue(nativeWith0, "setMon@#t");
      assertTrue(nativeCall0.isExtensible());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test31()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      Object object0 = ScriptableObject.getProperty((Scriptable) importerTopLevel0, 2092670);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test32()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData((-3021), "initiali%ze id=", "com.google.javascript.rhino.head.NativeJavaClass", true);
      // Undeclared exception!
      try { 
        InterpretedFunction.createScript(interpreterData0, "com.google.javascript.rhino.head.NativeJavaClass");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.InterpretedFunction", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test33()  throws Throwable  {
      Context context0 = new Context();
      InterpreterData interpreterData0 = new InterpreterData(13, "error reporter", "error reporter", false);
      // Undeclared exception!
      try { 
        InterpretedFunction.createScript(interpreterData0, context0.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.InterpretedFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeObject nativeObject0 = (NativeObject)ScriptableObject.buildDataDescriptor(nativeCall0, nativeCall0, 0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      NativeObject nativeObject1 = (NativeObject)context0.initStandardObjects();
      boolean boolean0 = nativeObject0.isGenericDescriptor(nativeObject1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      Class<Object> class0 = Object.class;
      Object object0 = ScriptableObject.getTypedProperty((Scriptable) nativeObject0, 1, class0);
      assertTrue(nativeObject0.isExtensible());
      assertTrue(nativeObject0.isEmpty());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test36()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeObject nativeObject0 = (NativeObject)ScriptableObject.buildDataDescriptor(nativeCall0, nativeCall0, 119);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      IdFunctionObject idFunctionObject0 = nativeObject0.exportAsJSClass(4, nativeIterator_StopIteration0, true);
      // Undeclared exception!
      try { 
        idFunctionObject0.setAttributes(4, 1);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Cannot modify a property of a sealed object: 4.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }
}

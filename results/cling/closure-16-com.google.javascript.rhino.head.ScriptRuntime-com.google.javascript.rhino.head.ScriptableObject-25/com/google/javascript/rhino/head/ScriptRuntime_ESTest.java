/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 07:17:32 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.BoundFunction;
import com.google.javascript.rhino.head.Callable;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.EcmaError;
import com.google.javascript.rhino.head.EvaluatorException;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.NativeBoolean;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeJavaPackage;
import com.google.javascript.rhino.head.NativeJavaTopPackage;
import com.google.javascript.rhino.head.NativeWith;
import com.google.javascript.rhino.head.ScriptRuntime;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ScriptRuntime_ESTest extends ScriptRuntime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptRuntime.setObjectIndex((Object) null, Double.NEGATIVE_INFINITY, (Object) "_8.\"9vS`j~}QDn", (Context) null);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Cannot set property \"-Infinity\" of null to \"_8.\"9vS`j~}QDn\"
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(scriptable0).get(anyInt() , any(com.google.javascript.rhino.head.Scriptable.class));
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      Object object0 = ScriptRuntime.getObjectIndex(scriptable0, 8232, context0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("}", classLoader0);
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Object object0 = ScriptRuntime.setObjectElem((Object) nativeJavaTopPackage0, (Object) nativeJavaPackage0, (Object) null, context0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isJSWhitespaceOrLineTerminator((-720));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      int[] intArray0 = new int[1];
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      doReturn((Scriptable) null).when(context0).newArray(any(com.google.javascript.rhino.head.Scriptable.class) , any(java.lang.Object[].class));
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      Scriptable scriptable1 = ScriptRuntime.newArrayLiteral(objectArray0, intArray0, context0, scriptable0);
      assertNull(scriptable1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      ScriptRuntime.toUint32((Object) null);
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      doReturn((ScriptableObject) null).when(context0).initStandardObjects(any(com.google.javascript.rhino.head.ScriptableObject.class) , anyBoolean());
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      EvaluatorException evaluatorException0 = Context.reportRuntimeError((String) null);
      // Undeclared exception!
      try { 
        ScriptRuntime.cmp_LE(importerTopLevel0, evaluatorException0);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ScriptRuntime.toUint32((Object) null);
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      EvaluatorException evaluatorException0 = Context.reportRuntimeError((String) null);
      boolean boolean0 = ScriptRuntime.cmp_LE(importerTopLevel0, evaluatorException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(scriptable0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      NativeWith nativeWith0 = new NativeWith(scriptable0, scriptable0);
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      ScriptRuntime.propIncrDecr(nativeWith0, "l(L", context0, 13);
      int[] intArray0 = new int[0];
      Context context1 = mock(Context.class, new ViolatedAssumptionAnswer());
      doReturn((Scriptable) null).when(context1).newArray(any(com.google.javascript.rhino.head.Scriptable.class) , anyInt());
      // Undeclared exception!
      try { 
        ScriptRuntime.newArrayLiteral(objectArray0, intArray0, context1, nativeWith0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Context context0 = Context.enter();
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      Scriptable scriptable0 = context0.newArray((Scriptable) nativeBoolean0, 220);
      NativeWith nativeWith0 = new NativeWith(scriptable0, nativeBoolean0);
      Float float0 = new Float((-2850.84));
      ScriptRuntime.strictSetName(nativeWith0, float0, context0, scriptable0, "__proto__");
      assertFalse(nativeBoolean0.isEmpty());
      assertTrue(nativeBoolean0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        ScriptRuntime.strictSetName((Scriptable) null, (Object) null, context0, (Scriptable) null, (String) null);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // ReferenceError: Assignment to undefined \"null\" in strict mode
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(scriptable0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      doReturn((Scriptable) null).when(scriptable0).getParentScope();
      Object object0 = ScriptRuntime.name(context0, scriptable0, "#D^X6I9R,Es%mQ%e;T");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      NativeCall nativeCall0 = new NativeCall();
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn(nativeCall0).when(scriptable0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      doReturn(nativeCall0).when(scriptable0).getParentScope();
      NativeCall nativeCall1 = (NativeCall)ScriptRuntime.name(context0, scriptable0, "#D^X6I9R,Es%mQ%e;T");
      assertTrue(nativeCall1.isExtensible());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      Context context0 = Context.getContext();
      BaseFunction baseFunction0 = ScriptRuntime.typeErrorThrower();
      ScriptRuntime.bind(context0, baseFunction0, "baW\u0005Z\"F=<.#+h");
      context0.initStandardObjects();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      Object object0 = ScriptRuntime.enumInit((Object) importerTopLevel0, context0, false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test14()  throws Throwable  {
      Short short0 = new Short((short)0);
      ScriptRuntime.toUint32((Object) short0);
      NativeError nativeError0 = new NativeError();
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      doReturn(nativeError0).when(context0).initStandardObjects(any(com.google.javascript.rhino.head.ScriptableObject.class) , anyBoolean());
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      EvaluatorException evaluatorException0 = Context.reportRuntimeError((String) null);
      // Undeclared exception!
      try { 
        ScriptRuntime.cmp_LE(importerTopLevel0, evaluatorException0);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(scriptable0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      doReturn((Scriptable) null, (Scriptable) null).when(scriptable0).getParentScope();
      doReturn((String) null, (String) null).when(scriptable0).toString();
      Callable callable0 = mock(Callable.class, new ViolatedAssumptionAnswer());
      BoundFunction boundFunction0 = new BoundFunction(context0, scriptable0, callable0, scriptable0, (Object[]) null);
      // Undeclared exception!
      try { 
        ScriptRuntime.toCharSequence(boundFunction0);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 08:28:55 GMT 2019
 */

package org.mockito.asm.tree.analysis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.Type;
import org.mockito.asm.tree.IincInsnNode;
import org.mockito.asm.tree.IntInsnNode;
import org.mockito.asm.tree.LdcInsnNode;
import org.mockito.asm.tree.MethodInsnNode;
import org.mockito.asm.tree.MultiANewArrayInsnNode;
import org.mockito.asm.tree.TypeInsnNode;
import org.mockito.asm.tree.VarInsnNode;
import org.mockito.asm.tree.analysis.BasicValue;
import org.mockito.asm.tree.analysis.BasicVerifier;
import org.mockito.asm.tree.analysis.Value;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BasicVerifier_ESTest extends BasicVerifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicVerifier0);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = basicVerifier0.copyOperation(ldcInsnNode0, basicValue0);
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(11, "", "[S", "_+zy+");
      methodInsnNode0.setOpcode(10);
      Value value1 = basicVerifier0.newOperation(methodInsnNode0);
      assertFalse(value1.equals((Object)value0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicVerifier0);
      Value value0 = basicVerifier0.newOperation(ldcInsnNode0);
      IntInsnNode intInsnNode0 = new IntInsnNode(28, 917);
      BasicValue basicValue0 = (BasicValue)basicVerifier0.copyOperation(intInsnNode0, value0);
      assertTrue(basicValue0.isReference());
      
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(15, "R", "R", "<init>");
      BasicValue basicValue1 = (BasicValue)basicVerifier0.newOperation(methodInsnNode0);
      assertNotSame(basicValue1, value0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicVerifier0);
      Value value0 = basicVerifier0.newOperation(ldcInsnNode0);
      BasicValue basicValue0 = (BasicValue)basicVerifier0.copyOperation(ldcInsnNode0, value0);
      assertTrue(basicValue0.isReference());
      
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(15, "R", "R", "<init>");
      BasicValue basicValue1 = (BasicValue)basicVerifier0.newOperation(methodInsnNode0);
      assertNotSame(basicValue1, basicValue0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      MethodInsnNode methodInsnNode0 = new MethodInsnNode((-215), (String) null, (String) null, (String) null);
      Type type0 = Type.BYTE_TYPE;
      Value value0 = basicVerifier0.newValue(type0);
      basicVerifier0.copyOperation(methodInsnNode0, value0);
      methodInsnNode0.setOpcode(16);
      Value value1 = basicVerifier0.newOperation(methodInsnNode0);
      assertSame(value1, value0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicVerifier0);
      Value value0 = basicVerifier0.newOperation(ldcInsnNode0);
      BasicValue basicValue0 = (BasicValue)basicVerifier0.copyOperation(ldcInsnNode0, value0);
      assertTrue(basicValue0.isReference());
      
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(9, "StackMap", "R", "DV&Augw&*z:#");
      methodInsnNode0.setOpcode(14);
      BasicValue basicValue1 = (BasicValue)basicVerifier0.newOperation(methodInsnNode0);
      assertNotSame(basicValue1, value0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicVerifier0);
      Value value0 = basicVerifier0.newOperation(ldcInsnNode0);
      IntInsnNode intInsnNode0 = new IntInsnNode(28, 917);
      basicVerifier0.copyOperation(intInsnNode0, value0);
      IincInsnNode iincInsnNode0 = new IincInsnNode(69, 6);
      // Undeclared exception!
      try { 
        basicVerifier0.newOperation(iincInsnNode0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(168, "Invalid array type");
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      basicVerifier0.copyOperation(typeInsnNode0, basicValue0);
      Value value0 = basicVerifier0.newOperation(typeInsnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      Type type0 = Type.BOOLEAN_TYPE;
      Value value0 = basicVerifier0.newValue(type0);
      VarInsnNode varInsnNode0 = new VarInsnNode(3, 5);
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(174, "DV&Augw&*z:#", "DV&Augw&*z:#", "InnerClasses");
      methodInsnNode0.setOpcode(12);
      Value value1 = basicVerifier0.newOperation(methodInsnNode0);
      Value value2 = basicVerifier0.copyOperation(varInsnNode0, value0);
      assertFalse(value2.equals((Object)value1));
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicVerifier0);
      Value value0 = basicVerifier0.newOperation(ldcInsnNode0);
      basicVerifier0.copyOperation(ldcInsnNode0, value0);
      IincInsnNode iincInsnNode0 = new IincInsnNode(69, 6);
      // Undeclared exception!
      try { 
        basicVerifier0.newOperation(iincInsnNode0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicVerifier basicVerifier0 = new BasicVerifier();
      MultiANewArrayInsnNode multiANewArrayInsnNode0 = new MultiANewArrayInsnNode("|`8&PQvDK", 35);
      basicVerifier0.copyOperation(multiANewArrayInsnNode0, basicValue0);
      LinkedList<MethodInsnNode> linkedList0 = new LinkedList<MethodInsnNode>();
      // Undeclared exception!
      try { 
        basicVerifier0.naryOperation(multiANewArrayInsnNode0, linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.mockito.asm.Type", e);
      }
  }
}

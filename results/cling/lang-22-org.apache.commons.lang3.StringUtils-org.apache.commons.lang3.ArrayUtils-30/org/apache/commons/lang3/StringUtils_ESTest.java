/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 20:01:48 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = StringUtils.substring("normaliz=.e", 1, 122);
      assertEquals("ormaliz=.e", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = StringUtils.repeat("normaliz=.e", 1);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("normaliz=.e");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = StringUtils.repeat("j", 1);
      assertNotNull(string0);
      assertEquals("j", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("j", "1JV+mEeg~G!sSl`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = StringUtils.repeat("sH2zkfjWeku_M&YYu", 1);
      assertEquals("sH2zkfjWeku_M&YYu", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("sH2zkfjWeku_M&YYu", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = StringUtils.repeat("normaliz=.e", 1);
      assertEquals("normaliz=.e", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[6];
      boolean boolean0 = StringUtils.endsWithAny("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = StringUtils.repeat("j", 1);
      assertNotNull(string0);
      assertEquals("j", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, "j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[3];
      boolean boolean0 = StringUtils.endsWithAny("p{InCmbiningDiacriticalMarks}+", stringArray0);
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat("NFD", 1);
      assertEquals("NFD", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[3];
      StringUtils.endsWithAny("p{InCombiningDiacriticalMarks}+", stringArray0);
      String string0 = StringUtils.repeat("", 77);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringUtils.repeat("", "", 1833);
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringUtils.repeat("", "", 1862);
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringUtils.repeat("`?z~-u", 1833);
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = StringUtils.repeat("moZ", 27);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("moZmoZmoZmoZmoZmoZmoZmoZmoZmoZmoZmoZmoZmoZmoZmoZmoZmoZmoZmoZmoZmoZmoZmoZmoZmoZmoZ");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 1835);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("kfDx3Nw<,Hqw0p", "W2NEuXk#?Z}JngcNU&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = StringUtils.repeat("Z", "Z", 1523);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWith("Z", string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringUtils.endsWithAny("HZ(xgt?", (String[]) null);
      String string0 = StringUtils.repeat("", 2698);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringUtils.endsWithAny("HZ(xgtI?", (String[]) null);
      String string0 = StringUtils.repeat("HZ(xgtI?", 1862);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = StringUtils.repeat("", 1862);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = StringUtils.repeat("!@#!V", 528);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, "ErcA");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 1890);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      boolean boolean0 = StringUtils.endsWithAny("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = StringUtils.repeat("#", "#", 1853);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny((String) null, (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = StringUtils.repeat("", 1862);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = StringUtils.repeat("3B^d&rmW!]", 256);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[3];
      StringUtils.endsWithAny("p{InCombiningDiacriticalMarks}+", stringArray0);
      String string0 = StringUtils.repeat("p{InCombiningDiacriticalMarks}+", 104);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = StringUtils.repeat("normaliz=.e", 1);
      assertEquals("normaliz=.e", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "normaliz=.e";
      boolean boolean0 = StringUtils.endsWithAny("normaliz=.e", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 1835);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      boolean boolean0 = StringUtils.endsWithAny(">; F@r`YK 3<z3!h", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = StringUtils.repeat("Cannot store ", 90);
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      boolean boolean0 = StringUtils.endsWithAny(string0, stringArray0);
      assertTrue(boolean0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 02:36:16 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Provider provider0 = mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn((Set<String>) null).when(provider0).getAvailableIDs();
      // Undeclared exception!
      try { 
        DateTimeZone.setProvider(provider0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The provider doesn't have any available ids
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-158));
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      int int0 = cachedDateTimeZone0.getOffsetFromLocal((-670L));
      assertEquals((-568800000), int0);
      assertEquals("-158:00", cachedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036854775519L), false, 1559L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      Provider provider0 = mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn(set0).when(provider0).getAvailableIDs();
      // Undeclared exception!
      try { 
        DateTimeZone.setProvider(provider0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The provider doesn't support UTC
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036854775519L), true, (-9223372036854775519L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long0 = dateTimeZone0.adjustOffset(31077910799999L, false);
      assertEquals(31077910799999L, long0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, CALLS_REAL_METHODS);
      doReturn(1661, 1661, 3505, (-1427), 1661).when(dateTimeZone0).getOffset(anyLong());
      doReturn((long)(-1427), (-515L)).when(dateTimeZone0).nextTransition(anyLong());
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = new DateTime((Chronology) islamicChronology0);
      dateTime0.toDateMidnight();
      assertEquals(1566095767971L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-878));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -878
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      fixedDateTimeZone0.getShortName(2946L);
      Locale locale0 = Locale.ITALIAN;
      localDateTime0.toString("Maximum value exceeded for add", locale0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      fixedDateTimeZone0.getOffset((ReadableInstant) null);
      Locale locale0 = Locale.CHINA;
      try { 
        localDateTime0.toString("nIz:zvs_", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTime dateTime0 = new DateTime();
      dateTimeZone0.UTC.getOffset((ReadableInstant) dateTime0);
      Locale locale0 = Locale.JAPANESE;
      localDateTime0.toString(".=Q',m(t", locale0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.KOREA;
      try { 
        localDateTime0.toString("PST", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      long long0 = fixedDateTimeZone0.convertLocalToUTC(333L, true);
      assertEquals(333L, long0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-431));
      assertEquals("-431:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test13()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      Locale locale0 = Locale.ITALIAN;
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      localDateTime0.toString("MIT", locale0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-717));
      Locale locale0 = new Locale("Format invalid: ");
      dateTimeZone0.getName((-951L), locale0);
      try { 
        localDateTime0.toString("Format invalid: ", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: F
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.convertLocalToUTC(524L, true);
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.ITALIAN;
      try { 
        localDateTime0.toString("-<UjwVhy7T7", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      long long0 = dateTimeZone0.convertLocalToUTC((-886L), false);
      assertEquals((-3600886L), long0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = dateTimeZone0.getShortName((-3600886L), locale0);
      assertNotNull(string0);
      assertEquals("+01:00", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime((long) (-889), (Chronology) buddhistChronology0);
      Locale locale0 = Locale.TAIWAN;
      try { 
        localDateTime0.toString("umpx(#oN:", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test19()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeZone.forOffsetMillis(0);
      Locale locale0 = Locale.TAIWAN;
      localDateTime0.toString("7n<T=R[tkNYI]KV(|L1", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test20()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.KOREA;
      localDateTime0.toString("|[#$d$9rL\"&MBzwT#S}", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test21()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.ITALIAN;
      localDateTime0.toString("-Zj'L\"k!O", locale0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeZone.forID("UTC");
      Locale locale0 = Locale.KOREA;
      try { 
        localDateTime0.toString("F/KJ5Tygf$eP`d:y", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: F
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test23()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.KOREA;
      localDateTime0.toString("qS~,B9L)", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test24()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(21);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      Locale locale0 = Locale.ITALIAN;
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeZone.forTimeZone(timeZone0);
      String string0 = localDateTime0.toString("GMT-Europe/Amsterdam", locale0);
      assertEquals("dopo Cristo", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test25()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.ITALIAN;
      localDateTime0.toString("?[3JW5F5dPJXkBCx8g", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test26()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.ITALIAN;
      localDateTime0.toString("LT", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test27()  throws Throwable  {
      DateTime dateTime0 = new DateTime(9223372036854775779L);
      dateTime0.withLaterOffsetAtOverlap();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      Locale locale0 = Locale.CHINA;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
      localDateTime0.toString("B", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test28()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeZone.forOffsetHours(0);
      Locale locale0 = Locale.GERMAN;
      localDateTime0.toString("-W", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test29()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
      Locale locale0 = Locale.KOREA;
      localDateTime0.toString("dayOfMonth", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test30()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = new Locale("N", "N", "N");
      localDateTime0.toString("DateTimeZone.setDefault", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test31()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      dateTimeZone0.isStandardOffset(9223372036854775807L);
      Locale locale0 = Locale.CHINA;
      localDateTime0.toString("l)&?", locale0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(21);
      LocalTime localTime0 = new LocalTime((long) (-278), dateTimeZone0);
      Locale locale0 = Locale.ITALIAN;
      try { 
        localDateTime0.toString("uS u@@fy", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test33()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, 108L);
      Locale locale0 = Locale.TAIWAN;
      localDateTime0.toString("+GMT+GMT+18:00", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test34()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.ENGLISH;
      DateTime dateTime0 = new DateTime();
      dateTime0.minusDays(2147481815);
      localDateTime0.toString("CX|gZ`", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test35()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      localDateTime0.toString("N", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test36()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(21);
      dateTimeZone0.convertLocalToUTC((long) 21, false);
      Locale locale0 = Locale.ITALIAN;
      localDateTime0.toString("GMT-Europe/Amsterdam", locale0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeZone.forID((String) null);
      Locale locale0 = Locale.ITALIAN;
      try { 
        localDateTime0.toString("org/joda/time/tz/data", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test38()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.forLanguageTag("UTC");
      localDateTime0.toString("f49", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test39()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.KOREA;
      localDateTime0.toString("~Vcirvz8xB{y*", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test40()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.ENGLISH;
      DateTimeZone.setNameProvider((NameProvider) null);
      localDateTime0.toString("Yh|w2m|!{wb@;", locale0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.ITALIAN;
      try { 
        localDateTime0.toString("vr)n:H4{<5*Q*C*%", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test42()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.CANADA_FRENCH;
      localDateTime0.toString("Euro", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test43()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      localDateTime0.toString("wl7Pk%{f{0>[", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test44()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      fixedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      Locale locale0 = Locale.TAIWAN;
      localDateTime0.toString("aFs4", locale0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(112);
      long long0 = dateTimeZone1.convertLocalToUTC(391L, true);
      assertEquals("+00:00:00.112", dateTimeZone1.toString());
      assertEquals(279L, long0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test46()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.ITALIAN;
      localDateTime0.toString("K}z=~?g%E7", locale0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("-Partial must not be null");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(712L, dateTimeZone0);
      Locale locale0 = Locale.CHINA;
      try { 
        localDateTime0.toString("Illegal instant due to time zone offset transition: ", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Locale locale0 = Locale.GERMANY;
      try { 
        localDateTime0.toString("c2Y04mwM:i{gIz", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test49()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.ITALIAN;
      localDateTime0.toString(";290sBT", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test50()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.withDayOfYear(19);
      Locale locale0 = Locale.CHINESE;
      String string0 = localDateTime0.toString("5Y~YR-!dPXsi/x@{XI5", locale0);
      assertEquals("5Y~YR-!dPXsi/x@{XI5", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test51()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = new Locale("y^pQ,m[32ELn>sO@ ", "hours");
      localDateTime0.toString("y^pQ,m[32ELn>sO@ ", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-100722684));
      assertEquals("-27:58:42.684", dateTimeZone0.toString());
      
      Locale locale0 = Locale.ITALIAN;
      LocalDateTime localDateTime0 = LocalDateTime.now();
      String string0 = localDateTime0.toString("k\"[xy<QOTGJ", locale0);
      assertEquals("00000000004", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test53()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-9223372036854775808L));
      DateTime dateTime1 = dateTime0.withLaterOffsetAtOverlap();
      // Undeclared exception!
      try { 
        dateTime1.withWeekOfWeekyear(1);
        fail("Expecting exception: IllegalFieldValueException");
      
      } catch(IllegalFieldValueException e) {
         //
         // Value 1 for weekOfWeekyear is not supported: Illegal instant due to time zone offset transition: 292278993-08-25T07:32:27.808 (Europe/Amsterdam)
         //
         verifyException("org.joda.time.chrono.ZonedChronology$ZonedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test54()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.CANADA_FRENCH;
      localDateTime0.toString("\"y.ORYP;", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test55()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = Locale.ITALIAN;
      DateTimeZone.setDefault(fixedDateTimeZone0);
      String string0 = localDateTime0.toString("5Y~YR-!dPXsi/x@{XI5", locale0);
      assertEquals("5Y~YR-!dPXsi/x@{XI5", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test56()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeZone.setProvider((Provider) null);
      Locale locale0 = Locale.ITALIAN;
      localDateTime0.toString("5Y~YR-!dPXsi/x@{XI5", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test57()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(23);
      String string0 = dateTimeZone0.getName(572L);
      assertEquals("+00:00:00.023", dateTimeZone0.toString());
      
      Locale locale0 = Locale.ROOT;
      String string1 = localDateTime0.toString("(2eYAb6KyF3G~Oi0D(", locale0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(20000000000000007", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test58()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.minusDays((-100722684));
      assertEquals(8704005996786212L, dateTime1.getMillis());
      
      Locale locale0 = Locale.ITALIAN;
      LocalDateTime localDateTime0 = LocalDateTime.now();
      String string0 = localDateTime0.toString("k\"[xy<QOTGJ", locale0);
      assertEquals("00000000004", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test59()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(23);
      Locale locale0 = Locale.ROOT;
      long long0 = dateTimeZone0.convertLocalToUTC((-1251L), true);
      assertEquals((-1274L), long0);
      assertEquals("+00:00:00.023", dateTimeZone0.toString());
      
      String string0 = localDateTime0.toString("(2eYAb6KyF3G~Oi0D(", locale0);
      assertEquals("(20000000000000007", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test60()  throws Throwable  {
      DateTimeZone.forID("+00:00");
      Locale locale0 = Locale.ITALIAN;
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.toString("k\"[xy<QOTGJ", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test61()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(23);
      DateTimeZone dateTimeZone1 = DateTimeZone.forID("+00:00:00.023");
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+00:00:00.023", dateTimeZone1.getID());
      
      Locale locale0 = Locale.ROOT;
      String string0 = localDateTime0.toString("(2eYAb6KyF3G~Oi0D(", locale0);
      assertEquals("(20000000000000007", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test62()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeZone.setProvider(uTCProvider0);
      Locale locale0 = Locale.ROOT;
      localDateTime0.toString("(2eYAb6KyF3G~Oi0D(", locale0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 07:57:00 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.EcmaError;
import com.google.javascript.rhino.head.EvaluatorException;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJavaConstructor;
import com.google.javascript.rhino.head.NativeWith;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.TopLevel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NativeArray_ESTest extends NativeArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      ScriptableObject.putConstProperty(nativeArray0, "0", "0");
      Integer[] integerArray0 = nativeArray0.getIndexIds();
      assertEquals(9, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      // Undeclared exception!
      try { 
        ScriptableObject.defineProperty((Scriptable) nativeArray0, "", (Object) "", 160);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 160
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Context context0 = Context.getCurrentContext();
      nativeArray0.defaultPut("+*", context0);
      Integer[] integerArray0 = nativeArray0.getIndexIds();
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[15];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeArray0.defaultPut(" of class ", nativeIterator_StopIteration0);
      Integer[] integerArray0 = nativeArray0.getIndexIds();
      assertEquals(15, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[16];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      ScriptableObject.defineProperty((Scriptable) nativeArray0, "0NX2E@UVyRiwmZ", (Object) nativeArray0, 4);
      assertEquals(16L, nativeArray0.jsGet_length());
      assertEquals(16L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(88L);
      // Undeclared exception!
      try { 
        nativeArray0.defineProperty("-Q;+2R`H@uAE2v3", (Object) "-Q;+2R`H@uAE2v3", 91);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 91
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[16];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.activatePrototypeMap(13);
      ScriptableObject.defineProperty((Scriptable) nativeArray0, "OpenJDK 64-Bit Server VM", (Object) nativeArray0, 4);
      assertFalse(nativeArray0.isEmpty());
      assertEquals(16L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      int int0 = nativeArray0.findPrototypeId("LIBRARY_SCOPE");
      assertEquals(0L, nativeArray0.getLength());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      int int0 = nativeArray0.findPrototypeId("||^nb1iPRR1h");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1173L);
      int int0 = nativeArray0.findPrototypeId("-Infinity");
      assertEquals(0, int0);
      assertEquals(1173L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      Context context0 = new Context();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes(130);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property 130 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Context context0 = new Context();
      Class<NativeJavaConstructor> class0 = NativeJavaConstructor.class;
      NativeArray nativeArray0 = new NativeArray(2147483647L);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      nativeArray0.defineOwnProperty(context0, class0, nativeContinuation0);
      assertEquals(2147483647L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[17];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.defaultPut("-1", "-1");
      Integer[] integerArray0 = nativeArray0.getIndexIds();
      assertEquals(17, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Context context0 = new Context();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      ScriptableObject.defineProperty((Scriptable) nativeArray0, "language version", (Object) context0, 0);
      nativeArray0.getIndexIds();
      assertEquals(0L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes((-481));
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property -481 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test15()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4096L);
      Class<NativeArray> class0 = NativeArray.class;
      // Undeclared exception!
      try { 
        nativeArray0.getDefaultValue(class0);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.NativeArray
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test16()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(9221120237041090560L);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes(48);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property 48 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4294967295L);
      Context context0 = Context.enter();
      nativeArray0.getOwnPropertyDescriptor(context0, context0);
      assertEquals(4294967295L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      int int0 = nativeArray0.getAttributes(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test19()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2L);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes(7);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property 7 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test20()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1L));
      // Undeclared exception!
      try { 
        Context.toNumber(nativeArray0);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      long long0 = NativeArray.getLengthProperty(context0, nativeArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test22()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Scriptable scriptable0 = Context.toObject((Object) "||^nb1iPRR1h", (Scriptable) nativeArray0);
      Context context0 = Context.getCurrentContext();
      long long0 = NativeArray.getLengthProperty(context0, scriptable0);
      assertEquals(12L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Context context0 = new Context();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      context0.initStandardObjects((ScriptableObject) nativeArray0);
      assertFalse(nativeArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1988L);
      ScriptableObject.getProperty((Scriptable) nativeArray0, (-166));
      assertEquals(1988L, nativeArray0.getLength());
      assertEquals(1988L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object[] objectArray0 = new Object[22];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeWith nativeWith0 = new NativeWith(nativeArray0, nativeArray0);
      nativeArray0.put("msg.undef.prop.read", (Scriptable) nativeWith0, (Object) nativeWith0);
      assertEquals(22L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Context context0 = new Context();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      Float float0 = new Float((-4615.9263F));
      // Undeclared exception!
      try { 
        ScriptableObject.defineProperty((Scriptable) nativeArray0, "4", (Object) float0, (-20));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -20
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Context context0 = Context.enter();
      NativeArray nativeArray0 = new NativeArray(150);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArray0, context0, 3006, 11);
      // Undeclared exception!
      try { 
        nativeArray0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=3006 MASTER=com.google.javascript.rhino.head.NativeArray@533a5264
         //
         verifyException("com.google.javascript.rhino.head.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object[] objectArray0 = new Object[16];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      nativeArray0.defineOwnProperty(context0, importerTopLevel0, importerTopLevel0);
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(16L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test29()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      nativeArray0.defineOwnProperty(context0, (Object) "error reporter", (ScriptableObject) importerTopLevel0, false);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Context context0 = new Context();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      Byte byte0 = new Byte((byte)40);
      ScriptableObject scriptableObject0 = nativeArray0.getOwnPropertyDescriptor(context0, byte0);
      assertNull(scriptableObject0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2809L);
      Context context0 = Context.getCurrentContext();
      nativeArray0.getOwnPropertyDescriptor(context0, context0);
      assertEquals(2809L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(9221120237041090560L);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      nativeArray0.has((-1534), (Scriptable) nativeContinuation0);
      assertEquals(9221120237041090560L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(65535L);
      nativeArray0.delete(534);
      assertEquals(65535L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test34()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      Object object0 = nativeArray0.get(1, (Scriptable) importerTopLevel0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test35()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      NativeArray nativeArray0 = new NativeArray(0L);
      NativeWith nativeWith0 = new NativeWith((Scriptable) null, nativeArray0);
      IdFunctionObject idFunctionObject0 = mock(IdFunctionObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(idFunctionObject0).hasTag(any());
      doReturn(13).when(idFunctionObject0).methodId();
      doReturn(nativeWith0).when(idFunctionObject0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      doReturn((Scriptable) null).when(idFunctionObject0).getParentScope();
      // Undeclared exception!
      try { 
        nativeArray0.execIdCall(idFunctionObject0, (Context) null, idFunctionObject0, (Scriptable) null, objectArray0);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // \"Array\" is not a constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.delete((-741));
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.delete(21);
      assertEquals(9L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(7);
      ScriptableObject.deleteProperty((Scriptable) nativeArray0, (-1982427535));
      assertEquals(7L, nativeArray0.getLength());
      assertEquals(7L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(0L);
      IdFunctionObject idFunctionObject0 = mock(IdFunctionObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(idFunctionObject0).hasTag(any());
      doReturn(0).when(idFunctionObject0).methodId();
      // Undeclared exception!
      try { 
        nativeArray0.execIdCall(idFunctionObject0, (Context) null, idFunctionObject0, (Scriptable) null, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1006L));
      nativeArray0.setDenseOnly(false);
      nativeArray0.delete(8);
      assertEquals((-1006L), nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483647L);
      BaseFunction baseFunction0 = new BaseFunction();
      nativeArray0.get(39, (Scriptable) baseFunction0);
      assertEquals(2147483647L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeArray nativeArray0 = new NativeArray(2612L);
      ScriptableObject.putProperty((Scriptable) nativeArray0, 380, (Object) importerTopLevel0);
      assertTrue(nativeArray0.isEmpty());
      assertEquals(2612L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeArray0, 2);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = nativeArray0.getIndexIds();
      assertEquals(7, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Context context0 = Context.enter();
      NativeArray nativeArray0 = new NativeArray(1503L);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArray0, "com.oogle.javascript.rhino.hed.ScriptRuntime$1", 4, 6);
      nativeArray0.put(100, (Scriptable) idFunctionObject0, (Object) context0);
      assertFalse(idFunctionObject0.isEmpty());
      assertEquals(1503L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      NativeArray nativeArray0 = new NativeArray(0L);
      IdFunctionObject idFunctionObject0 = mock(IdFunctionObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(idFunctionObject0).hasTag(any());
      doReturn(1788).when(idFunctionObject0).methodId();
      // Undeclared exception!
      try { 
        nativeArray0.execIdCall(idFunctionObject0, (Context) null, idFunctionObject0, (Scriptable) null, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1788
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2088L));
      nativeArray0.activatePrototypeMap(1056);
      // Undeclared exception!
      try { 
        nativeArray0.getIndexIds();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 24
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      ScriptableObject.putProperty((Scriptable) nativeArray0, 1, (Object) "||^nb1iPRR1h");
      assertEquals(2L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Context context0 = new Context();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      ScriptableObject.putProperty((Scriptable) nativeArray0, 7, (Object) null);
      assertFalse(nativeArray0.isEmpty());
      assertEquals(8L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test49()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      Scriptable scriptable0 = Context.toObject((Object) context0, (Scriptable) importerTopLevel0);
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(8232, scriptable0, false);
      nativeArray0.execIdCall(idFunctionObject0, context0, scriptable0, idFunctionObject0, context0.emptyArgs);
      assertEquals(1, idFunctionObject0.getLength());
      assertEquals(1, idFunctionObject0.getArity());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Object[] objectArray0 = new Object[15];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeArray nativeArray1 = new NativeArray(objectArray0);
      Integer[] integerArray0 = nativeArray0.getIndexIds();
      IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(17, nativeArray1, true);
      Context context0 = Context.enter();
      nativeArray1.execIdCall(idFunctionObject0, context0, idFunctionObject0, nativeArray0, integerArray0);
      assertEquals(15L, nativeArray1.getLength());
      assertEquals(15, integerArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test51()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      Context context0 = Context.getCurrentContext();
      NativeArray.getLengthProperty(context0, topLevel0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 06:33:47 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.CompilerEnvirons;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.IRFactory;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.Node;
import com.google.javascript.rhino.head.ast.ArrayLiteral;
import com.google.javascript.rhino.head.ast.AstRoot;
import com.google.javascript.rhino.head.ast.CatchClause;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.ForLoop;
import com.google.javascript.rhino.head.ast.FunctionNode;
import com.google.javascript.rhino.head.ast.GeneratorExpression;
import com.google.javascript.rhino.head.ast.IfStatement;
import com.google.javascript.rhino.head.ast.Jump;
import com.google.javascript.rhino.head.ast.KeywordLiteral;
import com.google.javascript.rhino.head.ast.Name;
import com.google.javascript.rhino.head.ast.ObjectLiteral;
import com.google.javascript.rhino.head.ast.ObjectProperty;
import com.google.javascript.rhino.head.ast.PropertyGet;
import com.google.javascript.rhino.head.ast.Scope;
import com.google.javascript.rhino.head.ast.SwitchCase;
import com.google.javascript.rhino.head.ast.SwitchStatement;
import com.google.javascript.rhino.head.ast.UnaryExpression;
import com.google.javascript.rhino.head.ast.VariableDeclaration;
import com.google.javascript.rhino.head.ast.WithStatement;
import com.google.javascript.rhino.head.ast.XmlElemRef;
import com.google.javascript.rhino.head.ast.XmlMemberGet;
import com.google.javascript.rhino.head.ast.XmlPropRef;
import com.google.javascript.rhino.head.ast.Yield;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class IRFactory_ESTest extends IRFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IRFactory iRFactory0 = new IRFactory();
      LinkedList<ObjectProperty> linkedList0 = new LinkedList<ObjectProperty>();
      ObjectLiteral objectLiteral0 = mock(ObjectLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(objectLiteral0).getElements();
      iRFactory0.decompileObjectLiteral(objectLiteral0);
      AstRoot astRoot0 = mock(AstRoot.class, new ViolatedAssumptionAnswer());
      doReturn(17).when(astRoot0).getType();
      doReturn((String) null).when(astRoot0).toString();
      doReturn(false).when(astRoot0).isInStrictMode();
      // Undeclared exception!
      try { 
        iRFactory0.transformTree(astRoot0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't transform: null
         //
         verifyException("com.google.javascript.rhino.head.IRFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IRFactory iRFactory0 = new IRFactory();
      ObjectLiteral objectLiteral0 = new ObjectLiteral(65536);
      iRFactory0.decompile(objectLiteral0);
      assertEquals((-1), objectLiteral0.getLineno());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IRFactory iRFactory0 = new IRFactory();
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(2);
      Name name0 = new Name((-1977), 4, " >>= ");
      PropertyGet propertyGet0 = new PropertyGet(119, 10, arrayLiteral0, name0);
      iRFactory0.decompilePropertyGet(propertyGet0);
      assertEquals((-1), propertyGet0.getLineno());
      assertEquals((-1), arrayLiteral0.getLineno());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = mock(CompilerEnvirons.class, new ViolatedAssumptionAnswer());
      ErrorReporter errorReporter0 = mock(ErrorReporter.class, new ViolatedAssumptionAnswer());
      IRFactory iRFactory0 = new IRFactory(compilerEnvirons0, errorReporter0);
      XmlElemRef xmlElemRef0 = new XmlElemRef(65536);
      SwitchCase switchCase0 = new SwitchCase();
      FunctionNode functionNode0 = mock(FunctionNode.class, new ViolatedAssumptionAnswer());
      doReturn((Name) null).when(functionNode0).getFunctionName();
      doReturn(xmlElemRef0, switchCase0).when(functionNode0).getMemberExprNode();
      // Undeclared exception!
      try { 
        iRFactory0.decompileFunctionHeader(functionNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't transform: 115
         //
         verifyException("com.google.javascript.rhino.head.IRFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Name name0 = new Name(1355, "-7}V}yorrZgAW$[");
      FunctionNode functionNode0 = new FunctionNode(1204, name0);
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      IRFactory iRFactory0 = new IRFactory(compilerEnvirons0);
      // Undeclared exception!
      try { 
        iRFactory0.transform(functionNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IRFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IRFactory iRFactory0 = new IRFactory();
      ObjectLiteral objectLiteral0 = new ObjectLiteral();
      Node node0 = iRFactory0.transform(objectLiteral0);
      assertEquals("66", node0.toString());
      
      boolean boolean0 = objectLiteral0.hasConsistentReturnUsage();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IRFactory iRFactory0 = new IRFactory();
      GeneratorExpression generatorExpression0 = new GeneratorExpression(65536, (-1415));
      iRFactory0.checkMutableReference(generatorExpression0);
      assertEquals(65536, generatorExpression0.getPosition());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IRFactory iRFactory0 = new IRFactory();
      ObjectLiteral objectLiteral0 = new ObjectLiteral(65536);
      iRFactory0.transform(objectLiteral0);
      WithStatement withStatement0 = new WithStatement();
      // Undeclared exception!
      try { 
        withStatement0.setString("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.head.ast.WithStatement cannot be cast to com.google.javascript.rhino.head.ast.Name
         //
         verifyException("com.google.javascript.rhino.head.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IfStatement ifStatement0 = new IfStatement(590);
      ifStatement0.setJsDocNode((Comment) null);
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      IRFactory iRFactory0 = new IRFactory(compilerEnvirons0);
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(135);
      UnaryExpression unaryExpression0 = new UnaryExpression(26, 16, arrayLiteral0);
      Node node0 = iRFactory0.transform(unaryExpression0);
      assertEquals("26", node0.toString());
      assertTrue(node0.hasChildren());
      assertEquals((-1), unaryExpression0.getLineno());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SwitchStatement switchStatement0 = new SwitchStatement();
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      IRFactory iRFactory0 = new IRFactory(compilerEnvirons0);
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(135);
      UnaryExpression unaryExpression0 = new UnaryExpression(26, 16, arrayLiteral0);
      iRFactory0.transform(unaryExpression0);
      // Undeclared exception!
      try { 
        iRFactory0.decompile(switchStatement0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION: unexpected token: SWITCH
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SwitchStatement switchStatement0 = new SwitchStatement();
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      IRFactory iRFactory0 = new IRFactory(compilerEnvirons0);
      XmlPropRef xmlPropRef0 = new XmlPropRef(1);
      XmlMemberGet xmlMemberGet0 = new XmlMemberGet(switchStatement0, xmlPropRef0);
      FunctionNode functionNode0 = new FunctionNode();
      functionNode0.addChildBefore(xmlMemberGet0, (Node) null);
      assertTrue(functionNode0.hasChildren());
      
      VariableDeclaration variableDeclaration0 = new VariableDeclaration();
      iRFactory0.transform(variableDeclaration0);
      assertEquals((-1), variableDeclaration0.getLineno());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      IRFactory iRFactory0 = new IRFactory(compilerEnvirons0);
      CatchClause catchClause0 = new CatchClause(143, 1105);
      ForLoop forLoop0 = new ForLoop(19, 1);
      catchClause0.addChildrenToFront(forLoop0);
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(135);
      UnaryExpression unaryExpression0 = new UnaryExpression(26, 16, arrayLiteral0);
      Node node0 = iRFactory0.transform(unaryExpression0);
      assertEquals((-1), node0.getLineno());
      assertEquals(26, node0.getType());
      assertEquals("26", unaryExpression0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IRFactory iRFactory0 = new IRFactory();
      ObjectLiteral objectLiteral0 = new ObjectLiteral();
      iRFactory0.markDestructuring(objectLiteral0);
      assertEquals(66, objectLiteral0.getType());
      
      iRFactory0.transform(objectLiteral0);
      boolean boolean0 = iRFactory0.isDestructuring(objectLiteral0);
      assertEquals((-1), objectLiteral0.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IRFactory iRFactory0 = new IRFactory();
      ObjectLiteral objectLiteral0 = new ObjectLiteral();
      Node node0 = iRFactory0.transform(objectLiteral0);
      assertEquals("66", node0.toString());
      
      iRFactory0.isDestructuring(objectLiteral0);
      assertEquals((-1), objectLiteral0.getLineno());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IRFactory iRFactory0 = new IRFactory();
      ObjectLiteral objectLiteral0 = new ObjectLiteral();
      Node node0 = iRFactory0.transform(objectLiteral0);
      Yield yield0 = new Yield(1929, 1, objectLiteral0);
      // Undeclared exception!
      try { 
        yield0.replaceChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IRFactory iRFactory0 = new IRFactory();
      XmlElemRef xmlElemRef0 = new XmlElemRef(65536);
      Jump jump0 = new Jump(2, xmlElemRef0, (-29));
      assertEquals((-29), jump0.getLineno());
      
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(2);
      Node node0 = iRFactory0.transform(arrayLiteral0);
      assertEquals(65, node0.getType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IRFactory iRFactory0 = new IRFactory();
      ObjectLiteral objectLiteral0 = new ObjectLiteral(65536);
      iRFactory0.transform(objectLiteral0);
      CatchClause catchClause0 = new CatchClause(18);
      Scope scope0 = new Scope(141, 1);
      // Undeclared exception!
      try { 
        catchClause0.setScope(scope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IRFactory iRFactory0 = new IRFactory();
      ObjectLiteral objectLiteral0 = new ObjectLiteral();
      iRFactory0.transform(objectLiteral0);
      SwitchCase switchCase0 = new SwitchCase(13, 11);
      // Undeclared exception!
      try { 
        switchCase0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SwitchStatement switchStatement0 = new SwitchStatement();
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      IRFactory iRFactory0 = new IRFactory(compilerEnvirons0);
      XmlPropRef xmlPropRef0 = new XmlPropRef(1);
      XmlMemberGet xmlMemberGet0 = new XmlMemberGet(switchStatement0, xmlPropRef0);
      VariableDeclaration variableDeclaration0 = new VariableDeclaration();
      iRFactory0.transform(variableDeclaration0);
      boolean boolean0 = iRFactory0.isDestructuring(xmlMemberGet0);
      assertFalse(boolean0);
      assertEquals((-1), xmlMemberGet0.getLineno());
      assertEquals(143, xmlMemberGet0.getType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IRFactory iRFactory0 = new IRFactory();
      ObjectLiteral objectLiteral0 = new ObjectLiteral();
      iRFactory0.transform(objectLiteral0);
      XmlElemRef xmlElemRef0 = new XmlElemRef(2, 4);
      // Undeclared exception!
      try { 
        xmlElemRef0.getExistingIntProp(10);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IRFactory iRFactory0 = new IRFactory();
      ObjectLiteral objectLiteral0 = new ObjectLiteral(65536);
      Node node0 = iRFactory0.transform(objectLiteral0);
      // Undeclared exception!
      try { 
        objectLiteral0.addChildBefore(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IRFactory iRFactory0 = new IRFactory();
      ObjectLiteral objectLiteral0 = new ObjectLiteral(65536);
      assertEquals(66, objectLiteral0.getType());
      
      Node node0 = iRFactory0.transform(objectLiteral0);
      assertEquals("66", node0.toString());
      
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(4);
      FunctionNode functionNode0 = new FunctionNode();
      functionNode0.addParam(arrayLiteral0);
      iRFactory0.decompileFunctionHeader(functionNode0);
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals((-1), functionNode0.getLineno());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IRFactory iRFactory0 = new IRFactory();
      SwitchStatement switchStatement0 = new SwitchStatement();
      KeywordLiteral keywordLiteral0 = new KeywordLiteral(12);
      switchStatement0.addChildToFront(keywordLiteral0);
      assertTrue(switchStatement0.hasChildren());
      
      AstRoot astRoot0 = new AstRoot();
      iRFactory0.transformTree(astRoot0);
      assertEquals(0, astRoot0.getEncodedSourceStart());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IRFactory iRFactory0 = new IRFactory();
      ObjectLiteral objectLiteral0 = new ObjectLiteral();
      iRFactory0.parse("", "", 25);
      CatchClause catchClause0 = new CatchClause(26, 65536);
      catchClause0.addChildrenToBack(iRFactory0.currentScope);
      assertTrue(catchClause0.hasChildren());
      
      Node node0 = iRFactory0.transform(objectLiteral0);
      assertEquals(66, node0.getType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ObjectLiteral objectLiteral0 = new ObjectLiteral(65536);
      // Undeclared exception!
      try { 
        objectLiteral0.labelId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SwitchStatement switchStatement0 = new SwitchStatement();
      switchStatement0.getJsDocNode();
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      IRFactory iRFactory0 = new IRFactory(compilerEnvirons0);
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(135);
      UnaryExpression unaryExpression0 = new UnaryExpression(26, 16, arrayLiteral0);
      Node node0 = iRFactory0.transform(unaryExpression0);
      assertEquals((-1), unaryExpression0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals(26, node0.getType());
      assertEquals(26, unaryExpression0.getType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlElemRef xmlElemRef0 = new XmlElemRef(65536);
      Jump jump0 = new Jump(2, xmlElemRef0, (-29));
      xmlElemRef0.addChild(jump0);
      xmlElemRef0.addChildToFront(jump0);
      assertTrue(xmlElemRef0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IRFactory iRFactory0 = new IRFactory();
      ObjectLiteral objectLiteral0 = new ObjectLiteral();
      assertEquals((-1), objectLiteral0.getLineno());
      
      iRFactory0.parse("", "", 25);
      CatchClause catchClause0 = new CatchClause(26, 65536);
      catchClause0.addChildrenToBack(iRFactory0.currentScope);
      catchClause0.addChildrenToFront(objectLiteral0);
      assertTrue(catchClause0.hasChildren());
      
      Node node0 = iRFactory0.transform(objectLiteral0);
      assertEquals(66, node0.getType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = mock(CompilerEnvirons.class, new ViolatedAssumptionAnswer());
      ErrorReporter errorReporter0 = mock(ErrorReporter.class, new ViolatedAssumptionAnswer());
      IRFactory iRFactory0 = new IRFactory(compilerEnvirons0, errorReporter0);
      NativeArray nativeArray0 = new NativeArray(65536);
      ObjectLiteral objectLiteral0 = mock(ObjectLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(nativeArray0).when(objectLiteral0).getElements();
      // Undeclared exception!
      try { 
        iRFactory0.decompileObjectLiteral(objectLiteral0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IRFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IRFactory iRFactory0 = new IRFactory();
      ObjectLiteral objectLiteral0 = new ObjectLiteral(65536);
      iRFactory0.decompileObjectLiteral(objectLiteral0);
      assertEquals(66, objectLiteral0.getType());
      
      Node node0 = iRFactory0.transform(objectLiteral0);
      assertEquals((-1), node0.getLineno());
      assertEquals(66, node0.getType());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test30()  throws Throwable  {
      Name name0 = new Name(590);
      FunctionNode functionNode0 = new FunctionNode(590, name0);
      name0.addChildAfter(functionNode0, functionNode0);
      CatchClause catchClause0 = new CatchClause();
      // Undeclared exception!
      catchClause0.addChildrenToFront(functionNode0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      IRFactory iRFactory0 = new IRFactory(compilerEnvirons0);
      // Undeclared exception!
      try { 
        iRFactory0.parse("$p4V5xB!7cT3L{52", "", (-1780));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IRFactory iRFactory0 = new IRFactory();
      Yield yield0 = new Yield(26);
      assertEquals(72, yield0.getType());
      
      Node node0 = iRFactory0.transform(yield0);
      assertEquals("72", node0.toString());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IRFactory iRFactory0 = new IRFactory();
      ObjectLiteral objectLiteral0 = new ObjectLiteral();
      Yield yield0 = new Yield(1929, 1, objectLiteral0);
      assertEquals(72, yield0.getType());
      
      Node node0 = iRFactory0.transform(yield0);
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertEquals(72, node0.getType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IRFactory iRFactory0 = new IRFactory();
      ObjectLiteral objectLiteral0 = new ObjectLiteral(65536);
      Node node0 = iRFactory0.transform(objectLiteral0);
      node0.next = (Node) objectLiteral0;
      // Undeclared exception!
      try { 
        objectLiteral0.addChildBefore(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // newChild had siblings in addChildBefore
         //
         verifyException("com.google.javascript.rhino.head.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IRFactory iRFactory0 = new IRFactory();
      XmlElemRef xmlElemRef0 = new XmlElemRef();
      // Undeclared exception!
      try { 
        iRFactory0.transform(xmlElemRef0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IRFactory", e);
      }
  }
}

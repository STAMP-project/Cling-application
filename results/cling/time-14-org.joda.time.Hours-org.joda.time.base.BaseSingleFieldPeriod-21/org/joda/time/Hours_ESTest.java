/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 23:17:36 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePartial;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Hours_ESTest extends Hours_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      int int0 = hours0.MIN_VALUE.compareTo((BaseSingleFieldPeriod) hours0);
      assertEquals(1, hours0.getHours());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Hours hours0 = Hours.hoursBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      int int0 = hours0.ZERO.compareTo((BaseSingleFieldPeriod) hours0);
      assertEquals(0, hours0.getHours());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Months months0 = Months.NINE;
      // Undeclared exception!
      try { 
        hours0.ZERO.compareTo((BaseSingleFieldPeriod) months0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Hours cannot be compared to class org.joda.time.Months
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Days days0 = Days.TWO;
      Hours hours0 = Hours.standardHoursIn(days0);
      Hours hours1 = hours0.negated();
      Hours hours2 = hours1.plus(hours0);
      Hours hours3 = Hours.MIN_VALUE;
      Hours hours4 = hours2.plus(hours3);
      assertEquals(0, hours2.getHours());
      assertEquals(Integer.MIN_VALUE, hours4.getHours());
      assertEquals(48, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Days days0 = Days.TWO;
      Hours hours0 = Hours.standardHoursIn(days0);
      Object object0 = new Object();
      boolean boolean0 = hours0.equals(object0);
      assertEquals(48, hours0.getHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Days days0 = Days.TWO;
      Hours hours0 = Hours.standardHoursIn(days0);
      Minutes minutes0 = days0.toStandardMinutes();
      Hours hours1 = minutes0.toStandardHours();
      boolean boolean0 = hours1.equals(hours0);
      assertEquals(48, hours0.getHours());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      boolean boolean0 = hours0.FOUR.equals(hours0);
      assertFalse(boolean0);
      assertEquals(6, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Hours hours0 = Hours.hoursBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      Weeks weeks0 = hours0.toStandardWeeks();
      boolean boolean0 = hours0.equals(weeks0);
      assertEquals(0, hours0.getHours());
      assertFalse(boolean0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      Hours hours1 = hours0.plus(7);
      assertEquals(7, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Hours hours0 = Hours.hours(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      Hours hours1 = hours0.plus(hours0);
      assertEquals(8, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      boolean boolean0 = hours0.SEVEN.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Hours hours0 = Hours.hoursBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      Months months0 = Months.TEN;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = hours0.get(durationFieldType0);
      assertEquals(0, int0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Weeks weeks0 = Weeks.MAX_VALUE;
      PeriodType periodType0 = weeks0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(mutableInterval0, periodType0);
      Hours hours0 = Hours.standardHoursIn(mutablePeriod0);
      assertEquals(0, hours0.getHours());
      
      Hours hours1 = Hours.hours(6);
      assertEquals(6, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      Days days0 = hours0.toStandardDays();
      Hours hours1 = days0.toStandardHours();
      Hours hours2 = Hours.standardHoursIn(hours1);
      assertEquals(0, hours2.getHours());
      
      Hours hours3 = hours0.THREE.minus(hours0);
      assertEquals(1, hours3.size());
      assertEquals(2, hours3.getHours());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      Hours hours1 = Hours.THREE;
      Hours hours2 = hours0.plus(hours1);
      assertSame(hours2, hours1);
      
      Hours hours3 = Hours.standardHoursIn(hours0);
      assertEquals(0, hours3.getHours());
      assertEquals(1, hours3.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      Hours hours1 = Hours.FOUR;
      Duration duration0 = hours1.toStandardDuration();
      DateMidnight dateMidnight0 = new DateMidnight((-42521587200000L));
      DateTime dateTime0 = dateMidnight0.toDateTimeISO();
      Interval interval0 = duration0.toIntervalTo(dateTime0);
      Hours hours2 = Hours.hoursIn(interval0);
      assertSame(hours2, hours1);
      assertEquals(14400000L, duration0.getMillis());
      
      Hours hours3 = Hours.standardHoursIn(hours0);
      assertEquals(0, hours3.getHours());
      assertEquals(1, hours3.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      Hours hours1 = Hours.standardHoursIn(hours0);
      Hours hours2 = hours0.THREE.minus(hours0);
      assertSame(hours0, hours1);
      assertEquals(2, hours2.getHours());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 0, 356, yearMonth0.YEAR);
      Hours hours0 = Hours.standardHoursIn(mutablePeriod0);
      assertEquals(1, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      Hours hours1 = Hours.standardHoursIn(hours0);
      assertEquals(0, hours1.getHours());
      
      Hours hours2 = Hours.hours(5);
      assertEquals(5, hours2.getHours());
      assertEquals(1, hours2.size());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 09:13:53 GMT 2019
 */

package org.mockito.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.PushbackInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.AnnotationVisitor;
import org.mockito.asm.AnnotationWriter;
import org.mockito.asm.ByteVector;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.FieldVisitor;
import org.mockito.asm.Item;
import org.mockito.asm.MethodWriter;
import org.mockito.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AnnotationWriter_ESTest extends AnnotationWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2083);
      classWriter0.invalidFrames = true;
      Short short0 = new Short((short)803);
      classWriter0.visitField(91, "n/@N>h?BN W0TRc", "short", "e+[=OcsKE", short0);
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      classWriter0.visitField(2885, "", "", "", "");
      classWriter0.invalidFrames = true;
      classWriter0.visitField(0, "Signature", "double", "", "");
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2083);
      classWriter0.newMethod("LocalVariableTable", "e+[=OcsKE", "LocalVariableTable", false);
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      classWriter0.newDouble(1);
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2083);
      classWriter0.newField("e+[=OcsKE", "e+[=OcsKE", "e+[=OcsKE");
      classWriter0.invalidFrames = true;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "e+[=OcsKE";
      stringArray0[1] = "";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 24, "^pY\"RzuH*ErDwah", "", "p'D*q\"vn[KH", stringArray0, false, false);
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      classWriter0.addUninitializedType("", 2);
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      classWriter0.newLong(2862);
      classWriter0.newLong(2862);
      classWriter0.visitAnnotation("-K&.9b!", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(85, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      classWriter0.visitField(2885, "", "", "@~/=a$Gc", "");
      classWriter0.visitField(0, "Signature", "double", "@~/=a$Gc", "");
      classWriter0.visitAnnotation("double", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(169, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2878);
      Boolean boolean0 = Boolean.FALSE;
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
      
      classWriter0.visitAnnotation("", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(74, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      int int0 = classWriter0.addType("c&Beni");
      assertEquals(1, int0);
      
      classWriter0.addUninitializedType("fa", 1);
      classWriter0.visitAnnotation("JAsj", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(73, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      int int0 = classWriter0.addType("c&Beni");
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("c&Beni");
      assertEquals(1, int1);
      
      classWriter0.visitAnnotation("JAsj", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(73, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      Short short0 = new Short((short)17);
      classWriter0.newConstItem(short0);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", true);
      classWriter0.toByteArray();
      annotationVisitor0.visit("", short0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      classWriter0.newLong(2862);
      classWriter0.newLong(2862);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        classWriter0.visitField(2862, "", "", "TE{K J<v;\"ssjz^Q|", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@560b8449
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      Item item0 = classWriter0.newMethodItem("", "", "", false);
      Short short0 = new Short((short)17);
      Item item1 = classWriter0.newConstItem(short0);
      assertNotSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      classWriter0.addType("c&Beni");
      classWriter0.addUninitializedType("fa", 1);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("JAsj", false);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 19);
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("_", pushbackInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.io.PushbackInputStream@39ccc91
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      classWriter0.addType("c&Beni");
      classWriter0.addType("c&Beni");
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("JAsj", false);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 19);
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("_", pushbackInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.io.PushbackInputStream@604f5138
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      classWriter0.newLong(2862);
      classWriter0.newLong(2862);
      classWriter0.visitAnnotation("", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(76, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      classWriter0.visitField(2885, "", "", "", "");
      classWriter0.visitField(0, "Signature", "double", "", "");
      classWriter0.visitAnnotation("Signature", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(155, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      classWriter0.newMethodItem("", "", "", false);
      classWriter0.visitAnnotation("", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(80, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2673));
      Boolean boolean0 = Boolean.TRUE;
      classWriter0.visitField((-2673), "", "", "", boolean0);
      classWriter0.visitAnnotation("", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(161, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      classWriter0.addType("c&Beni");
      int int0 = classWriter0.addUninitializedType("c&Beni", 1);
      assertEquals(2, int0);
      
      classWriter0.visitAnnotation("SourceFile", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(77, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      classWriter0.addType("c&Beni");
      int int0 = classWriter0.addType("c&Beni");
      assertEquals(1, int0);
      
      classWriter0.visitAnnotation("SourceFile", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(77, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", false);
      Short short0 = new Short((short)17);
      classWriter0.newConstItem(short0);
      AnnotationVisitor annotationVisitor1 = classWriter0.visitAnnotation("", true);
      classWriter0.toByteArray();
      annotationVisitor0.visit("", short0);
      assertNotSame(annotationVisitor0, annotationVisitor1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      classWriter0.newLong(2862);
      classWriter0.newLong(2862);
      classWriter0.visitSource("L=RdYf", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(92, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2878);
      Short short0 = new Short((short)35);
      int int0 = classWriter0.newConst(short0);
      assertEquals(1, int0);
      
      classWriter0.visitSource("bGu,).%", (String) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(60, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      classWriter0.visitField(2885, "", "", "", "");
      classWriter0.visitSource("", "");
      classWriter0.visitField(0, "Signature", "double", "", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(165, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2083);
      classWriter0.visitSource("jXK`6Ct%", "AEe@i'+xn gPcX$]5");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(103, byteArray0.length);
      
      int int0 = classWriter0.newMethod("I:z", "jXK`6Ct%", ";%}rCrG9cq?59x@Fpe,", false);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2878);
      Boolean boolean0 = Boolean.FALSE;
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
      
      classWriter0.visitSource("bGu,).%", "bGu,).%");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(96, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2878);
      classWriter0.newFloat(2878);
      classWriter0.visitSource("bGu,).%", "bGu,).%");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(96, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2817);
      int int0 = classWriter0.addType("c&Be\ni");
      assertEquals(1, int0);
      
      int int1 = classWriter0.addUninitializedType("c&Be\ni", 1);
      assertEquals(2, int1);
      
      classWriter0.visitSource("c&Be\ni", "+Kl");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(86, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-13));
      Boolean boolean0 = Boolean.TRUE;
      classWriter0.visitField((-13), "", "", "", boolean0);
      classWriter0.visitSource("uy`uStZ0bG_xU%xx?Uw", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(193, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      int int0 = classWriter0.addType("c&Beni");
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("c&Beni");
      assertEquals(1, int1);
      
      classWriter0.visitSource("*%*", "*%*");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(83, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2878);
      Boolean boolean0 = Boolean.FALSE;
      classWriter0.visitSource("bGu,).%", (String) null);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", false);
      classWriter0.toByteArray();
      annotationVisitor0.visit("bGu,).%", boolean0);
      annotationVisitor0.visit("bGu,).%", boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      Byte byte0 = new Byte((byte) (-20));
      classWriter0.visitField((-2357), "java/lang/String", "java/lang/String", "c&Beni", byte0);
      classWriter0.visitAnnotation("c&Beni", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(188, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      classWriter0.visitAnnotation("", true);
      Byte byte0 = new Byte((byte) (-10));
      int int0 = classWriter0.newConst(byte0);
      assertEquals(2, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(72, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      classWriter0.visitSource("t_+).VBm(D:k,QK", "");
      Byte byte0 = new Byte((byte) (-54));
      classWriter0.visitField(2190, "", "Um}@f-?", "", byte0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(162, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-13));
      Boolean boolean0 = Boolean.TRUE;
      classWriter0.visitField((-13), "", "", "", boolean0);
      classWriter0.visitAnnotation("", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(163, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2878);
      Boolean boolean0 = Boolean.FALSE;
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
      
      classWriter0.visitAnnotation("P@", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(74, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2083);
      Class<String> class0 = String.class;
      Type type0 = Type.getType(class0);
      classWriter0.visitField(65, "$O1c6gG#l", "$O1c6gG#l", "J76:VoNy", type0);
      classWriter0.visitAnnotation("e+[=Oc/KE", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(175, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2083);
      Class<String> class0 = String.class;
      Type type0 = Type.getType(class0);
      classWriter0.visitField(65, "$O1c6gG#l", "$O1c6gG#l", "J76:VoNy", type0);
      classWriter0.visitAnnotation("J76:VoNy", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(161, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      classWriter0.newMethodItem("", "", "", true);
      classWriter0.newMethod("", "", "", true);
      classWriter0.visitOuterClass("5/j.,u_j;A<", "%?jL)Xm`=", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      classWriter0.newMethodItem("", "", "", true);
      classWriter0.newMethod("", "", "", true);
      classWriter0.visitInnerClass("", (String) null, "k1@w7JQC><16", 224);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      classWriter0.newMethodItem("", "", "", true);
      classWriter0.newMethod("", "", "", true);
      classWriter0.visitSource((String) null, ")V");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      classWriter0.newMethodItem("", "", "", true);
      int int0 = classWriter0.newMethod("", "", "", true);
      assertEquals(4, int0);
      
      classWriter0.visitSource("<R;4b[raSjkE", "*PNPG\"C!wE");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(115, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2107);
      classWriter0.newFloat(0.0F);
      classWriter0.newFloat(0.0F);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2107);
      classWriter0.newFloat(0.0F);
      classWriter0.newFloat(0.0F);
      classWriter0.visitSource("B)>$tS#KS&>lF?", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      classWriter0.newDouble(1);
      classWriter0.newDouble(1.0);
      classWriter0.visitSource("RuntimeVisibleAnnotations", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      classWriter0.newDouble(1.0);
      classWriter0.visitInnerClass("", "Z?wZ&3+R", "", 3760);
      classWriter0.newDouble(1);
      classWriter0.visitInnerClass("", "", "", 2862);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2658));
      classWriter0.newDouble((-2658));
      classWriter0.newDouble((-2658));
      classWriter0.visitOuterClass("", "", "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      classWriter0.newDouble(1);
      classWriter0.newDouble(1.0);
      classWriter0.visitInnerClass("", (String) null, (String) null, 3169);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2658));
      classWriter0.newDouble((-2658));
      classWriter0.newDouble((-2658));
      classWriter0.visitSource((String) null, "8Fv9H'=RYZ[7^NAr");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-13));
      classWriter0.newDouble((-2658));
      classWriter0.newDouble((-2658));
      classWriter0.visitSource("uy`uStZ0bG_xU%xx?Uw", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(105, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-13));
      Type type0 = Type.LONG_TYPE;
      classWriter0.visitField(808, "_![P{i", "F ", "F ", type0);
      classWriter0.visitSource("VI(7u+vvC0a", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2083);
      Type type0 = Type.LONG_TYPE;
      classWriter0.visitField(3, "SVZFgVh/)4 t\"i:?T", "SVZFgVh/)4 t\"i:?T", "u%sTiUCv", type0);
      classWriter0.visitOuterClass("u%sTiUCv", "", "&t");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-13));
      Type type0 = Type.LONG_TYPE;
      classWriter0.visitField(808, "_![P{i", "F ", "F ", type0);
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, (-1516));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-13));
      Type type0 = Type.LONG_TYPE;
      classWriter0.visitField(808, "_![P{i", "F ", "F ", type0);
      classWriter0.visitInnerClass("LpdD<KiCiGwh:,x7", "VI(7u+vvC0a", "F ", (-1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2107);
      classWriter0.visitSource((String) null, "");
      Type type0 = Type.INT_TYPE;
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      classWriter0.visitSource("", "");
      Type type0 = Type.BYTE_TYPE;
      classWriter0.visitField(7, " 44--{xFDi '4;>G%", "RuntimeVisibleParameterAnnotations", "", type0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(194, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      classWriter0.newField("7)5Vu0YxF", "P", "P");
      classWriter0.visitOuterClass("P", "P", "P");
      classWriter0.visitInnerClass("P", "", "P", 5);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      classWriter0.newField("7)5Vu0YxF", "P", "P");
      classWriter0.visitOuterClass("P", "P", "P");
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("<init>", false);
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("StackMapTable", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      int int0 = classWriter0.newField("7)5Vu0YxF", "P", "P");
      assertEquals(5, int0);
      
      classWriter0.visitOuterClass("P", "P", "P");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}dh/S1:^~|3pRv";
      stringArray0[1] = "<init>";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-1779), "^pY\"RzuH*ErDwah", "<init>", "7)5Vu0YxF", stringArray0, false, false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(224, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      int int0 = classWriter0.newField("P", "P", "P");
      assertEquals(4, int0);
      
      classWriter0.visitOuterClass("P", "P", "P");
      classWriter0.visitAnnotation("_.awfMnU8}/l4=", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(126, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      int int0 = classWriter0.newField("7)5Vu0YxF", "P", "P");
      assertEquals(5, int0);
      
      classWriter0.visitOuterClass("P", "P", "P");
      classWriter0.visitAnnotation("<init>", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(135, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      int int0 = classWriter0.newField("P", "P", "P");
      assertEquals(4, int0);
      
      classWriter0.visitOuterClass("P", "P", "P");
      classWriter0.visitInnerClass((String) null, "jo$>BeN0,q)jP':Er", "jo$>BeN0,q)jP':Er", (short)46);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(123, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      int int0 = classWriter0.newField("P", "P", "P");
      assertEquals(4, int0);
      
      classWriter0.visitOuterClass("P", "P", "P");
      classWriter0.visitSource("java/lang/Object", "wHKlJ<(}O;VJXS]/");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(154, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2083);
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector0, 2083);
      classWriter0.visitOuterClass("m8", (String) null, "4ib-]A0S!\"e");
      // Undeclared exception!
      try { 
        annotationWriter0.visit("", byteVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.ByteVector@1d61beb2
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("<init>", false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}dh/S1:^~|3pRv";
      stringArray0[1] = "<init>";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-1779), "^pY\"RzuH*ErDwah", "<init>", "7)5Vu0YxF", stringArray0, false, false);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("StackMapTable", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2878);
      classWriter0.visitInnerClass("bGu,).%", (String) null, "", (-1));
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, (ByteVector) null, (ByteVector) null, 31);
      classWriter0.visitInnerClass("", "0riGL`m}pKw", "RuntimeVisibleAnnotations", (-1));
      // Undeclared exception!
      try { 
        annotationWriter0.visit("RuntimeInvisibleParameterAnnotations", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2083);
      Type type0 = Type.CHAR_TYPE;
      classWriter0.visitField(10, "_![P{i", "_![P{i", "_![P{i", type0);
      classWriter0.visitOuterClass("(sX=x%Amyxv4$<", "Dp}u'.Hu!*iT-0#J~vl", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      ClassWriter classWriter0 = new ClassWriter(1740);
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector0, 2);
      classWriter0.visitInnerClass("SourceDebugExtension", "SourceDebugExtension", "SourceDebugExtension", (-182));
      // Undeclared exception!
      try { 
        annotationWriter0.visit("SourceDebugExtension", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.ClassWriter@789a6f69
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-13));
      classWriter0.visitSource("uy`uStZ0bG_xU%xx?Uw", "");
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", false);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("%Y;hmOw6z7%TyeBY", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2878);
      classWriter0.newFloat(2878);
      classWriter0.visitAnnotation("", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(72, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      classWriter0.newMethodItem("", "", "", true);
      classWriter0.newMethod("", "", "", true);
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      classWriter0.visitAnnotation("", false);
      classWriter0.newMethodItem("", "", "", false);
      int int0 = classWriter0.newMethod("", "", "", false);
      assertEquals(4, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(82, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      classWriter0.newMethodItem("", "", "", true);
      int int0 = classWriter0.newMethod("", "", "", true);
      assertEquals(4, int0);
      
      classWriter0.visitField(1, "", "", "", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(95, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      classWriter0.newMethodItem("", "", "", true);
      int int0 = classWriter0.newMethod("", "", "", true);
      assertEquals(4, int0);
      
      classWriter0.visitAnnotation("value ", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(89, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      classWriter0.newMethodItem("", "", "", true);
      int int0 = classWriter0.newMethod("", "", "", true);
      assertEquals(4, int0);
      
      classWriter0.visitInnerClass("", "", (String) null, 4);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(71, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2107);
      classWriter0.newFloat(0.0F);
      classWriter0.newFloat(0.0F);
      classWriter0.visitAnnotation("RuntimeVisibleAnnotations", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(99, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2107);
      classWriter0.newFloat(0.0F);
      classWriter0.newFloat(0.0F);
      classWriter0.visitField(65535, "RuntimeVisibleAnnotations", "", "TE{K J<v;\"ssjz^Q|", "RuntimeVisibleAnnotations");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(153, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-13));
      classWriter0.newDouble((-2658));
      classWriter0.newDouble((-2658));
      classWriter0.visitAnnotation("", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(78, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-13));
      Boolean boolean0 = Boolean.TRUE;
      classWriter0.visitField((-13), "", "", "", boolean0);
      classWriter0.newDouble((-2658));
      classWriter0.newDouble((-2658));
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(130, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2673));
      classWriter0.newDouble((-2673));
      classWriter0.newDouble((-2673));
      classWriter0.visitAnnotation("", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(76, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      Item item0 = classWriter0.newDouble(1.0);
      classWriter0.visitInnerClass("", "Z?wZ&3+R", "", 3760);
      Item item1 = classWriter0.newDouble(1);
      assertSame(item1, item0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(84, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-13));
      Type type0 = Type.LONG_TYPE;
      classWriter0.visitField(808, "_![P{i", "F ", "F ", type0);
      classWriter0.visitInnerClass((String) null, "}", (String) null, (-1516));
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(135, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2878);
      classWriter0.visitInnerClass("bGu,).%", (String) null, (String) null, 2878);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(68, byteArray0.length);
      
      int int0 = classWriter0.addType("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2878);
      classWriter0.visitInnerClass("bGu,).%", "bGu,).%", (String) null, 2878);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", false);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("bGu,).%", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      classWriter0.newMethodItem("", "", "", true);
      classWriter0.visitAnnotation("", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(82, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2083);
      Type type0 = Type.LONG_TYPE;
      classWriter0.visitField(3, "SVZFgVh/)4 t\"i:?T", "SVZFgVh/)4 t\"i:?T", "u%sTiUCv", type0);
      classWriter0.visitAnnotation("", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(159, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2083);
      Type type0 = Type.LONG_TYPE;
      classWriter0.visitField(3, "SVZFgVh/)4 t\"i:?T", "SVZFgVh/)4 t\"i:?T", "u%sTiUCv", type0);
      classWriter0.visitAnnotation("u%sTiUCv", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(154, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2862);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", true);
      classWriter0.toByteArray();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@36dd75bc
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2878);
      Character character0 = new Character(',');
      int int0 = classWriter0.newConst(character0);
      assertEquals(1, int0);
      
      classWriter0.visitAnnotation("StackMap", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(82, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2878);
      classWriter0.visitAnnotation("", true);
      classWriter0.toByteArray();
      Character character0 = new Character('j');
      FieldVisitor fieldVisitor0 = classWriter0.visitField(21, "", "", "void", character0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      classWriter0.visitSource("", "");
      Character character0 = Character.valueOf('9');
      classWriter0.visitField(8, "java/lang/Throwable", ".x<|^xW[", "Code", character0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(175, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2872);
      classWriter0.visitAnnotation("GgGR", false);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      classWriter0.visitField(0, "", "double", "@~/=a$Gc", "");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2878);
      classWriter0.visitSource("bGu,).%", (String) null);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(33554432, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      classWriter0.visitAnnotation("`GnMtwKX0-[EcN.NLIl", false);
      classWriter0.toByteArray();
      String string0 = classWriter0.getCommonSuperClass("org.mockito.asm.Label", "org.mockito.asm.Label");
      assertEquals("org.mockito.asm.Label", string0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      ByteVector byteVector0 = new ByteVector();
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("`GnMtwKX0-[EcN.NLIl", false);
      classWriter0.getCommonSuperClass("org.mockito.asm.Label", "org.mockito.asm.Label");
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("`GnMtwKX0-[EcN.NLIl", byteVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.ByteVector@54fd89b2
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      classWriter0.visitAnnotation("`GnMtwKX0-[EcN.NLIl", true);
      classWriter0.toByteArray();
      String string0 = classWriter0.getCommonSuperClass("org.mockito.asm.Label", "org.mockito.asm.Label");
      assertEquals("org.mockito.asm.Label", string0);
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2885);
      classWriter0.visitSource("", "");
      classWriter0.toByteArray();
      String string0 = classWriter0.getCommonSuperClass("org.mockito.asm.Label", "org.mockito.asm.Label");
      assertEquals("org.mockito.asm.Label", string0);
  }
}

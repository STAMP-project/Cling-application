/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 07:16:34 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.BoundFunction;
import com.google.javascript.rhino.head.Callable;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.EcmaError;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeJavaObject;
import com.google.javascript.rhino.head.NativeJavaPackage;
import com.google.javascript.rhino.head.NativeJavaTopPackage;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.Ref;
import com.google.javascript.rhino.head.ScriptRuntime;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.Synchronizer;
import com.google.javascript.rhino.head.TopLevel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ScriptRuntime_ESTest extends ScriptRuntime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ScriptRuntime.getIndexObject("");
      Callable callable0 = mock(Callable.class, new ViolatedAssumptionAnswer());
      BoundFunction boundFunction0 = new BoundFunction(context0, importerTopLevel0, callable0, importerTopLevel0, (Object[]) null);
      // Undeclared exception!
      try { 
        ScriptRuntime.toUint16(boundFunction0);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test01()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        ScriptRuntime.add((Object) topLevel0, (Object) null, context0);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      ScriptRuntime.getObjectPropNoWarn(nativeArray0, "", context0);
      ScriptRuntime.setConst(nativeArray0, context0, context0, "error reporter");
      assertFalse(nativeArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(context0).hasFeature(anyInt());
      Object object0 = ScriptRuntime.getObjectProp((Object) baseFunction0, "", context0);
      assertFalse(baseFunction0.isSealed());
      
      Context context1 = mock(Context.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ScriptRuntime.deleteObjectElem(baseFunction0, object0, context1);
      assertTrue(baseFunction0.isEmpty());
      
      ClassLoader classLoader0 = mock(ClassLoader.class, new ViolatedAssumptionAnswer());
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage(true, "language version", classLoader0);
      Byte byte0 = new Byte((byte)0);
      Context context2 = mock(Context.class, new ViolatedAssumptionAnswer());
      Object object1 = ScriptRuntime.delete((Object) nativeJavaPackage0, (Object) byte0, context2);
      assertTrue(object1.equals((Object)boolean0));
      assertTrue(nativeJavaPackage0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassLoader classLoader0 = mock(ClassLoader.class, new ViolatedAssumptionAnswer());
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage(true, "language version", classLoader0);
      Byte byte0 = new Byte((byte)0);
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      ScriptRuntime.delete((Object) nativeJavaPackage0, (Object) byte0, context0);
      Context context1 = mock(Context.class, new ViolatedAssumptionAnswer());
      doReturn((ScriptableObject) null).when(context1).initStandardObjects(any(com.google.javascript.rhino.head.ScriptableObject.class) , anyBoolean());
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context1, true);
      assertTrue(importerTopLevel0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassLoader classLoader0 = mock(ClassLoader.class, new ViolatedAssumptionAnswer());
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      ScriptRuntime.setObjectProp((Object) nativeJavaTopPackage0, "", (Object) "Mock for Context, hashCode: 1498256293", context0);
      assertTrue(nativeJavaTopPackage0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Class<NativeJavaObject> class0 = NativeJavaObject.class;
      Object object0 = ScriptRuntime.toPrimitive((Object) integer0, (Class<?>) class0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Ref ref0 = mock(Ref.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(ref0).get(any(com.google.javascript.rhino.head.Context.class));
      doReturn((Object) null).when(ref0).set(any(com.google.javascript.rhino.head.Context.class) , any());
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      Object object0 = ScriptRuntime.refIncrDecr(ref0, context0, 10);
      assertNotNull(object0);
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = ScriptRuntime.isJSWhitespaceOrLineTerminator(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(scriptable0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      Object[] objectArray0 = ScriptRuntime.getArrayElements(scriptable0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(scriptable0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      doReturn((Object) null).when(scriptable0).getDefaultValue(nullable(java.lang.Class.class));
      doReturn((Scriptable) null, (Scriptable) null).when(scriptable0).getParentScope();
      Synchronizer synchronizer0 = new Synchronizer(scriptable0);
      ScriptRuntime.toUint32((Object) synchronizer0);
      Float float0 = new Float((double) 0L);
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ScriptRuntime.getPropFunctionAndThis((Object) float0, "[native code, arity=", context0, (Scriptable) synchronizer0);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptRuntime.enumInit((Object) context0, context0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = ScriptRuntime.enumInit((Object) null, (Context) null, 58);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassLoader classLoader0 = mock(ClassLoader.class, new ViolatedAssumptionAnswer());
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      CharSequence charSequence0 = ScriptRuntime.add((CharSequence) "language version", (Object) nativeJavaTopPackage0);
      assertEquals(30, charSequence0.length());
      assertTrue(nativeJavaTopPackage0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(context0).hasFeature(anyInt());
      Object object0 = ScriptRuntime.getObjectProp((Object) baseFunction0, "", context0);
      Context context1 = mock(Context.class, new ViolatedAssumptionAnswer());
      ScriptRuntime.deleteObjectElem(baseFunction0, object0, context1);
      Context context2 = mock(Context.class, new ViolatedAssumptionAnswer());
      doReturn((ScriptableObject) null).when(context2).initStandardObjects(any(com.google.javascript.rhino.head.ScriptableObject.class) , anyBoolean());
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context2, true);
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      Context context0 = Context.enter((Context) null);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      Ref ref0 = mock(Ref.class, new ViolatedAssumptionAnswer());
      doReturn(nativeObject0).when(ref0).get(any(com.google.javascript.rhino.head.Context.class));
      // Undeclared exception!
      try { 
        ScriptRuntime.refIncrDecr(ref0, context0, 10);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test16()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Float float0 = new Float((double) 13);
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(scriptable0).get(anyInt() , any(com.google.javascript.rhino.head.Scriptable.class));
      doReturn(float0).when(scriptable0).getDefaultValue(nullable(java.lang.Class.class));
      ScriptRuntime.getObjectElem(scriptable0, (Object) scriptable0, context0);
  }
}

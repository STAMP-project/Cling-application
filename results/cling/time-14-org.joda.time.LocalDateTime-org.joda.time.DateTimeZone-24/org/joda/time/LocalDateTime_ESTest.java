/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 02:08:14 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Period;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LocalDateTime_ESTest extends LocalDateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(282);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(10);
      assertNotSame(localDateTime1, localDateTime0);
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) 10, true);
      assertEquals("+282:00", dateTimeZone0.toString());
      assertEquals((-1015199990L), long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(282);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      long long0 = dateTimeZone0.convertLocalToUTC((long) 10, true);
      assertEquals((-1015199990L), long0);
      
      localDateTime0.plusWeeks(2147483644);
      assertEquals("+282:00", dateTimeZone0.getID());
      assertEquals("+282:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test002()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(282);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      long long0 = dateTimeZone1.convertLocalToUTC((long) 1, false);
      assertEquals((-3599999L), long0);
      
      localDateTime0.plusSeconds(239);
      assertEquals("+282:00", dateTimeZone0.toString());
      assertEquals("+282:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test003()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Instant instant0 = new Instant();
      DateTime dateTime0 = instant0.toDateTime();
      DateMidnight dateMidnight0 = dateTime0.toDateMidnight();
      Calendar calendar0 = dateMidnight0.toCalendar((Locale) null);
      LocalDateTime.fromCalendarFields(calendar0);
      assertEquals(1566094067262L, dateTime0.getMillis());
      
      long long0 = dateTimeZone0.convertLocalToUTC(1654L, true);
      assertEquals((-3598346L), long0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      LocalDateTime.now((Chronology) copticChronology0);
      long long0 = dateTimeZone0.convertLocalToUTC((long) 8, true);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals((-3599992L), long0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test005()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(263);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfYear();
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfFloorCopy();
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      long long0 = dateTimeZone1.convertLocalToUTC((long) 1, false);
      assertEquals((-3599999L), long0);
      
      int int0 = localDateTime0.compareTo((ReadablePartial) localDateTime1);
      assertEquals(1, int0);
      assertEquals("+263:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-2829L));
      // Undeclared exception!
      try { 
        LocalDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) islamicChronology0);
      LocalDateTime localDateTime1 = new LocalDateTime((-2829L));
      LocalDateTime localDateTime2 = localDateTime0.plusMinutes((-1062));
      assertNotSame(localDateTime2, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-426));
      LocalDateTime localDateTime1 = new LocalDateTime(0L, dateTimeZone0);
      assertEquals("-426:00", dateTimeZone0.getID());
      
      LocalDateTime localDateTime2 = localDateTime0.plusWeeks((-426));
      assertNotSame(localDateTime2, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalDateTime localDateTime0 = new LocalDateTime((-40L), dateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance();
      boolean boolean0 = localDateTime0.equals(gJChronology0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = new DateMidnight(2037L, dateTimeZone0);
      dateMidnight0.withZoneRetainFields(dateTimeZone0);
      // Undeclared exception!
      try { 
        LocalDateTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-3587L));
      Weeks weeks0 = Weeks.ONE;
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      boolean boolean0 = localDateTime0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateTimeZone.forID("UTC");
      LocalDateTime localDateTime0 = new LocalDateTime((long) (-9));
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      localDateTime0.plusSeconds(0);
      DateMidnight dateMidnight0 = new DateMidnight(846L, dateTimeZone0);
      // Undeclared exception!
      try { 
        dateMidnight0.withField(dateTimeFieldType0, 60);
        fail("Expecting exception: IllegalFieldValueException");
      
      } catch(IllegalFieldValueException e) {
         //
         // Value 60 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.plusSeconds(3);
      LocalDateTime localDateTime1 = new LocalDateTime((long) (-1), dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-40L));
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((long) 1000);
      dateMidnight0.withMonthOfYear(1);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((-2125344640), 1000, 1102);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(gregorianCalendar0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      localDateTime0.plusHours(0);
      LocalDateTime localDateTime1 = new LocalDateTime((long) (-835), dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(282);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime((-2651L), (Chronology) zonedChronology0);
      localDateTime0.plusHours((-182));
      assertEquals("+282:00", dateTimeZone0.getID());
      assertEquals("+282:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-40L));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-40L));
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test021()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1, 1, 1, 1, 1, 1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalDateTime localDateTime1 = new LocalDateTime((-40L), dateTimeZone0);
      Date date0 = localDateTime0.toDate();
      assertEquals("Sat Jan 01 01:01:01 CET 1", date0.toString());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(282);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime((-2651L), (Chronology) zonedChronology0);
      LocalDateTime localDateTime1 = LocalDateTime.now((Chronology) zonedChronology0);
      boolean boolean0 = localDateTime1.isBefore(localDateTime0);
      assertFalse(boolean0);
      assertEquals("+282:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(282);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime((-2651L), (Chronology) zonedChronology0);
      LocalDateTime localDateTime1 = localDateTime0.plusDays(0);
      assertSame(localDateTime1, localDateTime0);
      assertEquals("+282:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) islamicChronology0);
      LocalDateTime localDateTime1 = new LocalDateTime((-2829L));
      LocalDateTime localDateTime2 = localDateTime0.plusDays(43);
      assertNotSame(localDateTime2, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      LocalDateTime.now(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      LocalDate localDate0 = new LocalDate(dateTimeZone1);
      // Undeclared exception!
      try { 
        localDateTime0.compareTo((ReadablePartial) localDate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(1);
      assertNotSame(localDateTime1, localDateTime0);
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("+01:01", dateTimeZone1.toString());
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.getID());
      
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(1);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test029()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      assertEquals("+01:01", dateTimeZone0.toString());
      
      Locale locale0 = Locale.GERMAN;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      LocalDateTime.fromCalendarFields(gregorianCalendar0);
      assertEquals("java.util.GregorianCalendar[time=1566094033143,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Amsterdam\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=180,lastRule=java.util.SimpleTimeZone[id=Europe/Amsterdam,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2019,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=3,DAY_OF_MONTH=18,DAY_OF_YEAR=230,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=7,SECOND=13,MILLISECOND=143,ZONE_OFFSET=3600000,DST_OFFSET=3600000]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone1.toString());
      
      LocalDateTime localDateTime1 = localDateTime0.plusHours(1);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test031()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      assertEquals("+01:01", dateTimeZone0.toString());
      
      int[] intArray0 = localDateTime0.getValues();
      assertEquals(4, localDateTime0.size());
      assertArrayEquals(new int[] {1735, 12, 12, 14832350}, intArray0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test032()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      assertEquals("+01:01", dateTimeZone0.getID());
      
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Date date0 = localDateTime0.toDate();
      assertEquals("Sun Aug 18 04:06:53 CEST 2019", date0.toString());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeField dateTimeField0 = localDateTime0.getField(1);
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusDays(2615625);
      assertNotSame(localDateTime0, localDateTime1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      Locale locale0 = Locale.ENGLISH;
      dateTimeZone0.getName((-3958L), locale0);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      // Undeclared exception!
      try { 
        localDateTime0.compareTo((ReadablePartial) localDate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      localDateTime0.plusWeeks((-1995077039));
      Locale locale0 = Locale.ENGLISH;
      String string0 = dateTimeZone0.getName(365L, locale0);
      assertEquals("+01:00", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(2237L).when(dateTimeZone0).getMillisKeepLocal(any(org.joda.time.DateTimeZone.class) , anyLong());
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds(603);
      int int0 = localDateTime1.compareTo((ReadablePartial) localDateTime0);
      assertEquals((-1), int0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT-");
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      Locale locale0 = Locale.ENGLISH;
      String string0 = dateTimeZone1.getName((-279L), locale0);
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("+00:00", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      localDateTime0.isSupported(durationFieldType0);
      Locale locale0 = Locale.ENGLISH;
      String string0 = dateTimeZone0.getName(365L, locale0);
      assertNotNull(string0);
      assertEquals("+01:00", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(gregorianCalendar0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      fixedDateTimeZone0.getName((long) 58, locale0);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      // Undeclared exception!
      try { 
        localDateTime0.getField(36, (Chronology) strictChronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 36
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      Locale locale0 = Locale.FRANCE;
      String string0 = dateTimeZone0.getName((long) 19, locale0);
      assertEquals("+00:00", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      localDateTime0.plusSeconds(481);
      Locale locale0 = Locale.ENGLISH;
      String string0 = dateTimeZone0.getName(365L, locale0);
      assertNotNull(string0);
      assertEquals("+01:00", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test042()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Instant instant0 = new Instant();
      DateTime dateTime0 = instant0.toDateTime();
      DateMidnight dateMidnight0 = dateTime0.toDateMidnight();
      Calendar calendar0 = dateMidnight0.toCalendar((Locale) null);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
      localDateTime0.plusHours(0);
      assertEquals(1566093990540L, dateTime0.getMillis());
      
      String string0 = dateTimeZone0.getName(4294967295L, (Locale) null);
      assertEquals("+01:00", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      Locale locale0 = Locale.ENGLISH;
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
      String string0 = dateTimeZone1.getName(2040L, locale0);
      assertNotNull(string0);
      
      localDateTime0.plusHours(86400000);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      fixedDateTimeZone0.getName((long) (-1), locale0);
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test045()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(282);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = Locale.GERMANY;
      String string0 = fixedDateTimeZone0.getName(3600000L, locale0);
      assertEquals("+00:00", string0);
      
      Date date0 = localDateTime0.toDate();
      assertEquals("Thu Aug 29 20:06:14 CEST 2019", date0.toString());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(481);
      boolean boolean0 = localDateTime1.isBefore(localDateTime0);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(boolean0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      Locale locale0 = Locale.ENGLISH;
      String string0 = dateTimeZone0.getName(365L, locale0);
      assertEquals("+01:00", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(282);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.plusDays(282);
      assertEquals("+282:00", dateTimeZone0.toString());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = Locale.GERMANY;
      String string0 = fixedDateTimeZone0.getName(3600000L, locale0);
      assertEquals("+00:00", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test048()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      long long0 = copticChronology0.set(localDateTime0, 1);
      assertEquals(10518602773503L, long0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusMonths(60);
      int int0 = localDateTime0.compareTo((ReadablePartial) localDateTime1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test049()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      long long0 = copticChronology0.set(localDateTime0, 481);
      assertEquals(1566093973271L, long0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      localDateTime0.isSupported(durationFieldType0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) islamicChronology0);
      islamicChronology0.set(localDateTime0, (-2829L));
      // Undeclared exception!
      try { 
        localDateTime0.getField((-1062));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -1062
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test051()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone.forOffsetHours(1);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      long long0 = copticChronology0.set(localDateTime0, 481);
      assertEquals(1566093972727L, long0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test052()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(0);
      assertSame(localDateTime1, localDateTime0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) islamicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(59);
      assertEquals((-40716087572000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test053()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DateMidnight dateMidnight0 = dateTime0.toDateMidnight();
      Calendar calendar0 = dateMidnight0.toCalendar((Locale) null);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
      localDateTime0.plusHours(1);
      dateMidnight0.withWeekyear(1661);
      assertEquals(1566093961704L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test054()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      long long0 = copticChronology0.set(localDateTime0, 1);
      assertEquals(10518602743345L, long0);
      
      Date date0 = localDateTime0.toDate();
      assertEquals("Sun Aug 18 04:05:43 CEST 2019", date0.toString());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test055()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      long long0 = copticChronology0.set(localDateTime0, 1);
      assertEquals(10518602743026L, long0);
      
      localDateTime0.plusDays(181);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime.now(dateTimeZone0);
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-1469));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -1469
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test057()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalDateTime.now((Chronology) copticChronology0);
      Locale locale0 = Locale.GERMAN;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      LocalDateTime.fromCalendarFields(gregorianCalendar0);
      assertEquals("java.util.GregorianCalendar[time=1566093935998,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Amsterdam\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=180,lastRule=java.util.SimpleTimeZone[id=Europe/Amsterdam,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2019,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=3,DAY_OF_MONTH=18,DAY_OF_YEAR=230,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=5,SECOND=35,MILLISECOND=998,ZONE_OFFSET=3600000,DST_OFFSET=3600000]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone.forOffsetMillis(0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone1.getID());
      
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(0);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      DateTimeZone.forOffsetMillis(0);
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(36);
      assertNotSame(localDateTime0, localDateTime1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone1.getID());
      
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(59);
      int int0 = localDateTime0.compareTo((ReadablePartial) localDateTime1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeZone.forOffsetMillis(0);
      // Undeclared exception!
      try { 
        LocalDateTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      DateTimeZone.forOffsetMillis(0);
      boolean boolean0 = localDateTime0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone1.toString());
      
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(0);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(2123080424);
      assertNotSame(localDateTime1, localDateTime0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTimeZone.forOffsetMillis(0);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("+ H@sDzu eI\"T6%k+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+ H@sDzu eI\"T6%k+\" is malformed at \" H@sDzu eI\"T6%k+\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test068()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      DateTimeZone.forOffsetMillis(0);
      Date date0 = localDateTime0.toDate();
      assertEquals("Sun Aug 18 04:05:17 CEST 2019", date0.toString());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone1.toString());
      
      LocalDateTime localDateTime1 = localDateTime0.withFields(localDateTime0);
      assertEquals(4, localDateTime1.size());
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      DateTimeZone.forOffsetMillis(0);
      LocalDateTime localDateTime1 = localDateTime0.plusDays(0);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      DateTimeZone.forOffsetMillis(0);
      LocalDateTime localDateTime1 = localDateTime0.plusDays(1219);
      assertNotSame(localDateTime0, localDateTime1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimeZone.forOffsetHours(282);
      // Undeclared exception!
      try { 
        LocalDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone.forOffsetHoursMinutes(1, 1);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(0);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(41);
      assertEquals("+41:00", dateTimeZone0.toString());
      
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(0);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test075()  throws Throwable  {
      DateTimeZone.forOffsetHours(1);
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertEquals("+01:01", dateTimeZone0.getID());
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      Object object0 = new Object();
      boolean boolean0 = localDateTime0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(59);
      int int0 = localDateTime1.compareTo((ReadablePartial) localDateTime0);
      assertEquals((-1), int0);
      
      LocalDateTime localDateTime2 = new LocalDateTime((long) (-1), dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTimeZone.forOffsetMillis((-586));
      // Undeclared exception!
      try { 
        LocalDateTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone.forOffsetHoursMinutes(1, 1);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      boolean boolean0 = localDateTime0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeZone.forOffsetHoursMinutes(1, 1);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("org.joda.time.field.ScaledDurationField");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'org.joda.time.field.ScaledDurationField' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeZone.forOffsetHours(282);
      try { 
        DateTimeZone.forOffsetHoursMinutes(1311, (-204));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -204
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateTimeZone.forID("UTC");
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(25734375);
      assertEquals("+07:08:54.375", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.plusSeconds(0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours((-106));
      assertEquals("-106:00", dateTimeZone1.getID());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimeZone.forOffsetHours(292);
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateTimeZone.forOffsetMillis(3609);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("+Values array must be the same length as the types array");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+Values array must be the same le...\" is malformed at \"Values array must be the same le...\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeZone.forOffsetHours(277);
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      copticChronology0.set(localDateTime0, 142);
      // Undeclared exception!
      try { 
        LocalDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test088()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((-40L));
      copticChronology0.set(localDateTime0, 7481088L);
      LocalTime localTime0 = LocalTime.now();
      // Undeclared exception!
      try { 
        localDateTime0.isAfter(localTime0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test089()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      localDateTime0.plusMinutes(0);
      DateMidnight dateMidnight0 = new DateMidnight((-1480L), (Chronology) copticChronology0);
      DateTime dateTime0 = localDateTime0.toDateTime(dateMidnight0);
      assertEquals(10518602712510L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test090()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTime dateTime0 = instant0.toDateTime();
      DateTime dateTime1 = dateTime0.withYear(41);
      assertEquals((-60853493659688L), dateTime1.getMillis());
      
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(0);
      assertSame(localDateTime0, localDateTime1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      copticChronology0.set(localDateTime0, 481);
      // Undeclared exception!
      try { 
        localDateTime0.plusWeeks((-1995077039));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test092()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      long long0 = copticChronology0.set(localDateTime0, 481);
      assertEquals(1566093911751L, long0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      Locale locale0 = Locale.ENGLISH;
      String string0 = dateTimeZone0.getName(365L, locale0);
      assertEquals("+01:00", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test093()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      long long0 = copticChronology0.set(localDateTime0, 142);
      assertEquals(10518602711417L, long0);
      
      boolean boolean0 = localDateTime0.equals(dateTimeZone0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test094()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(1);
      boolean boolean0 = localDateTime1.isBefore(localDateTime0);
      assertTrue(boolean0);
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) 0, true);
      assertEquals((-3600000L), long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      copticChronology0.set(localDateTime0, 1);
      // Undeclared exception!
      try { 
        LocalDateTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test096()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      long long0 = copticChronology0.set(localDateTime0, 1);
      assertEquals(10518602710672L, long0);
      
      LocalDateTime localDateTime1 = LocalDateTime.now((Chronology) copticChronology0);
      boolean boolean0 = localDateTime1.isBefore(localDateTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTime dateTime0 = instant0.toDateTime();
      dateTime0.withYear(41);
      LocalDateTime localDateTime0 = new LocalDateTime();
      boolean boolean0 = localDateTime0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(282);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      long long0 = dateTimeZone0.convertLocalToUTC((long) 10, true);
      assertEquals((-1015199990L), long0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      localDateTime0.isSupported(durationFieldType0);
      assertEquals("+282:00", dateTimeZone0.getID());
      assertEquals("+282:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(282);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      dateTimeZone0.convertLocalToUTC((long) 282, false);
      // Undeclared exception!
      try { 
        localDateTime0.getField(2275);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 2275
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      copticChronology0.set(localDateTime0, 1);
      try { 
        DateTimeZone.forOffsetHoursMinutes(14, (-1995077039));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -1995077039
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test101()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone.forID("UTC");
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      long long0 = copticChronology0.set(localDateTime0, 1);
      assertEquals(4, localDateTime0.size());
      assertEquals(8952678000001L, long0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test102()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(0);
      assertSame(localDateTime1, localDateTime0);
      
      long long0 = dateTimeZone0.convertLocalToUTC(1671L, true);
      assertEquals((-3598329L), long0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test103()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      long long0 = copticChronology0.set(localDateTime0, 481);
      assertEquals(1566093909020L, long0);
      
      localDateTime0.plusSeconds(481);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTime dateTime0 = instant0.toDateTime();
      dateTime0.withYear(41);
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test105()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DateMidnight dateMidnight0 = dateTime0.toDateMidnight();
      Calendar calendar0 = dateMidnight0.toCalendar((Locale) null);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
      localDateTime0.plusHours(0);
      dateMidnight0.withWeekyear(1661);
      assertEquals(1566093897755L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(282);
      long long0 = dateTimeZone0.convertLocalToUTC((long) 282, false);
      assertEquals((-1015199718L), long0);
      assertEquals("+282:00", dateTimeZone0.toString());
      
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusHours(776);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test107()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      long long0 = copticChronology0.set(localDateTime0, 1);
      assertEquals(10518602697107L, long0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-586));
      DateTimeZone.setDefault(dateTimeZone1);
      assertEquals("-00:00:00.586", dateTimeZone1.getID());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      copticChronology0.set(localDateTime0, 142);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("T.')'=E7bb DUgW&A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'T.')'=E7bb DUgW&A' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTime dateTime0 = instant0.toDateTime();
      dateTime0.withYear(41);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("+Values array must be the same length as the types array");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+Values array must be the same le...\" is malformed at \"Values array must be the same le...\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test110()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(282);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      dateTimeZone0.convertLocalToUTC((long) 10, true);
      Date date0 = localDateTime0.toDate();
      assertEquals("Thu Aug 29 20:04:37 CEST 2019", date0.toString());
      assertEquals("+282:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test111()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(481);
      localDateTime1.isBefore(localDateTime0);
      long long0 = copticChronology0.set(localDateTime0, 481);
      assertEquals(1566093877343L, long0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(282);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      long long0 = dateTimeZone0.convertLocalToUTC((long) 10, true);
      assertEquals((-1015199990L), long0);
      
      LocalDateTime localDateTime1 = localDateTime0.withFields(localDateTime0);
      assertEquals(4, localDateTime1.size());
      assertEquals("+282:00", dateTimeZone0.toString());
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(282);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusDays(282);
      assertNotSame(localDateTime1, localDateTime0);
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) 10, true);
      assertEquals((-1015199990L), long0);
      assertEquals("+282:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      LocalDateTime.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("-hZ npq$/K.{H<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-hZ npq$/K.{H<\" is malformed at \"hZ npq$/K.{H<\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test115()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(282);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      LocalDateTime localDateTime1 = new LocalDateTime((-2651L), (Chronology) zonedChronology0);
      Date date0 = localDateTime1.toDate();
      assertEquals("Mon Jan 12 17:59:57 CET 1970", date0.toString());
      assertEquals(4, localDateTime1.size());
      assertEquals("+282:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Hours hours0 = Hours.EIGHT;
      Days days0 = Days.standardDaysIn(hours0);
      islamicChronology0.get((ReadablePeriod) days0, (long) (-1062), 729L);
      // Undeclared exception!
      try { 
        LocalDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      localDateTime0.toDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      // Undeclared exception!
      try { 
        localDateTime0.compareTo((ReadablePartial) localDate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test118()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566093862816L, dateTime0.getMillis());
      
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(0);
      assertSame(localDateTime0, localDateTime1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test119()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(282);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.plusMinutes(10);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1567101862461L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test120()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.minusDays((-1469));
      assertEquals(1693000800000L, dateMidnight1.getMillis());
      
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(0);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test121()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566093861919L, dateTime0.getMillis());
      
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(1);
      assertNotSame(localDateTime0, localDateTime1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) copticChronology0);
      dateMidnight0.minusYears(1);
      boolean boolean0 = localDateTime0.equals(dateTimeZone0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test123()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusDays(1);
      localDateTime0.isBefore(localDateTime1);
      DateTime dateTime0 = localDateTime0.toDateTime(dateTimeZone0);
      assertEquals(1566093861299L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.toDateTime();
      // Undeclared exception!
      try { 
        LocalDateTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test125()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566093860667L, dateTime0.getMillis());
      
      LocalDateTime localDateTime1 = LocalDateTime.now((Chronology) copticChronology0);
      boolean boolean0 = localDateTime1.isBefore(localDateTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test126()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566093860445L, dateTime0.getMillis());
      
      boolean boolean0 = localDateTime0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test127()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(282);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      localDateTime0.isSupported(durationFieldType0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1567101860137L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) islamicChronology0);
      localDateTime0.toDateTime();
      // Undeclared exception!
      try { 
        localDateTime0.getField((-1062));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -1062
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test129()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone.forID("UTC");
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566093859504L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      dateMidnight0.minusDays((-1469));
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-1469));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -1469
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test131()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.plusSeconds(0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566093858797L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test132()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(14);
      DateTime dateTime0 = localDateTime1.toDateTime();
      assertEquals(1566093872508L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.toDateTime();
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test134()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTime dateTime0 = instant0.toDateTime();
      DateMidnight dateMidnight0 = dateTime0.toDateMidnight();
      dateTime0.plusMonths(1);
      Calendar calendar0 = dateMidnight0.toCalendar((Locale) null);
      LocalDateTime.fromCalendarFields(calendar0);
      assertEquals(1566093850200L, dateTime0.getMillis());
      assertEquals(1566093850200L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test135()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(282);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1567101849504L, dateTime0.getMillis());
      
      localDateTime0.plusHours(0);
      assertEquals("+282:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test136()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566093849156L, dateTime0.getMillis());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-586));
      DateTimeZone.setDefault(dateTimeZone1);
      assertEquals("-00:00:00.586", dateTimeZone1.getID());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) copticChronology0);
      dateMidnight0.minusYears(1);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'S' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.toDateTime();
      // Undeclared exception!
      try { 
        DateTimeZone.forID("+Values array must be the same length as the types array");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+Values array must be the same le...\" is malformed at \"Values array must be the same le...\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.toDateTime();
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test140()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566093846818L, dateTime0.getMillis());
      
      LocalDateTime localDateTime1 = localDateTime0.plusHours(1);
      assertNotSame(localDateTime0, localDateTime1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test141()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(282);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1567101834788L, dateTime0.getMillis());
      
      localDateTime0.toDate();
      assertEquals("+282:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(263);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes(263);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Period period0 = new Period(583, 1, copticChronology0);
      int int0 = localDateTime0.compareTo((ReadablePartial) localDateTime1);
      assertEquals(1, int0);
      assertEquals("+263:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test143()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(282);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.withFields(localDateTime0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1567101833502L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test144()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(282);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.plusDays(0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1567101832681L, dateTime0.getMillis());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 21:50:12 GMT 2019
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.UnionType;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class PrototypeObjectType_ESTest extends PrototypeObjectType_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test00()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = mock(JSTypeRegistry.class, new ViolatedAssumptionAnswer());
      ObjectType objectType0 = mock(ObjectType.class, new ViolatedAssumptionAnswer());
      doReturn((JSType) null).when(objectType0).resolve(any(com.google.javascript.rhino.ErrorReporter.class) , nullable(com.google.javascript.rhino.jstype.StaticScope.class));
      doReturn((String) null).when(objectType0).toString();
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "6a_{ij", objectType0);
      assertFalse(prototypeObjectType0.isResolved());
      
      ErrorReporter errorReporter0 = mock(ErrorReporter.class, new ViolatedAssumptionAnswer());
      prototypeObjectType0.resolveInternal(errorReporter0, prototypeObjectType0);
      prototypeObjectType0.getPropertiesCount();
      assertTrue(prototypeObjectType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = mock(JSTypeRegistry.class, new ViolatedAssumptionAnswer());
      ObjectType objectType0 = mock(ObjectType.class, new ViolatedAssumptionAnswer());
      doReturn("Named type with empty name component").when(objectType0).toString();
      doReturn(298).when(objectType0).getPropertiesCount();
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, (String) null, objectType0);
      int int0 = prototypeObjectType0.getPropertiesCount();
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertEquals(298, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      RecordType recordType1 = (RecordType)JSType.getLeastSupertype((JSType) recordType0, (JSType) recordType0);
      assertFalse(recordType1.isAllType());
      assertFalse(recordType1.isNoType());
      assertFalse(recordType1.isNativeObjectType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType1.hasReferenceName());
      assertFalse(recordType1.isNoResolvedType());
      assertFalse(recordType1.isResolved());
      assertFalse(recordType1.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      assertNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Node node0 = Node.newString(0, "|%u.-.zO9");
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)numberType0.autoboxesTo();
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "/),'eZo", node0, instanceObjectType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      FunctionType functionType0 = enumElementType0.getConstructor();
      UnionType unionType0 = (UnionType)JSType.getLeastSupertype((JSType) functionType0, (JSType) instanceObjectType0);
      unionType0.getTypesUnderInequality(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertTrue(instanceObjectType0.isNativeObjectType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) null);
      assertNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType(", ...", ", ...", (-1432), (-1));
      JSType.toMaybeParameterizedType(jSType0);
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Node node0 = Node.newString(0, "|%u.-.zO9");
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "/),'eZo", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      FunctionType functionType0 = enumElementType0.getConstructor();
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, enumElementType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, (JSType) functionType0, (JSType) enumElementType0, (JSType) functionType0, (JSType) functionType1, (JSType) enumType0, (JSType) numberType0, (JSType) functionType1, (JSType) enumType0, jSType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      jSTypeRegistry0.createDefaultObjectUnion(unionType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(functionType1.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      AllType allType0 = new AllType(jSTypeRegistry0);
      JSType.toMaybeTemplateType((JSType) allType0);
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      functionType0.setPropertyJSDocInfo("fC~sr'M8c/zWYPQr", jSDocInfo0);
      assertFalse(jSDocInfo0.isExterns());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Node node0 = Node.newString(0, "|%u.-.zO9");
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)numberType0.autoboxesTo();
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "/),'eZo", node0, instanceObjectType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      FunctionType functionType0 = enumElementType0.getConstructor();
      boolean boolean0 = functionType0.defineProperty("toString", enumType0, false, node0);
      boolean boolean1 = functionType0.defineProperty("toString", numberType0, false, node0);
      assertTrue(functionType0.isFunctionType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(boolean1 == boolean0);
      assertTrue(functionType0.isNominalConstructor());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = mock(JSTypeRegistry.class, new ViolatedAssumptionAnswer());
      ObjectType objectType0 = mock(ObjectType.class, new ViolatedAssumptionAnswer());
      doReturn("Named type with empty name component", "Not declared as a type name").when(objectType0).toString();
      doReturn(true).when(objectType0).isNativeObjectType();
      doReturn(true).when(objectType0).isUnknownType();
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, (String) null, objectType0);
      JSTypeRegistry jSTypeRegistry1 = mock(JSTypeRegistry.class, new ViolatedAssumptionAnswer());
      PrototypeObjectType prototypeObjectType1 = new PrototypeObjectType(jSTypeRegistry1, "Not declared as a type name", prototypeObjectType0, false);
      boolean boolean0 = prototypeObjectType0.isSubtype(prototypeObjectType1);
      assertTrue(prototypeObjectType1.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, false);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "Gh#`-zQp?m]}8{HlTI", instanceObjectType0);
      boolean boolean0 = prototypeObjectType0.isSubtype(noObjectType0);
      assertTrue(boolean0);
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isResolved());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNominalType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      String string0 = recordType0.toStringHelper(false);
      assertNotNull(string0);
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNativeObjectType());
      assertEquals("{}", string0);
      assertFalse(recordType0.hasReferenceName());
  }
}

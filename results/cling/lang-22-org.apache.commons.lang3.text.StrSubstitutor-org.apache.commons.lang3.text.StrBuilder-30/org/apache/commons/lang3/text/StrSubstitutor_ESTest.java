/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 22:01:39 GMT 2019
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import org.apache.commons.lang3.text.StrBuilder;
import org.apache.commons.lang3.text.StrLookup;
import org.apache.commons.lang3.text.StrMatcher;
import org.apache.commons.lang3.text.StrSubstitutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class StrSubstitutor_ESTest extends StrSubstitutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      strBuilder0.lastIndexOf((StrMatcher) null, 123);
      Reader reader0 = strBuilder0.asReader();
      Properties properties0 = new Properties();
      properties0.load(reader0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      String string0 = StrSubstitutor.replace((Object) bufferedInputStream0, properties0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Properties properties0 = new Properties();
      StrBuilder strBuilder0 = new StrBuilder("{}");
      Reader reader0 = strBuilder0.asReader();
      properties0.load(reader0);
      StrSubstitutor.replace((Object) properties0, properties0);
      // Undeclared exception!
      try { 
        strBuilder0.replace((-4847), 10, "{{}=}");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -4847
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test002()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("#G\")9aw_aZ'sJoB");
      int int0 = strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, (int) '$');
      assertEquals((-1), int0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      
      Properties properties0 = new Properties();
      StringReader stringReader0 = new StringReader("HP-UX");
      properties0.load((Reader) stringReader0);
      String string0 = StrSubstitutor.replace((Object) strBuilder0, properties0);
      assertEquals("#G\")9aw_aZ'sJoB", string0);
      assertEquals(47, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Properties properties0 = new Properties();
      StringReader stringReader0 = new StringReader("Variable prefix matcher must not be null!");
      properties0.load((Reader) stringReader0);
      StrSubstitutor.replace((Object) "Variable prefix matcher must not be null!", properties0);
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.replace(243, 1126, "length:");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Properties properties0 = new Properties();
      StrBuilder strBuilder0 = new StrBuilder("{}");
      Reader reader0 = strBuilder0.asReader();
      properties0.load(reader0);
      StrSubstitutor.replace((Object) properties0, properties0);
      // Undeclared exception!
      try { 
        strBuilder0.insert(10, 0.0F);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 10
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Locale.FilteringMode>) hashMap0);
      boolean boolean0 = strSubstitutor0.replaceIn((StrBuilder) null);
      assertFalse(boolean0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      
      Properties properties0 = new Properties();
      StrBuilder strBuilder0 = new StrBuilder(11);
      Reader reader0 = strBuilder0.asReader();
      properties0.load(reader0);
      assertEquals(11, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'v');
      boolean boolean0 = strSubstitutor0.replaceIn(strBuilder0);
      assertEquals('v', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
      
      Reader reader0 = strBuilder0.asReader();
      Properties properties0 = new Properties();
      properties0.load(reader0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer("suffixmatchr");
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
      
      Properties properties0 = new Properties();
      StrBuilder strBuilder0 = new StrBuilder(0);
      Reader reader0 = strBuilder0.asReader();
      properties0.load(reader0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      boolean boolean0 = strSubstitutor0.replaceIn(strBuilder0);
      assertFalse(boolean0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      
      strBuilder0.lastIndexOf((StrMatcher) null, 123);
      assertEquals(55, strBuilder0.capacity());
      assertEquals(23, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'x');
      boolean boolean0 = strSubstitutor0.replaceIn(strBuilder0);
      assertEquals('x', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
      
      int int0 = strBuilder0.lastIndexOf(strMatcher0, (-271));
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder((-810));
      strSubstitutor0.replaceIn((StrBuilder) null);
      // Undeclared exception!
      try { 
        strBuilder0.replace((-1516), (-810), "&7.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1516
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'v');
      strSubstitutor0.replaceIn(strBuilder0);
      // Undeclared exception!
      try { 
        strBuilder0.replace((-665), (-665), (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -665
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer(43);
      StrBuilder strBuilder0 = new StrBuilder();
      strSubstitutor0.replaceIn(stringBuffer0);
      // Undeclared exception!
      try { 
        strBuilder0.replace((-770), (-770), "file.separator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -770
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.remove((Object) strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      
      StringWriter stringWriter0 = new StringWriter(3864);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer0);
      assertFalse(boolean0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("java.lang.Object@6a73f435");
      int int0 = strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_SUFFIX, 15);
      assertEquals(25, strBuilder0.length());
      assertEquals(57, strBuilder0.capacity());
      assertEquals((-1), int0);
      
      boolean boolean0 = strSubstitutor0.replaceIn((StrBuilder) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      boolean boolean0 = strSubstitutor0.replaceIn(strBuilder0);
      assertFalse(boolean0);
      
      strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, 123);
      assertEquals(55, strBuilder0.capacity());
      assertEquals(23, strBuilder0.length());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("java.lang.Object@4b0a083c");
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((StrLookup<?>) null, strMatcher0, strMatcher0, 'O');
      strSubstitutor0.replaceIn((StrBuilder) null);
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.replace(1536, 34, "I9");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      strSubstitutor0.replaceIn(strBuilder0);
      strBuilder0.replace(0, 123, "${");
      assertEquals(2, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      strBuilder0.lastIndexOf((StrMatcher) null, 123);
      strBuilder0.appendSeparator("startIdex must be valid", 33);
      assertEquals(46, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(11);
      int int0 = strBuilder0.lastIndexOf((StrMatcher) null, 408);
      assertEquals((-1), int0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("d$", (-2486));
      assertEquals(11, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(11);
      strBuilder0.lastIndexOf((StrMatcher) null, 408);
      strBuilder0.appendSeparator('#', 3);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      StrBuilder strBuilder1 = strBuilder0.deleteAll("o|Eu;t6");
      strBuilder1.lastIndexOf((StrMatcher) null, 123);
      assertEquals(55, strBuilder1.capacity());
      assertEquals(23, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      StrBuilder strBuilder1 = strBuilder0.appendSeparator((String) null, 21);
      StrLookup<Integer> strLookup0 = StrLookup.mapLookup((Map<String, Integer>) hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      int int0 = strBuilder1.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, (-1381));
      assertEquals((-1), int0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-146));
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      HashMap<String, InputStream> hashMap0 = new HashMap<String, InputStream>();
      StrLookup<InputStream> strLookup0 = StrLookup.mapLookup((Map<String, InputStream>) hashMap0);
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher_TrimMatcher0, 'v');
      strBuilder0.appendSeparator("-*{rNEe2", 3391);
      int int0 = strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_SUFFIX, (-271));
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      strBuilder0.appendSeparator(": ", (-271));
      int int0 = strBuilder0.lastIndexOf(strMatcher0, (-271));
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be vRld");
      int int0 = strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, 0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('$', 0);
      assertEquals(54, strBuilder1.capacity());
      assertEquals(22, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'RGS_1 Y2k");
      strBuilder0.appendSeparator((String) null, 1820);
      // Undeclared exception!
      try { 
        strBuilder0.replace((-785), 3082, "dyLm]|QI`");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -785
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder('$');
      strBuilder0.appendSeparator("i[9&XgDE/e2RsD", (int) '$');
      // Undeclared exception!
      try { 
        strBuilder0.delete((-682), 2262);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -682
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendSeparator("{;oE>Vx", (-59));
      // Undeclared exception!
      try { 
        strBuilder0.replace((-174), (-174), "tcP8eDSZ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -174
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('$', 812);
      // Undeclared exception!
      try { 
        strBuilder1.delete((-432), '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -432
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendSeparator('n', (-588));
      // Undeclared exception!
      try { 
        strBuilder0.delete((-588), 1963);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -588
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.remove((Object) strBuilder0);
      StrBuilder strBuilder1 = strBuilder0.appendSeparator((String) null, 10);
      assertEquals(55, strBuilder1.capacity());
      assertEquals(23, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.remove((Object) strBuilder0);
      strBuilder0.appendSeparator("j;WZJL", 9);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(11);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.remove((Object) strBuilder0);
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("{}", (-1932735290));
      assertEquals(0, strBuilder1.length());
      assertEquals(11, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("1jxNB9,Yb8");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.remove((Object) strBuilder0);
      strBuilder0.appendSeparator('$', 6);
      assertEquals(11, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Properties properties0 = new Properties();
      StrBuilder strBuilder0 = new StrBuilder("{}");
      Reader reader0 = strBuilder0.asReader();
      properties0.load(reader0);
      StrBuilder strBuilder1 = strBuilder0.appendSeparator((String) null, 977);
      assertEquals(34, strBuilder1.capacity());
      assertEquals(2, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Properties properties0 = new Properties();
      StrBuilder strBuilder0 = new StrBuilder(0);
      Reader reader0 = strBuilder0.asReader();
      properties0.load(reader0);
      strBuilder0.appendSeparator("{}", 155);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Properties properties0 = new Properties();
      StrBuilder strBuilder0 = new StrBuilder(0);
      Reader reader0 = strBuilder0.asReader();
      properties0.load(reader0);
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("", (-810));
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Properties properties0 = new Properties();
      StrBuilder strBuilder0 = new StrBuilder();
      Reader reader0 = strBuilder0.asReader();
      properties0.load(reader0);
      strBuilder0.appendSeparator('$', (int) '$');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Properties properties0 = new Properties();
      StrBuilder strBuilder0 = new StrBuilder();
      Reader reader0 = strBuilder0.asReader();
      properties0.load(reader0);
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(':', 0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      strBuilder0.deleteAll("o|Eu;t6");
      Reader reader0 = strBuilder0.asReader();
      Properties properties0 = new Properties();
      properties0.load(reader0);
      assertEquals(55, strBuilder0.capacity());
      assertEquals(23, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendSeparator('!', (-1298));
      // Undeclared exception!
      try { 
        strBuilder0.delete(24, 1502);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      strBuilder0.deleteAll("Index: ");
      // Undeclared exception!
      try { 
        strBuilder0.replace(1, (-1049), "Variable prefix must not be null!");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("?r`o-JE");
      StrBuilder strBuilder1 = strBuilder0.appendSeparator((String) null, 32);
      assertEquals(32, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = new StrBuilder("${");
      int int0 = strBuilder2.lastIndexOf(strMatcher0, 32);
      assertEquals(34, strBuilder2.capacity());
      assertEquals((-1), int0);
      assertEquals(2, strBuilder2.length());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("#G\")9aw_aZ'sJoB");
      strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, (int) '$');
      strBuilder0.appendSeparator("y$SrUNFyM-?eh<Qj5=", 15);
      assertEquals(33, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("#G\")9aw_aZ'sJoB");
      int int0 = strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, (int) '$');
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertEquals((-1), int0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("#G\")9aw_aZ'sJoB", (-1));
      assertEquals(15, strBuilder1.length());
      assertEquals(47, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder(", Length: 0");
      strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, 0);
      strBuilder0.appendSeparator('$', 115);
      assertEquals(12, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      strBuilder0.deleteAll("->");
      int int0 = strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_SUFFIX, 11);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertEquals(23, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'RGS_1 Y2k");
      strBuilder0.appendSeparator((String) null, 1820);
      // Undeclared exception!
      try { 
        strBuilder0.replace(123, 3082, "dyLm]|QI`");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("4", 48);
      // Undeclared exception!
      try { 
        strBuilder1.delete(2065, 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendSeparator("", (-4638));
      // Undeclared exception!
      try { 
        strBuilder0.delete('$', 908);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('$', 2418);
      // Undeclared exception!
      try { 
        strBuilder1.replace(10, 115, "cx");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      strBuilder0.replace(0, 749, "startIdex must be valid");
      StrBuilder strBuilder1 = strBuilder0.deleteAll("->");
      assertEquals(55, strBuilder1.capacity());
      assertEquals(23, strBuilder0.length());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test053()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      strBuilder0.appendSeparator((String) null, 16);
      Object object0 = new Object();
      strBuilder0.insert(0, object0);
      assertEquals(48, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendSeparator(": ", (-271));
      // Undeclared exception!
      try { 
        strBuilder0.insert(256, (char[]) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 256
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendSeparator('$', 2418);
      strBuilder0.insert(1, true);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrSubstitutor");
      strBuilder0.insert(31, 'k');
      strBuilder0.appendSeparator('a', (-1));
      assertEquals(45, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      strBuilder0.deleteAll("Index: ");
      strBuilder0.insert(1, true);
      assertEquals(27, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(11);
      StrBuilder strBuilder1 = strBuilder0.setNullText("YGS}");
      assertEquals(11, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrSubstitutor@347eab23");
      strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, 175);
      // Undeclared exception!
      try { 
        strSubstitutor0.setVariableSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null!
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = (StrMatcher.StringMatcher)StrSubstitutor.DEFAULT_PREFIX;
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.setLength(9);
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_StringMatcher0, 19);
      assertEquals(9, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = new Object();
      StrSubstitutor.replace(object0, (Properties) null);
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.replace((-441), 32, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -441
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object object0 = new Object();
      StrSubstitutor.replace(object0, (Properties) null);
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrSubstitutor");
      strBuilder0.insert(31, 'k');
      assertEquals(45, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("java.lang.Object@53f0c7a0");
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((StrLookup<?>) null, strMatcher0, strMatcher0, 'L');
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrSubstitutor");
      Properties properties0 = new Properties();
      StrSubstitutor.replace((Object) strSubstitutor0, properties0);
      strBuilder0.insert(31, 'k');
      assertEquals(45, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object object0 = new Object();
      StrSubstitutor.replace(object0, (Properties) null);
      StrBuilder strBuilder0 = new StrBuilder();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.remove((Object) strBuilder0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.remove((Object) strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      
      Properties properties0 = new Properties();
      String string0 = StrSubstitutor.replace((Object) properties0, properties0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test066()  throws Throwable  {
      Properties properties0 = new Properties();
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadLeft((int) '$', 10, '$');
      Reader reader0 = strBuilder0.asReader();
      properties0.load(reader0);
      // Undeclared exception!
      try { 
        StrSubstitutor.replace((Object) null, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = new Object();
      StrSubstitutor.replace(object0, (Properties) null);
      StrBuilder strBuilder0 = new StrBuilder(" s");
      // Undeclared exception!
      try { 
        strBuilder0.replace(44, 44, " s");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      StrLookup<Integer> strLookup0 = StrLookup.mapLookup((Map<String, Integer>) null);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '!');
      strSubstitutor0.replace("Variable prefix matcher must not be null!");
      assertEquals('!', strSubstitutor0.getEscapeChar());
      
      Reader reader0 = strBuilder0.asReader();
      Properties properties0 = new Properties();
      properties0.load(reader0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(11);
      strBuilder0.lastIndexOf((StrMatcher) null, 408);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("Variable prefix matcher must not be null!", 1, (-2471));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder(123);
      strBuilder0.lastIndexOf((StrMatcher) null, 55);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("", (-1), 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      strBuilder0.lastIndexOf((StrMatcher) null, 123);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("startIdex must be valid", 123, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(11);
      strBuilder0.lastIndexOf((StrMatcher) null, 408);
      HashMap<String, ByteArrayInputStream> hashMap0 = new HashMap<String, ByteArrayInputStream>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, ByteArrayInputStream>) hashMap0, "10", "Variable prefix matcher must not be null!", 'm');
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("Variable prefix matcher must not be null!", 11, 1533);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-146));
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      HashMap<String, InputStream> hashMap0 = new HashMap<String, InputStream>();
      StrLookup<InputStream> strLookup0 = StrLookup.mapLookup((Map<String, InputStream>) hashMap0);
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher_TrimMatcher0, 'v');
      strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_SUFFIX, (-271));
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("Variable suffix matcher must not be null!", (-146), 26);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_SUFFIX, (-674));
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("QW4)k\"gAm%-R(v", 44, 44);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, (-2750));
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("startIdex must be valid", 0, 713);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrLookup<Object> strLookup0 = StrLookup.mapLookup((Map<String, Object>) hashMap0);
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'n');
      StrBuilder strBuilder0 = new StrBuilder();
      strSubstitutor0.replace((StringBuffer) null);
      // Undeclared exception!
      try { 
        strBuilder0.delete((-588), 1963);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -588
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.apache.commons.lang3.text.StrSubstitutor@7f7e59c5");
      strSubstitutor0.replace(stringBuffer0);
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrSubstitutor@7f7e59c5");
      // Undeclared exception!
      try { 
        strBuilder0.replace((-1), 2351, "org.apache.commons.lang3.text.StrSubstitutor@7f7e59c5");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strLookup0).toString();
      doReturn((String) null).when(strLookup0).lookup(anyString());
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'v');
      strSubstitutor0.replace("length must be valid");
      // Undeclared exception!
      try { 
        strBuilder0.replace((-665), (-665), (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -665
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[9];
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      StrLookup<String> strLookup0 = StrLookup.systemPropertiesLookup();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher_CharSetMatcher0, strMatcher_CharSetMatcher0, ';');
      strSubstitutor0.replace(charArray0);
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.delete((-1930), 7);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1930
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace("8R~vMd-PIj447}]Cl", 9, 0);
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.delete((-1559), (-1099));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1559
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("='");
      strSubstitutor0.replace((StringBuffer) null);
      strBuilder0.insert(1, 'J');
      assertEquals(3, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.apache.commons.lang3.text.StrSubstitutor@7c900280");
      strSubstitutor0.replace(stringBuffer0);
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendSeparator("org.apache.commons.lang3.text.StrSubstitutor@7c900280", 2228);
      strBuilder0.insert(26, (double) (-674));
      assertEquals(106, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("", "", (String) null).when(strLookup0).toString();
      doReturn("209", "2xy{Xcx(-mbhUWVeR3", (String) null).when(strLookup0).lookup(anyString());
      StrBuilder strBuilder0 = new StrBuilder();
      Object object0 = new Object();
      strBuilder0.appendFixedWidthPadLeft(object0, 1667, 'J');
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher_CharSetMatcher0, strMatcher_CharSetMatcher0, '(');
      strSubstitutor0.replace(charArray0);
      strBuilder0.insert(35, charArray0);
      assertEquals(3334, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.remove((Object) strBuilder0);
      assertEquals(55, strBuilder0.capacity());
      assertEquals(23, strBuilder0.length());
      
      strSubstitutor0.replace((StringBuffer) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.remove((Object) strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      StringWriter stringWriter0 = new StringWriter(3864);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace(stringBuffer0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.remove((Object) strBuilder0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, ByteArrayInputStream>) null);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("file.encoding", 2, (-837));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('b');
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.remove((Object) strBuilder0);
      boolean boolean0 = strSubstitutor1.replaceIn(strBuilder0);
      assertEquals(23, strBuilder0.size());
      assertEquals('$', strSubstitutor1.getEscapeChar());
      assertFalse(boolean0);
      assertEquals(55, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.remove((Object) strBuilder0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("Variable prefix must not be null!", (-810), (-810));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.remove((Object) strBuilder0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("+", 16, (-957));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.remove((Object) strBuilder0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("Invalid offset: ", 8, 35);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      Properties properties0 = new Properties();
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadLeft((int) '$', 10, '$');
      Reader reader0 = strBuilder0.asReader();
      properties0.load(reader0);
      assertFalse(properties0.isEmpty());
      
      strSubstitutor0.replace((StringBuffer) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      Properties properties0 = new Properties();
      StrBuilder strBuilder0 = new StrBuilder("{}");
      Reader reader0 = strBuilder0.asReader();
      properties0.load(reader0);
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      
      StringBuffer stringBuffer0 = new StringBuffer("{{}=}");
      String string0 = strSubstitutor0.replace(stringBuffer0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
      assertEquals("{{}=}", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      Properties properties0 = new Properties();
      StrBuilder strBuilder0 = new StrBuilder("{}");
      Reader reader0 = strBuilder0.asReader();
      properties0.load(reader0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("y.Y;b+]?,8dTo6_", 11, 977);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      Properties properties0 = new Properties();
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadLeft((int) '$', 10, '$');
      Reader reader0 = strBuilder0.asReader();
      properties0.load(reader0);
      assertFalse(strBuilder0.isEmpty());
      
      String string0 = strSubstitutor0.replace("{$$$$$$$$36=}", 10, 1);
      assertEquals("6", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      Properties properties0 = new Properties();
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadLeft(0, 10, '$');
      Reader reader0 = strBuilder0.asReader();
      properties0.load(reader0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("{$$$$$$$$$0=}", (-471), 129);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("Variable prefix matcher must not be null!", "ufU:,Q&Jg]+A}'p<[&c", (String) null).when(strLookup0).toString();
      doReturn("ufU:,Q&Jg]+A}'p<[&c", "Variable prefix matcher must not be null!", (String) null).when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'v');
      StrBuilder strBuilder0 = new StrBuilder("Variable prefix matcher must not be null!");
      strSubstitutor0.replace("leRgth must be valid");
      Reader reader0 = strBuilder0.asReader();
      Properties properties0 = new Properties();
      properties0.load(reader0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(strBuilder0, 17, 17);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of atcher must not b: must
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      Properties properties0 = new Properties();
      StrBuilder strBuilder0 = new StrBuilder("{}");
      Reader reader0 = strBuilder0.asReader();
      properties0.load(reader0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("{}", 13, 13);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      Properties properties0 = new Properties();
      StrBuilder strBuilder0 = new StrBuilder("{}");
      Reader reader0 = strBuilder0.asReader();
      properties0.load(reader0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("Infinite loop in property interpolation of ", 34, (-674));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) strBuilder0, 0, 16);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      strSubstitutor0.replace(stringBuffer0);
      // Undeclared exception!
      try { 
        strBuilder0.delete(1963, 1963);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace("'; the SystemUtils property value will default to null.", 4, (int) '$');
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.replace(51, 32, "he SystemUtils property value will d");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("#G\")9aw_aZ'sJoB");
      strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, (int) '$');
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("#G\")9aw_aZ'sJoB", 15, 102);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be vRld");
      strBuilder0.append("org.apache.commons.lang3.text.StrBuilder", (int) '$', 0);
      int int0 = strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, 123);
      assertEquals(54, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertEquals(22, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, (int) '$');
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("I&m", (-1), 1179);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("?r`o-JE");
      StrLookup<Object> strLookup0 = StrLookup.mapLookup((Map<String, Object>) hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      StrBuilder strBuilder0 = new StrBuilder("${");
      strBuilder0.lastIndexOf(strMatcher0, 32);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("->", 31, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, 123);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("user.timezone", 0, (-1216));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrLookup<Object> strLookup0 = StrLookup.mapLookup((Map<String, Object>) hashMap0);
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'n');
      StrBuilder strBuilder0 = new StrBuilder();
      strSubstitutor0.replace((StringBuffer) null);
      // Undeclared exception!
      try { 
        strBuilder0.delete('$', 3350);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      strBuilder0.replace(0, 123, "${");
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("startIdex must be valid", 0, (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      StrLookup<Locale.FilteringMode> strLookup0 = StrLookup.mapLookup((Map<String, Locale.FilteringMode>) hashMap0);
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'w');
      strSubstitutor0.replace("Invalid length: ");
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.delete('$', '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'RGS_1 Y2k");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Integer>) hashMap0);
      strBuilder0.replace(2, 1328, "java.awt.graphicsenv");
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("'OB!", (-3002), (-770));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("java.lang.Object@6a2f3c76");
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((StrLookup<?>) null, strMatcher0, strMatcher0, 'L');
      StringBuffer stringBuffer0 = new StringBuffer("java.lang.Object@6a2f3c76");
      strSubstitutor0.replaceIn(stringBuffer0);
      StrBuilder strBuilder0 = new StrBuilder(" s");
      // Undeclared exception!
      try { 
        strBuilder0.replace(44, 44, " s");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      strBuilder0.replace(0, 123, "${");
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("", 2558, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      strBuilder0.replace(0, 123, "${");
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("user.timezone", 0, (-1216));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrSubstitutor@711d6079");
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("org.apache.commons.lang3.text.StrSubstitutor@711d6079");
      strBuilder1.append(strBuilder0);
      strBuilder0.insert(141, true);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("org.apache.commons.lang3.text.StrSubstitutor@711d6079", 27, 996);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'v');
      StrBuilder strBuilder0 = new StrBuilder("Variable prefix matcher must not be null!");
      strBuilder0.insert(5, 'U');
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(", Length: ", (-2413), 8);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("java.lang.Object@53f0c7a0");
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((StrLookup<?>) null, strMatcher0, strMatcher0, 'L');
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrSubstitutor");
      strBuilder0.insert(31, 'k');
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("java.lang.Object@53f0c7a0", 1533, (-365));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test116()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      Object object0 = new Object();
      strBuilder0.insert(0, object0);
      assertEquals(48, strBuilder0.size());
      
      String string0 = strSubstitutor0.replace("suffixmatchr", 6, 2);
      assertEquals("ma", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object object0 = new Object();
      StrSubstitutor.replace(object0, (Properties) null);
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf((StrMatcher) null, (-1587));
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt((-1138));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1138
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix(',');
      char[] charArray0 = new char[4];
      charArray0[2] = '$';
      charArray0[3] = ',';
      String string0 = strSubstitutor1.replace(charArray0);
      assertEquals("\u0000\u0000,", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object object0 = new Object();
      StrSubstitutor.replace(object0, (Properties) null);
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("java.lang.Object@6a2f3c76");
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((StrLookup<?>) null, strMatcher0, strMatcher0, 'L');
      StrBuilder strBuilder0 = new StrBuilder(" s");
      int int0 = strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, 32);
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertEquals('L', strSubstitutor0.getEscapeChar());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, 123);
      HashMap<String, StrLookup<InputStream>> hashMap0 = new HashMap<String, StrLookup<InputStream>>(8);
      // Undeclared exception!
      try { 
        StrSubstitutor.replace((Object) "cx", (Map<String, StrLookup<InputStream>>) hashMap0, (String) null, "null!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test122()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = StrSubstitutor.replace((Object) "startIdex must be valid", (Map<String, String>) hashMap0, "startIdex must be valid", "startIdex must be valid");
      assertNotNull(string0);
      assertEquals("startIdex must be valid", string0);
      
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      int int0 = strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, 123);
      assertEquals((-1), int0);
      assertEquals(55, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.apache.commons.lang3.text.StrSubstitutor@347eab23");
      strSubstitutor0.replace(stringBuffer0);
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrSubstitutor@347eab23");
      int int0 = strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, 175);
      assertEquals(85, strBuilder0.capacity());
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertEquals((-1), int0);
      assertEquals(53, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("java.lang.Object@6a2f3c76");
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((StrLookup<?>) null, strMatcher0, strMatcher0, 'L');
      StringBuffer stringBuffer0 = new StringBuffer("java.lang.Object@6a2f3c76");
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer0);
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder(" s");
      strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, 32);
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertEquals('L', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      StrBuilder strBuilder0 = new StrBuilder(" /at]X*gp}IMN5Zo[6");
      strBuilder0.lastIndexOf(strMatcher0, 53);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.setVariableSuffixMatcher((StrMatcher) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix matcher must not be null!
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be valid");
      StrBuilder strBuilder1 = strBuilder0.setCharAt(0, '=');
      assertEquals(23, strBuilder0.length());
      assertEquals(55, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1895));
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt((-2582), '5');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2582
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('b');
      StrBuilder strBuilder0 = new StrBuilder("Variable suffix matcher must not be null!");
      strSubstitutor1.setEnableSubstitutionInVariables(true);
      String string0 = strSubstitutor1.replace(strBuilder0);
      assertNotNull(string0);
      assertEquals("Variable suffix matcher must not be null!", string0);
      
      int int0 = strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, 1958);
      assertEquals(73, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("startIdex must be vRld");
      int int0 = strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, 0);
      assertEquals(22, strBuilder0.length());
      assertEquals((-1), int0);
      assertEquals(54, strBuilder0.capacity());
      
      strSubstitutor0.replace((StringBuffer) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.apache.commons.lang3.text.StrSubstitutor@7f7e59c5");
      strSubstitutor0.replace(stringBuffer0);
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrSubstitutor@7f7e59c5");
      int int0 = strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_SUFFIX, (-674));
      assertEquals((-1), int0);
      assertEquals(85, strBuilder0.capacity());
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertEquals(53, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("java.lang.Object@5c8bad57");
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((StrLookup<?>) null, strMatcher0, strMatcher0, 'L');
      StringBuffer stringBuffer0 = new StringBuffer("java.lang.Object@5c8bad57");
      StrBuilder strBuilder0 = new StrBuilder();
      strSubstitutor0.replaceIn(stringBuffer0);
      assertEquals('L', strSubstitutor0.getEscapeChar());
      
      int int0 = strBuilder0.lastIndexOf((StrMatcher) null, (-1587));
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("un[=Vn7{ )ncDeK8O[", "un[=Vn7{ )ncDeK8O[", " s").when(strLookup0).toString();
      doReturn("un[=Vn7{ )ncDeK8O[", "fkx#Y(4k+c\u0001R", " s").when(strLookup0).lookup(anyString());
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'x');
      StrBuilder strBuilder1 = new StrBuilder("Variable prefix matcher must not be null!");
      strBuilder0.lastIndexOf(strMatcher0, (-271));
      StringBuffer stringBuffer0 = strBuilder1.toStringBuffer();
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer0);
      assertEquals("Variableun[=Vn7{ )ncDeK8O[matcherfkx#Y(4k+c\u0001Rnot snull!", stringBuffer0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      Properties properties0 = new Properties();
      StrSubstitutor.replace((Object) strSubstitutor0, properties0);
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrSubstitutor@7f7e59c5");
      int int0 = strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_SUFFIX, (-674));
      assertEquals(85, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals(53, strBuilder0.length());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }
}

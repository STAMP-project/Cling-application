/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 08:28:14 GMT 2019
 */

package org.mockito.asm.tree.analysis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mockito.asm.tree.AbstractInsnNode;
import org.mockito.asm.tree.FieldInsnNode;
import org.mockito.asm.tree.IincInsnNode;
import org.mockito.asm.tree.InsnNode;
import org.mockito.asm.tree.IntInsnNode;
import org.mockito.asm.tree.LabelNode;
import org.mockito.asm.tree.LdcInsnNode;
import org.mockito.asm.tree.MultiANewArrayInsnNode;
import org.mockito.asm.tree.TableSwitchInsnNode;
import org.mockito.asm.tree.TypeInsnNode;
import org.mockito.asm.tree.analysis.AnalyzerException;
import org.mockito.asm.tree.analysis.BasicValue;
import org.mockito.asm.tree.analysis.BasicVerifier;
import org.mockito.asm.tree.analysis.SourceValue;
import org.mockito.asm.tree.analysis.Value;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BasicVerifier_ESTest extends BasicVerifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      AbstractInsnNode abstractInsnNode0 = mock(AbstractInsnNode.class, new ViolatedAssumptionAnswer());
      doReturn(84).when(abstractInsnNode0).getOpcode();
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      Value value0 = basicVerifier0.copyOperation(abstractInsnNode0, basicValue0);
      LabelNode labelNode0 = new LabelNode();
      LabelNode[] labelNodeArray0 = new LabelNode[10];
      TableSwitchInsnNode tableSwitchInsnNode0 = new TableSwitchInsnNode(14, 84, labelNode0, labelNodeArray0);
      Value value1 = basicVerifier0.unaryOperation(tableSwitchInsnNode0, value0);
      assertNull(value1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      AbstractInsnNode abstractInsnNode0 = mock(AbstractInsnNode.class, new ViolatedAssumptionAnswer());
      doReturn(84).when(abstractInsnNode0).getOpcode();
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      basicVerifier0.copyOperation(abstractInsnNode0, basicValue0);
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(156, (String) null, (String) null, (String) null);
      Value value0 = basicVerifier0.unaryOperation(fieldInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      IincInsnNode iincInsnNode0 = new IincInsnNode((-683), 9);
      basicVerifier0.copyOperation(iincInsnNode0, basicValue0);
      Value value0 = basicVerifier0.unaryOperation(iincInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      LabelNode labelNode0 = new LabelNode();
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      Value value0 = basicVerifier0.copyOperation(labelNode0, basicValue0);
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(155, "XPy`q?q``<^K r", "wa bI;>N", "First argument");
      Value value1 = basicVerifier0.unaryOperation(fieldInsnNode0, value0);
      assertNull(value1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      AbstractInsnNode abstractInsnNode0 = mock(AbstractInsnNode.class, new ViolatedAssumptionAnswer());
      doReturn(220).when(abstractInsnNode0).getOpcode();
      Value value0 = mock(Value.class, new ViolatedAssumptionAnswer());
      doReturn("d").when(value0).toString();
      basicVerifier0.copyOperation(abstractInsnNode0, value0);
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(14, "");
      BasicValue basicValue0 = (BasicValue)basicVerifier0.newOperation(typeInsnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      AbstractInsnNode abstractInsnNode0 = mock(AbstractInsnNode.class, new ViolatedAssumptionAnswer());
      doReturn(84).when(abstractInsnNode0).getOpcode();
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      basicVerifier0.copyOperation(abstractInsnNode0, basicValue0);
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(11, (String) null, (String) null, (String) null);
      Value value0 = basicVerifier0.newOperation(fieldInsnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      InsnNode insnNode0 = new InsnNode(84);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      basicVerifier0.copyOperation(insnNode0, basicValue0);
      // Undeclared exception!
      try { 
        basicVerifier0.newOperation(insnNode0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicVerifier0);
      Value value0 = basicVerifier0.newOperation(ldcInsnNode0);
      BasicValue basicValue0 = (BasicValue)basicVerifier0.copyOperation(ldcInsnNode0, value0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      AbstractInsnNode abstractInsnNode0 = mock(AbstractInsnNode.class, new ViolatedAssumptionAnswer());
      SourceValue sourceValue0 = new SourceValue(30, abstractInsnNode0);
      MultiANewArrayInsnNode multiANewArrayInsnNode0 = new MultiANewArrayInsnNode("[B", 2);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      basicVerifier0.naryOperation(multiANewArrayInsnNode0, linkedList0);
      Value value0 = basicVerifier0.copyOperation(multiANewArrayInsnNode0, sourceValue0);
      assertSame(sourceValue0, value0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode((-3184), "LhiM6Y");
      basicVerifier0.copyOperation(typeInsnNode0, (Value) null);
      AbstractInsnNode abstractInsnNode0 = mock(AbstractInsnNode.class, new ViolatedAssumptionAnswer());
      doReturn(197, 49).when(abstractInsnNode0).getOpcode();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        basicVerifier0.naryOperation(abstractInsnNode0, linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.AbstractInsnNode$MockitoMock$2074234017 cannot be cast to org.mockito.asm.tree.MethodInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      IntInsnNode intInsnNode0 = new IntInsnNode(22, (-699));
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      try { 
        basicVerifier0.copyOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: AnalyzerException");
      
      } catch(AnalyzerException e) {
         //
         // Expected J, but found I
         //
         verifyException("org.mockito.asm.tree.analysis.BasicVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      AbstractInsnNode abstractInsnNode0 = mock(AbstractInsnNode.class, new ViolatedAssumptionAnswer());
      doReturn(30).when(abstractInsnNode0).getOpcode();
      AbstractInsnNode abstractInsnNode1 = mock(AbstractInsnNode.class, new ViolatedAssumptionAnswer());
      SourceValue sourceValue0 = new SourceValue(30, abstractInsnNode1);
      basicVerifier0.copyOperation(abstractInsnNode0, sourceValue0);
      MultiANewArrayInsnNode multiANewArrayInsnNode0 = new MultiANewArrayInsnNode("[B", 2);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BasicValue basicValue0 = (BasicValue)basicVerifier0.naryOperation(multiANewArrayInsnNode0, linkedList0);
      assertTrue(basicValue0.isReference());
  }
}

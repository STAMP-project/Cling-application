/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 05:51:04 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AstParallelizer;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.PeepholeSimplifyRegExp;
import com.google.javascript.jscomp.ReorderConstantExpression;
import com.google.javascript.jscomp.ScopedAliases;
import com.google.javascript.jscomp.ShowByPathWarningsGuard;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.io.PipedInputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newString("Cannot call getPossibleTargets() on a Callsite from a non-forward CallGraph", (-668), (-668));
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "vOI");
      NodeUtil.copyNameAnnotations(node0, node0);
      assertEquals(38, node0.getType());
      assertFalse(node0.isThis());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(472);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 472
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = node0.isUnscopedQualifiedName();
      assertTrue(node0.isTrue());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "match");
      NodeUtil.isFunctionExpression(node0);
      boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
      assertFalse(boolean0);
      assertEquals(38, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newString(47, "", (-1305), (-1305));
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName(".;E*-6RjO");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidSimpleName("UKMULV");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.addChildrenToBack(node0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("  ");
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "vOI");
      String string0 = NodeUtil.getStringValue(node0);
      assertNull(string0);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNull());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = new Node(41);
      NodeUtil.getImpureBooleanValue(node0);
      assertTrue(node0.isNull());
      assertEquals((-1), node0.getLineno());
      assertEquals(41, node0.getType());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertEquals((-1), node0.getCharno());
      assertEquals(43, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = Node.newString("Cannot call getPossibleTargets() on a Callsite from a non-forward CallGraph", (-668), (-668));
      NodeUtil.getImpureBooleanValue(node0);
      assertTrue(node0.isString());
      assertEquals((-1), node0.getLineno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newString(63, "ZS89!mTg`]", 44, 16);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(180240, node0.getSourcePosition());
      assertEquals(63, node0.getType());
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = Node.newString((-2), "vOI");
      Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
      assertEquals((-2), node1.getType());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newString(63, "ZS89!mTg`]", 65279, 16);
      NodeUtil.getImpureBooleanValue(node0);
      assertEquals(267382800, node0.getSourcePosition());
      assertTrue(node0.isArrayLit());
      assertEquals(65279, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(19, nodeArray0);
      NodeUtil.getImpureBooleanValue(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(19, node0.getType());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("<invalid>", object0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "<invalid>", node0, "method \"{0}\" expected an object literal argument");
      Node node2 = new Node(14, node1, node1, node1);
      assertFalse(node2.isFunction());
      
      NodeUtil.getNearestFunctionName(node2);
      assertEquals(0, node1.getSourcePosition());
      assertEquals(38, node1.getType());
      assertEquals(14, node2.getType());
      assertTrue(node1.isName());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(11);
      assertEquals("&", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-426), 132).when(node0).getType();
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(50, 811, 65500).when(node1).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = NodeUtil.mayHaveSideEffects(node1, abstractCompiler0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newString("internetExplorerhecks");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      Node node2 = new Node(54, node0, node1, node1, node0);
      assertEquals(40, node0.getType());
      assertEquals(54, node2.getType());
      
      NodeUtil.isImmutableValue(node1);
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString("internetExplorerhecks");
      Node node1 = new Node(54, node0, node0, node0, node0);
      assertTrue(node1.hasOneChild());
      assertEquals(54, node1.getType());
      
      boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node0 = Node.newNumber(32.0);
      assertFalse(node0.isRegExp());
      
      Node node1 = peepholeSimplifyRegExp0.optimizeSubtree(node0);
      assertTrue(node1.isNumber());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ShowByPathWarningsGuard.ShowType showByPathWarningsGuard_ShowType0 = ShowByPathWarningsGuard.ShowType.EXCLUDE;
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(showByPathWarningsGuard_ShowType0, (String) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.numberNode(0.0, node0);
      boolean boolean0 = NodeUtil.isNullOrUndefined(node1);
      boolean boolean1 = NodeUtil.isSimpleOperator(node1);
      assertFalse(node1.isName());
      assertTrue(boolean1 == boolean0);
      assertEquals(0, node1.getSourcePosition());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Integer integer0 = new Integer((-4468));
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, object0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.numberNode(0.0, node0);
      Predicate<Node> predicate0 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(predicate0).apply(any(com.google.javascript.rhino.Node.class));
      int int0 = NodeUtil.getCount(node1, predicate0, predicate0);
      assertTrue(node1.isNumber());
      assertEquals(0, node1.getCharno());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("");
      assertEquals(0.0, (double)double0, 0.01);
      
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("", double0, double0, "").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.isNameReferenced(node1, "");
      assertFalse(boolean0);
      assertEquals(122, node1.getType());
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) jqueryCodingConvention0, "in", node0, "GzLo@ou");
      Node node2 = new Node(96, node1, node0, 2, 45);
      // Undeclared exception!
      try { 
        NodeUtil.newVarNode("GzLo@ou", node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = NodeUtil.newVarNode("GzLo@ou", node0);
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(118, node1.getType());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("infinity", (Node) null);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(118, node0.getType());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1));
      assertFalse(node0.isFunction());
      
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchDeclaration0, nodeUtil_MatchDeclaration0);
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(1605);
      boolean boolean1 = NodeUtil.isValidPropertyName("native");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(19, nodeArray0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertEquals(19, node0.getType());
      
      boolean boolean1 = NodeUtil.isValidSimpleName("Not declared as a constructor");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getParent();
      doReturn((-78), (-3147), (-78), (-78)).when(node0).getType();
      doReturn(" is not a number node").when(node0).toString();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression node is not a number node
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(true).when(node0).isExprResult();
      // Undeclared exception!
      try { 
        NodeUtil.isExprCall(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(true).when(node0).isExprResult();
      // Undeclared exception!
      try { 
        NodeUtil.isExprAssign(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = NodeUtil.numberNode(2322.3424, (Node) null);
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertEquals(39, node0.getType());
      
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Node node1 = NodeUtil.newQualifiedNameNode(codingConvention0, "match");
      boolean boolean1 = NodeUtil.isLiteralValue(node1, false);
      assertTrue(boolean1 == boolean0);
      assertTrue(node1.isName());
      assertEquals((-1), node1.getLineno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ShowByPathWarningsGuard.ShowType showByPathWarningsGuard_ShowType0 = ShowByPathWarningsGuard.ShowType.EXCLUDE;
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(showByPathWarningsGuard_ShowType0, (String) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.numberNode(0.0, node0);
      boolean boolean0 = NodeUtil.isLoopStructure(node1);
      assertEquals(39, node1.getType());
      assertFalse(boolean0);
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.getLoopCodeBlock(node0);
      assertEquals((-1), node0.getLineno());
      assertEquals(43, node0.getType());
      assertTrue(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(19, nodeArray0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertEquals(19, node0.getType());
      
      boolean boolean1 = NodeUtil.isLatin("_'ye[?m&3`dPUZC.yX");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getParent();
      doReturn(true).when(node0).isName();
      // Undeclared exception!
      try { 
        NodeUtil.isVarDeclaration(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      NodeUtil.getInverseOperator(0);
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "match");
      CodingConvention codingConvention1 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention1).isConstant(anyString());
      Node node1 = NodeUtil.newQualifiedNameNode(codingConvention1, "match", node0, " [");
      assertEquals((-1), node1.getCharno());
      assertEquals(38, node1.getType());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = NodeUtil.getInverseOperator(0);
      assertEquals((-1), int0);
      
      Node node0 = Node.newNumber((double) (-1));
      Node node1 = node0.cloneTree();
      assertNotSame(node1, node0);
      assertEquals(39, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(264);
      Node node0 = Node.newString(33, ">:Dna", 39, 2994);
      node0.removeFirstChild();
      assertEquals(162738, node0.getSourcePosition());
      assertEquals(33, node0.getType());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NodeUtil.getInverseOperator(0);
      Node[] nodeArray0 = new Node[9];
      Node node0 = Node.newNumber((double) (-1));
      nodeArray0[0] = node0;
      nodeArray0[1] = nodeArray0[0];
      nodeArray0[1].detachChildren();
      assertEquals(9, nodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = NodeUtil.getInverseOperator(0);
      assertEquals((-1), int0);
      
      Node node0 = Node.newNumber((double) (-1));
      Node node1 = node0.removeChildren();
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      NodeUtil.getInverseOperator(0);
      Node[] nodeArray0 = new Node[9];
      Node node0 = Node.newNumber((double) (-1));
      nodeArray0[0] = node0;
      SyntheticAst syntheticAst0 = new SyntheticAst("typeof");
      Node node1 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      Node node2 = new Node((-2811), nodeArray0[0], node0, node1, 31, 48);
      AstParallelizer astParallelizer0 = AstParallelizer.createNewFileLevelAstParallelizer(node2);
      List<Node> list0 = astParallelizer0.split();
      assertEquals(127024, node2.getSourcePosition());
      assertTrue(list0.contains(node1));
      assertEquals((-2811), node2.getType());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("<invalid>", object0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "<invalid>", node0, "method \"{0}\" expected an object literal argument");
      NodeUtil.getNumberValue(node1);
      boolean boolean0 = NodeUtil.referencesThis(node1);
      assertFalse(boolean0);
      assertTrue(node1.isName());
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 1523, (-455));
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(119);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = Node.newNumber((double) (-1));
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
      
      nodeArray0[0] = node0;
      boolean boolean0 = nodeArray0[0].isOnlyModifiesThisCall();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(114).when(node0).getChildCount();
      doReturn(true).when(node0).isFor();
      boolean boolean0 = NodeUtil.isForIn(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(19, nodeArray0);
      NodeUtil.mayEffectMutableState(node0);
      Node[] nodeArray1 = new Node[0];
      Node node1 = new Node(28, nodeArray1, (-3902), 31);
      assertEquals(28, node1.getType());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(19, nodeArray0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
      
      String string0 = node0.toStringTree();
      assertEquals("RSH 0\n", string0);
      assertEquals(19, node0.getType());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "vOI");
      NodeUtil.copyNameAnnotations(node0, node0);
      assertTrue(node0.isName());
      assertEquals((-1), node0.getCharno());
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(119);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-2546)).when(node1).getType();
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
      Node node2 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node2).getFirstChild();
      doReturn(true).when(node2).isCall();
      boolean boolean1 = NodeUtil.isSimpleFunctionObjectCall(node2);
      assertFalse(node0.isGetElem());
      assertEquals(44, node0.getType());
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-1166));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1166
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertTrue(boolean0);
      
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getFirstChild();
      doReturn(true).when(node1).isCall();
      boolean boolean1 = NodeUtil.isSimpleFunctionObjectCall(node1);
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertEquals(44, node0.getType());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "match");
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, (AbstractCompiler) null);
      boolean boolean1 = NodeUtil.isLiteralValue(node0, false);
      assertEquals(38, node0.getType());
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(19, nodeArray0);
      assertFalse(node0.isName());
      
      boolean boolean0 = NodeUtil.isVarDeclaration(node0);
      assertEquals(19, node0.getType());
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(45);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      NodeUtil.isCommutative(38);
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertEquals(467058, node0.getSourcePosition());
      assertEquals(114, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(19, nodeArray0);
      Node[] nodeArray1 = new Node[0];
      Node node1 = new Node(28, nodeArray1, (-3902), 31);
      assertEquals((-1), node1.getCharno());
      
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertEquals(19, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node(41);
      boolean boolean0 = NodeUtil.isGet(node0);
      assertFalse(boolean0);
      
      Predicate<Node> predicate0 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
      assertTrue(node0.isNull());
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      node0.putProp(114, "9]|.ty4?3M`Ch\u0006uKt");
      NodeUtil.isImmutableValue(node0);
      Node node1 = node0.useSourceInfoIfMissingFromForTree(node0);
      assertEquals(467058, node1.getSourcePosition());
      assertEquals(114, node1.getType());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = new Node(41);
      boolean boolean0 = NodeUtil.isConstantName(node0);
      assertFalse(boolean0);
      
      Predicate<Node> predicate0 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
      assertEquals(41, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(node0).getType();
      boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(node1).isName();
      boolean boolean1 = NodeUtil.isVarDeclaration(node1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("internetExplorerhecks").when(node0).getString();
      doReturn(0, 432, 45, 45, 38).when(node0).getType();
      doReturn(false).when(node0).isNull();
      boolean boolean0 = NodeUtil.mayBeString(node0);
      Node node1 = Node.newString("internetExplorerhecks");
      boolean boolean1 = NodeUtil.isImmutableValue(node1);
      assertTrue(boolean1 == boolean0);
      assertEquals(40, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = new Node(41);
      String string0 = node0.toStringTree();
      assertEquals("NULL\n", string0);
      
      Predicate<Node> predicate0 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString(63743, ":i#BO_ evAXl&o~", 27, 63743);
      assertEquals(63743, node0.getType());
      assertEquals(114687, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("<invalid>", object0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "<invalid>", node0, "method \"{0}\" expected an object literal argument");
      Node node2 = new Node(14, node1, node1, node1);
      node2.children();
      assertEquals(14, node2.getType());
      assertEquals(0, node1.getSourcePosition());
      assertTrue(node1.isName());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      Node node0 = Node.newNumber((double) (-1));
      Node node1 = Node.newString(63, "ZS89!mTg`]", 65279, 16);
      nodeArray0[1] = node1;
      Node node2 = new Node(4958, node0, node1, nodeArray0[1], node1, 1, 46);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node2, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4958
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      Node node2 = new Node(49, node1, node0, 113, 0);
      // Undeclared exception!
      try { 
        node2.getExistingIntProp(4095);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 4095
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("");
      PipedInputStream pipedInputStream0 = new PipedInputStream(147);
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, "", pipedInputStream0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newUndefinedNode(node0);
      // Undeclared exception!
      try { 
        node1.getAncestor((-1336));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1));
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      DiagnosticType diagnosticType0 = ScopedAliases.GOOG_SCOPE_USES_THROW;
      // Undeclared exception!
      try { 
        exploitAssigns0.error(diagnosticType0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("");
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("", double0, double0, "").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newUndefinedNode(node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.isConstantByConvention(closureCodingConvention0, node1, node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // VOID 0 [originalname: ] [source_file: 0.0] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "vOI");
      NodeUtil.copyNameAnnotations(node0, node0);
      boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(19, nodeArray0);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // RSH 0 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "<invalid>", node0, "method \"{0}\" expected an object literal argument");
      node1.setOptionalArg(false);
      assertTrue(node1.isName());
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = new Node(33);
      boolean boolean0 = NodeUtil.isGet(node0);
      assertEquals((-1), node0.getCharno());
      assertTrue(boolean0);
      assertFalse(node0.isGetElem());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node0).getChildCount();
      doReturn(true).when(node0).isTry();
      boolean boolean0 = NodeUtil.hasFinally(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(77);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for TRY (type 77)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString((Node) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(node0).isNull();
      boolean boolean0 = NodeUtil.isNullOrUndefined(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 1523, (-455));
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(42);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = new Node(33);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isGetProp());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(45, 44, 37, 1808, 36).when(node0).getType();
      doReturn(false).when(node0).isNull();
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newString("internetExplorerhecks");
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertTrue(boolean0);
      assertTrue(node0.isString());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(19, nodeArray0);
      boolean boolean0 = NodeUtil.isNumericResult(node0);
      assertEquals(19, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "vOI");
      boolean boolean0 = NodeUtil.isNumericResult(node0);
      boolean boolean1 = NodeUtil.isLiteralValue(node0, false);
      assertTrue(boolean1 == boolean0);
      assertEquals(38, node0.getType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(19, nodeArray0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
      
      NodeUtil.getVarsDeclaredInBranch(node0);
      assertEquals(19, node0.getType());
      assertFalse(node0.isFunction());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 1523, (-455));
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getFirstChild();
      doReturn(false).when(node1).isFunction();
      doReturn(false).when(node1).isName();
      NodeUtil.getVarsDeclaredInBranch(node1);
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(39, node0.getType());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getParent();
      doReturn(true).when(node1).isFunction();
      doReturn(true).when(node1).isName();
      Collection<Node> collection0 = NodeUtil.getVarsDeclaredInBranch(node1);
      assertFalse(collection0.contains(node1));
      assertEquals((-1), node0.getLineno());
      assertEquals(44, node0.getType());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newNumber(32.0);
      assertFalse(node0.isName());
      
      int int0 = NodeUtil.getNameReferenceCount(node0, "");
      assertEquals(0, int0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "vOI");
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
      assertTrue(node0.isName());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.isPrototypeProperty(node1);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
      assertEquals(0, node1.getSourcePosition());
      assertTrue(node1.isVoid());
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(19, nodeArray0);
      NodeUtil.getInputId(node0);
      assertEquals(19, node0.getType());
      assertFalse(node0.isScript());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "<invalid>", node0, "method \"{0}\" expected an object literal argument");
      NodeUtil.getSourceFile(node1);
      assertEquals(0, node1.getCharno());
      assertTrue(node1.isName());
      assertEquals(38, node1.getType());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = NodeUtil.numberNode(2322.3424, (Node) null);
      assertNotNull(node0);
      
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("The name %s should not be annotated as constant.", "rvM)$s+X?~fPOVl/A]");
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getParent();
      doReturn(jSSourceFile0).when(node1).getStaticSourceFile();
      StaticSourceFile staticSourceFile0 = NodeUtil.getSourceFile(node1);
      assertNotNull(staticSourceFile0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, object0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.numberNode(43, node0);
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node1;
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node0).getType();
      doReturn(false).when(node0).isCall();
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "<invalid>", node0, "method \"{0}\" expected an object literal argument");
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node1, abstractCompiler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got NAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(node0).isBlock();
      NodeUtil.isEmptyBlock(node0);
      Object object0 = new Object();
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, object0).when(node1).getProp(anyInt());
      Node node2 = NodeUtil.numberNode(43, node1);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node2);
      assertFalse(boolean0);
      assertEquals(0, node2.getCharno());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-2546)).when(node0).getType();
      NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-1166));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1166
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(true).when(node0).isCall();
      doReturn(false).when(node0).isNoSideEffectsCall();
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newString("Cannot call getPossibleTargets() on a Callsite from a non-forward CallGraph", (-668), (-668));
      NodeUtil.getBestJSDocInfo(node0);
      assertEquals((-1), node0.getLineno());
      assertEquals(40, node0.getType());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(264);
      boolean boolean1 = NodeUtil.isCommutative(35);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("0w>f?c;");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ShowByPathWarningsGuard.ShowType showByPathWarningsGuard_ShowType0 = ShowByPathWarningsGuard.ShowType.EXCLUDE;
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(showByPathWarningsGuard_ShowType0, (String) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.numberNode(0.0, node0);
      NodeUtil.isForIn(node1);
      boolean boolean0 = NodeUtil.isSimpleOperator(node1);
      assertFalse(node1.isFor());
      assertEquals(0, node1.getCharno());
      assertTrue(node1.isNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(19, nodeArray0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(node0.isExprResult());
      
      boolean boolean1 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertTrue(boolean1 == boolean0);
      assertEquals(19, node0.getType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(16, 1, 108).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, abstractCompiler0);
      Node node1 = Node.newNumber(4519.071547);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      boolean boolean1 = NodeUtil.containsType(node1, 4, nodeUtil_NumbericResultPredicate0);
      assertFalse(boolean1 == boolean0);
      assertEquals(39, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(41);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
      
      Predicate<Node> predicate0 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
      assertEquals(41, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test111()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(2147483645, 54, 1, 8, 31).when(node0).getType();
      doReturn(false).when(node0).isNull();
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(16, 1, 108).when(node1).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = NodeUtil.mayHaveSideEffects(node1, abstractCompiler0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(19, nodeArray0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      boolean boolean1 = NodeUtil.isBooleanResultHelper(node0);
      assertEquals(19, node0.getType());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = NodeUtil.getInverseOperator(0);
      assertEquals((-1), int0);
      
      Node node0 = Node.newNumber((double) (-1));
      Node node1 = node0.removeFirstChild();
      assertNull(node1);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-903), 39).when(node0).getType();
      NodeUtil.isLiteralValue(node0, false);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      Node node2 = new Node(49, node1, node0, 113, 0);
      assertEquals(462848, node2.getSourcePosition());
      assertTrue(node2.isThrow());
      assertEquals(2, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(node0).isFunction();
      // Undeclared exception!
      try { 
        NodeUtil.getNearestFunctionName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
      assertTrue(node1.isVoid());
      assertEquals(0, node1.getSourcePosition());
      
      Double double0 = NodeUtil.getStringNumberValue("0w>f?c;");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(19, nodeArray0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(2, (-267), (-267)).when(node1).getType();
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      boolean boolean1 = NodeUtil.isImmutableValue(node0);
      assertFalse(boolean1 == boolean0);
      assertEquals(19, node0.getType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(36, 49, 16).when(node0).getType();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "infity");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0, (AbstractCompiler) null);
      assertFalse(boolean0);
      assertEquals(38, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "infity");
      assertFalse(node0.isGetProp());
      
      NodeUtil.getPrototypeClassName(node0);
      assertTrue(node0.isName());
      assertEquals((-1), node0.getCharno());
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(108, nodeArray0);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew(node0, 36);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "vOI");
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) jqueryCodingConvention0, "..;E*-6RjO", node0, "..;E*-6RjO");
      assertEquals(33, node1.getType());
      assertEquals((-1), node1.getLineno());
      
      NodeUtil.isLiteralValue(node0, false);
      assertTrue(node0.isName());
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = new Node(41);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(node0).isName();
      doReturn(true).when(node0).isThis();
      doReturn("Cannot call getPossibleTargets() on a Callsite from a non-forward CallGraph").when(node0).toString();
      Node node1 = NodeUtil.getRootOfQualifiedName(node0);
      assertEquals(54, Node.LAST_PROP);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "+infinity");
      Node node1 = NodeUtil.getRootOfQualifiedName(node0);
      assertTrue(node0.isName());
      assertEquals((-1), node1.getCharno());
  }
}

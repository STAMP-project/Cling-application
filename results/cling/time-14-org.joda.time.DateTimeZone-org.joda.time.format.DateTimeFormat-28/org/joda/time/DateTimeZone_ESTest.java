/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 02:35:42 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Provider provider0 = mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn((Set<String>) null).when(provider0).getAvailableIDs();
      // Undeclared exception!
      try { 
        DateTimeZone.setProvider(provider0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The provider doesn't have any available ids
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036854775808L), false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      Provider provider0 = mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn(set0).when(provider0).getAvailableIDs();
      // Undeclared exception!
      try { 
        DateTimeZone.setProvider(provider0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The provider doesn't support UTC
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC((-9223372036854775808L), true);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      boolean boolean0 = dateTimeZone0.isStandardOffset(766619998660L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      long long0 = dateTimeZone0.adjustOffset((-766623600001L), false);
      assertEquals((-766623600001L), long0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      LocalDateTime localDateTime0 = new LocalDateTime(2173L, dateTimeZone0);
      dateTimeZone0.getName((-1848L));
      localDateTime0.toString("xOE#54rlqG[d|K~n@U", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalDateTime localDateTime0 = new LocalDateTime(701L, dateTimeZone0);
      DateTimeZone.forTimeZone((TimeZone) null);
      localDateTime0.toString("-s&YIxRt9D8", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2760);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      TimeZone timeZone0 = cachedDateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone1);
      localDateTime0.toString("^yoK&(P");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.getOffset((ReadableInstant) null);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      // Undeclared exception!
      try { 
        localDateTime0.toString("org.joda.time.DateTimeZone");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-933L));
      Locale locale0 = Locale.FRENCH;
      try { 
        localDateTime0.toString("p<U_38C#|y", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      String string0 = dateTimeZone0.getName(0L);
      assertEquals("+01:00", string0);
      assertNotNull(string0);
      
      long long0 = dateTimeZone0.convertLocalToUTC(0L, false);
      assertEquals((-3600000L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.adjustOffset((-9223372036847575808L), true);
      LocalDateTime localDateTime0 = new LocalDateTime(100L, dateTimeZone0);
      Locale locale0 = Locale.TAIWAN;
      try { 
        localDateTime0.toString("PLT", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        localDateTime0.toString("9gC3)|Wq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test14()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Locale locale0 = Locale.JAPAN;
      String string0 = dateTimeZone0.getShortName((long) 1, locale0);
      assertEquals("+01:00", string0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now();
      String string1 = localDateTime0.toString("Europe/Amsterdam", locale0);
      assertEquals("\u65E5\u66DC\u65E5", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test15()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = new Locale("~", "]\"X");
      localDateTime0.toString("SF]rwB.`3M)/", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test16()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-940L));
      localDateTime0.toString("d$?D_Z5b");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      LocalDateTime localDateTime0 = LocalDateTime.now();
      try { 
        localDateTime0.toString("ru~)8N>Tjo&&kYJJXv;", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime((-9223372036849919808L), dateTimeZone0);
      Locale locale0 = Locale.CANADA_FRENCH;
      dateTimeZone0.getShortName((-9223372036848747808L));
      String string0 = localDateTime0.toString("$/&+ZEQa", locale0);
      assertEquals("$/&+", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(2592000000L, dateTimeZone0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      localDateTime0.toString("7Z%z!S/Cu|64SJ9XlAo", locale0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      LocalDateTime localDateTime0 = new LocalDateTime(701L, dateTimeZone0);
      Locale locale0 = Locale.CANADA;
      try { 
        localDateTime0.toString("UTC", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(20, 157);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 157
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test22()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      LocalDateTime localDateTime0 = new LocalDateTime(9223372036854775807L, (DateTimeZone) fixedDateTimeZone0);
      localDateTime0.toString("k_.sW", locale0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      long long0 = fixedDateTimeZone0.convertLocalToUTC((-715L), false);
      assertEquals((-715L), long0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(gregorianCalendar0);
      localDateTime0.toString("h>qd>KX03hg1V8", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "GMT+01:00");
      DateTimeZone.forTimeZone(simpleTimeZone0);
      DateTimeZone.forTimeZone(simpleTimeZone0);
      Locale locale0 = Locale.JAPANESE;
      LocalDateTime localDateTime0 = new LocalDateTime(2173L, dateTimeZone0);
      localDateTime0.toString("xOE#54rlqG[d|K~n@U", locale0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.UK;
      try { 
        localDateTime0.toString("ivI?4~L3(co=l>m[R", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test27()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Locale locale0 = Locale.JAPAN;
      localDateTime0.toString("Japanese (Japan)", locale0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(2592000000L, dateTimeZone0);
      Locale locale0 = Locale.CANADA;
      try { 
        localDateTime0.toString("LoH@xB[yK@]%WTg(J", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.convertLocalToUTC(3075L, false);
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      DateTimeZone.forOffsetHoursMinutes(0, 25);
      localDateTime0.toString("$/&+ZEQa", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test31()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.toString("-StrictChronology[", locale0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Locale locale0 = Locale.CHINESE;
      try { 
        localDateTime0.toString("@5l&B)L3E", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test33()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "GMT+01:00");
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(simpleTimeZone0);
      dateTimeZone1.UTC.isStandardOffset((-3));
      Locale locale0 = Locale.JAPANESE;
      LocalDateTime localDateTime0 = new LocalDateTime(2173L, dateTimeZone0);
      localDateTime0.toString("xOE#54rlqG[d|K~n@U", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test34()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.ITALIAN;
      localDateTime0.toString(";Xiau*_<\n$", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test35()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Locale locale0 = Locale.JAPAN;
      dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, 1);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.toString("Europe/Amsterdam", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test36()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      LocalDateTime localDateTime0 = LocalDateTime.now();
      dateTimeZone0.adjustOffset((-766623600001L), true);
      localDateTime0.toString("Europe/Amsterdam", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test37()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.toString("Ha??GoFDZY", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test38()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1);
      localDateTime0.toString("weekOfWeekyear");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(595);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      Locale locale0 = Locale.CANADA_FRENCH;
      long long0 = dateTimeZone0.convertLocalToUTC(1236L, false);
      assertEquals(641L, long0);
      
      String string0 = cachedDateTimeZone0.getName(486L, locale0);
      assertEquals("+00:00:00.595", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test40()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-924L));
      Locale locale0 = Locale.FRENCH;
      localDateTime0.toString("-N!!", locale0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-563), (-563));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -563
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      try { 
        localDateTime0.toString("vGI'2G0BGwe6", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test43()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      dateTimeZone0.getShortName(7208192L);
      LocalDateTime localDateTime0 = new LocalDateTime(12101459259L);
      Locale locale0 = Locale.JAPAN;
      String string0 = localDateTime0.toString("156dmo>-:v2D*$vjC$", locale0);
      assertEquals("156", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test44()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.toString("dn9kg!+fbE8Y~`8Xb");
  }

  @Test(timeout = 4000)
  @Ignore
  public void test45()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime(3740288L);
      Locale locale0 = Locale.FRENCH;
      fixedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      localDateTime0.toString("V<|%@u7e==\"", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test46()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      localDateTime0.toString("+R0^{Sg#4O*+I", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test47()  throws Throwable  {
      DateTimeZone.forID("+01:00");
      LocalDateTime localDateTime0 = new LocalDateTime(12101459259L);
      Locale locale0 = Locale.JAPAN;
      localDateTime0.toString("156dmo>-:v2D*$vjC$", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("^\"&j66*gB5");
      DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(407L);
      localDateTime0.toString("^\"&j66*gB5");
  }

  @Test(timeout = 4000)
  @Ignore
  public void test49()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.toString("c'WM;4V/r4ijFr8Qx");
  }

  @Test(timeout = 4000)
  @Ignore
  public void test50()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Locale locale0 = Locale.JAPAN;
      localDateTime0.toString("0~Bx", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test51()  throws Throwable  {
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
      LocalDateTime localDateTime0 = new LocalDateTime(14L);
      String string0 = localDateTime0.toString("GYMT");
      assertEquals("ap. J.-C.1970", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test52()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      String string0 = dateTimeZone0.UTC.getName(1965L, locale0);
      assertEquals("+00:00", string0);
      assertNotNull(string0);
      assertEquals("UTC", dateTimeZone0.toString());
      
      LocalDateTime localDateTime0 = new LocalDateTime(14L);
      String string1 = localDateTime0.toString("GYMT");
      assertEquals("ap. J.-C.1970", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test53()  throws Throwable  {
      DateTimeZone.setNameProvider((NameProvider) null);
      LocalDateTime localDateTime0 = new LocalDateTime(30585600000L);
      localDateTime0.toString("GYMT");
  }

  @Test(timeout = 4000)
  @Ignore
  public void test54()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      dateTimeZone0.UTC.getOffset((ReadableInstant) dateTime0);
      assertEquals(1566095562444L, dateTime0.getMillis());
      
      LocalDateTime localDateTime0 = new LocalDateTime((-9223372036848747808L), dateTimeZone0);
      Locale locale0 = Locale.CANADA;
      String string0 = localDateTime0.toString("yyyy-MM-d+TYHH::m:ss.SSS", locale0);
      assertEquals("-292275055-5-", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test55()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.withMillisOfSecond(12);
      String string0 = localDateTime0.toString("YSAO", locale0);
      assertEquals("02019", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test56()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(12);
      assertEquals("+12:00", dateTimeZone1.toString());
      
      String string0 = localDateTime0.toString("YSAO", locale0);
      assertEquals("02019", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test57()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.TAIWAN;
      localDateTime0.toString("x[;X@^R", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test58()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime((-9223372036848747808L), dateTimeZone1);
      Locale locale0 = Locale.CANADA;
      String string0 = localDateTime0.toString("yyyy-MM-d+TYHH::m:ss.SSS", locale0);
      assertEquals("-292275055-5-", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test59()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(12, "GMT+01:00");
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone1);
      
      Locale locale0 = Locale.ITALY;
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      long long0 = dateTimeZone1.UTC.adjustOffset(9223372036854775807L, false);
      assertEquals(9223372036854775807L, long0);
      assertEquals("+01:00", dateTimeZone1.getID());
      
      String string0 = localDateTime0.toString("YSAO", locale0);
      assertEquals("02019", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test60()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long0 = dateTimeZone0.convertLocalToUTC((-9223372036847575808L), false, (-1238L));
      assertEquals((-9223372036848747808L), long0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((-9223372036848747808L), dateTimeZone0);
      Locale locale0 = Locale.CANADA;
      String string0 = localDateTime0.toString("yyyy-MM-d+TYHH::m:ss.SSS", locale0);
      assertEquals("-292275055-5-", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test61()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-1878L));
      Locale locale0 = new Locale("-13:00");
      String string0 = localDateTime0.toString("+x sA>t+rq", locale0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test62()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone.setProvider((Provider) null);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      String string0 = localDateTime0.toString("D\"$Y[CuM&{K2s52fr", (Locale) null);
      assertEquals("000000000000000230", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test63()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(21);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) cachedDateTimeZone0);
      String string0 = localDateTime0.toString("YSAO", locale0);
      assertEquals("+00:00:00.021", cachedDateTimeZone0.toString());
      assertEquals("02019", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test64()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      int int0 = dateTimeZone0.getOffsetFromLocal(12);
      assertEquals(3600000, int0);
      
      Locale locale0 = Locale.ITALY;
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      String string0 = localDateTime0.toString("YSAO", locale0);
      assertEquals("02019", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test65()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.getOffsetFromLocal((-9223372036849919808L));
      LocalDateTime localDateTime0 = new LocalDateTime((-9223372036848747808L), dateTimeZone0);
      Locale locale0 = Locale.CANADA;
      localDateTime0.toString("yyyy-MM-d+TYHH::m:ss.SSS", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test66()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertNotNull(dateTimeZone0);
      
      Locale locale0 = Locale.ITALY;
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      String string0 = localDateTime0.toString("YSAO", locale0);
      assertEquals("02019", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test67()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone.setNameProvider((NameProvider) null);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.toString("D\"$Y[CuM&{K2s52fr", (Locale) null);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test68()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-13));
      LocalDateTime localDateTime0 = LocalDateTime.now();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      String string0 = cachedDateTimeZone0.getShortName((-1878L));
      Locale locale0 = new Locale("-13:00");
      String string1 = localDateTime0.toString("+x sA>t+rq", locale0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  @Ignore
  public void test69()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-13));
      LocalDateTime localDateTime0 = LocalDateTime.now();
      dateTimeZone0.convertLocalToUTC((-1878L), true);
      Locale locale0 = new Locale("-13:00");
      String string0 = localDateTime0.toString("+x sA>t+rq", locale0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test70()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(31536000000L, dateTimeZone0);
      Locale locale0 = Locale.TAIWAN;
      localDateTime0.toString("Ky1{fD", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test71()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-13));
      LocalDateTime localDateTime0 = LocalDateTime.now();
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      Locale locale0 = new Locale("-13:00");
      localDateTime0.toString("+x sA>t+rq", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test72()  throws Throwable  {
      Provider provider0 = DateTimeZone.getProvider();
      DateTimeZone.setProvider(provider0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.toString("YSAO", locale0);
  }
}

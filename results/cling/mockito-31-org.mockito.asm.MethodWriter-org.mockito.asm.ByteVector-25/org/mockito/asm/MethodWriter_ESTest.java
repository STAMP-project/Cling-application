/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 09:23:35 GMT 2019
 */

package org.mockito.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mockito.asm.Attribute;
import org.mockito.asm.ByteVector;
import org.mockito.asm.ClassReader;
import org.mockito.asm.ClassVisitor;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.Label;
import org.mockito.asm.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MethodWriter_ESTest extends MethodWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Z@GMRJ;DXc";
      stringArray0[1] = "SourcmDebugE+tenNion";
      stringArray0[2] = "SourcmDebugE+tenNion";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 34, "Z@GMRJ;DXc", "qpOs-T= MIY$){:3", "SourcmDebugE+tenNion", stringArray0, true, true);
      methodWriter0.visitFieldInsn((-1368), "getReturnType", "A%pE1&HG", "qpOs-T= MIY$){:3");
      Label label0 = new Label();
      methodWriter0.visitLabel(label0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(94);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "m%_@g?L^";
      stringArray0[1] = "m%_@g?L^";
      stringArray0[2] = "m%_@g?L^";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 182, "m%_@g?L^", "m%_@g?L^", "Ljava/lang/Synthetic;", stringArray0, false, false);
      methodWriter0.visitMaxs(108, 108);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(1858, 1858).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "org.mockito.asm.Type", "org.mockito.asm.Type", "org.mockito.asm.Type", stringArray0, false, false);
      methodWriter0.visitMaxs(3888, 1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(94);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "m%_@g?L^";
      stringArray0[1] = "m%_@g?L^";
      stringArray0[2] = "m%_@g?L^";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "m%_@g?L^", "m%_@g?L^", "m%_@g?L^", stringArray0, false, false);
      methodWriter0.visitIincInsn(2584, 2);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(124, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassWriter classWriter0 = new ClassWriter(59);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "hl(i0", "%`F_a>EgNB&", "bJZx%+I1so$J~", stringArray0, false, false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(90, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassWriter classWriter0 = new ClassWriter(4090);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 13, "qpOs-T= MIY$){:3", "k])T_Mu0Q", "AnnotationDefault", stringArray0, false, true);
      // Undeclared exception!
      try { 
        methodWriter0.visitIincInsn((-48), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -48
         //
         verifyException("org.mockito.asm.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", (String[]) null, true, true);
      methodWriter0.visitVarInsn(2, 1858);
      methodWriter0.visitIincInsn(1858, 1858);
      String[] stringArray0 = new String[2];
      MethodWriter methodWriter1 = null;
      try {
        methodWriter1 = new MethodWriter(classWriter0, 5, "s", ")t", "s", stringArray0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 16777228, "qpOs-T= MIY|$){:3", "qpOs-T= MIY|$){:3", "nZ](gNF\"zfBDQ;", stringArray0, true, false);
      methodWriter0.visitIincInsn((-1394), 5);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassWriter classWriter0 = new ClassWriter(1);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "O?&%SSo3|DZBo%:R{I", "O?&%SSo3|DZBo%:R{I", "zAy.", stringArray0, false, false);
      methodWriter0.visitIincInsn((-135), 1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(94);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "m%_@g?L^";
      stringArray0[1] = "m%_@g?L^";
      stringArray0[2] = "m%_@g?L^";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "m%_@g?L^", "m%_@g?L^", "m%_@g?L^", stringArray0, false, false);
      methodWriter0.visitLdcInsn("m%_@g?L^");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1700));
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "!sv|b.G*JMW,ZU", "!sv|b.G*JMW,ZU", "!sv|b.G*JMW,ZU", stringArray0, false, false);
      methodWriter0.visitLdcInsn("");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "qpOs-T= MIY$){:3";
      stringArray0[1] = "qpOs-T= MIY$){:3";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1858, "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", stringArray0, false, false);
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 2, "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", " ugqwqY7g0f", stringArray0, true, false);
      methodWriter1.visitIincInsn(1858, 47);
      assertNotSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Z@GMRJ;DXc";
      stringArray0[1] = "SourcmDebugE+tenNion";
      stringArray0[2] = "SourcmDebugE+tenNion";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 34, "Z@GMRJ;DXc", "qpOs-T= MIY$){:3", "SourcmDebugE+tenNion", stringArray0, true, true);
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 2, "@wD5", "qpOs-T= MIY$){:3", "Z@GMRJ;DXc", stringArray0, false, true);
      methodWriter1.visitIincInsn(73, 5);
      assertNotSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", "<init>", (String[]) null, true, false);
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, (-1025), "<init>", "<init>", "qpOs-T= MIY$){:3", (String[]) null, false, false);
      methodWriter1.visitIincInsn(1, (-3572));
      assertNotSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", "<init>", (String[]) null, true, false);
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, (-1025), "<init>", "<init>", "qpOs-T= MIY$){:3", (String[]) null, false, false);
      methodWriter0.visitLdcInsn("<init>");
      assertNotSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", (String[]) null, true, false);
      methodWriter0.visitVarInsn(2, 1858);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", (String[]) null, true, true);
      methodWriter0.visitVarInsn(6, (-246));
      String[] stringArray0 = new String[2];
      MethodWriter methodWriter1 = null;
      try {
        methodWriter1 = new MethodWriter(classWriter0, 5, "s", ")t", "s", stringArray0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3666);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.mocki;`.asm.Elge";
      stringArray0[1] = "org.mocki;`.asm.Elge";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 3666, "org.mocki;`.asm.Elge", "org.mocki;`.asm.Elge", "org.mocki;`.asm.Elge", stringArray0, false, false);
      methodWriter0.visitFieldInsn(58, "r<eGR,_GIyht", "org.mocki;`.asm.Elge", "org.mocki;`.asm.Elge");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 262144, "qpOs-T= MIY$){:3", "Z@GMRJ;DXc", "E\"id87~Awm<nk4hJA", (String[]) null, false, false);
      methodWriter0.visitFieldInsn(150, "Y*6YaRaOt@q}ve", "r>8fg@h4I[pX", "E\"id87~Awm<nk4hJA");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 466, "L#*6", "@)k!Y+%uyt>gSNDD", "getRturnT8p9", stringArray0, false, true);
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs((-978), 176);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Z@GMRJ;DXc";
      stringArray0[1] = "SourcmDebugE+tenNion";
      stringArray0[2] = "SourcmDebugE+tenNion";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 34, "Z@GMRJ;DXc", "qpOs-T= MIY$){:3", "SourcmDebugE+tenNion", stringArray0, false, true);
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs((-4009), 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.mockito.asm.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(94);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "m%_@g?L^";
      stringArray0[1] = "m%_@g?L^";
      stringArray0[2] = "m%_@g?L^";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "m%_@g?L^", "m%_@g?L^", "m%_@g?L^", stringArray0, false, false);
      methodWriter0.visitFrame(32767, 94, stringArray0, 17, stringArray0);
      methodWriter0.visitFrame(15, 76, stringArray0, (-2021), stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", "<init>", (String[]) null, true, false);
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(0, 16, (Object[]) null, 32767, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 16777228, "m%_@g?L^", "qpOs-T= MIY$){:3", "nZ](gNF\"zfBDQ;", stringArray0, true, false);
      // Undeclared exception!
      try { 
        methodWriter0.visitVarInsn(2786, 16777228);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2786
         //
         verifyException("org.mockito.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Z@GMRJ;DXc";
      stringArray0[1] = "SourcmDebugE+tenNion";
      stringArray0[2] = "SourcmDebugE+tenNion";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 34, "Z@GMRJ;DXc", "qpOs-T= MIY$){:3", "SourcmDebugE+tenNion", stringArray0, false, true);
      methodWriter0.visitVarInsn(108, 3776);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(1858, 1858).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "org.mockito.asm.Type", "org.mockito.asm.Type", "org.mockito.asm.Type", stringArray0, false, false);
      ClassReader classReader0 = new ClassReader("org.mockito.asm.Type");
      ClassWriter classWriter1 = new ClassWriter(classReader0, 1858);
      classReader0.accept((ClassVisitor) classWriter1, (-343));
      MethodWriter methodWriter1 = classWriter1.lastMethod;
      methodWriter1.visitVarInsn(1, 131072);
      assertNotSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(1858, 101).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "org.mockito.asm.Type", "org.mockito.asm.Type", "org.mockito.asm.Type", stringArray0, false, false);
      methodWriter0.visitVarInsn(1858, 1858);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", "<init>", (String[]) null, true, false);
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, (-1025), "<init>", "<init>", "qpOs-T= MIY$){:3", (String[]) null, false, false);
      methodWriter0.visitVarInsn(19, (-1188));
      assertNotSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", "<init>", (String[]) null, true, false);
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, (-1025), "<init>", "<init>", "qpOs-T= MIY$){:3", (String[]) null, false, false);
      methodWriter1.visitVarInsn(74, (-2436));
      assertNotSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 16777228, "qpOs-T= MIY|$){:3", "qpOs-T= MIY|$){:3", "nZ](gNF\"zfBDQ;", stringArray0, true, false);
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn((-1361), "qpOs-T= MIY|$){:3", "nZ](gNF\"zfBDQ;", "4f7g\"fLU@w");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-1025), "<init>", "<init>", "qpOs-T= MIY$){:3", (String[]) null, false, false);
      methodWriter0.visitMethodInsn(2383, "getArgumentTypes", "RuntimeInvisibleParameterAnnotations", "StackMap");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 16777228, "qpOs-T= MIY|$){:3", "qpOs-T= MIY|$){:3", "qpOs-T= MIY|$){:3", stringArray0, true, false);
      methodWriter0.visitFieldInsn(173, "c/Wce_h533L", "qpOs-T= MIY|$){:3", "c/Wce_h533L");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", "<init>", (String[]) null, true, false);
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, (-1025), "<init>", "<init>", "qpOs-T= MIY$){:3", (String[]) null, false, false);
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn(59, "getArgumentTypes", "getArgumentTypes", "getArgumentTypes");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", (String[]) null, true, false);
      methodWriter0.visitFieldInsn(897, "ul3gZEd=g", "Y1Y7\"7+,ok>3x_", "qpOs-T= MIY$){:3");
      MethodWriter methodWriter1 = null;
      try {
        methodWriter1 = new MethodWriter(classWriter0, 168, "c", ".s.IFJDCS", (String) null, (String[]) null, true, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "qpOs-T= MIY$){O:3";
      stringArray0[1] = "V6/(";
      stringArray0[2] = "Z@GMRJ;DXc";
      stringArray0[3] = "qpOs-T= MIY$){O:3";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 12, "qpOs-T= MIY$){O:3", "qpOs-T= MIY$){O:3", "qpOs-T= MIY$){O:3", stringArray0, true, true);
      methodWriter0.visitMethodInsn((-2293), "Exceptions", ".s.IFJDCS", "org.mockito.asm.Type");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(50);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "U+,H?(9+";
      stringArray0[1] = "U+,H?(9+";
      stringArray0[2] = "U+,H?(9+";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 256, "U+,H?(9+", "U+,H?(9+", "U+,H?(9+", stringArray0, false, false);
      methodWriter0.visitMethodInsn(3, "}SYmV?TfDH19", "}SYmV?TfDH19", "U+,H?(9+");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(1858, 1858).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "org.mockito.asm.Type", "org.mockito.asm.Type", "org.mockito.asm.Type", stringArray0, false, false);
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(4, (-2605), stringArray0, 2056, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Z@GMRJ;DXc";
      stringArray0[1] = "SourcmDebugE+tenNion";
      stringArray0[2] = "SourcmDebugE+tenNion";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 34, "Z@GMRJ;DXc", "qpOs-T= MIY$){:3", "SourcmDebugE+tenNion", stringArray0, false, true);
      methodWriter0.visitInsn(108);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(94);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "m%_@g?L^";
      stringArray0[1] = "m%_@g?L^";
      stringArray0[2] = "m%_@g?L^";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 182, "m%_@g?L^", "m%_@g?L^", "Ljava/lang/Synthetic;", stringArray0, false, false);
      methodWriter0.visitInsn(1006);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(1858, 1858).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "org.mockito.asm.Type", "org.mockito.asm.Type", "org.mockito.asm.Type", stringArray0, false, false);
      ClassReader classReader0 = new ClassReader("org.mockito.asm.Type");
      ClassWriter classWriter1 = new ClassWriter(classReader0, 1858);
      classReader0.accept((ClassVisitor) classWriter1, (-343));
      MethodWriter methodWriter1 = classWriter1.lastMethod;
      // Undeclared exception!
      try { 
        methodWriter1.visitInsn(131072);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassWriter classWriter0 = new ClassWriter(1);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "O?&%SSo3|DZBo%:R{I", "O?&%SSo3|DZBo%:R{I", "zAy.", stringArray0, false, false);
      methodWriter0.visitInsn(73);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3666);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.mocki;`.asm.Elge";
      stringArray0[1] = "org.mocki;`.asm.Elge";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 3666, "org.mocki;`.asm.Elge", "org.mocki;`.asm.Elge", "org.mocki;`.asm.Elge", stringArray0, false, false);
      methodWriter0.visitFrame(1, 1, stringArray0, 540, stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn((-1700), (-1700)).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "!sv|b.G*JMW,ZU", "!sv|b.G*JMW,ZU", "!sv|b.G*JMW,ZU", stringArray0, false, false);
      methodWriter0.visitFrame(1, (-1721), stringArray0, 267386880, stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Label label0 = new Label();
      label0.status = 5;
      MethodWriter.getNewOffset((int[]) null, (int[]) null, label0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 3666;
      Label label0 = mock(Label.class, new ViolatedAssumptionAnswer());
      MethodWriter.getNewOffset(intArray0, (int[]) null, label0);
      String[] stringArray0 = new String[5];
      ClassWriter classWriter0 = new ClassWriter((-4104));
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, 0, "L", "ePy-Z-%", "value ", stringArray0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(1858, 1858).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "org.mockito.asm.Type", "org.mockito.asm.Type", "org.mockito.asm.Type", stringArray0, false, false);
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      int int0 = MethodWriter.getNewOffset(intArray0, intArray0, 1, 3097);
      assertEquals(3098, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.mockito.asm.Type");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1858);
      classReader0.accept((ClassVisitor) classWriter0, (-343));
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      int int0 = MethodWriter.getNewOffset(intArray0, intArray0, 1, 3097);
      assertEquals(3098, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.mockito.asm.Type");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1858);
      classReader0.accept((ClassVisitor) classWriter0, (-343));
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putLong(0L);
      assertSame(byteVector1, byteVector0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(94);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "m%_@g?L^";
      stringArray0[1] = "m%_@g?L^";
      stringArray0[2] = "m%_@g?L^";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "m%_@g?L^", "m%_@g?L^", "m%_@g?L^", stringArray0, false, false);
      methodWriter0.visitAnnotation("m%_@g?L^", false);
      classWriter0.toByteArray();
      MethodWriter methodWriter1 = null;
      try {
        methodWriter1 = new MethodWriter(classWriter0, 3046, "m%_@g?L^", "a-", "m%_@g?L^", stringArray0, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", "<init>", (String[]) null, true, false);
      methodWriter0.visitAnnotationDefault();
      classWriter0.toByteArray();
      MethodWriter methodWriter1 = null;
      try {
        methodWriter1 = new MethodWriter(classWriter0, (-899), ",JOR[L*", "<init>", "pOhL%Q/3]A8n=tR", (String[]) null, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassReader classReader0 = new ClassReader("org.mockito.asm.Type");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1858);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 190, "org.mockito.asm.Type", "org.mockito.asm.Type", "org.mockito.asm.Type", stringArray0, false, false);
      methodWriter0.visitIntInsn(190, 8);
      classWriter0.toByteArray();
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-1025), "<init>", "<init>", "qpOs-T= MIY$){:3", (String[]) null, false, false);
      classWriter0.toByteArray();
      MethodWriter methodWriter1 = null;
      try {
        methodWriter1 = new MethodWriter(classWriter0, (-899), ",JOR[L*", "<init>", "pOhL%Q/3]A8n=tR", (String[]) null, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = 16777218;
      MethodWriter.getNewOffset(intArray0, intArray0, 16777218, 53);
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, 3, "Synthetic", "vi\"]", (String) null, stringArray0, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(1858, 1858).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "org.mockito.asm.Type", "org.mockito.asm.Type", "org.mockito.asm.Type", stringArray0, false, false);
      int[] intArray0 = new int[4];
      intArray0[1] = 3097;
      int int0 = MethodWriter.getNewOffset(intArray0, intArray0, 3097, 2715);
      assertEquals((-3479), int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "SourcmDebugE+tenNion";
      stringArray0[1] = "SourcmDebugE+tenNion";
      stringArray0[2] = "SourcmDebugE+tenNion";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 56, "Z@GMRJ;DXc", "qpOs-T= MIY$){:3", "SourcmDebugE+tenNion", stringArray0, false, true);
      Label label0 = new Label();
      methodWriter0.visitLocalVariable("SourcmDebugE+tenNion", "ZR'", "SourcmDebugE+tenNion", label0, label0, 2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(1858, 1858, 1858, 1858, 0).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "org.mockito.asm.Type", "org.mockito.asm.Type", "org.mockito.asm.Type", stringArray0, false, false);
      ClassReader classReader0 = new ClassReader("org.mockito.asm.Type");
      ClassWriter classWriter1 = new ClassWriter(classReader0, 1858);
      methodWriter0.visitAnnotation("org.mockito.asm.Type", true);
      classReader0.accept((ClassVisitor) classWriter1, (-348));
      ByteVector byteVector0 = classWriter1.pool;
      methodWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", "<init>", (String[]) null, true, false);
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, (-1025), "<init>", "<init>", "qpOs-T= MIY$){:3", (String[]) null, false, false);
      methodWriter0.visitMaxs(90, 76);
      assertNotSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", "<init>", (String[]) null, true, false);
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, (-1025), "<init>", "<init>", "qpOs-T= MIY$){:3", (String[]) null, false, false);
      methodWriter1.visitIntInsn((-2436), (-2436));
      Label label0 = new Label();
      methodWriter1.visitLocalVariable("getArgumentTypes", "getInternalName", "getArgumentTypes", label0, label0, (-2436));
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(280, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "U~~PqrIP f\reA%H,", "qpOs-T= MIY$){:3", (String) null, (String[]) null, true, true);
      classWriter0.toByteArray();
      MethodWriter methodWriter1 = null;
      try {
        methodWriter1 = new MethodWriter(classWriter0, 285212674, "Ljava/lang/Synthetic;", "equals", "toString", (String[]) null, true, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(94);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "m%_@g?L^";
      stringArray0[1] = "m%_@g?L^";
      stringArray0[2] = "m%_@g?L^";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "m%_@g?L^", "m%_@g?L^", "m%_@g?L^", stringArray0, false, false);
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, (-2634), "m%_@g?L^", "org.mockito.asm.Type", "m%_@g?L^", stringArray0, false, false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(183, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", "<init>", (String[]) null, true, false);
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, (-1025), "<init>", "<init>", "qpOs-T= MIY$){:3", (String[]) null, false, false);
      methodWriter0.visitInsn(99);
      methodWriter0.visitFrame(Integer.MAX_VALUE, 47, (Object[]) null, 1470, (Object[]) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(179, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", "<init>", (String[]) null, true, false);
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, (-1025), "<init>", "<init>", "qpOs-T= MIY$){:3", (String[]) null, false, false);
      MethodWriter methodWriter2 = new MethodWriter(classWriter0, 1, "Ye07`bke", "8hFY5:", "Ye07`bke", (String[]) null, false, false);
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.putUTF8("Ye07`bke");
      ByteVector byteVector1 = byteVector0.putLong(1);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      ClassReader classReader0 = new ClassReader("org.mockito.asm.Label");
      classReader0.accept((ClassVisitor) classWriter0, 2);
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putLong(408);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(94);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "m%_@g?L^";
      stringArray0[1] = "m%_@g?L^";
      stringArray0[2] = "m%_@g?L^";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "m%_@g?L^", "m%_@g?L^", "m%_@g?L^", stringArray0, false, false);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putLong(32L);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.putLong(1858);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 16777228, "qpOs-T= MIY|$){:3", "qpOs-T= MIY|$){:3", "nZ](gNF\"zfBDQ;", stringArray0, true, false);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", "qpOs-T= MIY$){:3", (String[]) null, false, false);
      classWriter0.toByteArray();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "qpOs-T= MIY$){:3";
      MethodWriter methodWriter1 = null;
      try {
        methodWriter1 = new MethodWriter(classWriter0, 1, "q0R79%],Nce],PTb", "Synthetic", "qpOs-T= MIY$){:3", stringArray0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1700));
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "!sv|b.G*JMW,ZU", "!sv|b.G*JMW,ZU", "!sv|b.G*JMW,ZU", stringArray0, false, false);
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 3341, "CpD-", "<init>", "!sv|b.G*JMW,ZU", stringArray0, false, false);
      methodWriter0.visitMethodInsn(1024, "", ",ZyeX&)=%ynhkNFSkb", "CpD-");
      assertNotSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(1858, 1858, 1858, 1858, 0).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "org.mockito.asm.Type", "org.mockito.asm.Type", "org.mockito.asm.Type", stringArray0, false, false);
      ClassReader classReader0 = new ClassReader("org.mockito.asm.Type");
      ClassWriter classWriter1 = new ClassWriter(classReader0, 1858);
      methodWriter0.visitAnnotation("org.mockito.asm.Type", false);
      ByteVector byteVector0 = classWriter1.pool;
      methodWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(94);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "m%_@g?L^";
      stringArray0[1] = "m%_@g?L^";
      stringArray0[2] = "m%_@g?L^";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "m%_@g?L^", "m%_@g?L^", "m%_@g?L^", stringArray0, false, false);
      methodWriter0.visitFrame(32767, 94, stringArray0, 17, stringArray0);
      methodWriter0.visitVarInsn(512, 512);
      ByteVector byteVector0 = new ByteVector();
      methodWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassReader classReader0 = new ClassReader("org.mockito.asm.Type");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1858);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 190, "org.mockito.asm.Type", "org.mockito.asm.Type", "org.mockito.asm.Type", stringArray0, false, false);
      methodWriter0.visitIntInsn(190, 8);
      methodWriter0.visitFrame(2, (-1463), stringArray0, 8, stringArray0);
      classWriter0.toByteArray();
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(classWriter0).newClass(anyString());
      doReturn(1858, 1858).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[4];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "org.mockito.asm.Type", "org.mockito.asm.Type", "org.mockito.asm.Type", stringArray0, false, false);
      ClassReader classReader0 = new ClassReader("org.mockito.asm.Type");
      ClassWriter classWriter1 = new ClassWriter(classReader0, 1858);
      classReader0.accept((ClassVisitor) classWriter1, (-3459));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "SourcmDebugE+tenNion";
      stringArray0[1] = "SourcmDebugE+tenNion";
      stringArray0[2] = "SourcmDebugE+tenNion";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Synthetic", "@)k!Y+%uyt>gSNDD", "getReturnType", stringArray0, true, false);
      methodWriter0.visitMaxs(912, 1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 16777228, "qpOs-T= MIY|$){:3", "qpOs-T= MIY|$){:3", "nZ](gNF\"zfBDQ;", stringArray0, true, false);
      methodWriter0.visitMaxs(127, 220);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(94);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "m%_@g?L^";
      stringArray0[1] = "m%_@g?L^";
      stringArray0[2] = "m%_@g?L^";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "m%_@g?L^", "m%_@g?L^", "m%_@g?L^", stringArray0, false, false);
      methodWriter0.visitAnnotationDefault();
      ByteVector byteVector0 = new ByteVector(168);
      methodWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassWriter classWriter0 = new ClassWriter(1);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "O?&%SSo3|DZBo%:R{I", "O?&%SSo3|DZBo%:R{I", "zAy.", stringArray0, false, false);
      methodWriter0.visitAnnotationDefault();
      ByteVector byteVector0 = new ByteVector(172);
      methodWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(94);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "m%_@g?L^";
      stringArray0[1] = "m%_@g?L^";
      stringArray0[2] = "m%_@g?L^";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 182, "m%_@g?L^", "m%_@g?L^", "Ljava/lang/Synthetic;", stringArray0, false, false);
      methodWriter0.visitVarInsn((-1188), 94);
      Label label0 = new Label();
      methodWriter0.visitLocalVariable("H", "m%_@g?L^", "byte", label0, label0, 1170);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(237, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(530, 530, 530, 530, 530).when(classWriter0).newClass(anyString());
      doReturn(64, 106, 16777219).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[7];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "z", (String) null, (String) null, stringArray0, false, false);
      ByteVector byteVector0 = new ByteVector();
      methodWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(1858, 1858, 1858).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "org.mockito.asm.Type", "org.mockito.asm.Type", "org.mockito.asm.Type", stringArray0, false, false);
      methodWriter0.exceptionCount = 1858;
      ClassReader classReader0 = new ClassReader("org.mockito.asm.Type");
      ClassWriter classWriter1 = new ClassWriter(classReader0, 1858);
      ByteVector byteVector0 = classWriter1.pool;
      // Undeclared exception!
      try { 
        methodWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(94);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "m%_@g?L^";
      stringArray0[1] = "m%_@g?L^";
      stringArray0[2] = "m%_@g?L^";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "m%_@g?L^", "m%_@g?L^", "m%_@g?L^", stringArray0, false, false);
      methodWriter0.classReaderOffset = 94;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(1858, 1858).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "org.mockito.asm.Type", "org.mockito.asm.Type", "org.mockito.asm.Type", stringArray0, false, false);
      ClassReader classReader0 = new ClassReader("org.mockito.asm.Type");
      ClassWriter classWriter1 = new ClassWriter(classReader0, 1858);
      classReader0.accept((ClassVisitor) classWriter1, (-343));
      byte[] byteArray0 = classWriter1.toByteArray();
      assertEquals(8368, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassWriter classWriter0 = new ClassWriter(77);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-2829), "", "CpD-", "CpD-", stringArray0, false, false);
      ByteVector byteVector0 = new ByteVector();
      methodWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(94);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "m%_@g?L^";
      stringArray0[1] = "m%_@g?L^";
      stringArray0[2] = "m%_@g?L^";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 182, "m%_@g?L^", "m%_@g?L^", "Ljava/lang/Synthetic;", stringArray0, false, false);
      ByteVector byteVector0 = classWriter0.pool;
      methodWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.put11(18, 16777228);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 16777228, "m%_@g?L^", "qpOs-T= MIY|$){:3", "nZ](gNF\"zfBDQ;", stringArray0, true, false);
      methodWriter0.put(byteVector0);
      methodWriter0.visitIincInsn(1858, (-1394));
      ByteVector byteVector1 = byteVector0.putUTF8("RuntimeInvisibleAnnotations");
      methodWriter0.put(byteVector0);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(94);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "m%_@g?L^";
      stringArray0[1] = "m%_@g?L^";
      stringArray0[2] = "m%_@g?L^";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "m%_@g?L^", "m%_@g?L^", "m%_@g?L^", stringArray0, false, false);
      methodWriter0.visitAnnotation("m%_@g?L^", false);
      methodWriter0.visitVarInsn(512, 512);
      methodWriter0.visitIincInsn(76, 267386880);
      ByteVector byteVector0 = new ByteVector();
      methodWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1858);
      ByteVector byteVector0 = classWriter0.pool;
      classWriter0.visitInnerClass("%;i53\u0001}UX%nL~Gk51s", "%;i53\u0001}UX%nL~Gk51s", "RuntimeInvisibleParameterAnnotations", 155);
      byteVector0.put11(18, 16777248);
      String[] stringArray0 = new String[5];
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, (-1251), "getElementType", "getElementType", "%;i53\u0001}UX%nL~Gk51s", stringArray0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(1858, 1858).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "org.mockito.asm.Type", "org.mockito.asm.Type", "org.mockito.asm.Type", stringArray0, false, false);
      ByteVector byteVector0 = new ByteVector(1);
      ByteVector byteVector1 = byteVector0.put11(2, 106);
      assertSame(byteVector1, byteVector0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1210);
      classWriter0.newField("JSR/RET are not supported with computeFrames option", "JSR/RET are not supported with computeFrames option", "Ow/'-A");
      classWriter0.visitInnerClass("/}39/YJ7!2", "97?l0;X +{E>GP", "KPc'z#tB:Kw\"", 4096);
      classWriter0.newDouble(83.688431);
      String[] stringArray0 = new String[1];
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, 4096, "/}39/YJ7!2", "1! :($", "SourceDebugExtension", stringArray0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(1858, 1858).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "org.mockito.asm.Type", "org.mockito.asm.Type", "org.mockito.asm.Type", stringArray0, false, false);
      ClassReader classReader0 = new ClassReader("org.mockito.asm.Type");
      ClassWriter classWriter1 = new ClassWriter(classReader0, 1858);
      ByteVector byteVector0 = classWriter1.pool;
      ByteVector byteVector1 = byteVector0.putLong(0L);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ClassWriter classWriter0 = mock(ClassWriter.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(classWriter0).newClass(anyString());
      doReturn(1858, 1858).when(classWriter0).newUTF8(anyString());
      String[] stringArray0 = new String[4];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "org.mockito.asm.Type", "org.mockito.asm.Type", "org.mockito.asm.Type", stringArray0, false, false);
      ClassReader classReader0 = new ClassReader("org.mockito.asm.Type");
      ClassWriter classWriter1 = new ClassWriter(classReader0, 1858);
      int int0 = classWriter1.newClass("org.mockito.asm.Type");
      assertEquals(291, int0);
  }
}

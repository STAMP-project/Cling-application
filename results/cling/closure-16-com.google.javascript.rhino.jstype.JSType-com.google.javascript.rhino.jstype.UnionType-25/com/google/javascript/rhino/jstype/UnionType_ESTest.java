/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 04:10:08 GMT 2019
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class UnionType_ESTest extends UnionType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = JSType.getGreatestSubtype((JSType) booleanType0, (JSType) booleanType0);
      assertFalse(jSType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      JSType jSType0 = allType0.getGreatestSubtype(unionType0);
      assertFalse(jSType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      JSType jSType0 = unionType0.getRestrictedTypeGivenToBooleanOutcome(true);
      boolean boolean0 = jSType0.canAssignTo(unionType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectType objectType0 = mock(ObjectType.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectType0).isAllType();
      doReturn(false).when(objectType0).isRecordType();
      doReturn(false, false).when(objectType0).isUnionType();
      doReturn((ObjectType) null, (ObjectType) null).when(objectType0).toObjectType();
      doReturn(false).when(objectType0).isUnknownType();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      boolean boolean0 = jSType0.canAssignTo(objectType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      stringType0.testForEquality(noResolvedType0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowInequality(noResolvedType0);
      priorityQueue0.add(noResolvedType0);
      unionType0.getTypesUnderEquality(jSType_TypePair0.typeA);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ";NBrFA;JjfYl-Oa/5");
      NullType nullType0 = new NullType(jSTypeRegistry0);
      nullType0.testForEquality(templateType0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ErrorReporter errorReporter0 = mock(ErrorReporter.class, new ViolatedAssumptionAnswer());
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      nullType0.testForEquality(allType0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ErrorReporter errorReporter0 = mock(ErrorReporter.class, new ViolatedAssumptionAnswer());
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality(unionType0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "XhTgmQ301]yLH9AcR%}", 1, 1);
      allType0.testForEqualityHelper(namedType0, jSType_TypePair0.typeB);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) voidType0;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs(voidType0, jSTypeArray0);
      functionType0.testForEquality(voidType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      // Undeclared exception!
      try { 
        allType0.getGreatestSubtype(unknownType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", (-1063), (-1063));
      JSType jSType0 = namedType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
      JSType jSType1 = jSType0.getGreatestSubtype(namedType0);
      assertFalse(jSType1.isNominalConstructor());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      assertNull(templateType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectType objectType0 = mock(ObjectType.class, new ViolatedAssumptionAnswer());
      doReturn((TemplateType) null).when(objectType0).toMaybeTemplateType();
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) objectType0);
      assertNull(templateType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      JSType jSType0 = unionType0.getRestrictedTypeGivenToBooleanOutcome(true);
      boolean boolean0 = jSType0.isNominalConstructor();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      boolean boolean0 = unionType0.isNominalConstructor();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = mock(JSTypeRegistry.class, new ViolatedAssumptionAnswer());
      doReturn((FunctionType) null, (JSType) null, (JSType) null, (JSType) null, (JSType) null).when(jSTypeRegistry1).getNativeType(any(com.google.javascript.rhino.jstype.JSTypeNative.class));
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry1);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry1, immutableList0);
      unionType0.autobox();
      assertTrue(noObjectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ErrorReporter errorReporter0 = mock(ErrorReporter.class, new ViolatedAssumptionAnswer());
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      boolean boolean0 = unionType0.hasDisplayName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Stack<JSType> stack0 = new Stack<JSType>();
      UnionType unionType0 = new UnionType((JSTypeRegistry) null, stack0);
      EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, unionType0, "Not declared as a constructor");
      boolean boolean0 = enumElementType0.hasDisplayName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      JSType jSType0 = unionType0.getRestrictedTypeGivenToBooleanOutcome(true);
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowInequality(jSType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType_TypePair0.typeA, "");
      boolean boolean0 = enumElementType0.hasDisplayName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      ObjectType objectType0 = mock(ObjectType.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectType0).isAllType();
      doReturn(false).when(objectType0).isEmptyType();
      doReturn(false).when(objectType0).isUnionType();
      doReturn(false, false).when(objectType0).isUnknownType();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      boolean boolean0 = unionType0.canTestForShallowEqualityWith(objectType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ObjectType objectType0 = mock(ObjectType.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectType0).isAllType();
      doReturn(true).when(objectType0).isSubtype(any(com.google.javascript.rhino.jstype.JSType.class));
      doReturn(false).when(objectType0).isUnionType();
      doReturn(false).when(objectType0).isObject();
      doReturn(false).when(objectType0).isUnknownType();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      boolean boolean0 = noObjectType0.canTestForShallowEqualityWith(objectType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ObjectType objectType0 = mock(ObjectType.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectType0).isAllType();
      doReturn(false).when(objectType0).isSubtype(any(com.google.javascript.rhino.jstype.JSType.class));
      doReturn(false).when(objectType0).isUnionType();
      doReturn(false).when(objectType0).isObject();
      doReturn(false).when(objectType0).isUnknownType();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      boolean boolean0 = noObjectType0.canTestForShallowEqualityWith(objectType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowInequality(noType0);
      boolean boolean0 = jSType_TypePair0.typeA.isTemplateType();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      JSType jSType0 = unionType0.getRestrictedTypeGivenToBooleanOutcome(true);
      JSType jSType1 = jSType0.getLeastSupertype(unionType0);
      assertSame(jSType0, jSType1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      boolean boolean0 = recordType0.equals(recordType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      boolean boolean0 = booleanType0.equals("*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
      boolean boolean0 = JSType.isEquivalent(jSType0, (JSType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ObjectType objectType0 = mock(ObjectType.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectType0).isEquivalentTo(any(com.google.javascript.rhino.jstype.JSType.class));
      boolean boolean0 = JSType.isEquivalent(objectType0, objectType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = mock(JSTypeRegistry.class, new ViolatedAssumptionAnswer());
      doReturn((FunctionType) null, noObjectType0, (JSType) null, (JSType) null, (JSType) null).when(jSTypeRegistry1).getNativeType(any(com.google.javascript.rhino.jstype.JSTypeNative.class));
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry1);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry1, immutableList0);
      JSType jSType0 = unionType0.findPropertyType("Unknown class name");
      assertFalse(jSType0.isParameterizedType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      priorityQueue0.add(stringType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowInequality(unionType0);
      JSType.TypePair jSType_TypePair1 = unionType0.getTypesUnderEquality(jSType_TypePair0.typeB);
      assertNotSame(jSType_TypePair0, jSType_TypePair1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      JSType jSType0 = unionType0.getRestrictedTypeGivenToBooleanOutcome(true);
      priorityQueue0.add(jSType0);
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowInequality(unionType0);
      JSType.TypePair jSType_TypePair1 = unionType0.getTypesUnderEquality(jSType_TypePair0.typeB);
      assertNotSame(jSType_TypePair1, jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ErrorReporter errorReporter0 = mock(ErrorReporter.class, new ViolatedAssumptionAnswer());
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "BOOLEAN_OBJECT_FUNCTION_TYPE", (ObjectType) null);
      ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject(prototypeObjectType0, (ObjectType) null);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) objectType0, (List<JSType>) stack0);
      stack0.add((JSType) functionType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality(unionType0);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoType noType0 = new NoType(jSTypeRegistry0);
      FunctionType functionType0 = noType0.cloneWithoutArrowType();
      boolean boolean0 = functionType0.canTestForEqualityWith(noType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSType[] jSTypeArray0 = new JSType[2];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      jSTypeArray0[0] = (JSType) objectType0;
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
      jSTypeArray0[1] = (JSType) templateType0;
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      UnionType unionType0 = new UnionType((JSTypeRegistry) null, immutableList0);
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      unionType0.getTypesUnderEquality(functionType0);
      assertTrue(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ObjectType objectType0 = mock(ObjectType.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectType0).isAllType();
      doReturn(false).when(objectType0).isEmptyType();
      doReturn(false).when(objectType0).isNoResolvedType();
      doReturn(false).when(objectType0).isUnionType();
      doReturn(false).when(objectType0).isUnknownType();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderEquality(objectType0);
      assertNotNull(jSType_TypePair0);
  }
}

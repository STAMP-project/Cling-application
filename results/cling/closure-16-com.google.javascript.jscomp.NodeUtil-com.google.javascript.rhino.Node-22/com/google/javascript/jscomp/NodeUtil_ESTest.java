/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 05:44:04 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.MoveFunctionDeclarations;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeSimplifyRegExp;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.copyNameAnnotations(node0, node0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = Node.newString("YUfYAbG+hu", 17, (-1880363742));
      NodeUtil.isHoistedFunctionDeclaration(node0);
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        peepholeRemoveDeadCode0.tryFoldFor(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName("[d{';ya[:E;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.DefaultPassConfig");
      Node node1 = new Node(29, node0, node0, 37, 1781);
      assertEquals(153333, node1.getSourcePosition());
      assertEquals(29, node1.getType());
      
      NodeUtil.isLiteralValue(node0, false);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(48);
      boolean boolean1 = NodeUtil.isValidQualifiedName(".7-z]GOF3=,V3");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newString("[d{';{yam:Eo");
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
      
      boolean boolean1 = NodeUtil.isValidQualifiedName("~.");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("false", string0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = Node.newString("", 676, 676);
      NodeUtil.getImpureBooleanValue(node0);
      assertEquals(2769572, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertEquals(676, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString("o6>]Z,$f\"KVKAg");
      boolean boolean0 = NodeUtil.isSymmetricOperation(node0);
      assertTrue(node0.isString());
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
      assertEquals(44, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node(122, 122, 122);
      // Undeclared exception!
      try { 
        NodeUtil.getPureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(12).when(node0).getType();
      boolean boolean0 = NodeUtil.isSymmetricOperation(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-774), 43).when(node0).getType();
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 2, (-1270));
      NodeUtil.getImpureBooleanValue(node0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "BANG");
      NodeUtil.getPureBooleanValue(node0);
      assertEquals(38, node0.getType());
      assertTrue(node0.isName());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = Node.newString("[d{';{yam:Eo");
      NodeUtil.getPureBooleanValue(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals((-1), node0.getLineno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDelProp());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newString("[d{';{yam:Eo");
      NodeUtil.getStringValue(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("[d{';ya[:E;");
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      Node node0 = syntheticAst0.getAstRoot(abstractCompiler0);
      NodeUtil.isRelationalOperation(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSCRIPT [source_file: [d{';ya[:E;] [input_id: InputId: [d{';ya[:E;]
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("[d{';ya[:E;");
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      Node node0 = syntheticAst0.getAstRoot(abstractCompiler0);
      NodeUtil.getStringValue(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSCRIPT [source_file: [d{';ya[:E;] [input_id: InputId: [d{';ya[:E;]
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("[d{';ya[:E;");
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      Node node0 = syntheticAst0.getAstRoot(abstractCompiler0);
      NodeUtil.getPureBooleanValue(node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSCRIPT [source_file: [d{';ya[:E;] [input_id: InputId: [d{';ya[:E;]
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(node0).getType();
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      peepholeSimplifyRegExp0.mayEffectMutableState(node0);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(43);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 43: FALSE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(105);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 105: FUNCTION
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(83);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 83: PARAM_LIST
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(89);
      assertEquals("&=", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(54);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(35);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 35: GETELEM
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(37);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 37: CALL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("[d{';ya[:E;");
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      Node node0 = syntheticAst0.getAstRoot(abstractCompiler0);
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertFalse(boolean0);
      
      NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertEquals(132, node0.getType());
      assertTrue(node0.isScript());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node0).getSideEffectFlags();
      doReturn(true).when(node0).isCall();
      boolean boolean0 = NodeUtil.callHasLocalResult(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(120, (-1210), 110).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      NodeUtil.mayHaveSideEffects(node0, abstractCompiler0);
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Object object0 = new Object();
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("", object0).when(node1).getProp(anyInt());
      Node node2 = NodeUtil.newName(codingConvention0, "", node1);
      NodeUtil.isFunctionExpression(node2);
      assertEquals(0, node2.getSourcePosition());
      assertEquals(38, node2.getType());
      assertTrue(node2.isName());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(121, 76, 3294).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      NodeUtil.mayHaveSideEffects(node0, abstractCompiler0);
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(node1).getProp(anyInt());
      Node node2 = NodeUtil.newName(codingConvention0, "", node1);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        peepholeRemoveDeadCode0.tryFoldDo(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.ScopedAliases");
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertFalse(node0.isRegExp());
      assertFalse(boolean0);
      
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node1 = peepholeSimplifyRegExp0.optimizeSubtree(node0);
      assertEquals((-1), node1.getCharno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(48);
      Node node0 = new Node(45, 31, 44);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY, (-935), (-2026));
      Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
      NodeUtil.evaluatesToLocalValue(node0, predicate0);
      boolean boolean0 = NodeUtil.isTryFinallyNode(node0, node0);
      assertFalse(boolean0);
      assertFalse(node0.isTry());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-2182)).when(node0).getType();
      Predicate<Node> predicate0 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.Node.class));
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 119, predicate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 2, (-1270));
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getFirstChild();
      doReturn(31).when(node1).getType();
      boolean boolean0 = NodeUtil.containsType(node1, 0);
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(50).when(node0).getType();
      boolean boolean0 = NodeUtil.containsType(node0, 50, nodeUtil_MatchDeclaration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "");
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getNext();
      // Undeclared exception!
      try { 
        NodeUtil.newVarNode(")", node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidSimpleName("k!NcZfZ(qw$T");
      Node node0 = Node.newString("k!NcZfZ(qw$T");
      boolean boolean1 = NodeUtil.isSimpleOperator(node0);
      assertTrue(boolean1 == boolean0);
      assertTrue(node0.isString());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(48);
      Node node0 = new Node(45, 31, 44);
      boolean boolean0 = NodeUtil.isCallOrNew(node0);
      assertEquals(127020, node0.getSourcePosition());
      assertEquals(45, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY, (-935), (-2026));
      Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
      NodeUtil.evaluatesToLocalValue(node0, predicate0);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail((-3461));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -3461
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("[d{';ya[:E;");
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      Node node0 = syntheticAst0.getAstRoot(abstractCompiler0);
      Node node1 = new Node(52, node0, node0, node0, node0, 4, 102);
      assertEquals(16486, node1.getSourcePosition());
      assertTrue(node1.isInstanceOf());
      
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1034).when(node0).getType();
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(node0).isGetElem();
      doReturn(false).when(node0).isGetProp();
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      assertTrue(node1.isCall());
      assertEquals((-1), node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = NodeUtil.newName(jqueryCodingConvention0, "[", node0);
      // Undeclared exception!
      try { 
        NodeUtil.isVarDeclaration(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newString("[d{';{yam:Eo");
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertFalse(boolean0);
      
      Node node1 = node0.cloneTree();
      assertNotSame(node1, node0);
      assertEquals((-1), node1.getCharno());
      assertEquals(40, node1.getType());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(962, 27).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0, abstractCompiler0);
      assertFalse(boolean0);
      
      Node node1 = NodeUtil.booleanNode(false);
      Node node2 = node1.removeFirstChild();
      assertNull(node2);
      assertTrue(node1.isFalse());
      assertEquals((-1), node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("[d{';ya[:E;");
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      Node node0 = syntheticAst0.getAstRoot(abstractCompiler0);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node(47, 41, 41);
      node0.removeChildren();
      assertEquals(167977, node0.getSourcePosition());
      assertEquals(47, node0.getType());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("");
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newString("[d{';{ya`:Eo");
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags((-231));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertTrue(node1.isVoid());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = NodeUtil.numberNode(Double.NEGATIVE_INFINITY, node0);
      assertEquals(29, node1.getType());
      assertFalse(node0.isTrue());
      assertEquals((-1), node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      assertFalse(node0.isExprResult());
      
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertFalse(boolean0);
      assertEquals(43, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString("[d{';{yam:Eo");
      NodeUtil.isSimpleOperator(node0);
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.DefaultPassConfig");
      Node node1 = new Node(29, node0, node0, 37, 1781);
      assertEquals(153333, node1.getSourcePosition());
      assertEquals(29, node1.getType());
      assertTrue(node1.hasOneChild());
      
      Double double0 = NodeUtil.getStringNumberValue("D<zcgp6'GR;26T");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("[d{';ya[:E;");
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      Node node0 = syntheticAst0.getAstRoot(abstractCompiler0);
      NodeUtil.isImmutableValue(node0);
      Node node1 = new Node(36, node0, node0, 125, 31);
      assertEquals(512031, node1.getSourcePosition());
      assertEquals(36, node1.getType());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.DefaultPassConfig");
      Node node1 = new Node(29, node0, node0, 37, 1781);
      boolean boolean0 = NodeUtil.isAssociative(1005);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isSimpleOperator(node1);
      assertEquals(153333, node1.getSourcePosition());
      assertEquals(40, node0.getType());
      assertEquals(29, node1.getType());
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("[d{';ya[:E;");
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      Node node0 = syntheticAst0.getAstRoot(abstractCompiler0);
      NodeUtil.isSimpleOperator(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(48);
      Node node0 = new Node(45, 31, 44);
      MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, moveFunctionDeclarations0);
      nodeTraversal0.traverse(node0);
      assertEquals(31, nodeTraversal0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Node node1 = new Node((-4254), node0, node0, node0);
      boolean boolean0 = node1.isOptionalArg();
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isSimpleOperator(node1);
      assertEquals((-4254), node1.getType());
      assertTrue(node1.hasOneChild());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("[d{';ya[:E;");
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      Node node0 = syntheticAst0.getAstRoot(abstractCompiler0);
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertFalse(boolean0);
      
      Node node1 = NodeUtil.newVarNode("[d{';ya[:E;", node0);
      assertEquals(118, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(48);
      Node node0 = new Node(45, 31, 44);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: SHEQ 31
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(48);
      SyntheticAst syntheticAst0 = new SyntheticAst(")gq!y-H+_V@^;R_");
      Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertTrue(boolean0);
      assertTrue(node0.isScript());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(48);
      boolean boolean1 = NodeUtil.isCommutative(5);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(48);
      Node node0 = new Node(45, 31, 44);
      boolean boolean0 = NodeUtil.isGet(node0);
      assertEquals(127020, node0.getSourcePosition());
      assertEquals(45, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(node0).isGetProp();
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      assertEquals(37, node1.getType());
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newString("YUfYAbG+hu", 17, (-1880363742));
      boolean boolean0 = NodeUtil.isGet(node0);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isSimpleOperator(node0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative((-101));
      assertFalse(boolean0);
      
      Node node0 = Node.newString("k!NcZfZ(qw$T");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.DefaultPassConfig");
      boolean boolean0 = NodeUtil.isAssociative(1005);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isLiteralValue(node0, false);
      assertEquals((-1), node0.getCharno());
      assertEquals(40, node0.getType());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = new Node(45, 31, 44);
      NodeUtil.isLiteralValue(node0, true);
      boolean boolean0 = NodeUtil.isGet(node0);
      assertEquals(45, node0.getType());
      assertEquals(127020, node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("[d{';ya[:E;");
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      Node node0 = syntheticAst0.getAstRoot(abstractCompiler0);
      NodeUtil.isImmutableValue(node0);
      try { 
        node0.setDouble(12);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SCRIPT [source_file: [d{';ya[:E;] [input_id: InputId: [d{';ya[:E;] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("[d{';ya[:E;");
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      Node node0 = syntheticAst0.getAstRoot(abstractCompiler0);
      NodeUtil.isImmutableValue(node0);
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertTrue(node0.isScript());
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = new Node(45, 31, 44);
      Node node1 = NodeUtil.numberNode((-2462.1771883), node0);
      NodeUtil.isLiteralValue(node1, true);
      assertTrue(node1.isNumber());
      assertEquals(45, node0.getType());
      assertEquals(127020, node1.getSourcePosition());
      assertEquals(44, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newString((-1505), "*:$J4j\"\u0007FFQ", 45, 8233);
      assertEquals(188415, node0.getSourcePosition());
      assertEquals((-1505), node0.getType());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newString("wwuS04sI?.qu/i9>^{[");
      node0.children();
      assertTrue(node0.isString());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newString("", 676, 676);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: STRING  676
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.ScopedAliases");
      boolean boolean0 = node0.isEquivalentToTyped(node0);
      assertEquals((-1), node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Node node1 = new Node((-4254), node0, node0, node0);
      boolean boolean0 = node1.isOptionalArg();
      boolean boolean1 = NodeUtil.isLiteralValue(node1, true);
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(boolean1 == boolean0);
      assertEquals((-4254), node1.getType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      node0.setLineno(2341);
      assertEquals(2341, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = node0.isQualifiedName();
      assertFalse(boolean0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getNext();
      doReturn((Object) null, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newVarNode("7", node0);
      node1.setWasEmptyNode(true);
      boolean boolean0 = node1.wasEmptyNode();
      assertEquals(0, node1.getCharno());
      assertTrue(node1.isVar());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newNumber((double) 16);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NUMBER 16.0 does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.ScopedAliases");
      String string0 = node0.checkTreeEquals(node0);
      assertEquals(0, node0.getChildCount());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(96).when(node0).getType();
      int int0 = NodeUtil.getOpFromAssignmentOp(node0);
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node0).getType();
      doReturn((String) null).when(node0).toString();
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assignment op:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = Node.newString("k", 128, 128);
      boolean boolean0 = NodeUtil.isVarDeclaration(node0);
      boolean boolean1 = NodeUtil.isSimpleOperatorType(54);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(node0).hasChildren();
      doReturn(true).when(node0).isBlock();
      boolean boolean0 = NodeUtil.hasCatchHandler(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getFirstChild();
      String string0 = NodeUtil.arrayToString(node1);
      assertEquals("-Infinity", string0);
      assertTrue(node0.isNumber());
      assertNotNull(string0);
      assertEquals((-1), node0.getCharno());
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(node0).getType();
      doReturn(false).when(node0).isNull();
      boolean boolean0 = NodeUtil.mayBeString(node0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 2, (-1270));
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_BooleanResultPredicate0, nodeUtil_BooleanResultPredicate0);
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 2, (-1270));
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(109);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 109
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newString(103, "wwuS04sI?.qu/i9>^{[", 103, (-2517));
      boolean boolean0 = NodeUtil.isNumericResult(node0);
      assertEquals(103, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertTrue(node0.isTrue());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(52, 19).when(node0).getType();
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 119, nodeUtil_NumbericResultPredicate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("s").when(node0).getString();
      doReturn(38).when(node0).getType();
      boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-369), 50, 49).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0, abstractCompiler0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.ScopedAliases");
      String string0 = NodeUtil.getSourceName(node0);
      assertTrue(node0.isString());
      assertNull(string0);
      assertEquals((-1), node0.getCharno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.getSourceFile(node0);
      assertEquals((-1), node0.getLineno());
      assertEquals(44, node0.getType());
      assertTrue(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY);
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      assertTrue(node1.isCall());
      assertFalse(node0.isString());
      assertFalse(node1.isGetElem());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(node0).isGetProp();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0, (AbstractCompiler) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got FALSE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(962, 27).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0, abstractCompiler0);
      assertFalse(boolean0);
      
      Node node1 = NodeUtil.booleanNode(false);
      node1.getChildBefore((Node) null);
      assertEquals(43, node1.getType());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 2, (-1270));
      Node node1 = NodeUtil.newExpr(node0);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      boolean boolean0 = peepholeSimplifyRegExp0.mayEffectMutableState(node1);
      assertEquals((-1), node1.getSourcePosition());
      assertTrue(node1.isExprResult());
      assertEquals(39, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 2, (-1270));
      assertFalse(node0.isName());
      
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getFirstChild();
      doReturn(true).when(node1).isCall();
      doReturn(false).when(node1).isNoSideEffectsCall();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      NodeUtil.functionCallHasSideEffects(node1, abstractCompiler0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(45, 31, 44);
      NodeUtil.getBestJSDocInfo(node0);
      assertEquals(45, node0.getType());
      assertEquals(127020, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = Node.newString("[d{';{yam:Eo");
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      boolean boolean1 = node0.isOnlyModifiesThisCall();
      assertTrue(node0.isString());
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "BANG");
      node0.useSourceInfoIfMissingFrom(node0);
      boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newString("[d{';{yam:Eo");
      NodeUtil.isSimpleOperator(node0);
      Node node1 = NodeUtil.numberNode(1.0, node0);
      assertEquals(39, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.DefaultPassConfig");
      boolean boolean0 = NodeUtil.isAssociative(1005);
      boolean boolean1 = NodeUtil.isSimpleOperator(node0);
      assertEquals(40, node0.getType());
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("#");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.ScopedAliases");
      // Undeclared exception!
      try { 
        node0.getChildBefore(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY, (-935), (-2026));
      Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
      NodeUtil.evaluatesToLocalValue(node0, predicate0);
      NodeUtil.isPrototypePropertyDeclaration(node0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(48);
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-1973));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1973
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newString("YUfYAbG+hu", 17, (-1880363742));
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isSimpleOperator(node0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("[d{';ya[:E;");
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      Node node0 = syntheticAst0.getAstRoot(abstractCompiler0);
      Node node1 = new Node(52, node0, node0, node0, node0, 4, 102);
      NodeUtil.isSimpleOperatorType(4095);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      boolean boolean0 = nodeUtil_BooleanResultPredicate0.apply(node1);
      assertTrue(boolean0);
      assertEquals(132, node0.getType());
      assertEquals(16486, node1.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = new Node((-3310));
      assertFalse(node0.isAnd());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getParent();
      doReturn(false).when(node1).isFunction();
      Node node2 = NodeUtil.getBestLValue(node1);
      assertFalse(node0.isAssign());
      assertEquals((-3310), node0.getType());
      assertNull(node2);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newString("*9OXyVaJg}'fd", 25, 25);
      Node node1 = Node.newString(45, ">;xW", (-2798), (-2310));
      Node node2 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node1).when(node2).getFirstChild();
      doReturn(node0, (Node) null).when(node2).getParent();
      doReturn(true, true).when(node2).isFunction();
      // Undeclared exception!
      try { 
        NodeUtil.getNearestFunctionName(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY);
      assertFalse(node0.isFunction());
      
      NodeUtil.getNearestFunctionName(node0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY, (-935), (-2026));
      Node node1 = new Node(113, 1519, 101);
      node0.addChildToFront(node1);
      assertEquals(6221925, node1.getSourcePosition());
      
      Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
      NodeUtil.evaluatesToLocalValue(node0, predicate0);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      boolean boolean0 = peepholeSimplifyRegExp0.mayEffectMutableState(node0);
      assertTrue(boolean0);
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = Node.newString("[d{';{yam:Eo");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("[d{';ya[:E;");
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      Node node0 = syntheticAst0.getAstRoot(abstractCompiler0);
      Node node1 = Node.newString("~", 38, 846);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(40, node1.getType());
      assertEquals(156494, node1.getSourcePosition());
      
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(51).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      NodeUtil.mayHaveSideEffects(node0, abstractCompiler0);
      boolean boolean0 = NodeUtil.isSimpleOperatorType(306);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getNext();
      doReturn((Object) null, (Object) null).when(node0).getProp(anyInt());
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node1 = NodeUtil.newVarNode("o6>]Z,$f\"KVKAg", node0);
      peepholeSimplifyRegExp0.mayEffectMutableState(node1);
      assertEquals(0, node1.getSourcePosition());
      assertEquals(118, node1.getType());
      assertTrue(node1.isVar());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(120, (-1210), 110).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      NodeUtil.mayHaveSideEffects(node0, abstractCompiler0);
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Object object0 = new Object();
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("", object0).when(node1).getProp(anyInt());
      Node node2 = NodeUtil.newName(codingConvention0, "", node1);
      AbstractCompiler abstractCompiler1 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node2, abstractCompiler1);
      assertTrue(node2.isName());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(45, 1497, 54).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0, abstractCompiler0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(110).when(node0).getType();
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = peepholeSimplifyRegExp0.mayEffectMutableState(node0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(51);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(48);
      assertFalse(boolean0);
      
      Node node0 = new Node(45, 31, 44);
      NodeUtil.getPrototypeClassName(node0);
      assertEquals(127020, node0.getSourcePosition());
      assertEquals(45, node0.getType());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getLastChild();
      doReturn(true).when(node0).isGetProp();
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypeClassName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newString("[d{';{yam:Eo");
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("[d{';ya[:E;");
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      Node node0 = syntheticAst0.getAstRoot(abstractCompiler0);
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got SCRIPT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "5XM/QaOjchQ]t'Bw.F");
      assertTrue(node0.isGetProp());
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName("strictModuleDepCheck");
      assertTrue(boolean0);
  }
}

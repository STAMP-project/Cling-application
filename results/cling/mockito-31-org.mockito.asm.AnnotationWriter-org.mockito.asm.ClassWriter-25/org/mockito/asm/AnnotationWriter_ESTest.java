/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 09:13:31 GMT 2019
 */

package org.mockito.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mockito.asm.AnnotationVisitor;
import org.mockito.asm.AnnotationWriter;
import org.mockito.asm.ByteVector;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.FieldVisitor;
import org.mockito.asm.FieldWriter;
import org.mockito.asm.Item;
import org.mockito.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AnnotationWriter_ESTest extends AnnotationWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(598);
      Item[] itemArray0 = new Item[1];
      classWriter0.typeTable = itemArray0;
      int int0 = classWriter0.newConst("RuntimeVisileAnnotatio");
      assertEquals(2, int0);
      
      int int1 = classWriter0.addType("RuntimeVisileAnnotatio");
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(598);
      Item[] itemArray0 = new Item[1];
      classWriter0.typeTable = itemArray0;
      int int0 = classWriter0.addType("RuntimeVisileAnnotatio");
      assertEquals(1, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(24, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}2O3xY{l";
      stringArray0[1] = "";
      stringArray0[2] = "";
      classWriter0.visit(4475, 4475, "}2O3xY{l", "}2O3xY{l", "}2O3xY{l", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(72, byteArray0.length);
      
      int int0 = classWriter0.newConst("Yr4Gm}lQ9+s=s|\"srf-");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2006));
      Short short0 = new Short((short)777);
      classWriter0.visitField((-2006), "u1`", "u1`", "u1`", short0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ",gMpG:Mk";
      stringArray0[1] = ",gMpG:Mk";
      stringArray0[2] = "u1`";
      stringArray0[3] = ",gMpG:Mk";
      stringArray0[4] = "u1`";
      stringArray0[5] = ",gMpG:Mk";
      classWriter0.visit(1706, (-2006), "u1`", "Iw2q", ",gMpG:Mk", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(156, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(42);
      classWriter0.newInteger(42);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Wn$3]G<";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Wn$3]G<";
      stringArray0[4] = "Wn$3]G<";
      stringArray0[5] = "Wn$3]G<";
      stringArray0[6] = "";
      classWriter0.visit(42, 4475, "Wn$3]G<", "", "", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(100, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(44);
      classWriter0.addUninitializedType("", 16);
      classWriter0.invalidFrames = true;
      classWriter0.addType("}2O3xY{l");
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitAnnotation("'U-]6,Kv=tbs6jMVz", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(86, byteArray0.length);
      
      Item item0 = classWriter0.newLong(0);
      Item item1 = classWriter0.newLong(0L);
      assertNotNull(item1);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2060);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Y", "Y", "Y", "Y");
      classWriter0.visitField(1, "Y", "Y", "Y", "Y");
      classWriter0.visitAnnotation("!#[kze4Q!?>Z", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(165, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      classWriter0.visitAnnotation("", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(69, byteArray0.length);
      
      Boolean boolean0 = Boolean.TRUE;
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      classWriter0.addType("");
      classWriter0.visitAnnotation("", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(69, byteArray0.length);
      
      int int0 = classWriter0.addUninitializedType("", 1509);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      int int0 = classWriter0.addType("");
      assertEquals(1, int0);
      
      classWriter0.visitAnnotation("", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(69, byteArray0.length);
      
      int int1 = classWriter0.addType("");
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(525);
      Short short0 = new Short((short)1122);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", short0);
      classWriter0.visitField(525, ";DO)c]CgcUM#Bus~[", "ob0k Ud", "ob0k Ud", short0);
      classWriter0.visitAnnotation("ob0k Ud", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(180, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newLong(0);
      classWriter0.newLong(0L);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(2, "F{w!+JA05V\"*", "F{w!+JA05V\"*", "Signature", "value ");
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(598);
      int int0 = classWriter0.newConst("RuntimeVisileAnnotatio");
      assertEquals(2, int0);
      
      int int1 = classWriter0.addType("RuntimeVisileAnnotatio");
      assertEquals(1, int1);
      
      int int2 = classWriter0.addType("RuntimeVisileAnnotatio");
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2047);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", "", "");
      classWriter0.addUninitializedType("", 7);
      int int0 = classWriter0.addUninitializedType("", 4);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2006));
      Short short0 = new Short((short)777);
      classWriter0.visitField((-2006), "u1`", "u1`", "u1`", short0);
      classWriter0.visitAnnotation("Gy7", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(170, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2060);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "YD,.^=", "YD,.^=", "YD,.^=", "YD,.^=");
      classWriter0.visitField(1, "YD,.^=", "YD,.^=", "YD,.^=", "YD,.^=");
      classWriter0.visitAnnotation("YD,.^=", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(152, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      classWriter0.newMethodItem("6", "6", "", false);
      classWriter0.visitAnnotation("EnclosingMethod", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(102, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EnclosingMethod";
      classWriter0.visit(9, 4493, "EnclosingMethod", "EnclosingMethod", "EnclosingMethod", stringArray0);
      classWriter0.visitAnnotation("EnclosingMethod", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(125, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      classWriter0.visitAnnotation("EclosingMethod", true);
      classWriter0.toByteArray();
      Boolean boolean0 = Boolean.valueOf(true);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(9, "JPb", "", "JSR/RET are not supported with computeFrames option", boolean0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      classWriter0.visitAnnotation("X_ep~',&pG.0", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(79, byteArray0.length);
      
      classWriter0.addUninitializedType("RuntimeInvisibleAnnotations", 9);
      int int0 = classWriter0.addType("6#N].&f]l~dJRhZD");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("EnclosingMethod", true);
      classWriter0.toByteArray();
      Boolean boolean0 = Boolean.valueOf("SU0;!6Zi=-M0*LNtqa");
      annotationVisitor0.visit("SU0;!6Zi=-M0*LNtqa", boolean0);
      annotationVisitor0.visit("", boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitSource("", "int");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(80, byteArray0.length);
      
      Item item0 = classWriter0.newLong(0);
      Item item1 = classWriter0.newLong(0L);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitSource("", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(77, byteArray0.length);
      
      Short short0 = new Short((short)44);
      int int0 = classWriter0.newConst(short0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2060);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", "", "Y");
      classWriter0.visitField(1, "Y", "Y", "", "Y");
      classWriter0.visitSource(">UKT_b#+y", (String) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(143, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2936));
      classWriter0.newMethodItem("hJiq6nx+6J5<k''`jZ", "hJiq6nx+6J5<k''`jZ", "hJiq6nx+6J5<k''`jZ", false);
      classWriter0.visitSource("java/lang/Object", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(127, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitField((-2103), "[/`(.eL=:U^}.k/J-?4", "[/`(.eL=:U^}.k/J-?4", ":4z:0KADoe", "[/`(.eL=:U^}.k/J-?4");
      classWriter0.visitSource(":4z:0KADoe", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(201, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitSource("", "");
      classWriter0.toByteArray();
      Item item0 = classWriter0.newFieldItem("", "boolean", "");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2047);
      classWriter0.addUninitializedType("", 7);
      int int0 = classWriter0.addUninitializedType("", 4);
      assertEquals(2, int0);
      
      classWriter0.visitSource("", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(77, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2936));
      Boolean boolean0 = new Boolean(false);
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
      
      classWriter0.visitSource("java/lang/Object", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(98, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitSource("", "");
      classWriter0.toByteArray();
      int int0 = classWriter0.addType("qVas");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      classWriter0.addType("");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(24, byteArray0.length);
      
      int int0 = classWriter0.addType("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      classWriter0.visitSource("", "");
      classWriter0.toByteArray();
      Class<Character> class0 = Character.class;
      Type type0 = Type.getType(class0);
      FieldVisitor fieldVisitor0 = classWriter0.visitField((-650), "K:}2", "K:}2", "", type0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(39);
      classWriter0.newInteger(39);
      classWriter0.newInteger(39);
      classWriter0.visitSource("4'i?o", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(87, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(38);
      classWriter0.visitAnnotation("", false);
      Byte byte0 = new Byte((byte) (-38));
      classWriter0.visitField(4528, "", "/H7DfY\u0004{6", "", byte0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(156, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      classWriter0.visitAnnotation("EclosingMethod", true);
      classWriter0.toByteArray();
      Byte byte0 = new Byte((byte)102);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(168, "Signature", "EclosingMethod", "Signature", byte0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitSource("", "");
      classWriter0.toByteArray();
      Byte byte0 = new Byte((byte) (-30));
      FieldVisitor fieldVisitor0 = classWriter0.visitField(220, "", "SourceDebugExtension", "", byte0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      classWriter0.visitAnnotation("", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(69, byteArray0.length);
      
      Boolean boolean0 = new Boolean(false);
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      classWriter0.visitAnnotation("EclosingMethod", true);
      classWriter0.toByteArray();
      Boolean boolean0 = Boolean.FALSE;
      FieldVisitor fieldVisitor0 = classWriter0.visitField(9, "JPb", "", "JSR/RET are not supported with computeFrames option", boolean0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}2O3xY{l";
      stringArray0[1] = "";
      stringArray0[2] = "";
      classWriter0.visit(4493, (-1410), "}2O3xY{l", "}2O3xY{l", "}2O3xY{l", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(91, byteArray0.length);
      
      Boolean boolean0 = new Boolean(false);
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      classWriter0.visitAnnotation("", true);
      Class<Character> class0 = Character.class;
      Type type0 = Type.getType(class0);
      classWriter0.visitField((-650), "K:}2", "K:}2", "", type0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(188, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3196);
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 1);
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(525);
      classWriter0.newFloat(525);
      classWriter0.newFloat(525);
      Character character0 = new Character('f');
      classWriter0.visitField(1147, "SourceDebugExtension", "SourceDebugExtension", (String) null, character0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(89, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(525);
      classWriter0.newFloat(525);
      classWriter0.newFloat(525);
      classWriter0.visitSource("W", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(497);
      classWriter0.newFloat(497);
      classWriter0.newFloat(497);
      classWriter0.visitOuterClass(";zcr|^fH1-X", (String) null, "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(525);
      classWriter0.newFloat(525);
      classWriter0.newFloat(525);
      classWriter0.visitInnerClass("void", "F?:4wfrM~,", "void", 2);
      classWriter0.visitInnerClass("void", "o,RrY5_u0GLPh+Ym2dx", "!MtN*c", 68);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      classWriter0.visitOuterClass("", "", "");
      Item item0 = classWriter0.newFloat(0.0F);
      Item item1 = classWriter0.newFloat(0.0F);
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(11);
      classWriter0.newFloat(11);
      classWriter0.newFloat(11);
      classWriter0.visitOuterClass("", "", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(525);
      classWriter0.newFloat(525);
      classWriter0.newFloat(525);
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(525);
      classWriter0.newFloat(525);
      classWriter0.newFloat(525);
      classWriter0.visit(1056, 4475, "", "RuntimeInvisibleParameterAnnotations", "", (String[]) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(94, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(525);
      classWriter0.newFloat(525);
      classWriter0.newFloat(525);
      classWriter0.visitSource((String) null, ".s.IFJDCS");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      classWriter0.visitSource("", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(77, byteArray0.length);
      
      Item item0 = classWriter0.newFloat(0.0F);
      Item item1 = classWriter0.newFloat(0.0F);
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newDouble(0);
      classWriter0.newDouble(0);
      classWriter0.visitField((-2103), "[/`(.eL=:U^}.k/J-?4", "[/`(.eL=:U^}.k/J-?4", ":4z:0KADoe", "[/`(.eL=:U^}.k/J-?4");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(160, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Item item0 = classWriter0.newDouble(0);
      classWriter0.visitOuterClass("Ocf#a@}tIru)1j3k", "", "");
      Item item1 = classWriter0.newDouble(0);
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newDouble(0);
      classWriter0.newDouble(0);
      classWriter0.visitOuterClass("SourceDebugExtension", ":<`", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newDouble(0);
      classWriter0.newDouble(0);
      classWriter0.visitInnerClass("", "", (String) null, 37);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitSource((String) null, (String) null);
      Item item0 = classWriter0.newDouble(0);
      Item item1 = classWriter0.newDouble(0);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newDouble(0);
      classWriter0.newDouble(0);
      classWriter0.visitSource(":4z:0KADoe", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(96, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2047);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", "", "");
      Type type0 = Type.BYTE_TYPE;
      int int0 = classWriter0.newConst(type0);
      assertEquals(4, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(89, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      Type type0 = Type.getType("Deprecated");
      classWriter0.newConst(type0);
      classWriter0.visitSource("", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(525);
      classWriter0.visitOuterClass("(", (String) null, "}C(?#'K{a(s");
      Type type0 = Type.INT_TYPE;
      int int0 = classWriter0.newConst(type0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(525);
      classWriter0.visitInnerClass(",KRjJ<PrSvi|", ",KRjJ<PrSvi|", ",KRjJ<PrSvi|", 525);
      classWriter0.visitInnerClass("", "short", "", 525);
      Type type0 = Type.INT_TYPE;
      int int0 = classWriter0.newConst(type0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-30));
      Type type0 = Type.INT_TYPE;
      classWriter0.newConstItem(type0);
      classWriter0.visitOuterClass("InnerClasses", "}N1", "InnerClasses");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2047);
      Type type0 = Type.LONG_TYPE;
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "}2O3xY{2l";
      stringArray0[2] = "";
      stringArray0[3] = "StackMapTable";
      stringArray0[4] = "";
      classWriter0.visit(86, 8, "}2O3xY{2l", "", "StackMapTable", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(103, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2018);
      Type type0 = Type.BYTE_TYPE;
      classWriter0.newConst(type0);
      classWriter0.visitSource((String) null, ".s.IFJDCS");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2047);
      Type type0 = Type.BYTE_TYPE;
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
      
      classWriter0.visitSource("", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(84, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1880));
      classWriter0.visitOuterClass("", "", "");
      classWriter0.newMethodItem("", "", "", true);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newNameType("", "");
      classWriter0.newMethod("", "", "", true);
      int int0 = classWriter0.newConst("");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newNameType("", "");
      int int0 = classWriter0.newMethod("", "", "", true);
      assertEquals(4, int0);
      
      classWriter0.visitAnnotation("m:-", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(88, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-650));
      classWriter0.visitOuterClass("", "", "");
      classWriter0.visitInnerClass("", "", "", 2);
      classWriter0.visitOuterClass("MNkhY9A{EL", "", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1880));
      classWriter0.visitOuterClass("", "", "");
      classWriter0.visitSource("", "");
      classWriter0.toByteArray();
      Item item0 = classWriter0.newMethodItem("", "", "", true);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Item item0 = classWriter0.newLong(0);
      classWriter0.visitField((-2103), "[/`(.eL=:U^}.k/J-?4", "[/`(.eL=:U^}.k/J-?4", ":4z:0KADoe", "[/`(.eL=:U^}.k/J-?4");
      classWriter0.toByteArray();
      ByteVector byteVector0 = classWriter0.pool;
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector0, 0);
      // Undeclared exception!
      try { 
        annotationWriter0.visit(":4z:0KADoe", item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.Item@6aa30bc3
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2047);
      Type type0 = Type.LONG_TYPE;
      classWriter0.newConst(type0);
      classWriter0.visitOuterClass("", "", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1040));
      classWriter0.visitInnerClass((String) null, (String) null, "", (-330));
      Type type0 = Type.INT_TYPE;
      int int0 = classWriter0.newConst(type0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2018);
      Type type0 = Type.BYTE_TYPE;
      classWriter0.newConst(type0);
      classWriter0.visitInnerClass("RuimeVisibleAnnotations", ".s.IFJDCS", (String) null, 7);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Item item0 = classWriter0.newLong(0);
      classWriter0.visitSource(":4z:0KADoe", "");
      classWriter0.toByteArray();
      ByteVector byteVector0 = classWriter0.pool;
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector0, 0);
      // Undeclared exception!
      try { 
        annotationWriter0.visit(":4z:0KADoe", item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.Item@3513c0c
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-30));
      classWriter0.newLong((-30));
      classWriter0.visitAnnotation("ZxF}.", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(81, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(42);
      classWriter0.newLong(42);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Wn$3]G<";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Wn$3]G<";
      stringArray0[4] = "Wn$3]G<";
      stringArray0[5] = "Wn$3]G<";
      stringArray0[6] = "";
      classWriter0.visit(42, 4475, "Wn$3]G<", "", "", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(104, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EnclosingMethod";
      classWriter0.visit(9, 4493, "EnclosingMethod", "EnclosingMethod", "EnclosingMethod", stringArray0);
      classWriter0.newFloat((-1324.972F));
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(90, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(525);
      classWriter0.newFloat(525);
      classWriter0.newFloat(525);
      classWriter0.visitAnnotation("{/18mao0A2)#sH|", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(89, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(525);
      Item item0 = classWriter0.newFloat(525);
      Item item1 = classWriter0.newFloat(525);
      assertSame(item1, item0);
      
      classWriter0.visitAnnotation("L", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(73, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(525);
      classWriter0.newFloat(525);
      classWriter0.newFloat(525);
      classWriter0.visitInnerClass("", "'07Vgovse2DpQ's#@h", "", 74);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(90, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newDouble(0);
      classWriter0.newDouble(0);
      classWriter0.visitAnnotation("m:-", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(81, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-30));
      classWriter0.newDouble((-30));
      classWriter0.newDouble((-30));
      classWriter0.visitAnnotation("ZxF}.", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(81, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitInnerClass("i9L*c:VTc.C#", "i9L*c:VTc.C#", "i9L*c:VTc.C#", 0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(74, byteArray0.length);
      
      Item item0 = classWriter0.newDouble(0);
      Item item1 = classWriter0.newDouble(0);
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(42);
      classWriter0.addType("Wn$3]G<");
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("Wn$3]G<", false);
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("#cB}3|Cd4+-#mnhd", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitInnerClass("", "", "", 2);
      int int0 = classWriter0.addType("qVas");
      assertEquals(1, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(61, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(525);
      classWriter0.visitInnerClass(",KR<PGSviM", ",KR<PGSviM", ",KR<PGSviM", 525);
      classWriter0.newFieldItem(",KR<PGSviM", ",KR<PGSviM", ",KR<PGSviM");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(81, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2047);
      Type type0 = Type.LONG_TYPE;
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
      
      classWriter0.visitInnerClass("", "", "|j8Iv-$3-q7+8sPCi", 12);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(88, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      classWriter0.visitAnnotation("EclosingMethod", true);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newMethodItem("6N0,!fZ-=-M0*FLNtqa", "", "6N0,!fZ-=-M0*FLNtqa", true);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2047);
      Type type0 = Type.LONG_TYPE;
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
      
      classWriter0.visitAnnotation("", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(76, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2047);
      Type type0 = Type.LONG_TYPE;
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
      
      classWriter0.visitAnnotation("", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(74, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(618);
      classWriter0.visitAnnotation("RuntimeInvisibleAnnotations", false);
      classWriter0.newFieldItem("<p%;2-w.2#Fj_{j8A", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(99, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ByteVector byteVector0 = mock(ByteVector.class, new ViolatedAssumptionAnswer());
      ByteVector byteVector1 = new ByteVector();
      ClassWriter classWriter0 = new ClassWriter(525);
      classWriter0.newFieldItem(",KR<PGSviM", ",KR<PGSviM", ",KR<PGSviM");
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector1, byteVector0, 16777219);
      // Undeclared exception!
      try { 
        annotationWriter0.visit("", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      classWriter0.visitAnnotation("EclosingMethod", true);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newFieldItem("", "", "6N0,!fZ-=-M0*FLNtqa");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(42);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Wn$3]G<";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Wn$3]G<";
      stringArray0[4] = "Wn$3]G<";
      stringArray0[5] = "Wn$3]G<";
      stringArray0[6] = "";
      classWriter0.visit(42, 4475, "Wn$3]G<", "", "", stringArray0);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("Wn$3]G<", false);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("#cB}3|Cd4+-#mnhd", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}2O3xY{2l";
      stringArray0[1] = "";
      stringArray0[2] = "";
      classWriter0.visit(4475, 4475, "}2O3xY{2l", "}2O3xY{2l", "}2O3xY{2l", stringArray0);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", false);
      classWriter0.toByteArray();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@5e2dfe5b
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(525);
      Character character0 = new Character('f');
      classWriter0.visitField(1147, "SourceDebugExtension", "SourceDebugExtension", (String) null, character0);
      classWriter0.visitAnnotation("J1GH*:?", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(136, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1767);
      Character character0 = Character.valueOf('>');
      classWriter0.visitField(9, ">o2~m5", ">o2~m5", "\"C,-LlH=yW", character0);
      classWriter0.visitAnnotation("ZxF}.", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(151, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1767);
      classWriter0.visitSource(">ov2~m5", ">ov2~m5");
      Character character0 = Character.valueOf('>');
      classWriter0.visitField(9, ">ov2~m5", ">ov2~m5", ">ov2~m5", character0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(148, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(38);
      classWriter0.visitAnnotation("", false);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((byte) (-38), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newConst("nZi1jomq\"");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      classWriter0.visitAnnotation("*w|pk", true);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(9, 183);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitSource("& 6dRXUBCjVX|g#RK8", "gP5Nq->D[YkV");
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitAnnotation("m:-", false);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newMethodItem("=>O>JyC&(1i1rF1", "", "=>O>JyC&(1i1rF1", false);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("EnclosingMethod", true);
      classWriter0.toByteArray();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        annotationVisitor0.visit(" Tf#bx4", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@3d5c3f82
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newConst("");
      Item item0 = classWriter0.newMethodItem("=>O>JyC&(1i1rF1", "", "=>O>JyC&(1i1rF1", false);
      assertNotNull(item0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 08:29:19 GMT 2019
 */

package com.google.javascript.rhino.head.tools.debugger;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.EvaluatorException;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Dim_ESTest extends Dim_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test0()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeObject nativeObject0 = new NativeObject();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      nativeObject0.put(" % ", (Scriptable) nativeArray0, (Object) context0);
      Class<NativeArray> class0 = NativeArray.class;
      // Undeclared exception!
      try { 
        nativeArray0.getDefaultValue(class0);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.NativeArray
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Context context0 = new Context();
      NativeObject nativeObject0 = new NativeObject();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      context0.getImplementationVersion();
      nativeObject0.put("", (Scriptable) nativeArray0, (Object) nativeArray0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Context context0 = Context.enter();
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      context0.stringIsCompilableUnit("0*iFn%^>ZG:n&8k");
      Scriptable scriptable0 = ScriptableObject.getArrayPrototype(scriptableObject0);
      scriptableObject0.put("0*iFn%^>ZG:n&8k", scriptable0, (Object) "0*iFn%^>ZG:n&8k");
  }
}

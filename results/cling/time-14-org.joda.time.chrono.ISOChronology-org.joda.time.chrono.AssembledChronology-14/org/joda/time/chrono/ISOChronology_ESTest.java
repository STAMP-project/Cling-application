/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 17:28:35 GMT 2019
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.ISOChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ISOChronology_ESTest extends ISOChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      long long0 = buddhistChronology0.getDateTimeMillis(2, 2, 1, 2);
      assertEquals((-79237353599998L), long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      EthiopicChronology ethiopicChronology0 = new EthiopicChronology(buddhistChronology0, (Object) null, 1);
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn("ISO", "ISO").when(dateTimeZone0).getID();
      doReturn(0).when(dateTimeZone0).getOffset(anyLong());
      doReturn("ISO", "ISO", "Types array must not be null", "ISO", "ISO").when(dateTimeZone0).toString();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      try { 
        iSOChronology0.getDateTimeMillis((long) 21, 21, (-3170), (-3170), 21);
        fail("Expecting exception: IllegalFieldValueException");
      
      } catch(IllegalFieldValueException e) {
         //
         // Value -3170 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dateTimeZone0).getID();
      doReturn("Field must not be null", "Field must not be null", (String) null, "A", (String) null).when(dateTimeZone0).toString();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      try { 
        iSOChronology0.getDateTimeMillis(579, 0, 5176, 579, 5176, 5176, 5176);
        fail("Expecting exception: IllegalFieldValueException");
      
      } catch(IllegalFieldValueException e) {
         //
         // Value 579 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "").when(dateTimeZone0).getID();
      doReturn((-735)).when(dateTimeZone0).getOffset(anyLong());
      doReturn((-735)).when(dateTimeZone0).getOffsetFromLocal(anyLong());
      doReturn("", "", "", "", "").when(dateTimeZone0).toString();
      Chronology chronology0 = iSOChronology0.withZone(dateTimeZone0);
      assertNotNull(chronology0);
      
      long long0 = chronology0.getDateTimeMillis(1, 1, 1, 1);
      assertEquals((-62135596799264L), long0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "").when(dateTimeZone0).getID();
      doReturn((String) null, "", "E2-GmuI", (String) null, "E2-GmuI").when(dateTimeZone0).toString();
      Chronology chronology0 = iSOChronology0.withZone(dateTimeZone0);
      assertNotNull(chronology0);
      assertNotSame(chronology0, iSOChronology0);
      
      ISOChronology iSOChronology1 = ISOChronology.getInstance((DateTimeZone) null);
      assertNotSame(iSOChronology1, chronology0);
  }
}

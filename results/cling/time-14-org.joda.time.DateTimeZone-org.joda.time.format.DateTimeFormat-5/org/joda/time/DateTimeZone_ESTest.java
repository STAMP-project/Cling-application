/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 15:57:04 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.MonthDay;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Provider provider0 = mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn((Set<String>) null).when(provider0).getAvailableIDs();
      // Undeclared exception!
      try { 
        DateTimeZone.setProvider(provider0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The provider doesn't have any available ids
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      int int0 = cachedDateTimeZone0.getOffsetFromLocal((-2953L));
      assertEquals((-64800000), int0);
      assertEquals("-18:00", cachedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, CALLS_REAL_METHODS);
      doReturn(4735, 121, 121, 4735).when(dateTimeZone0).getOffset(anyLong());
      DateTimeZone.setDefault(dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetMillis((-875));
      long long0 = dateTimeZone2.getMillisKeepLocal(dateTimeZone1, 1147L);
      assertEquals((-4463L), long0);
      assertEquals("-00:00:00.875", dateTimeZone2.getID());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 30);
      assertEquals("+00:30", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long0 = dateTimeZone0.adjustOffset(9223372036854775807L, false);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      Provider provider0 = mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn(set0).when(provider0).getAvailableIDs();
      // Undeclared exception!
      try { 
        DateTimeZone.setProvider(provider0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The provider doesn't support UTC
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      boolean boolean0 = dateTimeZone0.isStandardOffset(228877200000L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone.setDefault(dateTimeZone0);
      Locale locale0 = Locale.CANADA;
      LocalDate localDate0 = new LocalDate((long) 0, dateTimeZone0);
      String string0 = localDate0.toString("yeras", locale0);
      assertEquals("01970", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      DateTimeZone.forTimeZone((TimeZone) null);
      LocalDate localDate0 = new LocalDate((-3598850L));
      Locale locale0 = Locale.TAIWAN;
      localDate0.toString("yF?#Vsq_2JNLkc", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      dateTimeZone0.UTC.getName(0L, locale0);
      LocalDate localDate0 = new LocalDate((long) 0, dateTimeZone0);
      localDate0.toString("yeras", locale0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Calendar.getAvailableCalendarTypes();
      Integer integer0 = new Integer((-2002));
      Locale locale0 = Locale.CANADA_FRENCH;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((-2002), (-2002), (-2002), (-2002), (-2002), (-2002));
      Date date0 = gregorianCalendar0.getGregorianChange();
      MonthDay monthDay0 = MonthDay.fromDateFields(date0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      monthDay0.withChronologyRetainFields(buddhistChronology0);
      LocalDate localDate0 = new LocalDate((long) 1);
      String string0 = localDate0.toString("1SH", locale0);
      assertEquals("10\uFFFD", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      Date date0 = gregorianCalendar0.getGregorianChange();
      MonthDay monthDay0 = MonthDay.fromDateFields(date0);
      LocalDate localDate0 = monthDay0.toLocalDate(1332);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals("java.util.GregorianCalendar[time=1563897201672,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Amsterdam\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=180,lastRule=java.util.SimpleTimeZone[id=Europe/Amsterdam,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2019,MONTH=6,WEEK_OF_YEAR=30,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=204,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=53,SECOND=21,MILLISECOND=672,ZONE_OFFSET=3600000,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      assertEquals(1172000, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-386));
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours((-386));
      assertEquals("-386:00", dateTimeZone1.getID());
      
      LocalDate localDate0 = new LocalDate((long) (-386), dateTimeZone0);
      String string0 = localDate0.toString("Europe/Amsterdam", (Locale) null);
      assertEquals("-00:00:00.386", dateTimeZone0.toString());
      assertEquals("mer.mer.mer.mer.mer.mer.mer.mer.mer.mer.mer.mer.mer.mer.mer.mer.", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      LocalDate localDate0 = new LocalDate((-664L), dateTimeZone0);
      Locale locale0 = Locale.ITALY;
      try { 
        localDate0.toString("geRElict\"oipW~", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate(9223372036847575807L, dateTimeZone0);
      Locale locale0 = Locale.KOREAN;
      try { 
        localDate0.toString("RAZ\"]s", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-29));
      LocalDate localDate0 = new LocalDate((Object) null, dateTimeZone0);
      localDate0.toDateTimeAtStartOfDay();
      // Undeclared exception!
      try { 
        DateTimeZone.forID("-29:00");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-29:00\" is malformed at \"29:00\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      Locale locale0 = Locale.forLanguageTag("UTC");
      try { 
        localDate0.toString("UTC", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test17()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate(9223372036847575807L, dateTimeZone0);
      Locale locale0 = Locale.TAIWAN;
      localDate0.toString("O*Z\"]s", locale0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTimeZone.forID("UTC");
      Locale locale0 = Locale.JAPAN;
      try { 
        localDate0.toString("UTC", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(80);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDate localDate0 = localDateTime0.toLocalDate();
      Locale locale0 = Locale.CHINA;
      localDate0.toString("D<w;U>V=Z9w", locale0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-603L));
      Locale locale0 = new Locale("The addition exceeded the boundaries of LocalTime", "+13:00", "+13:00");
      try { 
        localDate0.toString("Wrapped field's minumum value must be zero", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: W
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      LocalDate localDate0 = new LocalDate(0L, dateTimeZone0);
      Locale locale0 = Locale.TAIWAN;
      localDate0.toString("Zq`P}OG,e,is_s(/t>J", locale0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      LocalDate localDate0 = new LocalDate(1353L, (DateTimeZone) null);
      try { 
        localDate0.toString("+Illegal instant due to time zone offset transition (", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeZone.forTimeZone(timeZone0);
      Locale locale0 = Locale.forLanguageTag("UTC");
      try { 
        localDate0.toString("UTC", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test24()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDate localDate0 = new LocalDate((long) 1, dateTimeZone0);
      Locale locale0 = Locale.FRENCH;
      localDate0.toString("millisOfSecond", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      localDate0.toString("J", (Locale) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      LocalDate localDate0 = new LocalDate(1172448L, dateTimeZone0);
      Locale locale0 = Locale.KOREAN;
      try { 
        localDate0.toString("Literal must not be null", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test27()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(25650000);
      DateTimeZone.setDefault(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((-2517L), dateTimeZone1);
      Locale locale0 = Locale.ITALY;
      localDate0.toString("GMT-Europe/Amsterdam", locale0);
      assertEquals("+07:07:30", dateTimeZone1.getID());
      assertEquals("+07:07:30", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test28()  throws Throwable  {
      Locale locale0 = new Locale("GJ", "-Z", "w");
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalDate localDate0 = new LocalDate((-3601412L), dateTimeZone0);
      localDate0.toString("38ktbe_y%|6s$X})@", locale0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      dateTimeZone0.isStandardOffset(1);
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDate localDate0 = localDateTime0.toLocalDate();
      Locale locale0 = Locale.GERMANY;
      try { 
        localDate0.toString("America/Chicago", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.UTC.getMillisKeepLocal((DateTimeZone) null, 3171L);
      LocalDate localDate0 = new LocalDate(9223372036847575807L, (DateTimeZone) null);
      Locale locale0 = Locale.TAIWAN;
      try { 
        localDate0.toString("+-wr|?FDI", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test31()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      LocalDate localDate0 = new LocalDate((Chronology) strictChronology0);
      Locale locale0 = Locale.CANADA;
      localDate0.toString("Q`.@U&A+R%rm", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Date date0 = new Date(0L);
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      DateTimeZone.setProvider((Provider) null);
      localDate0.toString("BZ#>FDV[H", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test33()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-386));
      Locale locale0 = Locale.ITALY;
      dateTimeZone0.getName((long) (-386), locale0);
      LocalDate localDate0 = new LocalDate((long) (-386), dateTimeZone0);
      localDate0.toString("Europe/Amsterdam", (Locale) null);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      LocalDate localDate0 = new LocalDate((Object) null, dateTimeZone0);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.getOffsetFromLocal((-3599744L));
      Locale locale0 = Locale.TAIWAN;
      try { 
        localDate0.toString("Parsing is not supported", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      LocalDate localDate0 = new LocalDate((long) 121, dateTimeZone0);
      try { 
        localDate0.toString("The date must not be null", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      LocalDate localDate0 = new LocalDate(14233984L);
      try { 
        localDate0.toString("f\".U", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      LocalDate localDate0 = new LocalDate((Chronology) strictChronology0);
      Locale locale0 = Locale.US;
      try { 
        localDate0.toString("V", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      DateTimeZone.setNameProvider((NameProvider) null);
      long long0 = dateTimeZone0.convertLocalToUTC(60000L, true);
      assertEquals((-46740000L), long0);
      assertEquals("+13:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      LocalDate localDate0 = new LocalDate(2626200000L);
      localDate0.toString("/v^}a]<&rm0m", locale0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      dateTimeZone0.getShortName((long) 1);
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDate localDate0 = localDateTime0.toLocalDate();
      Locale locale0 = Locale.GERMANY;
      try { 
        localDate0.toString("America/Chicago", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test41()  throws Throwable  {
      Locale locale0 = new Locale("d", "2I0guEj`Y=FTD.oy", ")w");
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      dateTimeZone0.getShortName(3120L, locale0);
      LocalDate localDate0 = new LocalDate(3736L);
      localDate0.toString("j6^w&5y4", locale0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((Chronology) gJChronology0);
      try { 
        localDate0.toString("*n9l=eGk.XcA)", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      dateTimeZone0.convertLocalToUTC(60000L, true);
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDate localDate0 = localDateTime0.toLocalDate();
      Locale locale0 = Locale.GERMANY;
      try { 
        localDate0.toString("America/Chicago", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test44()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      BuddhistChronology.getInstance();
      LocalDate localDate0 = new LocalDate((long) 1, dateTimeZone0);
      Locale locale0 = Locale.ITALY;
      localDate0.toString("GMT-Europe/Amsterdam", locale0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test45()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      LocalDateTime localDateTime0 = new LocalDateTime(3625L, dateTimeZone0);
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      
      LocalDate localDate0 = new LocalDate((long) 1, dateTimeZone0);
      Locale locale0 = Locale.ITALY;
      localDate0.toString("GMT-Europe/Amsterdam", locale0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test46()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(25650000);
      LocalDateTime localDateTime0 = new LocalDateTime(3625L, dateTimeZone0);
      dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      LocalDate localDate0 = new LocalDate((-2517L), dateTimeZone1);
      Locale locale0 = Locale.ITALY;
      localDate0.toString("GMT-Europe/Amsterdam", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test47()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      LocalDate localDate0 = new LocalDate(4670L);
      localDate0.toString("1SNH", locale0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      long long0 = dateTimeZone0.convertLocalToUTC(60000L, true);
      assertEquals((-46740000L), long0);
      assertEquals("+13:00", dateTimeZone0.toString());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forID("+13:00");
      assertSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      LocalDate localDate0 = new LocalDate((-1341L));
      localDate0.toString("7|KUd?*`559N1WG!G.", locale0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      long long0 = dateTimeZone0.convertLocalToUTC(60000L, true);
      assertEquals((-46740000L), long0);
      
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      TimeZone timeZone0 = cachedDateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("+13:00", cachedDateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone1.getID());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      LocalDate localDate0 = LocalDate.now();
      try { 
        localDate0.toString("cSDTCFjE:<+ <Op", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test52()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      LocalDate localDate0 = LocalDate.now();
      localDate0.toString("x$oW(_s^2uP7eT>m&c", locale0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      long long0 = dateTimeZone0.convertLocalToUTC(1L, true);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-1250), (-1225));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -1225
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }
}

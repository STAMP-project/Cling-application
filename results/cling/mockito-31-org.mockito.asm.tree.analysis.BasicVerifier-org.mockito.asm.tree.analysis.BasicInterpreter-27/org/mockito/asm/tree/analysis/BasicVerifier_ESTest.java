/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 08:27:26 GMT 2019
 */

package org.mockito.asm.tree.analysis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mockito.asm.Label;
import org.mockito.asm.Type;
import org.mockito.asm.tree.AbstractInsnNode;
import org.mockito.asm.tree.IincInsnNode;
import org.mockito.asm.tree.InsnNode;
import org.mockito.asm.tree.IntInsnNode;
import org.mockito.asm.tree.LabelNode;
import org.mockito.asm.tree.LdcInsnNode;
import org.mockito.asm.tree.LookupSwitchInsnNode;
import org.mockito.asm.tree.MultiANewArrayInsnNode;
import org.mockito.asm.tree.TypeInsnNode;
import org.mockito.asm.tree.analysis.BasicValue;
import org.mockito.asm.tree.analysis.BasicVerifier;
import org.mockito.asm.tree.analysis.Value;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BasicVerifier_ESTest extends BasicVerifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode((-1747), "7K=6Tm[H");
      typeInsnNode0.setOpcode(10);
      Value value0 = basicVerifier0.newOperation(typeInsnNode0);
      IntInsnNode intInsnNode0 = new IntInsnNode(8, 10);
      Value value1 = basicVerifier0.copyOperation(intInsnNode0, value0);
      assertEquals(2, value1.getSize());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      IincInsnNode iincInsnNode0 = new IincInsnNode((-1388), (-1388));
      Type type0 = Type.BOOLEAN_TYPE;
      Value value0 = basicVerifier0.newValue(type0);
      basicVerifier0.unaryOperation(iincInsnNode0, value0);
      BasicValue basicValue0 = (BasicValue)basicVerifier0.copyOperation(iincInsnNode0, value0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(32);
      BasicVerifier basicVerifier0 = new BasicVerifier();
      IntInsnNode intInsnNode0 = new IntInsnNode(14, 1);
      Value value0 = basicVerifier0.newOperation(intInsnNode0);
      Value value1 = basicVerifier0.copyOperation(insnNode0, value0);
      assertSame(value0, value1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      IntInsnNode intInsnNode0 = new IntInsnNode((-31), (-31));
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      basicVerifier0.copyOperation(intInsnNode0, basicValue0);
      // Undeclared exception!
      try { 
        basicVerifier0.newOperation(intInsnNode0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicVerifier0);
      Value value0 = basicVerifier0.newOperation(ldcInsnNode0);
      IntInsnNode intInsnNode0 = new IntInsnNode(143, 2);
      BasicValue basicValue0 = (BasicValue)basicVerifier0.copyOperation(intInsnNode0, value0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      MultiANewArrayInsnNode multiANewArrayInsnNode0 = new MultiANewArrayInsnNode("SN#", (-2726));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Value value0 = basicVerifier0.naryOperation(multiANewArrayInsnNode0, linkedList0);
      Value value1 = basicVerifier0.copyOperation(multiANewArrayInsnNode0, value0);
      assertSame(value1, value0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AbstractInsnNode abstractInsnNode0 = mock(AbstractInsnNode.class, new ViolatedAssumptionAnswer());
      doReturn(26).when(abstractInsnNode0).getOpcode();
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicVerifier basicVerifier0 = new BasicVerifier();
      Value value0 = basicVerifier0.copyOperation(abstractInsnNode0, basicValue0);
      Label label0 = new Label();
      LabelNode labelNode0 = new LabelNode(label0);
      int[] intArray0 = new int[8];
      LabelNode[] labelNodeArray0 = new LabelNode[8];
      LookupSwitchInsnNode lookupSwitchInsnNode0 = new LookupSwitchInsnNode(labelNode0, intArray0, labelNodeArray0);
      Value value1 = basicVerifier0.unaryOperation(lookupSwitchInsnNode0, value0);
      assertNull(value1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(32);
      Value value0 = mock(Value.class, new ViolatedAssumptionAnswer());
      doReturn("SourceFile").when(value0).toString();
      BasicVerifier basicVerifier0 = new BasicVerifier();
      basicVerifier0.copyOperation(insnNode0, value0);
      // Undeclared exception!
      try { 
        basicVerifier0.newOperation(insnNode0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 20:30:19 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = StringUtils.substring("n=KoLV7#DkWFm8", 3, 256);
      assertEquals("oLV7#DkWFm8", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = StringUtils.repeat("{r", 1);
      assertEquals("{r", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.endsWithAny("theqk%@agl<j*~gtnot b[f=mpty", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringUtils.repeat("oxR-", 1);
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = StringUtils.repeat("the string must not b[f=mpty", "the string must not b[f=mpty", 1);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("the string must not b[f=mpty");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = StringUtils.repeat("Cannot store ", "Cannot store ", 1);
      assertEquals("Cannot store ", string0);
      
      String string1 = StringUtils.repeat("Cannot store ", 692);
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Cannot store ", string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = StringUtils.repeat("+B}g!{%`;", 1);
      assertNotNull(string0);
      assertEquals("+B}g!{%`;", string0);
      
      boolean boolean0 = StringUtils.endsWithAny("+B}g!{%`;", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[18];
      boolean boolean0 = StringUtils.endsWithAny(stringArray0[2], stringArray0);
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat(" in an array of ", 1);
      assertNotNull(string0);
      assertEquals(" in an array of ", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = StringUtils.repeat("oxR-", 1);
      assertEquals("oxR-", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWith((String) null, "oxR-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[4];
      boolean boolean0 = StringUtils.endsWithAny("b_H[", stringArray0);
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat("KL~$MdxDa[", "b_H[", 16);
      assertEquals("KL~$MdxDa[b_H[KL~$MdxDa[b_H[KL~$MdxDa[b_H[KL~$MdxDa[b_H[KL~$MdxDa[b_H[KL~$MdxDa[b_H[KL~$MdxDa[b_H[KL~$MdxDa[b_H[KL~$MdxDa[b_H[KL~$MdxDa[b_H[KL~$MdxDa[b_H[KL~$MdxDa[b_H[KL~$MdxDa[b_H[KL~$MdxDa[b_H[KL~$MdxDa[b_H[KL~$MdxDa[", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 9);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("$}WbK*}&7~");
      assertEquals("$}WbK*}&7~", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringUtils.repeat(" ", 2);
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = StringUtils.repeat("lGZ)q9ND-DhovnzHe", "lGZ)q9ND-DhovnzHe", 1006);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("lGZ)q9ND-DhovnzHe");
      assertEquals("lGZ)q9ND-DhovnzHe", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = StringUtils.repeat("", 1369);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWith("", "IllegalAccessException occurred");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 27);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("canillegaaccessexception occurred identity", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringUtils.endsWithAny("lGZ)q9ND-DhovnzHe", (String[]) null);
      String string0 = StringUtils.repeat("", "lGZ)q9ND-DhovnzHe", 65);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringUtils.endsWithIgnoreCase((String) null, (String) null);
      String string0 = StringUtils.repeat("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", 297);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = StringUtils.repeat("", 1369);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.endsWithAny("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[9];
      StringUtils.endsWithAny(stringArray0[2], stringArray0);
      String string0 = StringUtils.repeat("c)$ub\"i?~EVuMmg-", 387);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = StringUtils.repeat("", 2);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWith((String) null, "Fo?gz<id?plDx.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[4];
      StringUtils.endsWithAny("$_H[", stringArray0);
      String string0 = StringUtils.repeat("", 2);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, "S!:?]");
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat("", "m1.qlsL", 7);
      assertEquals("m1.qlsLm1.qlsLm1.qlsLm1.qlsLm1.qlsLm1.qlsL", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = StringUtils.repeat("the string must not b[f=mpty", "the string must not b[f=mpty", 1);
      assertEquals("the string must not b[f=mpty", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "the string must not b[f=mpty";
      boolean boolean0 = StringUtils.endsWithAny("the string must not b[f=mpty", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = StringUtils.repeat("", 1369);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Ille~alAccessExcep9i1n occurred";
      boolean boolean0 = StringUtils.endsWithAny("Ille~alAccessExcep9i1n occurred", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringUtils.repeat("n=KoLV7#DkWFm8n=KoLV7#DkWFm8", 2);
      String[] stringArray0 = new String[8];
      stringArray0[1] = "n=KoLV7#DkWFm8n=KoLV7#DkWFm8n=KoLV7#DkWFm8n=KoLV7#DkWFm8";
      StringUtils.endsWithAny("n=KoLV7#DkWFm8n=KoLV7#DkWFm8n=KoLV7#DkWFm8n=KoLV7#DkWFm8", stringArray0);
  }
}

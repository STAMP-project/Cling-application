/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 00:15:58 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.LocalTime;
import org.joda.time.chrono.BuddhistChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LocalTime$Property_ESTest extends LocalTime$Property_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test0()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
      String string0 = localTime0.toString((String) null);
      assertEquals(4, localTime0.size());
      assertEquals("00:15:56.347", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalTime localTime0 = mock(LocalTime.class, new ViolatedAssumptionAnswer());
      doReturn(buddhistChronology0).when(localTime0).getChronology();
      doReturn(2592000000L, (-3439L)).when(localTime0).getLocalMillis();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(2592000000L).when(dateTimeField0).set(anyLong() , anyString() , any(java.util.Locale.class));
      LocalTime.Property localTime_Property0 = new LocalTime.Property(localTime0, dateTimeField0);
      LocalTime localTime1 = localTime_Property0.setCopy("Field '");
      // Undeclared exception!
      try { 
        localTime1.toString("Chronology must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalTime localTime0 = mock(LocalTime.class, new ViolatedAssumptionAnswer());
      doReturn(buddhistChronology0, buddhistChronology0).when(localTime0).getChronology();
      doReturn(2592000000L, (-3439L), 2592000000L, (-3439L)).when(localTime0).getLocalMillis();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((long)1).when(dateTimeField0).roundCeiling(anyLong());
      doReturn(2592000000L).when(dateTimeField0).set(anyLong() , anyString() , any(java.util.Locale.class));
      LocalTime.Property localTime_Property0 = new LocalTime.Property(localTime0, dateTimeField0);
      LocalTime localTime1 = localTime_Property0.setCopy("Field '");
      LocalTime localTime2 = localTime_Property0.roundCeilingCopy();
      localTime1.isEqual(localTime2);
      // Undeclared exception!
      try { 
        localTime1.toString("Chronology must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      LocalTime localTime1 = localTime_Property0.roundCeilingCopy();
      localTime1.isEqual(localTime0);
      // Undeclared exception!
      try { 
        localTime0.toString("{)22ZJqW?v(vO'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
}

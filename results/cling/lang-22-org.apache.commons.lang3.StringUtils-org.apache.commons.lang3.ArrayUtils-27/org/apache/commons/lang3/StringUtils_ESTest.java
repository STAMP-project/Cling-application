/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 19:57:48 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = StringUtils.substring("6x 189q(+;]", 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[9];
      boolean boolean0 = StringUtils.endsWithAny("4gr", stringArray0);
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat("4gr", 1);
      assertEquals("4gr", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringUtils.repeat(" is not in the range '0' - '9'", 1);
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = StringUtils.repeat("dhjydJZYTAG^N", 1);
      assertNotNull(string0);
      assertEquals("dhjydJZYTAG^N", string0);
      
      String string1 = StringUtils.normalizeSpace("'Mw/");
      assertEquals("'Mw/", string1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = StringUtils.repeat(" is not in the range '0' - '9'", 1);
      assertNotNull(string0);
      assertEquals(" is not in the range '0' - '9'", string0);
      
      boolean boolean0 = StringUtils.endsWith(" is not in the range '0' - '9'", "The character mustnot be nullThe character mustnot be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = StringUtils.endsWithAny("4gr", stringArray0);
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat("4gr", 1);
      assertEquals("4gr", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = StringUtils.repeat("4gr", 1);
      assertEquals("4gr", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = StringUtils.repeat(" is not in the range '0' - '9'", 1);
      assertEquals(" is not in the range '0' - '9'", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny((String) null, (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = StringUtils.repeat("dhjydJZYTAG^N", 1);
      assertEquals("dhjydJZYTAG^N", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWith((String) null, "dhjydJZYTAG^N");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringUtils.repeat("", 313);
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = StringUtils.repeat("", 104);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("Cannot pad a negative amount: ");
      assertEquals("Cannot pad a negative amount:", string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringUtils.repeat("w=*K@Pz^v", 69);
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("', has a length less than 2");
      assertEquals("', has a length less than 2", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("', has a length less than 2", 103);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = StringUtils.repeat("", 66);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "P5=JV");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = StringUtils.repeat("Minimum abbreviation width is 4", 16);
      assertEquals("Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4Minimum abbreviation width is 4";
      boolean boolean0 = StringUtils.endsWithAny("Minimum abbreviation width is 4", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = StringUtils.repeat("", 104);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      boolean boolean0 = StringUtils.endsWithAny("type ", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = StringUtils.repeat("org.apache.commons.lang3.ObjectUtilsNull", 13);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNull", string0);
      
      boolean boolean0 = StringUtils.endsWithAny("org.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNullorg.apache.commons.lang3.ObjectUtilsNull", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringUtils.endsWithIgnoreCase((String) null, (String) null);
      String string0 = StringUtils.repeat("Awray eYeenArray @lement ", 5084);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = StringUtils.repeat("", 104);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      boolean boolean0 = StringUtils.endsWithAny("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = StringUtils.repeat("OVKGqTsKN%Ia", 2314);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringUtils.endsWithIgnoreCase((String) null, "");
      String string0 = StringUtils.repeat("", 2125);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[1];
      StringUtils.endsWithAny("8@gM", stringArray0);
      String string0 = StringUtils.repeat("", 5);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringUtils.endsWithIgnoreCase((String) null, "}(s,");
      String string0 = StringUtils.repeat(", Length: 0", 2125);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = StringUtils.repeat("sun.text.Normalizer is not available", 109);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.endsWithAny(string0, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = StringUtils.repeat("dhjydJZYTAG^N", 1);
      assertNotNull(string0);
      assertEquals("dhjydJZYTAG^N", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = "_Z#zVV^ZB<6SFX}TP+";
      boolean boolean0 = StringUtils.endsWithAny("_Z#zVV^ZB<6SFX}TP+", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      StringUtils.endsWithAny("', has a length less than 2", stringArray0);
      String string0 = StringUtils.repeat("", 4571);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = StringUtils.repeat("The character must not be null", 2938);
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      boolean boolean0 = StringUtils.endsWithAny(string0, stringArray0);
      assertTrue(boolean0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 19:58:37 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = StringUtils.substring("org.apacq.cmmons.lans.ArrayUtils", 17, 17);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = StringUtils.repeat("normalize", 1);
      assertNotNull(string0);
      assertEquals("normalize", string0);
      
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.endsWithAny("peh/Vd`Bb7-_^`ErThe character must not be null", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringUtils.repeat("3ctfk;jJGhVi@n//", 1);
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringUtils.repeat("", 1);
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = StringUtils.repeat("*FD<@__B", 1);
      assertNotNull(string0);
      assertEquals("*FD<@__B", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("*FD<@__B", "H9#ys)|L=SNu5p=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = StringUtils.repeat("v", 1);
      assertNotNull(string0);
      assertEquals("v", string0);
      
      boolean boolean0 = StringUtils.endsWithAny("v", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, "a1&BK");
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat("org.apache.commons.lang3.exception.CloneFailedException", 1);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = StringUtils.repeat("", 1);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.endsWithAny("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.repeat("3ctfk;jJGhVi@n//", 1);
      assertNotNull(string0);
      assertEquals("3ctfk;jJGhVi@n//", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("%(n*fd<@__b-zxt");
      assertEquals("%(n*fd<@__b-zxt", string0);
      
      String string1 = StringUtils.repeat("", (int) '|');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringUtils.repeat("/>OQK]3)HMT:YW1+7/", "/>OQK]3)HMT:YW1+7/", (int) 'R');
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = StringUtils.repeat("cd@-#'$LVw4YqyxA", 32);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("cd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxAcd@-#'$LVw4YqyxA");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = StringUtils.repeat("", 1504);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "{}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = StringUtils.repeat("DG@5'}X-D'pvLU;_:", "DG@5'}X-D'pvLU;_:", 245);
      boolean boolean0 = StringUtils.endsWith("DG@5'}X-D'pvLU;_:", string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 239);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("The String must not be empty", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = StringUtils.repeat("$p", 30);
      assertEquals("$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringUtils.endsWithIgnoreCase((String) null, (String) null);
      String string0 = StringUtils.repeat("/>OQK]3)HMT:YW1+7/", "/>OQK]3)HMT:YW1+7/", (int) 'R');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = StringUtils.repeat("", 1504);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = StringUtils.repeat("$p", "$p", 1099);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.endsWithAny((String) null, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringUtils.endsWithIgnoreCase((String) null, (String) null);
      String string0 = StringUtils.repeat("", 38);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[1];
      StringUtils.endsWithAny("DG@5'}X-D'pvLU;_:", stringArray0);
      String string0 = StringUtils.repeat("", "", 256);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = StringUtils.repeat("$p", 90);
      assertEquals("$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p$p", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWith((String) null, "$p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[1];
      StringUtils.endsWithAny("DG@5'}X-D'pvLU;_:", stringArray0);
      String string0 = StringUtils.repeat("DG@5'}X-D'pvLU;_:", "DG@5'}X-D'pvLU;_:", 256);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = StringUtils.repeat("$p", 1);
      assertNotNull(string0);
      assertEquals("$p", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "$p";
      boolean boolean0 = StringUtils.endsWithAny("$p", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringUtils.repeat("", "", 239);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean0 = StringUtils.endsWithAny(")3bVr#sVI'=H", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = StringUtils.repeat("*FD<@__B", "*FD<@__B", 1113);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "*FD<@__B";
      boolean boolean0 = StringUtils.endsWithAny(string0, stringArray0);
      assertTrue(boolean0);
  }
}

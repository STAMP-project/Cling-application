/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 20:58:10 GMT 2019
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.DurationFormatUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DurationFormatUtils_ESTest extends DurationFormatUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test00()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(3600000L, true, true);
      assertEquals("1 hour", string0);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("Search and Replace array lengths don't match: ");
      String string1 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 483, 7, 7, 7, 7, 1, 32, true);
      assertEquals("32earch an7 Replace arra483 length1 7ont match: ", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test01()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(3600000L, "MRmjWl)?%]L3W", true);
      assertEquals("0R60jWl)?%]L3W", string0);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("Search and Replace array lengths don't match: ");
      String string1 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 483, 7, 7, 7, 7, 1, 32, true);
      assertEquals("32earch an7 Replace arra483 length1 7ont match: ", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationISO(0L);
      assertEquals("P0Y0M0DT0H0M0.000S", string0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(16, "");
      String string1 = DurationFormatUtils.formatPeriod((-296L), (long) 16, "", true, (TimeZone) simpleTimeZone0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DurationFormatUtils.formatDuration(0L, "", true);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(16, "");
      String string0 = DurationFormatUtils.formatPeriod((-296L), (long) 16, "", true, (TimeZone) simpleTimeZone0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DurationFormatUtils.formatDuration(0L, "%4Kda6t", false);
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(Integer.MAX_VALUE, Integer.MAX_VALUE, (-1603), (-1603), Integer.MAX_VALUE).when(timeZone0).getOffset(anyLong());
      doReturn(1027, Integer.MAX_VALUE, 628, 0, (-1603)).when(timeZone0).getRawOffset();
      doReturn(false, false, false, false, false).when(timeZone0).inDaylightTime(any(java.util.Date.class));
      // Undeclared exception!
      DurationFormatUtils.formatPeriod(8L, 8L, "9", false, timeZone0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DurationFormatUtils.formatDuration(0L, "P0Y0M0DT0H0M0.000S", false);
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(Integer.MAX_VALUE, Integer.MAX_VALUE, (-1603), (-1603), Integer.MAX_VALUE).when(timeZone0).getOffset(anyLong());
      doReturn(1027, Integer.MAX_VALUE, 628, 0, (-1603)).when(timeZone0).getRawOffset();
      doReturn(false, false, false, false, false).when(timeZone0).inDaylightTime(any(java.util.Date.class));
      // Undeclared exception!
      DurationFormatUtils.formatPeriod(8L, 8L, "9", false, timeZone0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(3600000L, "MRmjWl)?%]L3W", true);
      assertEquals("0R60jWl)?%]L3W", string0);
      
      String string1 = DurationFormatUtils.formatDurationWords(1132L, true, false);
      assertEquals("1 second", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationISO(0L);
      assertEquals("P0Y0M0DT0H0M0.000S", string0);
      
      String string1 = DurationFormatUtils.formatPeriod(0L, 0L, "P0Y0M0DT0H0M0.000S");
      assertEquals("P0Y000DT00000.0000", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      DurationFormatUtils.formatDuration((-4533L), "");
      String string0 = DurationFormatUtils.formatPeriod(715L, (-4533L), "Minimum abbreviation width is 4");
      assertEquals("-1ini1439u abbreviation wi30th i54 4", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriodISO(3301L, 2496L);
      assertEquals("P-1Y11M30DT23H59M59.195S", string0);
      
      String string1 = DurationFormatUtils.formatDurationISO(925L);
      assertEquals("P0Y0M0DT0H0M0.925S", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationHMS((-1L));
      assertEquals("0:00:00.99", string0);
      
      String string1 = DurationFormatUtils.formatPeriodISO((-2098L), 3600000L);
      assertEquals("P0Y0M0DT1H0M2.098S", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test11()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(3600000L, "MRmjWl)?%]L3W", true);
      assertEquals("0R60jWl)?%]L3W", string0);
      
      String string1 = DurationFormatUtils.formatPeriodISO(3600000L, 3600000L);
      assertEquals("P0Y0M0DT0H0M0.000S", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(3600000L, "MRmjWl)?%]L3W", true);
      assertEquals("0R60jWl)?%]L3W", string0);
      
      String string1 = DurationFormatUtils.formatDurationWords(3600000L, true, true);
      assertEquals("1 hour", string1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      DurationFormatUtils.formatPeriod(0L, (-1L), "");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("s");
      boolean boolean0 = durationFormatUtils_Token0.equals("y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test15()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(2L, true, true);
      assertEquals("0 seconds", string0);
      
      String string1 = DurationFormatUtils.formatDuration(2717L, "", true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  @Ignore
  public void test16()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriod((-2098L), (-3917L), "y{");
      assertEquals("0{", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test17()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords((-1L), false, true);
      assertEquals("0 days", string0);
      
      String string1 = DurationFormatUtils.formatDuration((-1228L), "");
      assertFalse(string1.equals((Object)string0));
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 05:44:26 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeSimplifyRegExp;
import com.google.javascript.jscomp.ReorderConstantExpression;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail((-2072));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2072
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        peepholeRemoveDeadCode0.tryFoldDo(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getParent();
      doReturn(0, 0, 0, 0).when(node0).getType();
      doReturn((String) null).when(node0).toString();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodenull
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName("Nktoa");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("false", string0);
      assertEquals((-1), node0.getLineno());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(30, 41).when(node0).getType();
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("v9BZi(.xt`:j8o").when(node0).getString();
      doReturn(29, 40).when(node0).getType();
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1877, 2).when(node0).getType();
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(101).when(node0).getType();
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = Node.newString("1U+|boOzS", 2, 31);
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals(8223, node0.getSourcePosition());
      assertEquals("1U+|boOzS", string0);
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newNumber((-2453.8503107864), (-1682), (-1682));
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getFirstChild();
      String string0 = NodeUtil.arrayToString(node1);
      assertNotNull(string0);
      assertEquals("-2453.8503107864", string0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.getPureBooleanValue(node0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.getImpureBooleanValue(node0);
      assertEquals(44, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDelProp());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
      NodeUtil.evaluatesToLocalValue(node0, predicate0);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
      assertEquals(43, node0.getType());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(14, 14).when(node0).getType();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1376).when(node0).getType();
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertFalse(boolean0);
      
      Node node1 = Node.newString(50, "bv9M9K B");
      Node node2 = new Node(30, node1, node1, node1);
      assertEquals(50, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertTrue(node2.hasOneChild());
      assertEquals(30, node2.getType());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getParent();
      doReturn(65, (-1377), (-1377), 0).when(node0).getType();
      doReturn((String) null).when(node0).toString();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodenull
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = NodeUtil.opToStr(48);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = NodeUtil.opToStr(46);
      assertNotNull(string0);
      assertEquals("!==", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = NodeUtil.opToStr(45);
      assertNotNull(string0);
      assertEquals("===", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-872), 95, 118).when(node0).getType();
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      Node node1 = NodeUtil.booleanNode(true);
      boolean boolean1 = node1.isLocalResultCall();
      assertFalse(boolean1 == boolean0);
      assertEquals(44, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(0);
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node0).getSideEffectFlags();
      doReturn(true).when(node0).isCall();
      boolean boolean1 = NodeUtil.callHasLocalResult(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(0);
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(3000).when(node0).getSideEffectFlags();
      doReturn(true).when(node0).isCall();
      boolean boolean1 = NodeUtil.callHasLocalResult(node0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(728, 54, 0).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, abstractCompiler0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(44, 39).when(node1).getType();
      boolean boolean1 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      boolean boolean0 = NodeUtil.has(node0, compilerOptions0.sourceMapDetailLevel, compilerOptions0.sourceMapDetailLevel);
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(44, node0.getType());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node(1104);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertEquals((-1), node1.getCharno());
      assertEquals(122, node1.getType());
      
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-872), 95, 118).when(node0).getType();
      NodeUtil.mayEffectMutableState(node0);
      Node node1 = NodeUtil.booleanNode(true);
      assertEquals(44, node1.getType());
      
      Node node2 = NodeUtil.newVarNode("parenthesized", node1);
      String string0 = NodeUtil.arrayToString(node2);
      assertEquals(118, node2.getType());
      assertNull(string0);
      assertEquals((-1), node2.getLineno());
      assertEquals((-1), node2.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-3249), (-3249), 580).when(node0).getType();
      NodeUtil.mayHaveSideEffects(node0);
      Node node1 = Node.newString("1U+|boOzS", 2, 31);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node2 = peepholeSimplifyRegExp0.optimizeSubtree(node1);
      assertEquals(8223, node2.getSourcePosition());
      assertEquals(40, node2.getType());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn((Node) null).when(node0).getNext();
      doReturn(0).when(node0).getType();
      doReturn((String) null).when(node0).toString();
      Node node1 = new Node(6, node0, node0);
      boolean boolean0 = NodeUtil.containsFunction(node1);
      assertFalse(boolean0);
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.hasOneChild());
      assertEquals(6, node1.getType());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node0).getType();
      boolean boolean0 = NodeUtil.containsType(node0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(1104);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertEquals(1104, node0.getType());
      assertEquals((-1), node0.getLineno());
      
      boolean boolean1 = NodeUtil.isValidQualifiedName("%@dMI;3>-@tD");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(1104);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      boolean boolean1 = NodeUtil.isCallOrNew(node0);
      assertEquals(1104, node0.getType());
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(49, 1104, 4095);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(node0.isThrow());
      assertEquals(4526079, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = new Node(88);
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1376).when(node0).getType();
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      Node node1 = NodeUtil.booleanNode(false);
      boolean boolean1 = NodeUtil.isForIn(node1);
      assertEquals(43, node1.getType());
      assertTrue(boolean1 == boolean0);
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getCharno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(true).when(node0).isExprResult();
      // Undeclared exception!
      try { 
        NodeUtil.isExprCall(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node(1104);
      boolean boolean0 = NodeUtil.isLoopStructure(node0);
      assertEquals(1104, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newString(48, "loC(7i8eMkqqI_na", 3581, 15);
      NodeUtil.getLoopCodeBlock(node0);
      assertEquals(48, node0.getType());
      assertEquals(14667791, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-3249), (-3249), 580).when(node0).getType();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      boolean boolean1 = NodeUtil.isLatin("s$v<(hqJZU'w*089");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = new Node(1104);
      NodeUtil.mayHaveSideEffects(node0);
      Node node1 = new Node((-3745), node0, node0);
      assertTrue(node1.hasOneChild());
      
      node1.removeChildren();
      assertEquals(1104, node0.getType());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = new Node(1104);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
      
      Node node1 = node0.cloneTree();
      assertNotSame(node1, node0);
      assertEquals(1104, node1.getType());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = new Node(1021, node0, node0);
      Node node2 = node1.cloneTree();
      assertTrue(node2.hasOneChild());
      assertEquals(1021, node2.getType());
      assertEquals(43, node0.getType());
      assertEquals((-1), node2.getLineno());
      assertEquals((-1), node0.getLineno());
      assertNotSame(node2, node1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("");
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newNumber((-3014.1695453971633));
      assertFalse(node0.isExprResult());
      
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Double double0 = NodeUtil.getStringNumberValue("6$5");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Node node1 = new Node(1021, node0, node0);
      assertEquals(1021, node1.getType());
      assertTrue(node1.hasOneChild());
      assertEquals(43, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1376).when(node0).getType();
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertFalse(boolean0);
      
      Node node1 = NodeUtil.booleanNode(false);
      Node node2 = new Node(106, node1, node1);
      assertEquals(106, node2.getType());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.isFalse());
      assertTrue(node2.hasOneChild());
      assertEquals((-1), node2.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString("1U+|boOzS", 2, 31);
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "goog.global", node0, "");
      assertEquals(8223, node1.getSourcePosition());
      assertTrue(node0.isString());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isGetProp());
      
      int int0 = NodeUtil.getInverseOperator(15);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = new Node(0, node0, node0);
      assertFalse(node1.isFunction());
      
      NodeUtil.getNearestFunctionName(node1);
      assertEquals(0, node1.getType());
      assertEquals(43, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertTrue(node1.hasOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertTrue(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(2, 109, 4095).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, abstractCompiler0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1376).when(node0).getType();
      NodeUtil.isImmutableValue(node0);
      Node node1 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node1);
      assertTrue(node1.isFalse());
      assertFalse(boolean0);
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-3249), (-3249), 580).when(node0).getType();
      NodeUtil.mayHaveSideEffects(node0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = Node.newString("1U+|boOzS", 2, 31);
      Node node2 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "goog.global", node1, "");
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assignment op:GETPROP 2 [originalname: ]
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = new Node(3429);
      NodeUtil.mayEffectMutableState(node0);
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 3429
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = new Node(1104);
      NodeUtil.mayHaveSideEffects(node0);
      Node node1 = new Node(22, 38, 53);
      Node node2 = new Node(47, node1, node0, node0, node1, (-729), 52);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1104
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-3249), (-3249), 580).when(node0).getType();
      NodeUtil.mayHaveSideEffects(node0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = Node.newString("1U+|boOzS", 2, 31);
      Node node2 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "goog.global", node1, "");
      Node node3 = NodeUtil.newVarNode("Har.-?wkFaX*wA[.", node2);
      assertEquals(8223, node3.getSourcePosition());
      assertEquals(40, node1.getType());
      assertEquals(2, node2.getChildCount());
      assertEquals(118, node3.getType());
      assertEquals(33, node2.getType());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = new Node(72);
      node0.setIsSyntheticBlock(false);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 72
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1003, 1003, 152).when(node0).getType();
      NodeUtil.mayEffectMutableState(node0);
      Node node1 = NodeUtil.booleanNode(true);
      // Undeclared exception!
      try { 
        NodeUtil.isConstantByConvention((CodingConvention) null, node1, node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // TRUE is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = new Node(1104);
      NodeUtil.mayHaveSideEffects(node0);
      // Undeclared exception!
      try { 
        node0.setString("Root module '{0}' must contain at least one source code input");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1104
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-3249), (-3249), 580).when(node0).getType();
      NodeUtil.mayHaveSideEffects(node0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = Node.newString("1U+|boOzS", 2, 31);
      Node node2 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "goog.global", node1, "");
      boolean boolean0 = NodeUtil.isGet(node2);
      assertEquals(8223, node2.getSourcePosition());
      assertTrue(boolean0);
      assertEquals(40, node1.getType());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(1104);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(node0.isFunction());
      
      boolean boolean1 = NodeUtil.referencesThis(node0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1104, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node(1104);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(node0.isName());
      
      boolean boolean1 = NodeUtil.isVarDeclaration(node0);
      assertEquals((-1), node0.getLineno());
      assertEquals(1104, node0.getType());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(63).when(node0).getType();
      NodeUtil.isImmutableValue(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node1).getFirstChild();
      doReturn(31, 0, 92).when(node1).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node1, abstractCompiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1471).when(node0).getType();
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(46, 54, 29).when(node1).getType();
      boolean boolean1 = NodeUtil.mayBeString(node1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-1455)).when(node0).getType();
      NodeUtil.isImmutableValue(node0);
      Node node1 = new Node(3429);
      // Undeclared exception!
      try { 
        node1.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 3429
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test063()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-725)).when(node0).getType();
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-343), 4095, 4095, (-343), 34).when(node1).getType();
      doReturn(false).when(node1).isNull();
      boolean boolean1 = NodeUtil.mayBeString(node1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1376).when(node0).getType();
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(3, 1213, 119, 858, 47).when(node1).getType();
      doReturn(false).when(node1).isNull();
      boolean boolean1 = NodeUtil.mayBeString(node1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newNumber((-2453.8503107864), (-1682), (-1682));
      boolean boolean0 = NodeUtil.isAssociative(16);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isImmutableValue(node0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
      NodeUtil.evaluatesToLocalValue(node0, predicate0);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[1] = node0;
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(nodeArray0[1], nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(109).when(node0).getType();
      NodeUtil.isImmutableValue(node0);
      Node node1 = new Node(42);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node2 = NodeUtil.newName(closureCodingConvention0, "({~PK5WAk", node1, "({~PK5WAk");
      node2.setOptionalArg(false);
      assertEquals((-1), node2.getSourcePosition());
      assertEquals(38, node2.getType());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
      NodeUtil.evaluatesToLocalValue(node0, predicate0);
      boolean boolean0 = NodeUtil.isConstantName(node0);
      assertFalse(boolean0);
      assertEquals(43, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-725)).when(node0).getType();
      NodeUtil.isImmutableValue(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(node1).getProp(anyInt());
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      Node node2 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "hULL4_", node1, "hULL4_");
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assignment op:NAME hULL4_ 0 [originalname: hULL4_]
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(250).when(node0).getType();
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(132, 36, 35, 8, 44).when(node1).getType();
      boolean boolean1 = NodeUtil.mayBeString(node1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1471).when(node0).getType();
      NodeUtil.isImmutableValue(node0);
      Node node1 = Node.newString(35, "", 8, 1363);
      assertEquals(35, node1.getType());
      assertEquals(34131, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-725)).when(node0).getType();
      NodeUtil.isImmutableValue(node0);
      Node node1 = new Node(44, (-1412), 116);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assignment op:TRUE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newString(3020, "!==", 3020, 5760);
      assertEquals(12374015, node0.getSourcePosition());
      assertEquals(3020, node0.getType());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = Node.newString(44, "7M8");
      Object object0 = new Object();
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0, object0).when(node1).getProp(anyInt());
      Node node2 = NodeUtil.newName(codingConvention0, "7M8", node1, "0EijIt&0Wl");
      assertTrue(node0.isTrue());
      assertEquals(0, node2.getSourcePosition());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newString("h8ULL4_}");
      String string0 = node0.toString(false, false, false);
      assertEquals("STRING h8ULL4_}", string0);
      assertTrue(node0.isString());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(1104);
      // Undeclared exception!
      try { 
        node0.setDouble(49);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1104
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = node0.isQualifiedName();
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getParent();
      doReturn(true).when(node1).isName();
      boolean boolean0 = NodeUtil.isVarDeclaration(node1);
      assertEquals(44, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(node0).getString();
      doReturn(0).when(node0).getType();
      doReturn(false).when(node0).isGetProp();
      // Undeclared exception!
      try { 
        NodeUtil.isConstantByConvention((CodingConvention) null, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(node0).hasChildren();
      doReturn(true).when(node0).isBlock();
      boolean boolean0 = NodeUtil.hasCatchHandler(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(node0).isTry();
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(node0).isNull();
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = new Node(36, (-2917), 120);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertEquals(36, node0.getType());
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = new Node(51, 43, 51);
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertEquals(176179, node0.getSourcePosition());
      assertEquals(51, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newNumber((-3008.54));
      boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(32).when(node0).getType();
      doReturn(false).when(node0).isName();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "\n", nodeUtil_BooleanResultPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = Node.newString(48, "loC(7i8eMkqqI_na", 3581, 15);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertEquals(14667791, node0.getSourcePosition());
      assertEquals(48, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(546);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 546
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newString("fVkUP*dE{Sbf}K~wul=");
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = new Node(1104, 1104, 1104);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
      
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals(4523088, node0.getSourcePosition());
      assertEquals(1104, node0.getType());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = new Node(1104);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
      
      Node node1 = new Node(47, node0, node0, node0, node0, 86, 52);
      assertFalse(node1.isName());
      
      int int0 = NodeUtil.getNameReferenceCount(node1, "");
      assertEquals(0, int0);
      assertEquals(352308, node1.getSourcePosition());
      assertTrue(node1.isRegExp());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getFirstChild();
      doReturn(false).when(node1).isFunction();
      doReturn(false).when(node1).isName();
      NodeUtil.getVarsDeclaredInBranch(node1);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFunction());
      assertEquals(44, node0.getType());
      assertFalse(node0.isName());
      assertTrue(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newString("loC(7i8eMkqqI_na", 1205, 1205);
      // Undeclared exception!
      try { 
        node0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = new Node(1104);
      assertFalse(node0.isExprResult());
      
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(boolean0);
      assertEquals(1104, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(4, 4, 4).when(node0).getType();
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      Node node1 = NodeUtil.booleanNode(false);
      boolean boolean1 = NodeUtil.isPrototypeProperty(node1);
      assertEquals((-1), node1.getLineno());
      assertFalse(boolean1 == boolean0);
      assertEquals(43, node1.getType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = new Node(1104);
      NodeUtil.mayHaveSideEffects(node0);
      // Undeclared exception!
      try { 
        node0.replaceChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.getSourceName(node0);
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isTrue());
      assertEquals(44, node0.getType());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node(2209);
      NodeUtil.getInputId(node0);
      assertEquals(2209, node0.getType());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = new Node(1104);
      NodeUtil.getSourceFile(node0);
      assertEquals(1104, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node(1104);
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      assertTrue(node1.isCall());
      assertEquals(1104, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(node0).isNew();
      doReturn(true).when(node0).isNoSideEffectsCall();
      boolean boolean0 = NodeUtil.constructorCallHasSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(node0).isCall();
      doReturn(true).when(node0).isNoSideEffectsCall();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.functionCallHasSideEffects(node0, abstractCompiler0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = new Node(37, 37, 37);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got CALL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = new Node(1104, 1104, 1104);
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.mayHaveSideEffects(node0);
      assertEquals(4523088, node0.getSourcePosition());
      assertEquals(1104, node0.getType());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(true).when(node0).isCall();
      doReturn(false).when(node0).isNoSideEffectsCall();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0, abstractCompiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(true).when(node0).isNew();
      doReturn(false).when(node0).isNoSideEffectsCall();
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.getBestJSDocInfo(node0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(4, 4, 4).when(node0).getType();
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      boolean boolean1 = NodeUtil.isCommutative((-2458));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
      NodeUtil.evaluatesToLocalValue(node0, predicate0);
      boolean boolean0 = node0.isNoSideEffectsCall();
      assertTrue(node0.isFalse());
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(728, 54, 53).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      NodeUtil.mayHaveSideEffects(node0, abstractCompiler0);
      Node node1 = Node.newString(35, "", 8, 1363);
      Node node2 = NodeUtil.numberNode(Double.POSITIVE_INFINITY, node1);
      assertEquals(35, node1.getType());
      assertEquals(34131, node2.getSourcePosition());
      assertTrue(node2.isName());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test112()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(2336, 494, 1000).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, abstractCompiler0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1000, (-3917), 52, 38, 95).when(node1).getType();
      doReturn(false).when(node1).isNull();
      boolean boolean1 = NodeUtil.mayBeString(node1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(4, 4, 4).when(node0).getType();
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      boolean boolean1 = NodeUtil.isAssociative(48);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1470, 147, 8).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, abstractCompiler0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(132, 36, 35, 8, 44).when(node1).getType();
      boolean boolean1 = NodeUtil.mayBeString(node1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = new Node(1104);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      Node node1 = new Node(22, 38, 53);
      boolean boolean1 = NodeUtil.mayBeString(node1);
      assertEquals(155701, node1.getSourcePosition());
      assertFalse(boolean1 == boolean0);
      assertEquals(22, node1.getType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
      NodeUtil.evaluatesToLocalValue(node0, predicate0);
      assertEquals(43, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      
      Node node1 = new Node(42, 32, (-438));
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      int int0 = NodeUtil.getCount(node1, predicate0, nodeUtil_BooleanResultPredicate0);
      assertEquals(1, int0);
      assertEquals(42, node1.getType());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
      NodeUtil.evaluatesToLocalValue(node0, predicate0);
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertFalse(boolean0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(728, 54, 53).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, abstractCompiler0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(46, 54, 29).when(node1).getType();
      boolean boolean1 = NodeUtil.mayBeString(node1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = new Node(1104);
      boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      assertEquals(1104, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean0);
      assertFalse(node0.isAssign());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = new Node(1104);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
      
      Node node1 = new Node(8, node0, node0, node0);
      assertEquals(8, node1.getType());
      assertTrue(node1.hasOneChild());
      assertEquals(1104, node0.getType());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = new Node(22, 38, 53);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertEquals(155701, node0.getSourcePosition());
      assertEquals(22, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("Fractional bitwise operand: {0}");
      Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getFirstChild();
      doReturn(122, 122).when(node1).getType();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(node0.isScript());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-725)).when(node0).getType();
      NodeUtil.isImmutableValue(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(37, 2971).when(node1).getType();
      doReturn(false).when(node1).isCall();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node1, abstractCompiler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2971
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-725)).when(node0).getType();
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertFalse(boolean0);
      
      Node node1 = new Node(44, (-1412), 116);
      boolean boolean1 = NodeUtil.mayEffectMutableState(node1);
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(44, node1.getType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1376).when(node0).getType();
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      Node node1 = NodeUtil.booleanNode(false);
      Node node2 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node1).when(node2).getFirstChild();
      doReturn(118).when(node2).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = NodeUtil.mayHaveSideEffects(node2, abstractCompiler0);
      assertFalse(boolean1 == boolean0);
      assertEquals(43, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(109).when(node0).getType();
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(45, 4095, 1082).when(node1).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = NodeUtil.mayHaveSideEffects(node1, abstractCompiler0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(109).when(node0).getType();
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertFalse(boolean0);
      
      Node node1 = new Node(42);
      boolean boolean1 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(node1.isThis());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-71)).when(node0).getType();
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      Node node1 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "[source unknown]\n");
      boolean boolean1 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean1 == boolean0);
      assertEquals(38, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
      NodeUtil.evaluatesToLocalValue(node0, predicate0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString("1U+|boOzS", 2, 31);
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "goog.global", node0, "");
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      peepholeSimplifyRegExp0.mayHaveSideEffects(node1);
      assertEquals(8223, node1.getSourcePosition());
      assertEquals(40, node0.getType());
      assertEquals(33, node1.getType());
      assertEquals(31, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(2862, 100, (-2303)).when(node0).getType();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newNumber((-3957.5286475));
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-3249), (-3249), 580).when(node0).getType();
      NodeUtil.mayHaveSideEffects(node0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = Node.newString("1U+|boOzS", 2, 31);
      Node node2 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "goog.global", node1, "");
      NodeUtil.getPrototypeClassName(node2);
      assertTrue(node1.isString());
      assertEquals(8223, node2.getSourcePosition());
      assertTrue(node2.isGetProp());
      assertEquals(2, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = new Node(1104);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}

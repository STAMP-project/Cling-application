/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 19:55:40 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = StringUtils.substring("Ck*TnNxn)j)$ DNO'Ck*TNxn') DNO'", 22, 2439);
      assertEquals("Nxn') DNO'", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = StringUtils.repeat("TimeToLive of ", 1);
      assertNotNull(string0);
      assertEquals("TimeToLive of ", string0);
      
      String[] stringArray0 = new String[5];
      boolean boolean0 = StringUtils.endsWithAny("sF", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringUtils.repeat("TimeToLive of ", 1);
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = StringUtils.repeat("PlD", 1);
      assertEquals("PlD", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("6fUN:N?AQT#)YOsNvU");
      assertEquals("6fUN:N?AQT#)YOsNvU", string1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = StringUtils.repeat("5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(", 1);
      assertNotNull(string0);
      assertEquals("5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("i", "5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(5(");
      assertEquals("i", string1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = StringUtils.repeat("TimeToLive of ", 1);
      assertNotNull(string0);
      assertEquals("TimeToLive of ", string0);
      
      boolean boolean0 = StringUtils.endsWithAny("TimeToLive of ", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = StringUtils.repeat("8_2", 1);
      assertNotNull(string0);
      assertEquals("8_2", string0);
      
      boolean boolean0 = StringUtils.endsWith((String) null, "!eTQ;hx-R:b3CV");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = StringUtils.repeat("clone", 1);
      assertEquals("clone", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.endsWithAny((String) null, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = StringUtils.repeat("ds>C6Z\"5'Dl", 1);
      assertEquals("ds>C6Z\"5'Dl", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = StringUtils.repeat("", 8187);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("IllegalArgumentException occurred");
      boolean boolean0 = StringUtils.endsWithAny("[J@nvG*&j$%.", stringArray0);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = StringUtils.repeat("pKU*t@Kvy2[v", 50);
      assertNotNull(string0);
      assertEquals("pKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[vpKU*t@Kvy2[v", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("pKU*t@Kvy2[v", "]I9HGibs&");
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny(",N!wO^+/$?/EU", stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringUtils.normalizeSpace((String) null);
      String string0 = StringUtils.repeat("", 258);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = StringUtils.repeat("", 50);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("q)C8~RXAk^[lH<:+6E");
      assertEquals("q)C8~RXAk^[lH<:+6E", string1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringUtils.repeat("#~*K1o@8&", 258);
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = StringUtils.repeat("lne", 829);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("lne");
      assertEquals("lne", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = StringUtils.repeat("", 2413);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("mo-_b*qhu+e:pyj", "org.apache.commons.lang3.ObjectUtils$Null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = StringUtils.repeat("FrGSx'`Y~|riZf/nRuZ", 2512);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("FrGSx'`Y~|riZf/nRuZ", string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringUtils.endsWithAny("_-dy0/-Ux=", (String[]) null);
      String string0 = StringUtils.repeat("", 50);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = StringUtils.repeat("1SQM?:36Uftt7*", 50);
      assertEquals("1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*1SQM?:36Uftt7*", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = StringUtils.repeat("000", 42);
      assertNotNull(string0);
      assertEquals("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", string0);
      
      boolean boolean0 = StringUtils.endsWith((String) null, "Minimum abbreviation width with offset is 7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = StringUtils.repeat("", 74);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = StringUtils.repeat(")I P:H5.V#!", 50);
      assertNotNull(string0);
      assertEquals(")I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!)I P:H5.V#!", string0);
      
      boolean boolean0 = StringUtils.endsWithAny((String) null, (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = StringUtils.repeat("", 1663);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, "8a).g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = StringUtils.repeat("", 258);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = StringUtils.repeat("TimeToLive of ", 1663);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = StringUtils.repeat("F|U]m=;:K", 30);
      assertNotNull(string0);
      assertEquals("F|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:KF|U]m=;:K", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("TimeTboLive of `xo;)m{!", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = StringUtils.repeat("TimeToLive of ", 1);
      assertNotNull(string0);
      assertEquals("TimeToLive of ", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "TimeToLive of ";
      boolean boolean0 = StringUtils.endsWithAny("TimeToLive of ", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = StringUtils.repeat("", 50);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean0 = StringUtils.endsWithAny("ds@C6Z\"5'Dl", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringUtils.repeat("HU", 275);
      String[] stringArray0 = new String[1];
      stringArray
      StringUtils.endsWithAnystringArray0);
  }
}

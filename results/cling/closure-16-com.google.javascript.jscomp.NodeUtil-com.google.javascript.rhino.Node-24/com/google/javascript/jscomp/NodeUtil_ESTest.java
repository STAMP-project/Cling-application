/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 05:46:33 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.ErrorFormat;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.PeepholeSimplifyRegExp;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TernaryValue;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = new Node(121, 121, 121);
      boolean boolean0 = node0.isUnscopedQualifiedName();
      assertFalse(boolean0);
      assertEquals(121, node0.getType());
      assertEquals(495737, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ErrorReporter errorReporter0 = mock(ErrorReporter.class, new ViolatedAssumptionAnswer());
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertTrue(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertNull(string0);
      assertFalse(node0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, "JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "%", node0, "");
      boolean boolean0 = NodeUtil.isForIn(node1);
      assertTrue(node1.isName());
      assertFalse(boolean0);
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isFor());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = NodeUtil.opToStr(24);
      assertNotNull(string0);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("false", string0);
      assertEquals((-1), node0.getLineno());
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Node node0 = new Node(125, 125, 125);
      Node node1 = NodeUtil.newName(codingConvention0, "%", node0, "");
      NodeUtil.getStringValue(node1);
      assertEquals(512125, node1.getSourcePosition());
      assertTrue(node1.isName());
      assertTrue(node0.isBlock());
      assertEquals(38, node1.getType());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = Node.newString(":this", 111, 111);
      NodeUtil.isSymmetricOperation(node0);
      assertEquals(454767, node0.getSourcePosition());
      assertTrue(node0.isString());
      assertEquals(111, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = Node.newString(":this", 111, 111);
      NodeUtil.getPureBooleanValue(node0);
      assertEquals(454767, node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = Node.newString("-=", 39, 4095);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals(163839, node0.getSourcePosition());
      assertTrue(node0.isString());
      assertEquals("-=", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      NodeUtil.isRelationalOperation(node0);
      assertEquals(512125, node0.getSourcePosition());
      assertEquals(125, node0.getType());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, "JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "%", node0, "");
      NodeUtil.getPureBooleanValue(node1);
      assertTrue(node1.isName());
      assertEquals(0, node1.getCharno());
      assertEquals(38, node1.getType());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ErrorReporter errorReporter0 = mock(ErrorReporter.class, new ViolatedAssumptionAnswer());
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      NodeUtil.getImpureBooleanValue(node0);
      assertEquals(83, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isParamList());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(68);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 68
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(37);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 37: CALL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(50);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      NodeUtil.opToStr(38);
      boolean boolean0 = NodeUtil.isSimpleOperatorType(55296);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(50);
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1, 0).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = NodeUtil.nodeTypeMayHaveSideEffects(node0, abstractCompiler0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(125).when(node0).getSideEffectFlags();
      doReturn(true).when(node0).isCall();
      boolean boolean0 = NodeUtil.callHasLocalResult(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(6).when(node0).getSideEffectFlags();
      doReturn(true).when(node0).isCall();
      boolean boolean0 = NodeUtil.callHasLocalResult(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-1428), 54, 2).when(node1).getType();
      boolean boolean1 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node0 = Node.newString(":j", 256, 46);
      Node node1 = peepholeSimplifyRegExp0.optimizeSubtree(node0);
      assertEquals(1048622, node1.getSourcePosition());
      assertEquals(40, node1.getType());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(103, 103, (-1285)).when(node0).getType();
      NodeUtil.mayHaveSideEffects(node0);
      Node node1 = NodeUtil.booleanNode(false);
      Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
      boolean boolean0 = NodeUtil.isNameReferenced(node1, "gL[7lNj:X`DD?K^[/", predicate0);
      assertFalse(node1.isFunction());
      assertTrue(node1.isFalse());
      assertFalse(boolean0);
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.isSimpleOperatorType(16);
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node0).getType();
      Predicate<Node> predicate0 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.Node.class));
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 44, predicate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      assertEquals(43, node0.getType());
      
      Node node1 = NodeUtil.newVarNode("vaB*dp", node0);
      assertEquals(118, node1.getType());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node0).getType();
      Predicate<Node> predicate0 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.Node.class));
      boolean boolean0 = NodeUtil.containsType(node0, 30, predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(node0.isBlock());
      assertEquals(512125, node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(44);
      boolean boolean1 = NodeUtil.isValidQualifiedName("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Node node0 = new Node(125, 125, 125);
      Node node1 = NodeUtil.newName(codingConvention0, "%", node0, "");
      node1.isUnscopedQualifiedName();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeBLOCK 125
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(103, 103, (-1285)).when(node0).getType();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
      
      Node node1 = Node.newString("-=", 39, 4095);
      NodeUtil.isSimpleFunctionObjectCall(node1);
      assertEquals(163839, node1.getSourcePosition());
      assertEquals(40, node1.getType());
      assertTrue(node1.isString());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(50);
      String string0 = NodeUtil.opToStr(125);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(88);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isLiteralValue(node0, false);
      assertTrue(node0.isBlock());
      assertEquals(512125, node0.getSourcePosition());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(true).when(node0).isExprResult();
      // Undeclared exception!
      try { 
        NodeUtil.isPrototypePropertyDeclaration(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(2956).when(node0).getType();
      boolean boolean0 = NodeUtil.isLoopStructure(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newNumber(2.0);
      NodeUtil.getLoopCodeBlock(node0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(84, 84, 107).when(node0).getType();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newNumber((-924.148072152586));
      node0.detachChildren();
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = node0.cloneTree();
      assertNotSame(node1, node0);
      assertEquals(44, node1.getType());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newString(":this", 111, 111);
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertEquals(454767, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-788), 12, 12).when(node0).getType();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(12);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = NodeUtil.trimJsWhiteSpace("JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED");
      assertEquals("JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = NodeUtil.trimJsWhiteSpace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got TRUE
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = new Node(72);
      Node node1 = node0.useSourceInfoIfMissingFromForTree(node0);
      assertEquals((-1), node1.getCharno());
      assertEquals(72, node1.getType());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(node1).getProp(anyInt());
      Node node2 = NodeUtil.newUndefinedNode(node1);
      boolean boolean0 = NodeUtil.isImmutableValue(node2);
      assertTrue(boolean0);
      
      Node node3 = new Node(51, node2, node0);
      assertEquals(0, node2.getCharno());
      assertFalse(node3.hasOneChild());
      assertEquals(122, node2.getType());
      assertTrue(node3.isIn());
      assertEquals((-1), node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ErrorFormat errorFormat0 = ErrorFormat.MULTILINE;
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, errorFormat0, errorFormat0, object0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.isPrototypeProperty(node1);
      boolean boolean0 = NodeUtil.isImmutableValue(node1);
      assertTrue(boolean0);
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      NodeUtil.isSimpleOperatorType((-693));
      Node node0 = new Node((-693), (-693), (-693));
      node0.setOptionalArg(false);
      assertEquals((-693), node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      assertFalse(node0.isName());
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(16);
      boolean boolean1 = NodeUtil.isVarDeclaration(node0);
      assertEquals(43, node0.getType());
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      NodeUtil.isGet(node0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeBLOCK 125
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node((-716), (-716), (-716));
      node0.setOptionalArg(false);
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertEquals((-716), node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, "JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "%", node0, "");
      Node node2 = NodeUtil.numberNode(41, node1);
      assertEquals(0, node2.getCharno());
      assertTrue(node1.isName());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      String string0 = node0.toString(false, false, false);
      assertEquals("TRUE", string0);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(44, node0.getType());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(node0).getString();
      doReturn((String) null).when(node0).toString();
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node1 = new Node(47, node0, node0);
      // Undeclared exception!
      try { 
        peepholeSimplifyRegExp0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.regex.RegExpTree$1Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = new Node(35);
      try { 
        node0.setString("*=");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // GETELEM is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(35, 35, 35);
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node1 = NodeUtil.newName(codingConvention0, "", node0, "*=");
      NodeUtil.isPrototypeProperty(node1);
      assertEquals(143395, node1.getSourcePosition());
      assertTrue(node1.isName());
      assertEquals(35, node0.getType());
      assertEquals(35, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newString("undefined");
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getParent();
      doReturn(305, 42, 2293, 4095).when(node1).getType();
      doReturn(".3]oh9POh`FD_Vg}uG@5").when(node1).toString();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression node.3]oh9POh`FD_Vg}uG@5
         //  parent:STRING undefined
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newNumber((-330.0), 130, (-2045));
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test061()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, "JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "%", node0, "");
      String string0 = node1.toString();
      assertTrue(node1.isName());
      assertEquals("NAME % 0 [originalname: ] [source_file: JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED]", string0);
      assertEquals(0, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, "JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "%", node0, "");
      node1.setSourceEncodedPositionForTree(10000);
      assertEquals(2, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newUndefinedNode(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assignment op:VOID 0
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(91).when(node0).getType();
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      assertFalse(node0.isFunction());
      
      boolean boolean0 = NodeUtil.referencesThis(node0);
      assertEquals(43, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(22).when(node0).getType();
      TernaryValue ternaryValue0 = NodeUtil.getPureBooleanValue(node0);
      Object object0 = new Object();
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(108).when(node1).getChildCount();
      doReturn(ternaryValue0, object0).when(node1).getProp(anyInt());
      doReturn(true, true).when(node1).isTry();
      NodeUtil.maybeAddFinally(node1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, "JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "%", node0, "");
      boolean boolean0 = NodeUtil.isNullOrUndefined(node1);
      assertFalse(boolean0);
      assertEquals(0, node1.getSourcePosition());
      assertEquals(38, node1.getType());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(48);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 48
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(node0).isNull();
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(149);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(91, 91, 2354, 4096, 2354).when(node0).getType();
      doReturn(true).when(node0).isNull();
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(36).when(node0).getType();
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertEquals(43, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(41).when(node0).getType();
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ErrorFormat errorFormat0 = ErrorFormat.MULTILINE;
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, errorFormat0, errorFormat0, object0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newUndefinedNode(node0);
      String string0 = NodeUtil.getArrayElementStringValue(node1);
      assertFalse(node1.isNull());
      assertEquals(0, node1.getSourcePosition());
      assertEquals("", string0);
      assertTrue(node1.isVoid());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ErrorReporter errorReporter0 = mock(ErrorReporter.class, new ViolatedAssumptionAnswer());
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MatchDeclaration0);
      boolean boolean1 = NodeUtil.isLiteralValue(node0, false);
      assertFalse(boolean1 == boolean0);
      assertTrue(node0.isParamList());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newNumber(683.8366306);
      Node node1 = new Node(31, node0, node0, node0, node0);
      NodeUtil.redeclareVarsInsideBranch(node1);
      assertEquals(31, node1.getType());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isName());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = new Node(211, 97, 83);
      int int0 = NodeUtil.getNameReferenceCount(node0, ">-`g9]D1C(}o`");
      assertEquals(397395, node0.getSourcePosition());
      assertEquals(211, node0.getType());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Node node0 = new Node(112);
      Node node1 = NodeUtil.newName(codingConvention0, "===", node0, (String) null);
      NodeUtil.isPrototypeProperty(node1);
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(38, node1.getType());
      assertFalse(node0.isIn());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      NodeUtil.getSourceName(node0);
      assertEquals(512125, node0.getSourcePosition());
      assertEquals(125, node0.getType());
      assertTrue(node0.isBlock());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      InputId inputId0 = NodeUtil.getInputId((Node) null);
      assertNull(inputId0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getParent();
      doReturn((StaticSourceFile) null).when(node0).getStaticSourceFile();
      StaticSourceFile staticSourceFile0 = NodeUtil.getSourceFile(node0);
      assertNull(staticSourceFile0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ErrorReporter errorReporter0 = mock(ErrorReporter.class, new ViolatedAssumptionAnswer());
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got PARAM_LIST
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = new Node(72);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getFirstChild();
      doReturn(72, 52).when(node1).getType();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(boolean0);
      assertEquals(72, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, "JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "%", node0, "");
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got NAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node(86);
      boolean boolean0 = node0.getBooleanProp(35);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(86, 86, 0).when(node1).getType();
      boolean boolean1 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(node0.isAssign());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newString("%");
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getFirstChild();
      doReturn(true).when(node1).isNew();
      doReturn(false).when(node1).isNoSideEffectsCall();
      boolean boolean0 = NodeUtil.constructorCallHasSideEffects(node1);
      assertTrue(boolean0);
      assertEquals(40, node0.getType());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ErrorReporter errorReporter0 = mock(ErrorReporter.class, new ViolatedAssumptionAnswer());
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      NodeUtil.getBestJSDocInfo(node0);
      assertEquals(83, node0.getType());
      assertTrue(node0.isParamList());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(103, 103, (-1285)).when(node0).getType();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      boolean boolean1 = NodeUtil.isAssociative(3133);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Node node0 = NodeUtil.newQualifiedNameNode(codingConvention0, "-wfrw");
      // Undeclared exception!
      try { 
        node0.removeChild(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getFirstChild();
      doReturn(86, 52).when(node1).getType();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
      assertEquals(44, node0.getType());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(103, 103, (-1285)).when(node0).getType();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      Node node1 = NodeUtil.booleanNode(false);
      boolean boolean1 = NodeUtil.isPrototypePropertyDeclaration(node1);
      assertEquals(43, node1.getType());
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), node1.getCharno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getFirstChild();
      doReturn(86, 52).when(node1).getType();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertFalse(boolean0);
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(jqueryCodingConvention0);
      Node node2 = NodeUtil.newName(googleCodingConvention0, "gL[7lNj:X`DD?K^[/", node0, "gL[7lNj:X`DD?K^[/");
      boolean boolean1 = NodeUtil.mayHaveSideEffects(node2);
      assertTrue(node0.isFalse());
      assertEquals(38, node2.getType());
      assertEquals((-1), node2.getCharno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = new Node(35, 35, 35);
      NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      assertTrue(node0.isGetElem());
      assertEquals(143395, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertEquals(35, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = new Node(55, node0, node0, 41, 115);
      Node node2 = null;
      try {
        node2 = new Node(44, node0, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newNumber((double) 55, 55, 115);
      Node node1 = new Node(55, node0, node0, node0);
      node1.detachChildren();
      assertEquals(55, node1.getType());
      assertEquals(225395, node0.getSourcePosition());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = NodeUtil.getInverseOperator(152);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      NodeUtil.getNearestFunctionName(node0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeBLOCK 125
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(node0).isFunction();
      // Undeclared exception!
      try { 
        NodeUtil.getNearestFunctionName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newString((-689), " nE@$Wc<urS+", (-1880182956), 54);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getParent();
      doReturn(576, (-1659), 40, 32).when(node1).getType();
      doReturn("3").when(node1).toString();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -689
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1301, 108, 108).when(node0).getType();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(3584, 105, 305).when(node0).getType();
      NodeUtil.mayHaveSideEffects(node0);
      Node node1 = Node.newString("tPj>JmTI7}S[", 16, 48);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew(node1, 89);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(103, 103, (-1285)).when(node0).getType();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      Node node1 = NodeUtil.booleanNode(false);
      assertFalse(node1.isExprResult());
      
      boolean boolean1 = NodeUtil.isExprCall(node1);
      assertTrue(node1.isFalse());
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ErrorReporter errorReporter0 = mock(ErrorReporter.class, new ViolatedAssumptionAnswer());
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertFalse(node0.isGetProp());
      
      NodeUtil.getPrototypeClassName(node0);
      assertTrue(node0.isParamList());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ErrorFormat errorFormat0 = ErrorFormat.MULTILINE;
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, errorFormat0, errorFormat0, object0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.getPureBooleanValue(node1);
      boolean boolean0 = NodeUtil.isSimpleOperatorType((-757));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      node0.addChildrenToFront(node0);
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = new Node(35, 35, 35);
      NodeUtil.isSwitchCase(node0);
      assertEquals(35, node0.getType());
      assertEquals(143395, node0.getSourcePosition());
      assertEquals(35, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      NodeUtil.isStatementBlock(node0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeBLOCK 125
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node(35, 35, 35);
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node1 = NodeUtil.newName(codingConvention0, "", node0, "*=");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = NodeUtil.containsType(node1, (-1), nodeUtil_MayBeStringResultPredicate0);
      assertFalse(boolean0);
      assertEquals(38, node1.getType());
      assertEquals(143395, node1.getSourcePosition());
      assertTrue(node0.isGetElem());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "G;ZNJ&er*bEUP2F..O");
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isGetProp());
      assertFalse(node0.isString());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ErrorFormat errorFormat0 = ErrorFormat.MULTILINE;
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newUndefinedNode(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName("JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED");
      assertTrue(boolean0);
  }
}

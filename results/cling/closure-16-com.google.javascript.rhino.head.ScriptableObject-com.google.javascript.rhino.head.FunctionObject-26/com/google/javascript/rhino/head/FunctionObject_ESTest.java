/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 04:31:19 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.BoundFunction;
import com.google.javascript.rhino.head.Callable;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.Delegator;
import com.google.javascript.rhino.head.EcmaError;
import com.google.javascript.rhino.head.EvaluatorException;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeBoolean;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJSON;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeJavaPackage;
import com.google.javascript.rhino.head.NativeJavaTopPackage;
import com.google.javascript.rhino.head.NativeNumber;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.Synchronizer;
import java.nio.CharBuffer;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      assertEquals("global", importerTopLevel0.getClassName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      nativeError0.setGetterOrSetter((String) null, 0, (Callable) null, true);
      assertEquals("Error", nativeError0.getClassName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Set<Object> set0 = nativeIterator_StopIteration0.keySet();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Synchronizer synchronizer0 = new Synchronizer(nativeJavaClass0, set0);
      BoundFunction boundFunction0 = new BoundFunction(context0, nativeIterator_StopIteration0, nativeJavaClass0, synchronizer0, context0.emptyArgs);
      assertFalse(boundFunction0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(nativeObject0, nativeObject0, 583);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Boolean boolean0 = Boolean.valueOf((String) null);
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(nativeError0, boolean0, 8);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      NativeJavaPackage nativeJavaPackage0 = nativeJavaTopPackage0.forcePackage("msg.change.value.with.writable.false", nativeError0);
      NativeJavaPackage nativeJavaPackage1 = (NativeJavaPackage)nativeJavaPackage0.get("msg.change.value.with.writable.false", (Scriptable) nativeJavaTopPackage0);
      assertEquals("JavaPackage", nativeJavaPackage1.getClassName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) nativeError0, class0, false, false);
      baseFunction0.defineConst("jsGet_setImmunePrototypeProperty", nativeError0);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        nativeError0.defineOwnProperty(context0, (Object) "jsGet_setImmunePrototypeProperty", (ScriptableObject) baseFunction0, true);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Cannot change the enumerable attribute of \"jsGet_setImmunePrototypeProperty\" because configurable is false.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      nativeError0.defineConst("1/7Kmb9_", (Scriptable) null);
      assertFalse(nativeError0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) nativeError0, class0, true, true);
      // Undeclared exception!
      try { 
        baseFunction0.setAttributes("msg.modify.sealed", (-2676));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2676
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) nativeError0, class0, false, false);
      CharBuffer charBuffer0 = CharBuffer.allocate(3689);
      NativeString nativeString0 = new NativeString(charBuffer0);
      nativeString0.get((-1048), (Scriptable) baseFunction0);
      assertEquals("Function", baseFunction0.getFunctionName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      Context context0 = Context.getCurrentContext();
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      Float float0 = new Float((float) 3);
      nativeArray0.put((-1351), (Scriptable) scriptableObject0, (Object) float0);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) nativeError0, class0, false, false);
      baseFunction0.setAttributes(13, 13);
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) baseFunction0, 13);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Context context0 = Context.getContext();
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      NativeError nativeError0 = new NativeError();
      ScriptableObject.putProperty((Scriptable) scriptableObject0, 196, (Object) nativeError0);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context(contextFactory0);
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod(context0, (Scriptable) nativeError0, "\tat script", context0.emptyArgs);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: \tat script is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      ScriptableObject.redefineProperty(nativeJavaTopPackage0, ")@4i", false);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("#di", classLoader0);
      nativeJavaPackage0.defineProperty("setImmunePrototyp", (Object) nativeJavaPackage0.EMPTY, 2);
      boolean boolean0 = nativeJavaPackage0.isConst("setImmunePrototyp");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Synchronizer synchronizer0 = new Synchronizer(nativeError0);
      // Undeclared exception!
      try { 
        nativeError0.setGetterOrSetter("jsFunction_call", (-153), synchronizer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // jsFunction_call
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) nativeError0, class0, false, false);
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.setGetterOrSetter((String) null, (-1653), baseFunction0, false);
      assertEquals(2, baseFunction0.getLength());
      assertEquals(2, baseFunction0.getArity());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BaseFunction baseFunction0 = null;
      try {
        baseFunction0 = new BaseFunction((Scriptable) null, (Scriptable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertTrue(importerTopLevel0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(2);
      NativeCall nativeCall0 = new NativeCall();
      nativeNumber0.putConst("RXyBj_:.Ui'E P", nativeCall0, nativeNumber0);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Delegator delegator0 = new Delegator();
      NativeString nativeString0 = new NativeString("oxoCM_A@tFH$^c-Yr4N");
      // Undeclared exception!
      try { 
        nativeError0.putConst("oxoCM_A@tFH$^c-Yr4N", delegator0, nativeString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Delegator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Class<NativeBoolean> class0 = NativeBoolean.class;
      // Undeclared exception!
      try { 
        nativeError0.getDefaultValue(class0);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.NativeBoolean
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      // Undeclared exception!
      try { 
        nativeArray0.getDefaultValue((Class<?>) null);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeString nativeString0 = new NativeString("language version");
      Byte byte0 = new Byte((byte) (-113));
      // Undeclared exception!
      try { 
        NativeJSON.stringify(context0, nativeString0, nativeString0, context0, byte0);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      // Undeclared exception!
      try { 
        Context.toNumber(nativeBoolean0);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        ScriptableObject.getDefaultValue((Scriptable) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 04:57:53 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.EcmaError;
import com.google.javascript.rhino.head.EvaluatorException;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NativeArray_ESTest extends NativeArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1507L);
      int int0 = nativeArray0.size();
      assertEquals(1507, int0);
      assertTrue(nativeArray0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(scriptable0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      doReturn((Scriptable) null, (Scriptable) null, (Scriptable) null, (Scriptable) null, (Scriptable) null).when(scriptable0).getParentScope();
      doReturn("Function", "Function", "@4aRpQL?Hx", "language version", "error reporter").when(scriptable0).toString();
      NativeArray.init(scriptable0, false);
      NativeArray nativeArray0 = new NativeArray(5);
      Object[] objectArray0 = nativeArray0.toArray();
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1L));
      nativeArray0.setDenseOnly(false);
      nativeArray0.toArray();
      nativeArray0.get((-5505), (Scriptable) nativeArray0);
      assertTrue(nativeArray0.isEmpty());
      assertEquals((-1L), nativeArray0.getLength());
      assertTrue(nativeArray0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Object[] objectArray1 = nativeArray0.toArray();
      assertTrue(nativeArray0.isExtensible());
      assertEquals(9, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertFalse(importerTopLevel0.isSealed());
      
      ScriptableObject.buildDataDescriptor(nativeArray0, importerTopLevel0, (-1840700267));
      assertTrue(nativeArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<NativeArray> class0 = NativeArray.class;
      // Undeclared exception!
      try { 
        ScriptableObject.buildClassCtor((Scriptable) null, class0, false, true);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.NativeArray\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NativeArray.setMaximumInitialCapacity((-2278));
      NativeArray nativeArray0 = new NativeArray(5);
      Object[] objectArray0 = nativeArray0.toArray();
      assertTrue(nativeArray0.isEmpty());
      assertEquals(5, objectArray0.length);
      assertTrue(nativeArray0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn(importerTopLevel0).when(scriptable0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      // Undeclared exception!
      try { 
        NativeArray.getLengthProperty(context0, scriptable0);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1351L);
      IdFunctionObject idFunctionObject0 = mock(IdFunctionObject.class, new ViolatedAssumptionAnswer());
      doReturn((Scriptable) null, (Scriptable) null, (Scriptable) null, (Scriptable) null, (Scriptable) null).when(idFunctionObject0).getParentScope();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(idFunctionObject0).toString();
      nativeArray0.fillConstructorProperties(idFunctionObject0);
      assertEquals(1351L, nativeArray0.jsGet_length());
      
      int int0 = nativeArray0.indexOf("-w");
      assertEquals((-1), int0);
  }
}

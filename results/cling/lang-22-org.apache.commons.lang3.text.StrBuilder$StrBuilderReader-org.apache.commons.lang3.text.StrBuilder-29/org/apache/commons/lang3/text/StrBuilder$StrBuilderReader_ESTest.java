/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 21:19:27 GMT 2019
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.PriorityQueue;
import org.apache.commons.lang3.text.StrBuilder;
import org.apache.commons.lang3.text.StrMatcher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class StrBuilder$StrBuilderReader_ESTest extends StrBuilder$StrBuilderReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'\"");
      // Undeclared exception!
      try { 
        strBuilder0.insert((-4948), (float) (-4948));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -4948
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.validateIndex(1806);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1806
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Caught a SecurityException reading the system property '");
      strBuilder0.insert(1, (double) 1);
      assertEquals(59, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.toCharArray((-2043), (-2043));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2043
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.substring(3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[1];
      strBuilder0.append(charArray0);
      StrBuilder strBuilder1 = new StrBuilder();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(32, 32);
      linkedHashSet0.add(strBuilder1);
      boolean boolean0 = linkedHashSet0.add(strBuilder0);
      assertEquals(1, strBuilder0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrMatcher strMatcher0 = StrMatcher.spaceMatcher();
      strBuilder0.deleteFirst(strMatcher0);
      // Undeclared exception!
      try { 
        strBuilder0.charAt(3370);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3370
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      strBuilder1.deleteAll((StrMatcher) null);
      strBuilder1.minimizeCapacity();
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.replaceAll((StrMatcher) null, "");
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("", "");
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("endsR start");
      strBuilder0.appendSeparator("endsR start", "endsR start");
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("endsR start");
      // Undeclared exception!
      try { 
        strBuilder0.replaceAll(strMatcher0, "endsR start");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("org.apache.commons.lang3.text.StrMatcher$CharSetMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[^d]");
      strBuilder0.replaceAll((StrMatcher) null, "[^d]");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(4, strBuilder0.size());
      assertEquals(91, int0);
      assertEquals(36, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2737));
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      strBuilder0.replaceFirst(strMatcher0, "");
      // Undeclared exception!
      try { 
        strBuilder0.charAt((-2737));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2737
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = new StrBuilder();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(strBuilder1);
      linkedHashSet0.add(strBuilder0);
      // Undeclared exception!
      try { 
        strBuilder1.charAt(32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 32
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = new StrBuilder();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(102);
      linkedHashSet0.add(strBuilder1);
      linkedHashSet0.add(strBuilder0);
      assertEquals(1, linkedHashSet0.size());
      
      strBuilder0.appendSeparator("");
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = new StrBuilder();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(102);
      linkedHashSet0.add(strBuilder1);
      linkedHashSet0.add(strBuilder0);
      strBuilder1.appendln("");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      int int0 = strBuilder_StrBuilderReader0.read();
      assertFalse(strBuilder1.isEmpty());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = new StrBuilder();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(32, 32);
      linkedHashSet0.add(strBuilder1);
      linkedHashSet0.add(strBuilder0);
      // Undeclared exception!
      try { 
        strBuilder1.charAt((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      StrBuilder strBuilder2 = strBuilder1.minimizeCapacity();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(1, 1);
      linkedHashSet0.add(strBuilder2);
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(102, 102);
      linkedHashSet0.add(linkedHashSet0);
      boolean boolean0 = linkedHashSet0.add(strBuilder1);
      assertEquals(0, strBuilder0.capacity());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(102);
      linkedHashSet0.add("");
      linkedHashSet0.add(strBuilder0);
      assertEquals(2, linkedHashSet0.size());
      
      strBuilder0.appendSeparator("");
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test20()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      priorityQueue0.add("&Yt2gwEW`y%xvL(Y]W");
      strBuilder0.appendWithSeparators((Iterable<?>) priorityQueue0, "");
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(102, 102);
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      linkedHashSet1.add(strBuilder0);
      linkedHashSet0.add(linkedHashSet1);
      linkedHashSet0.add(strBuilder0);
      strBuilder0.appendSeparator("&Yt2gwEW`y%xvL(Y]W");
      assertEquals(72, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(102);
      linkedHashSet0.add("");
      linkedHashSet0.add(strBuilder0);
      strBuilder0.appendln("");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(1, strBuilder0.length());
      assertEquals(10, int0);
  }
}

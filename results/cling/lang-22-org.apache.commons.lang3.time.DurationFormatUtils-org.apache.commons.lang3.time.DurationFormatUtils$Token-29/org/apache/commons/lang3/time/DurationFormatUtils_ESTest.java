/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 21:06:37 GMT 2019
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.apache.commons.lang3.time.DurationFormatUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DurationFormatUtils_ESTest extends DurationFormatUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test00()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(1L, false, true);
      assertEquals("0 days", string0);
      
      String string1 = DurationFormatUtils.formatPeriod(3600000L, 0L, "1 hour");
      assertEquals("1 hour", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test01()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationISO((-2110L));
      assertEquals("P0Y0M0DT0H0M-2.90S", string0);
      
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0, 0, 0, 0).when(timeZone0).getRawOffset();
      doReturn(false).when(timeZone0).inDaylightTime(any(java.util.Date.class));
      String string1 = DurationFormatUtils.formatPeriod((-4235L), (long) 14, "0un.text.Nor0alizer", false, timeZone0);
      assertEquals("0un.text.Nor0alizer", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(0L, "sun.text.Normalizer", true);
      assertEquals("0un.text.Nor0alizer", string0);
      
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0, 0, 0, 0).when(timeZone0).getRawOffset();
      doReturn(false).when(timeZone0).inDaylightTime(any(java.util.Date.class));
      String string1 = DurationFormatUtils.formatPeriod((-4235L), (long) 14, "0un.text.Nor0alizer", false, timeZone0);
      assertEquals("0un.text.Nor0alizer", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DurationFormatUtils.formatDurationISO(0L);
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(59, 16).when(timeZone0).getDSTSavings();
      doReturn(16, 16, 59, 59, Integer.MAX_VALUE).when(timeZone0).getOffset(anyLong());
      doReturn(59, 16, Integer.MAX_VALUE, 16, 16).when(timeZone0).getRawOffset();
      doReturn(true, false, false, true, false).when(timeZone0).inDaylightTime(any(java.util.Date.class));
      // Undeclared exception!
      DurationFormatUtils.formatPeriod((long) Integer.MAX_VALUE, (-1291L), "", true, timeZone0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DurationFormatUtils.formatDurationWords(60000L, false, false);
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(17).when(timeZone0).getDSTSavings();
      doReturn(32, 3, 3, (-119), Integer.MAX_VALUE).when(timeZone0).getOffset(anyLong());
      doReturn(3, 32, 32, Integer.MAX_VALUE, Integer.MAX_VALUE).when(timeZone0).getRawOffset();
      doReturn(false, true, false, false, false).when(timeZone0).inDaylightTime(any(java.util.Date.class));
      // Undeclared exception!
      DurationFormatUtils.formatPeriod(1064L, 0L, "", false, timeZone0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DurationFormatUtils.formatDuration(60000L, "");
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(17).when(timeZone0).getDSTSavings();
      doReturn(32, 3, 3, (-119), Integer.MAX_VALUE).when(timeZone0).getOffset(anyLong());
      doReturn(3, 32, 32, Integer.MAX_VALUE, Integer.MAX_VALUE).when(timeZone0).getRawOffset();
      doReturn(false, true, false, false, false).when(timeZone0).inDaylightTime(any(java.util.Date.class));
      // Undeclared exception!
      DurationFormatUtils.formatPeriod(1064L, 0L, "", false, timeZone0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      DurationFormatUtils.formatDuration(0L, "0 0a00");
      String string0 = DurationFormatUtils.formatDurationWords(60000L, false, true);
      assertEquals("0 days 0 hours 1 minute", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(1L, false, true);
      assertEquals("0 days", string0);
      
      String string1 = DurationFormatUtils.formatDuration(0L, "0 0a00");
      assertEquals("0 0a00", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationHMS((-24L));
      assertEquals("0:00:00.76", string0);
      
      String string1 = DurationFormatUtils.formatDurationWords((-24L), true, true);
      assertEquals("0 seconds", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      DurationFormatUtils.formatDuration(60000L, "");
      String string0 = DurationFormatUtils.formatDurationWords(60000L, false, false);
      assertEquals("0 days 0 hours 1 minute 0 seconds", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationISO(0L);
      assertEquals("P0Y0M0DT0H0M0.000S", string0);
      
      String string1 = DurationFormatUtils.formatPeriod(0L, 0L, "P0Y0M0DT0H0M0.000S");
      assertEquals("P0Y000DT00000.0000", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test11()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationISO(59983L);
      assertEquals("P0Y0M0DT0H0M59.983S", string0);
      
      String string1 = DurationFormatUtils.formatPeriodISO(59983L, 1L);
      assertEquals("P-1Y11M30DT23H59M0.018S", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration((-2827L), "");
      assertEquals("", string0);
      
      String string1 = DurationFormatUtils.formatPeriodISO(1686L, 1);
      assertEquals("P-1Y11M30DT23H59M58.315S", string1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("M", 35);
      boolean boolean0 = durationFormatUtils_Token0.equals("0:00:00.76");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test14()  throws Throwable  {
      DurationFormatUtils.formatPeriod(3600000L, 0L, "1 hour");
      String string0 = DurationFormatUtils.formatDuration(3600000L, "1 hour");
      assertEquals("1 hour", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test15()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriod(2003L, (-58L), "P0Y0M0DT0H0M-1.16S");
      assertEquals("P0Y0-10DT07430-1-1.163597939", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test16()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriod(0L, 0L, "P0Y0M0DT0H0M0.000S");
      assertEquals("P0Y000DT00000.0000", string0);
      
      String string1 = DurationFormatUtils.formatDuration(1L, "");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test17()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(1L, true, true);
      assertEquals("0 seconds", string0);
      
      String string1 = DurationFormatUtils.formatDuration(1L, "0 days");
      assertEquals("0 0a00", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test18()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(3600000L, true, true);
      assertEquals("1 hour", string0);
      
      String string1 = DurationFormatUtils.formatDuration(3600000L, "1 hour");
      assertEquals("1 hour", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test19()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriod(1L, 1L, "0 days");
      assertEquals("0 0a00", string0);
      
      String string1 = DurationFormatUtils.formatDurationHMS(0L);
      assertEquals("0:00:00.000", string1);
  }
}

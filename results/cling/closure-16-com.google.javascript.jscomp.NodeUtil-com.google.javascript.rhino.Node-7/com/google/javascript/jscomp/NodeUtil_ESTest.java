/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 04:10:18 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.PeepholeCollectPropertyAssignments;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeSimplifyRegExp;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(false).when(node0).isFunction();
      doReturn(false).when(node0).isName();
      NodeUtil.redeclareVarsInsideBranch(node0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 4: RETURN
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(18);
      assertEquals("<<", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = new Node(2, 29, 49);
      NodeUtil.isHoistedFunctionDeclaration(node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertEquals(2, node0.getType());
      assertEquals(118833, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        peepholeRemoveDeadCode0.tryFoldDo(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("@this type of a function must be an object\nActual type: {0}", "@this type of a function must be an object\nActual type: {0}").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "@this type of a function must be an object\nActual type: {0}", node0, ".@Jp1APIU/7<?==");
      NodeUtil.isHoistedFunctionDeclaration(node1);
      NodeUtil.isImmutableValue(node1);
      assertEquals(0, node1.getCharno());
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = NodeUtil.opToStr(31);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("@this type of a function must be an object\nActual type: {0}", "@this type of a function must be an object\nActual type: {0}").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "@this type of a function must be an object\nActual type: {0}", node0, ".@Jp1APIU/7<?==");
      String string0 = NodeUtil.getArrayElementStringValue(node1);
      assertNull(string0);
      assertEquals(0, node1.getSourcePosition());
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = new Node(4095);
      boolean boolean0 = NodeUtil.isSymmetricOperation(node0);
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(4095, node0.getType());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString(1919, "Math.floor");
      NodeUtil.getPureBooleanValue(node0);
      assertEquals(1919, node0.getType());
      assertFalse(node0.isThis());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("@this type of a function must be an object\nActual type: {0}", "@this type of a function must be an object\nActual type: {0}").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "@this type of a function must be an object\nActual type: {0}", node0, ".@Jp1APIU/7<?==");
      boolean boolean0 = NodeUtil.isRelationalOperation(node1);
      assertEquals(0, node1.getCharno());
      assertTrue(node1.isName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.getImpureBooleanValue(node0);
      assertEquals((-1), node0.getLineno());
      assertEquals(43, node0.getType());
      assertFalse(node0.isIn());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("@this type of a function must be an object\nActual type: {0}", "@this type of a function must be an object\nActual type: {0}").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "@this type of a function must be an object\nActual type: {0}", node0, ".@Jp1APIU/7<?==");
      NodeUtil.getNearestFunctionName(node1);
      Node node2 = new Node(52, node1, node1, node1, 0, 30);
      assertEquals(0, node1.getSourcePosition());
      assertEquals(52, node2.getType());
      assertEquals(30, node2.getSourcePosition());
      assertEquals(38, node1.getType());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = NodeUtil.opToStr(32);
      assertEquals("typeof", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      NodeUtil.nodeTypeMayHaveSideEffects(node0, abstractCompiler0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node1).getParent();
      doReturn(0, 0, 0, 0).when(node1).getType();
      doReturn((String) null).when(node1).toString();
      Predicate<Node> predicate0 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1, predicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodenull
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.isFunctionDeclaration(node0);
      boolean boolean1 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertFalse(boolean1 == boolean0);
      assertEquals(43, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.isFunctionDeclaration(node0);
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isFalse());
      
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1, 40, 127).when(node1).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = NodeUtil.mayHaveSideEffects(node1, abstractCompiler0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      assertFalse(node0.isRegExp());
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(12);
      assertTrue(boolean0);
      
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node1 = peepholeSimplifyRegExp0.optimizeSubtree(node0);
      assertEquals(43, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1, 40, 127).when(node1).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      NodeUtil.mayHaveSideEffects(node1, abstractCompiler0);
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = peepholeCollectPropertyAssignments0.optimizeSubtree(node0);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchDeclaration0);
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isScript());
      assertEquals(43, node1.getType());
      assertFalse(node1.isBlock());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString("*E+hzyCcy");
      Node node1 = new Node(536, node0, node0, node0);
      assertFalse(node1.hasMoreThanOneChild());
      
      boolean boolean0 = NodeUtil.containsFunction(node1);
      assertEquals(536, node1.getType());
      assertFalse(boolean0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(false, false).when(node0).isFunction();
      Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
      int int0 = NodeUtil.getCount(node0, predicate0, predicate0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Predicate<Node> predicate0 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(predicate0).apply(any(com.google.javascript.rhino.Node.class));
      Predicate<Node> predicate1 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.has(node0, predicate0, predicate1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node(8367);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getNext();
      // Undeclared exception!
      try { 
        NodeUtil.newVarNode("", node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("\"{xkWH+j8yJ", (Node) null);
      assertEquals(118, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getNext();
      doReturn((Object) null, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newVarNode("", node0);
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Node node2 = NodeUtil.newQualifiedNameNode(codingConvention0, "", node1, "e93-}rw*-p");
      boolean boolean0 = NodeUtil.isImmutableValue(node2);
      assertFalse(boolean0);
      assertEquals(0, node2.getCharno());
      
      NodeUtil.isConstantName(node1);
      assertEquals(118, node1.getType());
      assertEquals(0, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1, 40, 127).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, abstractCompiler0);
      boolean boolean1 = NodeUtil.isValidQualifiedName("!L|Q");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("@this type of a function must be an object\nActual type: {0}", "@this type of a function must be an object\nActual type: {0}").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "@this type of a function must be an object\nActual type: {0}", node0, ".@Jp1APIU/7<?==");
      NodeUtil.isSimpleOperatorType(54);
      boolean boolean0 = NodeUtil.isCallOrNew(node1);
      assertFalse(boolean0);
      assertEquals(0, node1.getCharno());
      assertTrue(node1.isName());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.isLoopStructure(node0);
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(581, 12, 7);
      NodeUtil.getLoopCodeBlock(node0);
      assertEquals(581, node0.getType());
      assertEquals(49159, node0.getSourcePosition());
      assertEquals(12, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(4095);
      Node node1 = node0.removeChildren();
      assertNull(node1);
      
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
      assertEquals(4095, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getNext();
      doReturn((Object) null, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newVarNode("", node0);
      node1.detachChildren();
      assertEquals(0, node1.getSourcePosition());
      assertEquals(118, node1.getType());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("@this type of a function must be an object\nActual type: {0}", "@this type of a function must be an object\nActual type: {0}").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "@this type of a function must be an object\nActual type: {0}", node0, ".@Jp1APIU/7<?==");
      Node node2 = node1.cloneTree();
      assertEquals(0, node2.getCharno());
      assertTrue(node2.isName());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node(4095);
      Node node1 = node0.removeChildren();
      assertEquals(4095, node0.getType());
      assertNull(node1);
      assertEquals((-1), node0.getSourcePosition());
      
      int int0 = NodeUtil.getInverseOperator(35);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node(47);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(47, node0.getType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("");
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("@this type of a function must be an object\nActual type: {0}", "@this type of a function must be an object\nActual type: {0}").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "@this type of a function must be an object\nActual type: {0}", node0, ".@Jp1APIU/7<?==");
      NodeUtil.getNumberValue(node1);
      assertTrue(node1.isName());
      assertEquals(0, node1.getCharno());
      assertEquals(0, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(35);
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got FALSE
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null, (Node) null).when(node0).getNext();
      doReturn((Object) null, (Object) null).when(node0).getProp(anyInt());
      doReturn((String) null).when(node0).toString();
      doReturn((Node) null).when(node0).useSourceInfoFromForTree(any(com.google.javascript.rhino.Node.class));
      Node node1 = NodeUtil.newVarNode("", node0);
      Node node2 = node1.srcrefTree(node1);
      assertEquals(118, node2.getType());
      assertEquals(0, node2.getCharno());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1, 40, 127).when(node1).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      NodeUtil.mayHaveSideEffects(node1, abstractCompiler0);
      // Undeclared exception!
      try { 
        node0.addChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1, 40, 127).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, abstractCompiler0);
      assertTrue(boolean0);
      
      Node node1 = Node.newString((-262), ".iB?Pos{|", (-2477), 51);
      assertEquals((-262), node1.getType());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1, 40, 127).when(node1).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      NodeUtil.mayHaveSideEffects(node1, abstractCompiler0);
      node0.putIntProp((-1114), 30);
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpect prop id -1114
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1, 40, 127).when(node1).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1, abstractCompiler0);
      assertTrue(boolean0);
      
      node0.getDirectives();
      assertEquals(43, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      PipedInputStream pipedInputStream0 = new PipedInputStream(88);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("@this type of a function must be an object\nActual type: {0}", sequenceInputStream0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "@this type of a function must be an object\nActual type: {0}", node0, ".@Jp1APIU/7<?==");
      NodeUtil.isSimpleOperatorType(54);
      try { 
        node1.setDouble(40);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME @this type of a function must be an object
         // Actual type: {0} 0 [originalname: .@Jp1APIU/7<?==] [source_file: java.io.SequenceInputStream@8f44119] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1, 40, 127).when(node1).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      NodeUtil.mayHaveSideEffects(node1, abstractCompiler0);
      String string0 = node0.toStringTree();
      assertEquals("FALSE\n", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(node0).getType();
      doReturn(false).when(node0).isNull();
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node1).getType();
      boolean boolean1 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(11, (-2867), 109, 4, 4).when(node1).getType();
      doReturn(true).when(node1).isNull();
      boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
      boolean boolean1 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertFalse(boolean1 == boolean0);
      assertEquals(43, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      boolean boolean1 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertFalse(boolean1 == boolean0);
      assertEquals(43, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getNext();
      doReturn((Object) null, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newVarNode("", node0);
      NodeUtil.nodeTypeMayHaveSideEffects(node1, (AbstractCompiler) null);
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Node node2 = NodeUtil.newQualifiedNameNode(codingConvention0, "", node1, "e93-}rw*-p");
      NodeUtil.isImmutableValue(node2);
      assertEquals(118, node1.getType());
      assertEquals(0, node2.getSourcePosition());
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-5), (-5), (-5)).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      NodeUtil.mayEffectMutableState(node0, abstractCompiler0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention((CodingConvention) null);
      Node node1 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "@this type of a function must be an object\nActual type: {0}");
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assignment op:NAME @this type of a function must be an object
         // Actual type: {0}
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-5), (-5), (-5)).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0, abstractCompiler0);
      assertTrue(boolean0);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention((CodingConvention) null);
      Node node1 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "@this type of a function must be an object\nActual type: {0}");
      Node node2 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node1).when(node2).getFirstChild();
      doReturn(true).when(node2).isCall();
      boolean boolean1 = NodeUtil.isFunctionObjectCall(node2);
      assertFalse(node1.isGetElem());
      assertTrue(node1.isName());
      assertEquals((-1), node1.getLineno());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = new Node(1207, (-976), 47);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1207
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("@this type of a function must be an object\nActual type: {0}", "@this type of a function must be an object\nActual type: {0}").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "@this type of a function must be an object\nActual type: {0}", node0, ".@Jp1APIU/7<?==");
      NodeUtil.isImmutableValue(node1);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NAME @this type of a function must be an object
         // Actual type: {0} 0 [originalname: .@Jp1APIU/7<?==] [is_constant_name: 1] [source_file: @this type of a function must be an object
         // Actual type: {0}] does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("@this type of a function must be an object\nActual type: {0}", "@this type of a function must be an object\nActual type: {0}").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "@this type of a function must be an object\nActual type: {0}", node0, ".@Jp1APIU/7<?==");
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      boolean boolean0 = NodeUtil.has(node1, nodeUtil_NumbericResultPredicate0, nodeUtil_NumbericResultPredicate0);
      boolean boolean1 = NodeUtil.isImmutableValue(node1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, node1.getSourcePosition());
      assertEquals(38, node1.getType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.isImmutableValue(node0);
      node0.setLineno(30);
      assertEquals(30, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newString("e3!6c`5mj");
      NodeUtil.isImmutableValue(node0);
      assertTrue(node0.isString());
      
      Node node1 = Node.newString(49, "JSC_TEMPLATE_TYPE_EXPECTED");
      boolean boolean0 = NodeUtil.isBooleanResult(node1);
      assertTrue(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = Node.newNumber((double) 24, 1113, (-2387));
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = node0.isQualifiedName();
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newNumber((double) 43, 16, 51);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 43.0 16 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newString("*E+hzyCcy");
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING *E+hzyCcy is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      String string0 = node0.getQualifiedName();
      assertEquals(43, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      assertFalse(node0.isFunction());
      
      boolean boolean0 = NodeUtil.referencesThis(node0);
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      assertFalse(node0.isName());
      
      boolean boolean0 = NodeUtil.isVarDeclaration(node0);
      assertFalse(boolean0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newNumber(244.5439916);
      Node node1 = new Node(54, node0, node0, node0, node0);
      assertEquals(54, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(node0).getString();
      doReturn(0).when(node0).getType();
      doReturn(false).when(node0).isGetProp();
      boolean boolean0 = NodeUtil.isConstantByConvention(codingConvention0, node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getLastChild();
      doReturn((String) null).when(node0).getString();
      doReturn(1726).when(node0).getType();
      doReturn(true).when(node0).isGetProp();
      boolean boolean0 = NodeUtil.isConstantByConvention(codingConvention0, node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      node0.toString(false, false, false);
      NodeUtil.isFunctionDeclaration(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(node1).isTry();
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newQualifiedNameNode(codingConvention0, "[3y5gzzED=g-", node0, "[3y5gzzED=g-");
      boolean boolean0 = NodeUtil.mayBeString(node1, true);
      assertTrue(boolean0);
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(34, 1237, 22, 1237, 19).when(node0).getType();
      doReturn(true).when(node0).isNull();
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(node0).isNull();
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(151);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 151
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(28).when(node0).getType();
      boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(47, 47, 16, 46).when(node0).getType();
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-3278), 30, 44, 50, 4).when(node0).getType();
      doReturn(false).when(node0).isNull();
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-3207));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -3207
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(92, (-2668), 0, 0, 0).when(node0).getType();
      doReturn(false).when(node0).isNull();
      NodeUtil.mayBeStringHelper(node0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = NodeUtil.isBooleanResult(node0);
      assertEquals(40, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn((Node) null, (Node) null).when(node0).getNext();
      doReturn((Object) null, (Object) null).when(node0).getProp(anyInt());
      doReturn(false).when(node0).isFunction();
      doReturn(false).when(node0).isName();
      doReturn((String) null).when(node0).toString();
      Node node1 = NodeUtil.newVarNode("", node0);
      NodeUtil.getVarsDeclaredInBranch(node1);
      assertEquals(0, node1.getSourcePosition());
      assertTrue(node1.isVar());
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(false).when(node0).isFunction();
      doReturn(false).when(node0).isName();
      NodeUtil.getVarsDeclaredInBranch(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node1).getParent();
      doReturn(0, 0, 0, 0).when(node1).getType();
      doReturn((String) null).when(node1).toString();
      Predicate<Node> predicate0 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1, predicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodenull
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn((Node) null).when(node0).getParent();
      doReturn(false).when(node0).isFunction();
      doReturn(true).when(node0).isName();
      NodeUtil.getVarsDeclaredInBranch(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node1).getParent();
      doReturn(4095, 16, 1, 94).when(node1).getType();
      doReturn("cwIO]F^<)vuX2$(p").when(node1).toString();
      Predicate<Node> predicate0 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1, predicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodecwIO]F^<)vuX2$(p
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newQualifiedNameNode(codingConvention0, "[3y5gzzED=g-", node0, "[3y5gzzED=g-");
      assertTrue(node1.isName());
      
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node2 = NodeUtil.newVarNode("{JiCtTHoAY[Kpx]l)G", node1);
      int int0 = NodeUtil.getNodeTypeReferenceCount(node2, 42, nodeUtil_MatchDeclaration0);
      assertEquals(0, node2.getSourcePosition());
      assertEquals(0, int0);
      assertFalse(node1.isVar());
      assertTrue(node2.isVar());
      assertFalse(node2.isName());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newString("");
      // Undeclared exception!
      try { 
        node0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      assertFalse(node0.isExprResult());
      
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertTrue(node0.isFalse());
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getParent();
      doReturn((String) null).when(node0).getSourceFileName();
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.getInputId(node0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isScript());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StaticSourceFile staticSourceFile0 = NodeUtil.getSourceFile((Node) null);
      assertNull(staticSourceFile0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = new Node(45, 15, 43);
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got SHEQ
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node0).getType();
      doReturn(false).when(node0).isNew();
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1, 40, 127).when(node1).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1, abstractCompiler0);
      boolean boolean1 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertEquals((-1), node0.getCharno());
      assertTrue(boolean1 == boolean0);
      assertEquals(43, node0.getType());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(true).when(node0).isNew();
      doReturn(false).when(node0).isNoSideEffectsCall();
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newString(42, "JSC_TEMPLATE_TYPE_EXPECTED");
      NodeUtil.getBestJSDocInfo(node0);
      assertEquals(42, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isThis());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newString(125, "");
      assertEquals(125, node0.getType());
      
      Node node1 = NodeUtil.newVarNode("", node0);
      assertTrue(node1.isVar());
      assertEquals((-1), node1.getSourcePosition());
      
      NodeUtil.getBestJSDocInfo(node0);
      assertFalse(node0.isName());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.isSimpleOperatorType(12);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertEquals((-1), node1.getCharno());
      assertEquals(122, node1.getType());
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("@this type of a function must be an object\nActual type: {0}", "@this type of a function must be an object\nActual type: {0}").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "@this type of a function must be an object\nActual type: {0}", node0, ".@Jp1APIU/7<?==");
      NodeUtil.isSimpleOperatorType(54);
      Node node2 = NodeUtil.newUndefinedNode(node1);
      assertTrue(node2.isVoid());
      assertEquals(38, node1.getType());
      assertEquals(0, node2.getCharno());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test097()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1, 40, 127).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, abstractCompiler0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(11, (-2867), 109, 4, 4).when(node1).getType();
      doReturn(false).when(node1).isNull();
      boolean boolean1 = NodeUtil.mayBeStringHelper(node1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.isAssociative(111);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("@this type of a function must be an object\nActual type: {0}", "@this type of a function must be an object\nActual type: {0}").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "@this type of a function must be an object\nActual type: {0}", node0, ".@Jp1APIU/7<?==");
      node1.addChildToFront(node1);
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("\"{xkWH+j8yJ");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      // Undeclared exception!
      try { 
        node0.removeChild(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-1198), 143, (-1133)).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0, abstractCompiler0);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      Node node1 = Node.newNumber((-4062.54349594));
      boolean boolean1 = nodeUtil_NumbericResultPredicate0.apply(node1);
      assertTrue(boolean1 == boolean0);
      assertEquals(39, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = new Node(47);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      Node node1 = new Node(2, 29, 49);
      boolean boolean1 = NodeUtil.mayHaveSideEffects(node1);
      assertEquals(2, node1.getType());
      assertEquals(118833, node1.getSourcePosition());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-5), (-5), (-5)).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      NodeUtil.mayEffectMutableState(node0, abstractCompiler0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention((CodingConvention) null);
      Node node1 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "@this type of a function must be an object\nActual type: {0}");
      boolean boolean0 = NodeUtil.isBooleanResult(node1);
      assertFalse(boolean0);
      assertTrue(node1.isName());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("@this type of a function must be an object\nActual type: {0}", "@this type of a function must be an object\nActual type: {0}").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "@this type of a function must be an object\nActual type: {0}", node0, ".@Jp1APIU/7<?==");
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      boolean boolean0 = NodeUtil.has(node1, nodeUtil_NumbericResultPredicate0, nodeUtil_NumbericResultPredicate0);
      assertTrue(node1.isName());
      assertEquals(0, node1.getSourcePosition());
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(54);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = Node.newString(42, "JSC_TEMPLATE_TYPE_EXPECTED");
      boolean boolean0 = NodeUtil.isBooleanResult(node1);
      assertFalse(boolean0);
      assertTrue(node1.isThis());
      
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
      assertFalse(node0.isTrue());
      assertEquals((-1), node0.getCharno());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1, 40, 127).when(node1).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1, abstractCompiler0);
      boolean boolean1 = NodeUtil.mayBeStringHelper(node0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = NodeUtil.newVarNode("", node0);
      Node node2 = null;
      try {
        node2 = new Node(105, node0, node1, 20, 54);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node((-4756), node0, node0, 1570, 43);
      assertEquals((-4756), node1.getType());
      assertEquals(6430763, node1.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("@this type of a function must be an object\nActual type: {0}", "@this type of a function must be an object\nActual type: {0}").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "@this type of a function must be an object\nActual type: {0}", node0, ".@Jp1APIU/7<?==");
      NodeUtil.isSimpleOperatorType(54);
      Node node2 = new Node(52, node1, node1, node1, 0, 30);
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getSourcePosition());
      assertEquals(30, node2.getSourcePosition());
      assertEquals(52, node2.getType());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(22);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(32, (-3024), 8).when(node0).getType();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      Node node1 = new Node(52);
      boolean boolean1 = NodeUtil.isImmutableValue(node1);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(52, node1.getType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0, (AbstractCompiler) null);
      assertEquals((-1), node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("@this type of a function must be an object\nActual type: {0}", "@this type of a function must be an object\nActual type: {0}").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "@this type of a function must be an object\nActual type: {0}", node0, ".@Jp1APIU/7<?==");
      NodeUtil.mayHaveSideEffects(node1);
      boolean boolean0 = NodeUtil.isImmutableValue(node1);
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(122, 105, (-4411)).when(node0).getType();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = Node.newString(125, "");
      Node node1 = NodeUtil.newVarNode("", node0);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1, sourceMap_DetailLevel0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeVAR
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(15, 51, 29).when(node0).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, abstractCompiler0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      assertFalse(node0.isGetProp());
      
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1, 40, 127).when(node1).getType();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1, abstractCompiler0);
      assertTrue(boolean0);
      
      NodeUtil.getPrototypeClassName(node0);
      assertEquals(43, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getLastChild();
      doReturn(true).when(node0).isGetProp();
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypeClassName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, abstractCompiler0);
      assertEquals(43, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      NodeUtil.isSwitchCase(node0);
      assertEquals(83, node0.getType());
      assertTrue(node0.isParamList());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newString(42, "JSC_TEMPLATE_TYPE_EXPECTED");
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
      assertFalse(boolean0);
      assertFalse(node0.isString());
      assertEquals(42, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newString("JSCompiler_renameProperty");
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("@this type of a function must be an object\nActual type: {0}", "@this type of a function must be an object\nActual type: {0}").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "@this type of a function must be an object\nActual type: {0}", node0, ".@Jp1APIU/7<?==");
      assertEquals(38, node1.getType());
      
      Node node2 = NodeUtil.getRootOfQualifiedName(node1);
      assertEquals(0, node2.getCharno());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NodeUtil.isLatin("P6r\"{&CJ~_n CXNdS|");
      assertTrue(boolean0);
  }
}

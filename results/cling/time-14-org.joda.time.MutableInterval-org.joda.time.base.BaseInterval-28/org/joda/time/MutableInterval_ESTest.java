/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 23:10:33 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DateTimeZone;
import org.joda.time.Interval;
import org.joda.time.LocalTime;
import org.joda.time.MutableInterval;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Years;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MutableInterval_ESTest extends MutableInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test0()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Interval interval0 = new Interval((Object) null, copticChronology0);
      assertEquals(1566083429931L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test1()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadablePeriod) null, (ReadableInstant) null);
      assertEquals(1566083429912L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test2()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L);
      Years years0 = Years.yearsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, years0);
      assertEquals(1566083429874L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test3()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L);
      Years years0 = Years.yearsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      MutableInterval mutableInterval0 = new MutableInterval(years0, (ReadableInstant) null);
      assertEquals(1566083429811L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test4()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(julianChronology0);
      MutableInterval mutableInterval0 = new MutableInterval((Object) null, strictChronology0);
      assertEquals(1566083429694L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableInterval mutableInterval0 = new MutableInterval((-2579L), (-2579L), ethiopicChronology0);
      assertEquals((-2579L), mutableInterval0.getStartMillis());
      
      MutableInterval mutableInterval1 = new MutableInterval(mutableInterval0);
      assertEquals((-2579L), mutableInterval1.getEndMillis());
      assertTrue(mutableInterval1.equals((Object)mutableInterval0));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(julianChronology0);
      ReadableInstant readableInstant0 = mock(ReadableInstant.class, new ViolatedAssumptionAnswer());
      doReturn(strictChronology0).when(readableInstant0).getChronology();
      doReturn(1L).when(readableInstant0).getMillis();
      MutableInterval mutableInterval0 = new MutableInterval(readableInstant0, (ReadablePeriod) null);
      assertEquals(1L, mutableInterval0.getEndMillis());
      
      MutableInterval mutableInterval1 = new MutableInterval(mutableInterval0, julianChronology0);
      assertEquals(1L, mutableInterval0.getStartMillis());
      assertFalse(mutableInterval1.equals((Object)mutableInterval0));
  }
}

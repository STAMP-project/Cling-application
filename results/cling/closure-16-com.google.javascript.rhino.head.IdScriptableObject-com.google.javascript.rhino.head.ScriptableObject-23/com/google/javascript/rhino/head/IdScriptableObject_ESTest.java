/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 03:49:41 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.BoundFunction;
import com.google.javascript.rhino.head.Callable;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.EcmaError;
import com.google.javascript.rhino.head.EvaluatorException;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeGenerator;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.NativeWith;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.TopLevel;
import com.google.javascript.rhino.head.WrapFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class IdScriptableObject_ESTest extends IdScriptableObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      NativeArray nativeArray0 = new NativeArray((-3349L));
      Object object0 = nativeArray0.get(5, (Scriptable) nativeObject0);
      boolean boolean0 = nativeObject0.sameValue((Object) null, object0);
      assertFalse(boolean0);
      assertTrue(nativeArray0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      Object object0 = ScriptableObject.getProperty((Scriptable) nativeObject0, 13);
      boolean boolean0 = nativeObject0.sameValue(object0, (Object) null);
      assertTrue(nativeObject0.isEmpty());
      assertTrue(nativeObject0.isExtensible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      boolean boolean0 = nativeObject0.sameValue((Object) null, nativeObject0.CONST);
      assertTrue(nativeObject0.isExtensible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Class<NativeObject> class0 = NativeObject.class;
      ScriptableObject.defineClass((Scriptable) nativeIterator_StopIteration0, class0);
      assertFalse(nativeIterator_StopIteration0.isSealed());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(scriptable0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      doReturn((Scriptable) null, (Scriptable) null, (Scriptable) null, (Scriptable) null, (Scriptable) null).when(scriptable0).getParentScope();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(scriptable0).toString();
      NativeArray.init(scriptable0, true);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      ScriptableObject.defineConstProperty(nativeObject0, ":|Wm9JEO]z;G&CH>");
      assertFalse(nativeObject0.isEmpty());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod(context0, (Scriptable) nativeIterator_StopIteration0, "", (Object[]) null);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError:  is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeWith nativeWith0 = new NativeWith(nativeContinuation0, nativeContinuation0);
      ScriptableObject.getPropertyIds(nativeWith0);
      assertTrue(nativeContinuation0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      EvaluatorException evaluatorException0 = new EvaluatorException("get");
      nativeError0.setStackProvider(evaluatorException0);
      assertTrue(nativeError0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      WrapFactory wrapFactory0 = new WrapFactory();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(topLevel0, false);
      Class<NativeObject> class0 = NativeObject.class;
      // Undeclared exception!
      try { 
        wrapFactory0.wrapJavaClass(context0, nativeGenerator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.get(0);
      assertTrue(nativeArray0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptableObject("");
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Expected argument of type object, but instead had type string
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.RegExp;
      BaseFunction baseFunction0 = importerTopLevel0.getBuiltinCtor(topLevel_Builtins0);
      assertNotNull(baseFunction0);
      
      nativeObject0.defineOwnProperty(context0, context0.VERSION_1_6, baseFunction0);
      assertFalse(baseFunction0.isSealed());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context(contextFactory0);
      BoundFunction boundFunction0 = new BoundFunction(context0, nativeObject0, (Callable) null, (Scriptable) null, (Object[]) null);
      assertTrue(nativeObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      ScriptableObject.putProperty((Scriptable) topLevel0, 0, (Object) topLevel0);
      Context context0 = Context.enter();
      NativeArray nativeArray0 = new NativeArray(7);
      nativeArray0.defineOwnProperties(context0, topLevel0);
      assertFalse(topLevel0.isEmpty());
      assertFalse(nativeArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) topLevel0, 4);
      assertFalse(boolean0);
      assertTrue(topLevel0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      Context context0 = Context.enter();
      NativeArray nativeArray0 = (NativeArray)context0.newArray((Scriptable) topLevel0, (-57));
      ScriptableObject.redefineProperty(nativeArray0, "error reporter", false);
      assertTrue(nativeArray0.isEmpty());
      assertTrue(nativeArray0.isExtensible());
      assertTrue(topLevel0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Class<Object> class0 = Object.class;
      Object object0 = ScriptableObject.getTypedProperty((Scriptable) nativeIterator_StopIteration0, (String) null, class0);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptable(context0);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Invalid JavaScript value of type com.google.javascript.rhino.head.Context
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(topLevel0, topLevel0, 204);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.checkPropertyChange((String) null, scriptableObject0, scriptableObject0);
      assertTrue(topLevel0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      // Undeclared exception!
      try { 
        JavaAdapter.createAdapterWrapper(topLevel0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Scriptable) null, (Scriptable) null).when(scriptable0).getParentScope();
      doReturn((Scriptable) null).when(scriptable0).getPrototype();
      doReturn((String) null, (String) null).when(scriptable0).toString();
      Object object0 = NativeIterator.getStopIterationObject(scriptable0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      // Undeclared exception!
      try { 
        topLevel0.associateValue((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test23()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(7);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        nativeArray0.defineFunctionProperties(stringArray0, class0, (-4604));
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Method \"\" not found in \"java.lang.Object\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      Class<Integer> class0 = Integer.class;
      ScriptableObject.getTypedProperty((Scriptable) topLevel0, 1, class0);
      assertTrue(topLevel0.isEmpty());
      assertTrue(topLevel0.isExtensible());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test25()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      Class<NativeObject> class0 = NativeObject.class;
      BaseFunction baseFunction1 = ScriptableObject.buildClassCtor((Scriptable) baseFunction0, class0, true, true);
      // Undeclared exception!
      try { 
        baseFunction1.setAttributes("", 13);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Cannot modify a property of a sealed object: .
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }
}

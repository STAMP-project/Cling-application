/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 21:45:29 GMT 2019
 */

package org.joda.time.chrono;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.LenientChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ISOChronology_ESTest extends ISOChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LenientChronology.getInstance(gJChronology0);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(458, 458, 458, 458, 458, 458);
        fail("Expecting exception: IllegalFieldValueException");
      
      } catch(IllegalFieldValueException e) {
         //
         // Value 458 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1326));
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      iSOChronology0.withZone(dateTimeZone0);
      try { 
        iSOChronology0.getDateTimeMillis((long) (-1326), (-1326), (-1326), (-1326), (-1326));
        fail("Expecting exception: IllegalFieldValueException");
      
      } catch(IllegalFieldValueException e) {
         //
         // Value -1326 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test2()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      long long0 = lenientChronology0.getDateTimeMillis((-2691L), 0, (-2524), 5, 5);
      assertEquals(1566078322640L, dateTime0.getMillis());
      assertEquals((-155034995L), long0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test3()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      DateTime dateTime1 = new DateTime((-2524), 5, 1205, 343, (-2592), 1, 1205, lenientChronology0);
      assertEquals(1566078321227L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      DateTime dateTime0 = DateTime.now();
      GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      iSOChronology0.assemble(assembledChronology_Fields0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      DateTime dateTime0 = DateTime.now();
      GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      iSOChronology0.assemble(assembledChronology_Fields0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test6()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      long long0 = lenientChronology0.getDateTimeMillis((-325), 0, (-325), 0);
      assertEquals(1566078319389L, dateTime0.getMillis());
      assertEquals((-72454436372000L), long0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 08:22:39 GMT 2019
 */

package org.mockito.asm.tree.analysis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.tree.FieldInsnNode;
import org.mockito.asm.tree.InsnNode;
import org.mockito.asm.tree.IntInsnNode;
import org.mockito.asm.tree.JumpInsnNode;
import org.mockito.asm.tree.LabelNode;
import org.mockito.asm.tree.LdcInsnNode;
import org.mockito.asm.tree.TypeInsnNode;
import org.mockito.asm.tree.VarInsnNode;
import org.mockito.asm.tree.analysis.BasicValue;
import org.mockito.asm.tree.analysis.BasicVerifier;
import org.mockito.asm.tree.analysis.Value;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BasicVerifier_ESTest extends BasicVerifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(15, "0bVOQ", "", "");
      Value value0 = basicVerifier0.newOperation(fieldInsnNode0);
      Value value1 = basicVerifier0.copyOperation(fieldInsnNode0, value0);
      assertEquals(2, value1.getSize());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      LabelNode labelNode0 = new LabelNode();
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(141, labelNode0);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = basicVerifier0.copyOperation(labelNode0, basicValue0);
      Value value1 = basicVerifier0.unaryOperation(jumpInsnNode0, value0);
      assertEquals(2, value1.getSize());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      VarInsnNode varInsnNode0 = new VarInsnNode(237, 237);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      basicVerifier0.copyOperation(varInsnNode0, basicValue0);
      // Undeclared exception!
      try { 
        basicVerifier0.newOperation(varInsnNode0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicVerifier0);
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(12, "R(o");
      Value value0 = basicVerifier0.newOperation(typeInsnNode0);
      Value value1 = basicVerifier0.copyOperation(ldcInsnNode0, value0);
      assertSame(value1, value0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicVerifier0);
      Value value0 = basicVerifier0.newOperation(ldcInsnNode0);
      BasicValue basicValue0 = (BasicValue)basicVerifier0.copyOperation(ldcInsnNode0, value0);
      assertTrue(basicValue0.isReference());
      
      InsnNode insnNode0 = new InsnNode(11);
      BasicValue basicValue1 = (BasicValue)basicVerifier0.newOperation(insnNode0);
      assertNotSame(basicValue1, value0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      IntInsnNode intInsnNode0 = new IntInsnNode(13, 13);
      Value value0 = basicVerifier0.newOperation(intInsnNode0);
      BasicValue basicValue0 = (BasicValue)basicVerifier0.copyOperation(intInsnNode0, value0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      LabelNode labelNode0 = new LabelNode();
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(197, labelNode0);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      basicVerifier0.copyOperation(jumpInsnNode0, basicValue0);
      LinkedList<BasicValue> linkedList0 = new LinkedList<BasicValue>();
      // Undeclared exception!
      try { 
        basicVerifier0.naryOperation(jumpInsnNode0, linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.JumpInsnNode cannot be cast to org.mockito.asm.tree.MultiANewArrayInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }
}

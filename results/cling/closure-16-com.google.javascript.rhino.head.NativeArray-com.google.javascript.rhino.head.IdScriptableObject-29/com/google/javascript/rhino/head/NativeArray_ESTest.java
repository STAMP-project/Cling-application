/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 04:48:36 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.EcmaError;
import com.google.javascript.rhino.head.EvaluatorException;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeJavaTopPackage;
import com.google.javascript.rhino.head.NativeNumber;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NativeArray_ESTest extends NativeArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test00()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(12);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes("error reporter", (Scriptable) nativeArray0);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property error reporter not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.delete("Vu\"[MD;E");
      assertEquals("object", nativeArray0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeArray.init(nativeArray0, true);
      Integer[] integerArray0 = nativeArray0.getIndexIds();
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(719.947083004);
      NativeArray.init(nativeNumber0, true);
      NativeArray nativeArray0 = new NativeArray(2301L);
      NativeArray nativeArray1 = new NativeArray(0L);
      nativeArray0.put("reduceRight", (Scriptable) nativeArray1, (Object) "reduceRight");
      assertEquals(0L, nativeArray1.jsGet_length());
      assertEquals("Array", nativeArray1.getClassName());
      assertEquals("Array", nativeArray0.getClassName());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test04()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeArray nativeArray0 = new NativeArray(7);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes(151);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property 151 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeArray.init(nativeArray0, true);
      NativeArray nativeArray1 = new NativeArray(objectArray0);
      nativeArray1.put((-2661), (Scriptable) nativeArray0, (Object) nativeArray0);
      assertEquals(1L, nativeArray0.getLength());
      assertEquals(1L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeArray nativeArray0 = new NativeArray(7);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes((-57));
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property -57 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeArray nativeArray0 = new NativeArray(130);
      Object[] objectArray0 = nativeArray0.getAllIds();
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeArray nativeArray0 = new NativeArray(7);
      nativeArray0.delete(0);
      assertEquals(7L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeArray nativeArray0 = new NativeArray(7);
      Long long0 = new Long(140);
      ScriptableObject scriptableObject0 = nativeArray0.getOwnPropertyDescriptor(context0, long0);
      assertNull(scriptableObject0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeArray nativeArray0 = new NativeArray(1);
      nativeArray0.delete(130);
      assertEquals("Array", nativeArray0.getClassName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeArray nativeArray0 = new NativeArray(1431655764L);
      ScriptableObject scriptableObject0 = nativeArray0.getOwnPropertyDescriptor(context0, context0);
      assertNull(scriptableObject0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      Method[] methodArray0 = new Method[8];
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(scriptable0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      doReturn((Scriptable) null, (Scriptable) null, (Scriptable) null, (Scriptable) null, (Scriptable) null).when(scriptable0).getParentScope();
      NativeArray.init(scriptable0, false);
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      Class<NativeObject> class0 = NativeObject.class;
      // Undeclared exception!
      try { 
        nativeArray0.getDefaultValue(class0);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.NativeObject
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(719.947083004);
      NativeArray nativeArray0 = new NativeArray(2301L);
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = nativeArray0.toArray(objectArray0);
      assertEquals(2301, objectArray1.length);
      
      IdFunctionObject idFunctionObject0 = mock(IdFunctionObject.class, new ViolatedAssumptionAnswer());
      doReturn(nativeNumber0).when(idFunctionObject0).construct(any(com.google.javascript.rhino.head.Context.class) , any(com.google.javascript.rhino.head.Scriptable.class) , any(java.lang.Object[].class));
      doReturn(true).when(idFunctionObject0).hasTag(any());
      doReturn(1).when(idFunctionObject0).methodId();
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      nativeArray0.execIdCall(idFunctionObject0, context0, idFunctionObject0, nativeArray0, objectArray0);
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1038L);
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      ScriptableObject scriptableObject0 = nativeArray0.getOwnPropertyDescriptor(context0, nativeArray0.DONTENUM);
      assertNull(scriptableObject0);
      assertEquals(1038L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test15()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2994L);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes(561);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property 561 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      ScriptableObject.putProperty((Scriptable) nativeArray0, 1, (Object) nativeJavaTopPackage0);
      assertEquals(2L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(2L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test17()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeArray nativeArray0 = new NativeArray(130);
      nativeArray0.defineOwnProperty(context0, (Object) context0, (ScriptableObject) importerTopLevel0, false);
      assertEquals(130L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483647L);
      BaseFunction baseFunction0 = new BaseFunction();
      nativeArray0.put(1238, (Scriptable) nativeArray0, (Object) baseFunction0);
      assertEquals(2147483647L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test19()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context(contextFactory0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      Object[] objectArray0 = new Object[5];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      ScriptableObject scriptableObject0 = nativeArray0.getOwnPropertyDescriptor(context0, importerTopLevel0);
      assertNull(scriptableObject0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(93L);
      BaseFunction baseFunction0 = new BaseFunction();
      nativeArray0.put(1238, (Scriptable) nativeArray0, (Object) baseFunction0);
      NativeArray.init(nativeArray0, true);
      assertEquals(1239L, nativeArray0.getLength());
      assertEquals(1239L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test21()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(93L);
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        nativeArray0.setInstanceIdValue(1, context0);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // RangeError: Inappropriate array length.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.delete((-44));
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals("global", importerTopLevel0.getClassName());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test23()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context(contextFactory0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      Object[] objectArray0 = new Object[5];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(12, nativeArray0, false);
      nativeArray0.execIdCall(idFunctionObject0, context0, importerTopLevel0, nativeArray0, objectArray0);
      nativeArray0.getOwnPropertyDescriptor(context0, importerTopLevel0);
  }
}

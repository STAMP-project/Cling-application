/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 09:13:47 GMT 2019
 */

package org.mockito.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.AnnotationVisitor;
import org.mockito.asm.AnnotationWriter;
import org.mockito.asm.ByteVector;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.FieldWriter;
import org.mockito.asm.Item;
import org.mockito.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AnnotationWriter_ESTest extends AnnotationWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("iO=VWlm*1", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "i0JJ^n1$m";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "F<-1";
      stringArray0[5] = "";
      Character character0 = Character.valueOf('}');
      annotationVisitor0.visit("F<-1", character0);
      stringArray0[6] = "Signature";
      stringArray0[7] = "`QQeF|H&p/";
      classWriter0.visit(8, (-2104), "", "iO=VWlm*1", "", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(212, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.invalidFrames = true;
      classWriter0.newClassItem("LocalVariableTable");
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.visitSource("|:0kSKznDV}Y2y3", "EnclosingMethod");
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(10);
      classWriter0.visitAnnotation("iOPVWlD*1", false);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newDouble(3);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      classWriter0.visitAnnotation("iO=VWlm*1", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(78, byteArray0.length);
      
      int int0 = classWriter0.addUninitializedType("iO=VWlm*1", 24117248);
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("~?");
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      classWriter0.newLong((-6L));
      ByteVector byteVector0 = classWriter0.pool;
      classWriter0.newLong((-6L));
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 461);
      // Undeclared exception!
      try { 
        annotationWriter0.visit("a", byteVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.ByteVector@15113495
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("iO=VWlm*1", true);
      classWriter0.newDouble((-1377.5585181336085));
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("NoG", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@3ae0d6f6
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(490);
      classWriter0.addType("susGo");
      int int0 = classWriter0.newConst("susGo");
      int int1 = classWriter0.addUninitializedType("1hcUwea*]>fkX6G3", (-2444));
      assertTrue(int1 == int0);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2400);
      classWriter0.newConstItem("StackMapTable");
      int int0 = classWriter0.addType("StackMapTable");
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("StackMapTable");
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      classWriter0.addUninitializedType("susGo", 461);
      Type type0 = Type.DOUBLE_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      Short short0 = new Short((short)0);
      classWriter0.newConstItem(short0);
      classWriter0.visitAnnotation("susGo", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(77, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.visitAnnotation("iO=VWlm*1", true);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem("8", (String) null, "8", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.visitAnnotation("iO=VWlm*1", true);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newDouble((-1377.5585181336085));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.visitAnnotation("iO=VWlm*1", true);
      Item item0 = classWriter0.newClassItem("iO=VWlm*1");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(79, byteArray0.length);
      
      Item item1 = classWriter0.newClassItem("iO=VWlm*1");
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2400);
      classWriter0.newConstItem("~tackMapTable");
      classWriter0.visitAnnotation("QKLfn]Oxczf5?d", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(100, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      Boolean boolean0 = Boolean.FALSE;
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
      
      classWriter0.visitAnnotation("iO=VWlm*1", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(81, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      classWriter0.visitAnnotation("iO=VWlm*1", true);
      int int0 = classWriter0.addUninitializedType(".class", 9);
      assertEquals(1, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(76, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      classWriter0.newLong((-6L));
      classWriter0.newLong((-6L));
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(33, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      Short short0 = new Short((short)0);
      classWriter0.newConstItem(short0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(29, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(47);
      classWriter0.newConstItem("Ar2pa)iaoj`G4fdB_");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(47, byteArray0.length);
      
      int int0 = classWriter0.newConst("Ar2pa)iaoj`G4fdB_");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.visitSource("|:0kSKznDV}Y2y3", "EnclosingMethd");
      classWriter0.toByteArray();
      Item item0 = classWriter0.newMethodItem("2IAeDw6qF%NqRt", "EnclosingMethd", "", false);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.visitSource("|:0kSKznDV}Y2y3", "EnclosingMethod");
      classWriter0.toByteArray();
      Item item0 = classWriter0.newDouble((-1377.5585181336085));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.visitSource("|:0kSKznDV}Y2y3", "EnclosingMethod");
      Item item0 = classWriter0.newClassItem("iO=VWlm*1");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(122, byteArray0.length);
      
      Item item1 = classWriter0.newClassItem("iO=VWlm*1");
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2400);
      classWriter0.newConstItem("~tackMapTable");
      classWriter0.visitSource("|:0kSKznDV}Y2y3", "SourceDebugExtension");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(131, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.visitSource("|:0kSKznDV}Y2y3", "EnclosingMethod");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(107, byteArray0.length);
      
      int int0 = classWriter0.newMethod("", "", "iO=VWlm*1", true);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2445);
      Item item0 = classWriter0.newLong(2445);
      ByteVector byteVector0 = classWriter0.pool;
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 8);
      classWriter0.visitSource("InnerClasses", ",URJB6`8R@`ih-gl]t");
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        annotationWriter0.visit("", item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.Item@16e956c0
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(47);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(24, byteArray0.length);
      
      int int0 = classWriter0.addUninitializedType("0.9", 7);
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("");
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.visitSource("|:0kSKznDV}Y2y3", "|:0kSKznDV}Y2y3");
      Boolean boolean0 = Boolean.FALSE;
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(2, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(112, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.visitSource("|:0kSKznDV}Y2y3", "EnclosingMethod");
      int int0 = classWriter0.addType("EnclosingMethod");
      assertEquals(1, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(107, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2400);
      classWriter0.addType("StackMapTable");
      int int0 = classWriter0.addType("StackMapTable");
      assertEquals(1, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(24, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.visitSource("|:0kSKznDV}Y2y3", "EnclosingMethod");
      Type type0 = Type.getObjectType("EnclosingMethod");
      classWriter0.newConstItem(type0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(128, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.addUninitializedType("", 168);
      classWriter0.visitSource("|:0kSKznDV}Y2y3", "EnclosingMethod");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(107, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(68);
      Byte byte0 = new Byte((byte) (-109));
      int int0 = classWriter0.newConst(byte0);
      assertEquals(1, int0);
      
      classWriter0.newInteger((byte) (-109));
      classWriter0.visitSource("EnclosingMethd", "_0%Y/qev^C");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(106, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("iO=VWlm*1", true);
      classWriter0.toByteArray();
      Boolean boolean0 = Boolean.valueOf("iO=VWlm*1");
      annotationVisitor0.visit("u`<b?b}%?", boolean0);
      annotationVisitor0.visit("iO=VWlm*1", boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(10);
      classWriter0.visitAnnotation("iOPVWlD*1", false);
      classWriter0.toByteArray();
      Byte byte0 = new Byte((byte) (-89));
      Item item0 = classWriter0.newConstItem(byte0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.visitAnnotation("iO=VWlm*1", true);
      classWriter0.toByteArray();
      Byte byte0 = new Byte((byte)24);
      Item item0 = classWriter0.newConstItem(byte0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      classWriter0.visitAnnotation("iO=VWlm*1", false);
      classWriter0.toByteArray();
      Boolean boolean0 = Boolean.valueOf("EnclosingMethod");
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(68);
      Boolean boolean0 = Boolean.valueOf(true);
      classWriter0.newConstItem(boolean0);
      classWriter0.visitAnnotation("iO=VWlm*1", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(81, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      classWriter0.toByteArray();
      Boolean boolean0 = Boolean.TRUE;
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      Type type0 = Type.getObjectType("EnclosingMethod");
      classWriter0.newConstItem(type0);
      classWriter0.visitAnnotation("|:0kSKznDV}Y2y3", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(103, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2400);
      classWriter0.newMethodItem("StackMapTable", "StackMapTable", "StackMapTable", false);
      classWriter0.newMethodItem("StackMapTable", "StackMapTable", "StackMapTable", false);
      classWriter0.visitField(2400, "q9JE=]+NR>.C", ".s.IFJDCS", "S26QI+S", (Object) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(118, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2400);
      classWriter0.newMethodItem("StackMapTable", "StackMapTable", "StackMapTable", false);
      classWriter0.newMethodItem("StackMapTable", "StackMapTable", "StackMapTable", false);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2400);
      classWriter0.newMethodItem("StackMapTable", "StackMapTable", "StackMapTable", false);
      classWriter0.newMethodItem("StackMapTable", "StackMapTable", "StackMapTable", false);
      classWriter0.visitInnerClass("", "", "5Sjg", 2400);
      classWriter0.visitInnerClass("e:[D@7Aokj", "StackMapTable", "R0rt:KybFyJAQ", 40);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2397);
      classWriter0.newMethodItem("StackMapTable", "StackMapTable", "StackMapTable", false);
      classWriter0.newMethodItem("StackMapTable", "StackMapTable", "StackMapTable", false);
      classWriter0.visitOuterClass("StackMapTable", "", "StackMapTable");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      classWriter0.newFloat((-6L));
      classWriter0.newFloat((-6L));
      classWriter0.visitOuterClass("", (String) null, "susGo");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2400);
      classWriter0.newFloat(0.0F);
      classWriter0.newFloat(0.0F);
      classWriter0.visitInnerClass("Gi", "Gi", ";'=%Q2P7[ohK", 12);
      classWriter0.visitInnerClass("$<P[>^2:Nb$'", "Gi", "$<P[>^2:Nb$'", 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      classWriter0.newFloat((-6L));
      classWriter0.newFloat((-6L));
      classWriter0.visitOuterClass("org.mockito.asm.Frame", "SWQGR% ^_Z{5*j,l", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      classWriter0.newFloat((-6L));
      classWriter0.newFloat((-6L));
      classWriter0.visitOuterClass("D]'WtnFB1^J", "RuntimeInvisibleParameterAnnotations", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2400);
      classWriter0.newFloat(0.0F);
      classWriter0.newFloat(0.0F);
      classWriter0.visitInnerClass("StackMapTable", (String) null, "", 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      Item item0 = classWriter0.newFloat((-6L));
      classWriter0.visitInnerClass("8Rv2", "Signature", (String) null, 461);
      Item item1 = classWriter0.newFloat((-6L));
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.visitSource("|:0kSKznDV}Y2y3", "EnclosingMethod");
      classWriter0.newFloat(1999);
      classWriter0.newFloat(1999);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(112, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      classWriter0.newField("susGo", "susGo", "susGo");
      classWriter0.newFieldItem("susGo", "susGo", "susGo");
      classWriter0.visitOuterClass("", (String) null, "susGo");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2400);
      classWriter0.newField("StackMapTable", "StackMapTable", "StackMapTable");
      classWriter0.newFieldItem("StackMapTable", "StackMapTable", "StackMapTable");
      classWriter0.visitInnerClass("StackMapTable", "]HS=\":h~", "org.mockito.asm.MethodWriter", (-309));
      classWriter0.visitInnerClass("3A7S_&", "org.mockito.asm.MethodWriter", "ConstantValue", (byte)117);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      classWriter0.newField("susGo", "susGo", "susGo");
      classWriter0.newFieldItem("susGo", "susGo", "susGo");
      classWriter0.visitOuterClass("org.mockito.asm.Frame", "SWQGR% ^_Z{5*j,l", "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2400);
      classWriter0.newField("~tackMapTable", "~tackMapTable", "~tackMapTable");
      classWriter0.newFieldItem("~tackMapTable", "~tackMapTable", "~tackMapTable");
      classWriter0.visitOuterClass("", "9.Yw", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2400);
      classWriter0.newField("StackMapTable", "StackMapTable", "StackMapTable");
      classWriter0.newFieldItem("StackMapTable", "StackMapTable", "StackMapTable");
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2400);
      classWriter0.newField("~tackMapTable", "~tackMapTable", "~tackMapTable");
      classWriter0.newFieldItem("~tackMapTable", "~tackMapTable", "~tackMapTable");
      classWriter0.visitSource((String) null, (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2400);
      int int0 = classWriter0.newField("~tackMapTable", "~tackMapTable", "~tackMapTable");
      assertEquals(4, int0);
      
      classWriter0.newFieldItem("~tackMapTable", "~tackMapTable", "~tackMapTable");
      classWriter0.visitSource("|:0kSKznDV}Y2y3", "SourceDebugExtension");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(141, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      Type type0 = Type.BOOLEAN_TYPE;
      classWriter0.newConstItem(type0);
      classWriter0.visitInnerClass("\"", (String) null, "sJ?&}E", 0);
      classWriter0.visitInnerClass("", (String) null, (String) null, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2433);
      Type type0 = Type.SHORT_TYPE;
      classWriter0.newConstItem(type0);
      classWriter0.visitOuterClass("", "", "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1454, "S4z", "#u}aXQ6fhY`sUYN", "Signature", "Signature");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(103, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2400);
      int int0 = classWriter0.newField("StackMapTable", "StackMapTable", "StackMapTable");
      assertEquals(4, int0);
      
      classWriter0.newMethodItem("StackMapTable", "StackMapTable", "StackMapTable", false);
      classWriter0.visitField(2400, "q9JE=]+NR>.C", ".s.IFJDCS", "S26QI+S", (Object) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(123, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.visitAnnotation("iO=VWlm*1", true);
      classWriter0.newNameType("iO=VWlm*1", "iO=VWlm*1");
      Item item0 = classWriter0.newMethodItem("iO=VWlm*1", "iO=VWlm*1", "iO=VWlm*1", true);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("iOPVWlD*1", false);
      classWriter0.newNameType("iOPVWlD*1", "iOPVWlD*1");
      classWriter0.newMethodItem("iOPVWlD*1", "iOPVWlD*1", "iOPVWlD*1", false);
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("java/lang/Object", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2400);
      classWriter0.newField("StackMapTable", "StackMapTable", "StackMapTable");
      classWriter0.newMethodItem("StackMapTable", "StackMapTable", "StackMapTable", false);
      classWriter0.visitInnerClass("", "", "5Sjg", 2400);
      classWriter0.visitInnerClass("e:[D@7Aokj", "StackMapTable", "R0rt:KybFyJAQ", 40);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      classWriter0.newField("susGo", "susGo", "susGo");
      classWriter0.visitOuterClass("susGo", "susGo", "susGo");
      classWriter0.visitOuterClass("SourceDebugExtension", "susGo", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      classWriter0.newField("susGo", "susGo", "susGo");
      classWriter0.visitOuterClass("susGo", "susGo", "susGo");
      classWriter0.visitInnerClass("susGo", (String) null, "fFM:v]/SMF6)", 50331648);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.visitAnnotation("iOPVWlD*1", false);
      int int0 = classWriter0.newNameType("iOPVWlD*1", "iOPVWlD*1");
      assertEquals(2, int0);
      
      classWriter0.newMethodItem("iOPVWlD*1", "iOPVWlD*1", "iOPVWlD*1", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(91, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2400);
      int int0 = classWriter0.newField("StackMapTable", "StackMapTable", "StackMapTable");
      assertEquals(4, int0);
      
      classWriter0.newMethodItem("StackMapTable", "StackMapTable", "StackMapTable", false);
      classWriter0.visitInnerClass("InnerClasses", ".s.IFJDCS", ")4`Ic5Fm5M4Ea%jPu!", 16);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(128, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      classWriter0.newField("susGo", "susGo", "susGo");
      classWriter0.visitOuterClass("susGo", "susGo", "susGo");
      classWriter0.visitInnerClass("susGo", "susGo", (String) null, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2400);
      classWriter0.visitSource("<", "<");
      classWriter0.newField("StackMapTable", "StackMapTable", "StackMapTable");
      Item item0 = classWriter0.newMethodItem("StackMapTable", "StackMapTable", "StackMapTable", false);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      Item item0 = classWriter0.newFieldItem("susGo", "susGo", "susGo");
      ByteVector byteVector0 = new ByteVector(461);
      classWriter0.visitOuterClass("", (String) null, "susGo");
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 2159);
      // Undeclared exception!
      try { 
        annotationWriter0.visit("3I$a&<Q/Eh~jQka>KB\"", item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.Item@57ea5b5d
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2400);
      ByteVector byteVector0 = new ByteVector(2);
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 47);
      classWriter0.visitInnerClass("Gi", "Gi", ";'=%Q2P7[ohK", 12);
      classWriter0.visitInnerClass("$<P[>^2:Nb$'", "Gi", "$<P[>^2:Nb$'", 1);
      // Undeclared exception!
      try { 
        annotationWriter0.visit("$<P[>^2:Nb$'", byteVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.ByteVector@1904194a
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(490);
      ByteVector byteVector0 = classWriter0.pool;
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector0, 1);
      classWriter0.visitOuterClass("", "susGo", (String) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        annotationWriter0.visit("Signature", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@210b75c6
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2445);
      Type type0 = Type.SHORT_TYPE;
      classWriter0.newConstItem(type0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "8";
      stringArray0[1] = "[]";
      stringArray0[2] = "8";
      stringArray0[3] = "8";
      stringArray0[4] = "8";
      classWriter0.visit((-667), 3, "#nx9", "8", "[]", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(86, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(436);
      ByteVector byteVector0 = new ByteVector(1);
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 2);
      classWriter0.visitInnerClass((String) null, "", (String) null, 436);
      // Undeclared exception!
      try { 
        annotationWriter0.visit("n5|7{`", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2445);
      Type type0 = Type.SHORT_TYPE;
      classWriter0.newConstItem(type0);
      classWriter0.visitSource("InnerClasses", ",URJB6`8R@`ih-gl]t");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(114, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2445);
      classWriter0.newLong(2445);
      classWriter0.visitAnnotation("", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(78, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.visitAnnotation("iO=VWlm*1", true);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newLong(1);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      classWriter0.newLong((-6L));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "}P";
      stringArray0[1] = "Yc~#*=";
      stringArray0[2] = "Yc~#*=";
      stringArray0[3] = "AnnotationDefault";
      stringArray0[4] = ";Lp$uR\n9T";
      classWriter0.visit((-3436), (-2022), "value ", "Yc~#*=", "8Rv2", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(162, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "EnclosingMethod";
      stringArray0[1] = "SourceFile";
      stringArray0[2] = "iO=VWlm*1";
      classWriter0.visit((-988), (-900), "SourceFile", "8", "EnclosingMethod", stringArray0);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newFloat((-1.0F));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2400);
      ByteVector byteVector0 = classWriter0.pool;
      Item item0 = classWriter0.newMethodItem("StackMapTable", "StackMapTable", "StackMapTable", true);
      classWriter0.newMethodItem("StackMapTable", "StackMapTable", "StackMapTable", true);
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector0, 2);
      // Undeclared exception!
      try { 
        annotationWriter0.visit("*u^'*,&P]rO4", item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.Item@291a7b57
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2400);
      classWriter0.newMethodItem("StackMapTable", "StackMapTable", "StackMapTable", false);
      classWriter0.newMethodItem("StackMapTable", "StackMapTable", "StackMapTable", false);
      classWriter0.visitInnerClass("InnerClasses", ".s.IFJDCS", ")4`Ic5Fm5M4Ea%jPu!", 16);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(123, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      classWriter0.newFloat((-6L));
      classWriter0.newFloat((-6L));
      classWriter0.visitAnnotation("susGo", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(79, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      Item item0 = classWriter0.newFieldItem("susGo", "susGo", "susGo");
      ByteVector byteVector0 = new ByteVector(461);
      classWriter0.newFloat((-6L));
      classWriter0.newFloat((-6L));
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 2159);
      // Undeclared exception!
      try { 
        annotationWriter0.visit("3I$a&<Q/Eh~jQka>KB\"", item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.Item@338b8200
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      classWriter0.newFloat((-6L));
      classWriter0.newFloat((-6L));
      classWriter0.visitAnnotation("susG", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(76, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      classWriter0.newField("susGo", "susGo", "susGo");
      int int0 = classWriter0.newField("susGo", "susGo", "susGo");
      assertEquals(4, int0);
      
      classWriter0.visitAnnotation("}9X4~0", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(96, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      classWriter0.newField("susGo", "susGo", "susGo");
      Item item0 = classWriter0.newFieldItem("susGo", "susGo", "susGo");
      ByteVector byteVector0 = new ByteVector(461);
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 2159);
      // Undeclared exception!
      try { 
        annotationWriter0.visit("3I$a&<Q/Eh~jQka>KB\"", item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.Item@3118d4e
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2400);
      int int0 = classWriter0.newField("~tackMapTable", "~tackMapTable", "~tackMapTable");
      assertEquals(4, int0);
      
      classWriter0.newFieldItem("~tackMapTable", "~tackMapTable", "~tackMapTable");
      classWriter0.visitAnnotation("QKLfn]Oxczf5?d", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(110, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.visitAnnotation("iO=VWlm*1", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(76, byteArray0.length);
      
      int int0 = classWriter0.addType("SourceDebugExtension");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      classWriter0.visitInnerClass("susGo", "susGo", "susGo", 2);
      int int0 = classWriter0.addType("X#>my5&.3av");
      assertEquals(1, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(66, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.invalidFrames = true;
      classWriter0.newNameType("~ai.Q)o5tN)j]^", "EnclosingMethod");
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      classWriter0.visitInnerClass("susGo", "susGo", "susGo", 16777222);
      classWriter0.toByteArray();
      Type type0 = Type.DOUBLE_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.visitAnnotation("iO=VWlm*1", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(78, byteArray0.length);
      
      int int0 = classWriter0.newMethod("", "", "iO=VWlm*1", true);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.visitAnnotation("iO=VWlm*1", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(76, byteArray0.length);
      
      int int0 = classWriter0.newMethod("", "", "iO=VWlm*1", true);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "F<-1";
      stringArray0[5] = "";
      stringArray0[6] = "Signature";
      int int0 = classWriter0.newMethod("org.mockito.asm.ClassWriter", "org.mockito.asm.ClassWriter", "yKjmt", true);
      assertEquals(5, int0);
      
      stringArray0[7] = "`QQeF|H&p/";
      classWriter0.visit(8, (-2104), "", "iO=VWlm*1", "", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(196, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2445);
      Type type0 = Type.SHORT_TYPE;
      classWriter0.newConstItem(type0);
      classWriter0.visitAnnotation("", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(76, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.visitAnnotation("iO=VWlm*1", true);
      classWriter0.toByteArray();
      Type type0 = Type.SHORT_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(461);
      int int0 = classWriter0.newField("8Rv2", "8Rv2", "8Rv2");
      assertEquals(4, int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "}P";
      stringArray0[1] = "Yc~#*=";
      stringArray0[2] = "Yc~#*=";
      stringArray0[3] = "AnnotationDefault";
      stringArray0[4] = ";Lp$uR\n9T";
      classWriter0.visit((-3436), (-2022), "value ", "Yc~#*=", "8Rv2", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(163, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("iO=VWlm*1", true);
      classWriter0.toByteArray();
      AnnotationWriter annotationWriter0 = (AnnotationWriter)annotationVisitor0.visitArray(".s.IFJDCS");
      annotationWriter0.next = (AnnotationWriter) annotationVisitor0;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        annotationWriter0.next.visit("NoG", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@34e5348
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(10);
      Character character0 = Character.valueOf('U');
      classWriter0.newConstItem(character0);
      classWriter0.visitAnnotation("Sy~nthetic", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(84, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(10);
      Character character0 = Character.valueOf('U');
      classWriter0.newConstItem(character0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(29, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2445);
      Type type0 = Type.SHORT_TYPE;
      classWriter0.newConstItem(type0);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(8, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.visitSource("|:0kSKznDV}Y2y3", "EnclosingMethd");
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1165, (-1579));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("iOPVWlD*1", false);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("java/lang/Object", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1999);
      classWriter0.visitAnnotation("iO=VWlm*1", true);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(2, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 12:23:26 GMT 2019
 */

package org.apache.commons.math.geometry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.geometry.CardanEulerSingularityException;
import org.apache.commons.math.geometry.Rotation;
import org.apache.commons.math.geometry.RotationOrder;
import org.apache.commons.math.geometry.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Rotation_ESTest extends Rotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      Rotation rotation0 = new Rotation(2357.61, 0.9858065645966066, 3.141592653589793, 2357.61, false);
      Rotation rotation1 = new Rotation((-0.1), 4048.338736, (-3487.15241), (-2.2197914595684976E-9), true);
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.9999, 0.9999, 0.9999, 0.9999, true);
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertEquals(2.094395102393195, rotation0.getAngle(), 0.01);
      assertArrayEquals(new double[] {3.141592653589793, 1.5707963267948968, 1.5707963267948966}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      RotationOrder rotationOrder1 = RotationOrder.ZXZ;
      Rotation rotation0 = new Rotation(rotationOrder0, 0.9999, 0.9999, 0.9999);
      double[] doubleArray0 = rotation0.getAngles(rotationOrder1);
      assertArrayEquals(new double[] {1.0732968937721656, 1.8793605114217202, (-0.4974994330227311)}, doubleArray0, 0.01);
      assertEquals((-0.5708964326574615), rotation0.getQ1(), 0.01);
      assertEquals(0.5657614523754435, rotation0.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rotation rotation0 = new Rotation(3724902.0, (-191.1585075483951), (-191.1585075483951), 4.3791564021668335E10, true);
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {(-3.141541338884742), 3.141422533975248, (-3.1415413301543613)}, doubleArray0, 0.01);
      
      Rotation rotation1 = rotation0.applyTo(rotation0);
      assertEquals(3.4023922864901204E-4, rotation1.getAngle(), 0.01);
      assertEquals((-7.426044752827864E-13), rotation1.getQ2(), 0.01);
      assertEquals(3.1414225339754687, rotation0.getAngle(), 0.01);
      assertEquals((-7.426044752827864E-13), rotation1.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1930.0), (-1930.0), (-492.79024), (-492.79024), true);
      Rotation rotation1 = new Rotation();
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      try { 
        rotation1.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rotation rotation0 = new Rotation();
      Rotation rotation1 = rotation0.applyTo(rotation0);
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      try { 
        rotation1.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rotation rotation0 = new Rotation();
      Rotation rotation1 = new Rotation((-2031.949128898646), 0.9999, 628.0, 1855.7, true);
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rotation rotation0 = new Rotation();
      Rotation rotation1 = rotation0.revert();
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      try { 
        rotation1.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rotation rotation0 = new Rotation(Double.NaN, 2656.591780121141, 2656.591780121141, 2656.591780121141, true);
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      rotation0.getAngles(rotationOrder0);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2656.591780121141, 2656.591780121141, 2656.591780121141);
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      rotation0.applyInverseTo(rotation0);
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1930.0), (-1930.0), (-492.79024), (-492.79024), true);
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertEquals(1.6320387350886134, rotation0.getAngle(), 0.01);
      assertArrayEquals(new double[] {0.0, (-0.4999808661644826), (-1.5707963267948963)}, doubleArray0, 0.01);
      
      Rotation rotation1 = new Rotation((-492.79024), 3.141592653589793, (-2709.3912570128), 2320.0, false);
      assertEquals((-492.79024), rotation1.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      Rotation rotation0 = new Rotation(2357.61, 2357.61, 3.9183656044425073, 2357.61, false);
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      RotationOrder rotationOrder1 = RotationOrder.ZXZ;
      Rotation rotation0 = new Rotation(rotationOrder0, 0.9999, 0.9999, 0.9999);
      Rotation rotation1 = new Rotation(-0.0, (-1.0), 1.2210646836317344E16, 0.4794087469960522, true);
      try { 
        rotation1.getAngles(rotationOrder1);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1930.0), (-1930.0), (-492.79024), (-492.79024), true);
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      Rotation rotation1 = new Rotation(966.933011213378, 2451.882844, 966.933011213378, (-492.79024), false);
      try { 
        rotation1.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.0, 406.66035, 0.0, 4048.338736, true);
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      Rotation rotation1 = new Rotation(rotationOrder0, 4048.338736, 4048.338736, (-1949.814985));
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rotation rotation0 = new Rotation((-408.052690426253), (-0.8063916674555276), 1.9308819287593556E22, (-0.8063916674555276), true);
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      Rotation rotation0 = new Rotation(vector3D0, (-661.0));
      rotation0.revert();
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      Vector3D vector3D1 = rotationOrder0.getA1();
      Vector3D vector3D2 = Vector3D.minusI;
      Rotation rotation1 = new Rotation(vector3D2, vector3D1);
      try { 
        rotation1.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Rotation rotation0 = new Rotation(1.6899576429209962E7, 1.6899576429209962E7, 0.9999, 1.6899576429209962E7, true);
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      Vector3D vector3D0 = rotationOrder0.getA1();
      Vector3D vector3D1 = new Vector3D(0.9999, vector3D0);
      Rotation rotation1 = new Rotation(vector3D1, vector3D1, vector3D0, vector3D0);
      try { 
        rotation1.getAngles((RotationOrder) null);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Rotation rotation0 = new Rotation(255.3201, 0.9999999999, 255.3201, 0.9999999999, false);
      RotationOrder rotationOrder0 = mock(RotationOrder.class, new ViolatedAssumptionAnswer());
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Rotation rotation0 = new Rotation(3724902.0, (-191.1585075483951), (-191.1585075483951), 4.3791564021668335E10, true);
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      Vector3D vector3D0 = Vector3D.plusK;
      Vector3D vector3D1 = rotation0.applyTo(vector3D0);
      Vector3D vector3D2 = rotation0.applyInverseTo(vector3D0);
      rotation0.applyTo(rotation0);
      Rotation rotation1 = new Rotation(vector3D2, vector3D1, vector3D0, vector3D1);
      try { 
        rotation1.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.9999, 0.9999, (-5035.8059), (-1777.886533593773), true);
      double[][] doubleArray0 = rotation0.getMatrix();
      Rotation rotation1 = new Rotation(doubleArray0, 1.0);
      assertEquals(0.3329105647389883, rotation1.getQ3(), 0.01);
      assertEquals((-1.8723201250062067E-4), rotation1.getQ0(), 0.01);
      assertEquals((-0.3329105647389883), rotation0.getQ3(), 0.01);
      assertEquals((-0.9429583690564048), rotation0.getQ2(), 0.01);
      assertEquals(1.8723201250062061E-4, rotation0.getQ0(), 0.01);
      assertEquals(1.8723201250062061E-4, rotation0.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      Rotation rotation0 = new Rotation(rotationOrder0, 0.9999, 938.65659152275, 0.6);
      double[][] doubleArray0 = rotation0.getMatrix();
      Rotation rotation1 = new Rotation(doubleArray0, 1.0);
      assertEquals(2.8487897818574375, rotation0.getAngle(), 0.01);
      assertEquals((-0.1458790164297139), rotation1.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2656.591780121141, 2656.591780121141, 1668.717069126921);
      Rotation rotation0 = new Rotation(vector3D0, 1.0);
      Rotation rotation1 = new Rotation((-1213.2), 1668.717069126921, (-1.0), 4.817281009729137E10, true);
      rotation1.applyInverseTo(rotation0);
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      try { 
        rotation1.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      Rotation rotation0 = new Rotation(0.0, 0.9999, 0.5, (-1385.640806846), true);
      Rotation rotation1 = new Rotation(0.5, 0.40592406454563673, (-899.4111615247206), 46.02541788, false);
      try { 
        rotation1.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1930.0), (-1930.0), 0.0, 0.0, true);
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1930.0), (-1930.0), (-492.79024), (-492.79024), true);
      Rotation rotation1 = new Rotation((-492.79024), 3.141592653589793, (-2709.3912570128), 2320.0, false);
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      try { 
        rotation1.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1930.0), (-1930.0), (-492.79024), (-492.79024), true);
      rotation0.revert();
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1930.0), (-1930.0), (-492.79024), (-492.79024), true);
      Rotation rotation1 = new Rotation((-1930.0), 0.0014082641102076128, 4595.5, 1959.46757235882, false);
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      try { 
        rotation1.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Rotation rotation0 = new Rotation();
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01);
      
      Rotation rotation1 = new Rotation(0.0, 0.9999, 0.5, (-1385.640806846), true);
      assertEquals(0.0, rotation1.getQ0(), 0.01);
      assertEquals(7.216153491033534E-4, rotation1.getQ1(), 0.01);
      assertEquals(3.6084375892756946E-4, rotation1.getQ2(), 0.01);
      assertEquals((-0.9999996745314818), rotation1.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Rotation rotation0 = new Rotation();
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(0.0, rotation0.getAngle(), 0.01);
      
      Rotation rotation1 = new Rotation(rotationOrder0, 939.0, 1.6899576429209962E7, (-2202.8));
      assertEquals(0.3215758108892611, rotation1.getQ0(), 0.01);
      assertEquals((-0.8604047612495187), rotation1.getQ3(), 0.01);
      assertEquals(2.486806203142604, rotation1.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      Rotation rotation0 = new Rotation(2656.591780121141, (-0.5119494446651549), (-0.5119494446651549), 2656.591780121141, true);
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      Rotation rotation0 = new Rotation(3.141592653589793, (-0.5), (-0.5), 644.8913318207, false);
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-4698.70232), 0.0);
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      Vector3D vector3D1 = rotationOrder0.getA1();
      Rotation rotation0 = new Rotation(vector3D0, vector3D1);
      Rotation rotation1 = new Rotation(0.0, (-1.0), 1.232595164407831E-32, 3151.1133237837394, true);
      Vector3D vector3D2 = rotation0.getAxis();
      Rotation rotation2 = new Rotation(vector3D1, vector3D2);
      try { 
        rotation2.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-4698.70232), 0.0);
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      Vector3D vector3D1 = rotationOrder0.getA1();
      Rotation rotation0 = new Rotation(vector3D0, vector3D1);
      Rotation rotation1 = new Rotation(rotationOrder0, 3151.1133237837394, 2975.001442372955, 3151.1133237837394);
      Vector3D vector3D2 = rotation0.getAxis();
      Rotation rotation2 = new Rotation(vector3D1, vector3D2);
      try { 
        rotation2.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2656.591780121141, 2656.591780121141, 2656.591780121141);
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      Rotation rotation1 = new Rotation(Double.NaN, 2656.591780121141, 2656.591780121141, 2656.591780121141, true);
      assertEquals(Double.NaN, rotation1.getQ1(), 0.01);
      
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2656.591780121141, 2656.591780121141, 2656.591780121141);
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      rotation0.applyInverseTo(rotation0);
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
  }
}

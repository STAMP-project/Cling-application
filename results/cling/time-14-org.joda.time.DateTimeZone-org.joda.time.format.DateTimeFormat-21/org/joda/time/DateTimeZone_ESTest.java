/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 02:28:36 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Provider provider0 = mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(provider0).getAvailableIDs();
      // Undeclared exception!
      try { 
        DateTimeZone.setProvider(provider0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The provider doesn't have any available ids
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, CALLS_REAL_METHODS);
      doReturn(76, (-3673), 76, (-3673)).when(dateTimeZone0).getOffset(anyLong());
      DateTimeZone.setDefault(dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      long long0 = dateTimeZone1.convertLocalToUTC((long) (-3673), false, (long) (-953));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long0 = dateTimeZone0.adjustOffset((-9223372036854775808L), true);
      assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      Provider provider0 = mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(provider0).getAvailableIDs();
      // Undeclared exception!
      try { 
        DateTimeZone.setProvider(provider0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The provider doesn't have any available ids
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(10800000L);
      Locale locale0 = Locale.CHINESE;
      String string0 = localDate0.toString("SYM7z;", locale0);
      assertEquals("0197017;", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("+18:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, CALLS_REAL_METHODS);
      doReturn(350, (-196469980), 350).when(dateTimeZone0).getOffset(anyLong());
      doReturn((long)350, (long)350).when(dateTimeZone0).nextTransition(anyLong());
      DateTimeZone.setDefault(dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      dateTimeZone1.getOffset((long) (-196469980));
      int int0 = dateTimeZone1.getOffsetFromLocal(350);
      assertEquals(350, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, CALLS_REAL_METHODS);
      doReturn(28265625, 1939).when(dateTimeZone0).getOffset(anyLong());
      doReturn((-1159L)).when(dateTimeZone0).nextTransition(anyLong());
      DateTimeZone.setDefault(dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      long long0 = dateTimeZone1.adjustOffset(845L, false);
      assertEquals((-28262841L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-2728), (-2728));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -2728
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(114, "CNT");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'CNT' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate(3599474L);
      Locale locale0 = Locale.ENGLISH;
      dateTimeZone0.getShortName((-3690L), locale0);
      String string0 = localDate0.toString("xV", locale0);
      assertEquals("70", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test11()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(678L);
      Locale locale0 = Locale.CANADA;
      LocalDate localDate1 = localDate0.withYear((-2548));
      String string0 = localDate1.toString("yx*h=Si,%7ZP", locale0);
      assertEquals("-000000002548", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(678L);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      dateTime0.withMillisOfDay(3600000);
      assertEquals((-3600000L), dateTime0.getMillis());
      
      Locale locale0 = Locale.CANADA;
      String string0 = localDate0.toString("yx*h=Si,%7ZP", locale0);
      assertEquals("000000001970", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test13()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Locale locale0 = Locale.US;
      localDate0.toString("!P&=Dv?q:<.Oe", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test14()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((long) (-1));
      Locale locale0 = Locale.CANADA;
      localDate0.toString("ZX4(W", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test15()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(10080L);
      assertEquals("-18:00", cachedDateTimeZone0.toString());
      assertEquals((-64800000), int0);
      
      LocalDate localDate0 = LocalDate.now();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertEquals(1566079200000L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);
      LocalDate localDate0 = new LocalDate(9223372036837947807L, dateTimeZone0);
      try { 
        localDate0.toString("org.joda.time.base.BaseDuration", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3009);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone.forTimeZone(timeZone0);
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-41), true);
      assertEquals((-3050L), long0);
      assertEquals("+00:00:03.009", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test18()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-317L));
      Locale locale0 = Locale.CHINESE;
      localDate0.toString(":|UTX?M[?*TH>", locale0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      Locale locale0 = new Locale("tCbc1%B", "org.joda.time.chrono.ZonedChronology$ZonedDurationField", "org.joda.time.chrono.ZonedChronology$ZonedDurationField");
      LocalDate localDate0 = new LocalDate();
      try { 
        localDate0.toString("org.joda.time.chrono.ZonedChronology$ZonedDurationField", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test20()  throws Throwable  {
      DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = new LocalDate(10800000L);
      localDate0.toString("+,5?-K>$)i#)T;", (Locale) null);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test21()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((long) 335);
      Locale locale0 = new Locale("Cannot convert period to duration as ", "");
      localDate0.toString("sr", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test22()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-317L));
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      localDate0.toString("(>ZjQ?dKUY<9", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test23()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      LocalDate localDate0 = new LocalDate((Chronology) strictChronology0);
      Locale locale0 = new Locale("Africa/Cairo", "m");
      localDate0.toString("OK", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test24()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((long) (-571));
      Locale locale0 = Locale.US;
      localDate0.toString("IET", locale0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3009);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeZone.forTimeZone(timeZone0);
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-41), true);
      assertEquals("+00:00:03.009", dateTimeZone0.getID());
      assertEquals((-3050L), long0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, CALLS_REAL_METHODS);
      doReturn((-1475), (-783), (-1235)).when(dateTimeZone0).getOffset(anyLong());
      doReturn(3676L, 3676L).when(dateTimeZone0).nextTransition(anyLong());
      DateTimeZone.setDefault(dateTimeZone0);
      Locale locale0 = Locale.PRC;
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      dateTimeZone1.convertLocalToUTC((-766623600001L), true);
      LocalDate localDate0 = new LocalDate((-766623600001L));
      String string0 = localDate0.toString(">FDKUr`}y$0:_cUM0r|", locale0);
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Locale locale0 = new Locale("Literal must not be null", "sr", "America/Anchorage");
      try { 
        localDate0.toString("Literal must not be null", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone.forID("+00:19:32");
      DateTimeZone.forID("+00:19:32");
      LocalDate localDate0 = new LocalDate(294L);
      Locale locale0 = Locale.CANADA;
      try { 
        localDate0.toString("Wlm6ec|*Z8_<[", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: W
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test29()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, (-2036L));
      LocalDate localDate0 = LocalDate.now();
      Locale locale0 = Locale.CHINESE;
      localDate0.toString("=8c", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test30()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Locale locale0 = Locale.US;
      localDate0.toString("-QE%2S#<", locale0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long0 = dateTimeZone0.convertLocalToUTC((-62135594310999L), true);
      assertEquals((-62135595482999L), long0);
      
      long long1 = dateTimeZone0.adjustOffset((-766623600001L), true);
      assertEquals((-766620000001L), long1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate(1209600000L);
      dateTimeZone0.adjustOffset((-766623600001L), false);
      Locale locale0 = Locale.CHINESE;
      try { 
        localDate0.toString("+al]mjImzS`5`&?E", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test33()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.getOffsetFromLocal((-62135594310996L));
      LocalDate localDate0 = new LocalDate((-62135594310996L));
      Locale locale0 = Locale.US;
      localDate0.toString(">be8Ne", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test34()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(526);
      dateTimeZone0.convertLocalToUTC(0L, false);
      LocalDate localDate0 = new LocalDate(3599474L);
      Locale locale0 = new Locale("U", "+,5?-K>$)i#)T;", "+,5?-K>$)i#)T;");
      localDate0.toString("xV", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test35()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      LocalDate localDate0 = new LocalDate(1209600000L);
      localDate0.toString("sf", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test36()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(612L);
      Locale locale0 = Locale.CANADA;
      localDate0.toString("GoA+W9DV", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test37()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, CALLS_REAL_METHODS);
      doReturn((String) null).when(dateTimeZone0).getNameKey(anyLong());
      doReturn((-1475)).when(dateTimeZone0).getOffset(anyLong());
      DateTimeZone.setDefault(dateTimeZone0);
      Locale locale0 = Locale.PRC;
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate((-766623600001L));
      dateTimeZone1.getShortName(2593L, locale0);
      String string0 = localDate0.toString(">FDKUr`}y$0:_cUM0r|", locale0);
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      LocalDate localDate0 = new LocalDate((-62135595482999L));
      try { 
        localDate0.toString("AC3B!cX%!X4olV{", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(682L);
      Locale locale0 = Locale.CHINESE;
      try { 
        localDate0.toString("null", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test40()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      LocalDate localDate0 = new LocalDate(1209600000L);
      localDate0.toString("CNT", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test41()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, CALLS_REAL_METHODS);
      doReturn(76, (-3673), (-1475)).when(dateTimeZone0).getOffset(anyLong());
      DateTimeZone.setDefault(dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      Integer integer0 = new Integer((-3673));
      dateTimeZone1.getOffsetFromLocal((long) integer0);
      LocalDate localDate0 = new LocalDate(142L);
      Locale locale0 = Locale.CANADA;
      localDate0.toString("+u_", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test42()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      localDate0.toString("69EJMZc`>!_m]DjQ", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test43()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      LocalDate localDate0 = new LocalDate((-9L));
      Locale locale0 = Locale.CANADA_FRENCH;
      localDate0.toString("hdv;^TsbbO", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      dateTimeZone0.UTC.isLocalDateTimeGap(localDateTime0);
      LocalDate localDate0 = new LocalDate((-766623600001L));
      localDate0.toString(">FDKUr`}y$0:_cUM0r|", locale0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) strictChronology0);
      dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      LocalDate localDate0 = new LocalDate((long) 60);
      Locale locale0 = new Locale("+TiP9X", "+TiP9X", "+TiP9X");
      try { 
        localDate0.toString("+TiP9X", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      LocalDate localDate0 = new LocalDate((-766623600001L));
      DateTimeZone.forID("-00:00:03.030");
      localDate0.toString("Hw<u|O`", locale0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      long long0 = fixedDateTimeZone0.convertLocalToUTC((long) 0, false);
      assertEquals(0L, long0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("++00:00:01.929");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Locale locale0 = Locale.US;
      try { 
        localDate0.toString("Br*MH3(2$", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate(10800000L);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertEquals((-3600000L), dateTime0.getMillis());
      
      Locale locale0 = Locale.CHINESE;
      String string0 = dateTimeZone0.getName((-317L), locale0);
      assertNotNull(string0);
      assertEquals("+01:00", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test50()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.UTC.getOffset((ReadableInstant) null);
      LocalDate localDate0 = new LocalDate(5701248L);
      Locale locale0 = Locale.CANADA;
      String string0 = localDate0.toString("x[!pSN~Bxm5Cq|F,", locale0);
      assertEquals("0000000000001970", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test51()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate(678L);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals(3600000, int0);
      assertEquals((-3600000L), dateTime0.getMillis());
      
      Locale locale0 = Locale.CANADA;
      String string0 = localDate0.toString("yx*h=Si,%7ZP", locale0);
      assertEquals("000000001970", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.UTC.adjustOffset(1172000L, false);
      LocalDate localDate0 = new LocalDate((-317L));
      Locale locale0 = Locale.CHINESE;
      localDate0.toString("y!$z(x<Ts BZ5U3/(u", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test53()  throws Throwable  {
      DateTimeZone.forOffsetHours(0);
      LocalDate localDate0 = new LocalDate(5701248L);
      Locale locale0 = Locale.CANADA;
      localDate0.toString("x[!pSN~Bxm5Cq|F,", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test54()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(1L);
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
      Locale locale0 = Locale.CHINESE;
      localDate0.toString("y!$z(x<Ts6BZ5U3/(u", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test55()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      Locale locale0 = Locale.CANADA_FRENCH;
      dateTimeZone0.isStandardOffset(1L);
      LocalDate localDate0 = new LocalDate(406L);
      String string0 = localDate0.toString("x )iNUVXM%kK", locale0);
      assertEquals("1970 )iNUVXM%kK", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test56()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      boolean boolean0 = dateTimeZone0.isStandardOffset((-766623600001L));
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
      assertFalse(boolean0);
      
      LocalDate localDate0 = new LocalDate((-766623600001L));
      String string0 = localDate0.toString("x )iNUVXM%kK", locale0);
      assertEquals("1945 )iNUVXM%kK", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test57()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
      
      LocalDate localDate0 = LocalDate.now();
      Locale locale0 = Locale.CHINESE;
      String string0 = localDate0.toString("x )iNUVXM%kK", locale0);
      assertEquals("2019 )iNUVXM%kK", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test58()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-571));
      String string0 = dateTimeZone0.getName(74L);
      LocalDate localDate0 = new LocalDate(1976L);
      Locale locale0 = Locale.CHINESE;
      String string1 = localDate0.toString("x )iNUVXM%kK", locale0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  @Ignore
  public void test59()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      String string0 = dateTimeZone0.UTC.getName(1433L, locale0);
      assertNotNull(string0);
      assertEquals("+00:00", string0);
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
      
      LocalDate localDate0 = new LocalDate((-766623600001L));
      String string1 = localDate0.toString("x )iNUVXM%kK", locale0);
      assertEquals("1945 )iNUVXM%kK", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test60()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(678L);
      Locale locale0 = Locale.CANADA;
      DateTimeZone.forID((String) null);
      localDate0.toString("yx*h=Si,%7ZP", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test61()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      LocalDate localDate0 = new LocalDate(1209600000L);
      DateTimeZone.setNameProvider((NameProvider) null);
      String string0 = localDate0.toString("x )iNUVXM%kK", locale0);
      assertEquals("1970 )iNUVXM%kK", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test62()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, CALLS_REAL_METHODS);
      doReturn(76, (-3673), (-1475), (-3673), (-3673)).when(dateTimeZone0).getOffset(anyLong());
      doReturn((-999L), 0L).when(dateTimeZone0).nextTransition(anyLong());
      DateTimeZone.setDefault(dateTimeZone0);
      Integer integer0 = new Integer((-3673));
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((int) integer0);
      DateTimeZone dateTimeZone2 = DateTimeZone.getDefault();
      long long0 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, (-1475));
      assertEquals((-3673L), long0);
      assertEquals("-00:00:03.673", dateTimeZone1.getID());
      
      LocalDate localDate0 = LocalDate.now();
      Locale locale0 = Locale.CHINESE;
      String string0 = localDate0.toString("x )iNUVXM%kK", locale0);
      assertEquals("2019 )iNUVXM%kK", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test63()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeZone.forOffsetHours(25);
      Locale locale0 = Locale.CANADA_FRENCH;
      LocalDate localDate0 = new LocalDate(406L);
      String string0 = localDate0.toString("x )iNUVXM%kK", locale0);
      assertEquals("1970 )iNUVXM%kK", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test64()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
      LocalDate localDate0 = LocalDate.now();
      Locale locale0 = Locale.CHINESE;
      localDate0.toString("x )iNUVXM%kK", locale0);
  }
}

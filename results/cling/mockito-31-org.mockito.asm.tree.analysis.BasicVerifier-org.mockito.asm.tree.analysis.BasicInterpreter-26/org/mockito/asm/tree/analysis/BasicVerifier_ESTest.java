/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 08:24:15 GMT 2019
 */

package org.mockito.asm.tree.analysis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.Label;
import org.mockito.asm.Type;
import org.mockito.asm.tree.AbstractInsnNode;
import org.mockito.asm.tree.IincInsnNode;
import org.mockito.asm.tree.JumpInsnNode;
import org.mockito.asm.tree.LabelNode;
import org.mockito.asm.tree.LdcInsnNode;
import org.mockito.asm.tree.LineNumberNode;
import org.mockito.asm.tree.MultiANewArrayInsnNode;
import org.mockito.asm.tree.analysis.BasicValue;
import org.mockito.asm.tree.analysis.BasicVerifier;
import org.mockito.asm.tree.analysis.SourceValue;
import org.mockito.asm.tree.analysis.Value;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BasicVerifier_ESTest extends BasicVerifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      Type type0 = Type.CHAR_TYPE;
      Value value0 = basicVerifier0.newValue(type0);
      Label label0 = new Label();
      LabelNode labelNode0 = new LabelNode(label0);
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(29, labelNode0);
      Value value1 = basicVerifier0.copyOperation(jumpInsnNode0, value0);
      IincInsnNode iincInsnNode0 = new IincInsnNode(2, 9);
      Value value2 = basicVerifier0.unaryOperation(iincInsnNode0, value1);
      assertSame(value0, value2);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      Type type0 = Type.CHAR_TYPE;
      Value value0 = basicVerifier0.newValue(type0);
      MultiANewArrayInsnNode multiANewArrayInsnNode0 = new MultiANewArrayInsnNode("", (-875));
      basicVerifier0.copyOperation(multiANewArrayInsnNode0, value0);
      IincInsnNode iincInsnNode0 = new IincInsnNode(2, 9);
      Value value1 = basicVerifier0.unaryOperation(iincInsnNode0, value0);
      assertSame(value1, value0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      Type type0 = Type.DOUBLE_TYPE;
      BasicValue basicValue0 = new BasicValue(type0);
      Label label0 = new Label();
      LabelNode labelNode0 = new LabelNode(label0);
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(27, labelNode0);
      basicVerifier0.copyOperation(jumpInsnNode0, basicValue0);
      // Undeclared exception!
      try { 
        basicVerifier0.newOperation(jumpInsnNode0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      Type type0 = Type.CHAR_TYPE;
      Value value0 = basicVerifier0.newValue(type0);
      MultiANewArrayInsnNode multiANewArrayInsnNode0 = new MultiANewArrayInsnNode("", (-875));
      basicVerifier0.copyOperation(multiANewArrayInsnNode0, value0);
      Label label0 = new Label();
      LabelNode labelNode0 = new LabelNode(label0);
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(29, labelNode0);
      // Undeclared exception!
      try { 
        basicVerifier0.newOperation(jumpInsnNode0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(33, (LabelNode) null);
      Type type0 = Type.CHAR_TYPE;
      BasicValue basicValue0 = new BasicValue(type0);
      basicVerifier0.copyOperation(jumpInsnNode0, basicValue0);
      IincInsnNode iincInsnNode0 = new IincInsnNode(0, 152);
      // Undeclared exception!
      try { 
        basicVerifier0.newOperation(iincInsnNode0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      LabelNode labelNode0 = new LabelNode();
      LineNumberNode lineNumberNode0 = new LineNumberNode(165, labelNode0);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      basicVerifier0.copyOperation(lineNumberNode0, basicValue0);
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicVerifier0);
      BasicValue basicValue1 = (BasicValue)basicVerifier0.newOperation(ldcInsnNode0);
      assertTrue(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      Type type0 = Type.CHAR_TYPE;
      Value value0 = basicVerifier0.newValue(type0);
      MultiANewArrayInsnNode multiANewArrayInsnNode0 = new MultiANewArrayInsnNode("", (-875));
      Label label0 = new Label();
      LabelNode labelNode0 = new LabelNode(label0);
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(29, labelNode0);
      basicVerifier0.copyOperation(jumpInsnNode0, value0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        basicVerifier0.naryOperation(multiANewArrayInsnNode0, linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.asm.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      Type type0 = Type.CHAR_TYPE;
      Value value0 = basicVerifier0.newValue(type0);
      MultiANewArrayInsnNode multiANewArrayInsnNode0 = new MultiANewArrayInsnNode("", (-875));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Label label0 = new Label();
      LabelNode labelNode0 = new LabelNode(label0);
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(27, labelNode0);
      basicVerifier0.copyOperation(jumpInsnNode0, value0);
      // Undeclared exception!
      try { 
        basicVerifier0.naryOperation(multiANewArrayInsnNode0, linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.asm.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      MultiANewArrayInsnNode multiANewArrayInsnNode0 = new MultiANewArrayInsnNode("", 33);
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(33, (LabelNode) null);
      SourceValue sourceValue0 = new SourceValue(958, (AbstractInsnNode) null);
      basicVerifier0.copyOperation(jumpInsnNode0, sourceValue0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        basicVerifier0.naryOperation(multiANewArrayInsnNode0, linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.asm.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      Type type0 = Type.CHAR_TYPE;
      Value value0 = basicVerifier0.newValue(type0);
      Label label0 = new Label();
      LabelNode labelNode0 = new LabelNode(label0);
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(29, labelNode0);
      basicVerifier0.copyOperation(jumpInsnNode0, value0);
      // Undeclared exception!
      try { 
        basicVerifier0.newOperation(jumpInsnNode0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 02:09:54 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.Partial;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LocalDateTime_ESTest extends LocalDateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test000()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(2392);
      assertNotSame(localDateTime1, localDateTime0);
      
      LocalDate localDate0 = new LocalDate((-1344L));
      DateMidnight dateMidnight0 = new DateMidnight((-1344L), (DateTimeZone) null);
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfCentury(11);
      DateMidnight dateMidnight2 = dateMidnight1.withFields(localDate0);
      assertEquals((-3600000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-1344L));
      DateMidnight dateMidnight0 = new DateMidnight((-1344L), (DateTimeZone) null);
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfCentury(11);
      dateMidnight1.withFields(localDate0);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("-Qzi)O#YE}0]}0%,.y'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-Qzi)O#YE}0]}0%,.y'\" is malformed at \"Qzi)O#YE}0]}0%,.y'\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.plusMinutes((-2386));
      LocalDate localDate0 = new LocalDate((long) (-2386));
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.isSupported((DurationFieldType) null);
      DateMidnight dateMidnight0 = new DateMidnight(1L);
      // Undeclared exception!
      try { 
        dateMidnight0.withYearOfCentury(208);
        fail("Expecting exception: IllegalFieldValueException");
      
      } catch(IllegalFieldValueException e) {
         //
         // Value 208 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("+13:00", dateTimeZone0.getID());
      
      DateMidnight dateMidnight0 = new DateMidnight(1L);
      DateMidnight dateMidnight1 = dateMidnight0.withYear(7);
      assertEquals((-61946341200000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-12L));
      try { 
        DateTimeZone.forOffsetHoursMinutes(988, (-874));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -874
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimeZone.forID("UTC");
      LocalDate localDate0 = new LocalDate((-4069L));
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test007()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      assertEquals("UTC", dateTimeZone0.toString());
      
      DateMidnight dateMidnight0 = new DateMidnight((-7L));
      assertEquals((-3600000L), dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test008()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((long) 13);
      dateMidnight0.toLocalDate();
      assertEquals((-3600000L), dateMidnight0.getMillis());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gregorianChronology0);
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(0);
      assertSame(localDateTime1, localDateTime0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-12L));
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      LocalDateTime.fromCalendarFields(gregorianCalendar0);
      LocalDate localDate0 = new LocalDate((long) (-2386));
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test011()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      DateMidnight dateMidnight0 = new DateMidnight((long) 13);
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfCentury(13);
      assertEquals((-1798762772000L), dateMidnight1.getMillis());
      
      LocalDateTime localDateTime0 = new LocalDateTime((long) 2386, dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusHours(1);
      assertEquals("+13:00", dateTimeZone0.toString());
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test012()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      Date date0 = localDateTime0.toDate();
      assertEquals("+13:00", dateTimeZone0.toString());
      assertEquals("Sun Aug 18 15:09:09 CEST 2019", date0.toString());
      
      DateMidnight dateMidnight0 = new DateMidnight(1L);
      dateMidnight0.withYear(7);
      assertEquals((-3600000L), dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-7L));
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test014()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDate localDate0 = new LocalDate((-1344L));
      Date date0 = localDateTime0.toDate();
      assertEquals("Sun Aug 18 04:08:41 CEST 2019", date0.toString());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test015()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateMidnight dateMidnight0 = new DateMidnight(1L);
      DateMidnight dateMidnight1 = dateMidnight0.withYear(7);
      assertEquals((-61946295572000L), dateMidnight1.getMillis());
      
      LocalDateTime localDateTime1 = localDateTime0.plusDays((-2147483622));
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test016()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      TimeZone timeZone0 = TimeZone.getTimeZone("America/St_Johns");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTime dateTime0 = localDateTime0.toDateTime(dateTimeZone0);
      assertEquals(1566110321058L, dateTime0.getMillis());
      
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(2147483646);
      assertNotSame(localDateTime0, localDateTime1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test017()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      TimeZone timeZone0 = TimeZone.getTimeZone("America/St_Johns");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      localDateTime0.plusWeeks((-2147483636));
      DateTime dateTime0 = localDateTime0.toDateTime(dateTimeZone0);
      assertEquals(1566110320780L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test018()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      TimeZone timeZone0 = TimeZone.getTimeZone("America/St_Johns");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      localDateTime0.toDateTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        localDateTime0.getFieldType((-948));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -948
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test019()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.plusSeconds((-2272));
      TimeZone timeZone0 = TimeZone.getTimeZone("America/St_Johns");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTime dateTime0 = localDateTime0.toDateTime(dateTimeZone0);
      assertEquals(1566110320245L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test020()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      TimeZone timeZone0 = TimeZone.getTimeZone("America/St_Johns");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      String string0 = localDateTime0.toString();
      assertEquals("2019-08-18T04:08:39.960", string0);
      
      DateTime dateTime0 = localDateTime0.toDateTime(dateTimeZone0);
      assertEquals(1566110319960L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test021()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      TimeZone timeZone0 = TimeZone.getTimeZone("America/St_Johns");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      localDateTime0.plusDays(2147483646);
      DateTime dateTime0 = localDateTime0.toDateTime(dateTimeZone0);
      assertEquals(1566110319640L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      // Undeclared exception!
      try { 
        LocalDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      LocalTime localTime0 = new LocalTime();
      // Undeclared exception!
      try { 
        localDateTime0.compareTo((ReadablePartial) localTime0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone1);
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(0);
      assertSame(localDateTime1, localDateTime0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+13:00", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      LocalDateTime localDateTime0 = new LocalDateTime();
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(13);
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(13);
      assertNotSame(localDateTime1, localDateTime0);
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+13:00", dateTimeZone1.getID());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test027()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forID((String) null);
      assertEquals("Europe/Amsterdam", dateTimeZone1.getID());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      MonthDay monthDay0 = new MonthDay();
      localDateTime0.equals(monthDay0);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("+13:00", dateTimeZone0.getID());
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+13:00", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone1);
      LocalDateTime localDateTime1 = localDateTime0.withYearOfCentury(13);
      int int0 = localDateTime1.compareTo((ReadablePartial) localDateTime0);
      assertEquals("+13:00", dateTimeZone1.getID());
      assertEquals((-1), int0);
      assertEquals("+13:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      boolean boolean0 = localDateTime0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone1);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      localDateTime0.isSupported(durationFieldType0);
      assertEquals("+13:00", dateTimeZone0.getID());
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+13:00", dateTimeZone1.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("-ozg|f+VrKSAyq:)7R>=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-ozg|f+VrKSAyq:)7R>=\" is malformed at \"ozg|f+VrKSAyq:)7R>=\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone1);
      // Undeclared exception!
      try { 
        localDateTime0.getField(1074);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 1074
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      try { 
        DateTimeZone.forOffsetHoursMinutes((-1250), (-2147483348));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -2147483348
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("+13:00", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone2 = DateTimeZone.forID("UTC");
      assertNotSame(dateTimeZone2, dateTimeZone1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHoursMinutes(0, 1);
      assertEquals("+00:01", dateTimeZone1.getID());
      
      DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("+13:00", dateTimeZone2.getID());
      assertSame(dateTimeZone2, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(0);
      assertSame(localDateTime1, localDateTime0);
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+13:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      LocalDateTime localDateTime0 = new LocalDateTime();
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("+13:00", dateTimeZone1.toString());
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+13:00", dateTimeZone0.getID());
      
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(43);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test040()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      assertEquals("+01:00", dateTimeZone0.getID());
      
      Locale locale0 = Locale.KOREA;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      LocalDateTime.fromCalendarFields(gregorianCalendar0);
      assertEquals("java.util.GregorianCalendar[time=1566094102655,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Amsterdam\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=180,lastRule=java.util.SimpleTimeZone[id=Europe/Amsterdam,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2019,MONTH=7,WEEK_OF_YEAR=34,WEEK_OF_MONTH=4,DAY_OF_MONTH=18,DAY_OF_YEAR=230,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=8,SECOND=22,MILLISECOND=655,ZONE_OFFSET=3600000,DST_OFFSET=3600000]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+13:00", dateTimeZone0.toString());
      
      LocalDateTime localDateTime1 = localDateTime0.plusHours(780);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone1);
      
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("+13:00", dateTimeZone0.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertEquals("+13:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("qz['Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'qz['Z' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("+aARO8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+aARO8\" is malformed at \"aARO8\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test046()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone1);
      Date date0 = localDateTime0.toDate();
      assertEquals("+13:00", dateTimeZone0.getID());
      assertEquals("Sun Aug 18 15:08:05 CEST 2019", date0.toString());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone1);
      LocalDateTime localDateTime1 = localDateTime0.withYearOfCentury(13);
      int int0 = localDateTime0.compareTo((ReadablePartial) localDateTime1);
      assertEquals(1, int0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+13:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test048()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      Date date0 = localDateTime0.toDate();
      assertEquals("Sun Aug 18 15:07:57 CEST 2019", date0.toString());
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("+13:00", dateTimeZone0.getID());
      assertSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone1);
      localDateTime0.plusDays((-35));
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("+13:00", dateTimeZone0.toString());
      assertEquals("+13:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      LocalDateTime.now(dateTimeZone0);
      Locale locale0 = Locale.KOREA;
      String string0 = dateTimeZone0.getName((-1L), locale0);
      assertEquals("+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(0);
      assertSame(localDateTime1, localDateTime0);
      
      Locale locale0 = Locale.KOREA;
      String string0 = dateTimeZone0.getName((-1L), locale0);
      assertEquals("+00:00", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string0 = fixedDateTimeZone0.getName((-1L), locale0);
      assertNotNull(string0);
      assertEquals("+00:00", string0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(16);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      boolean boolean0 = localDateTime0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.KOREA;
      String string0 = dateTimeZone0.getName((-1L), locale0);
      assertNotNull(string0);
      assertEquals("+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      Locale locale0 = Locale.KOREA;
      String string0 = dateTimeZone0.getName((-1L), locale0);
      assertEquals("+00:00", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Locale locale0 = Locale.KOREA;
      dateTimeZone0.getName((-1L), locale0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withFields(localDateTime0);
      assertEquals(4, localDateTime1.size());
      assertSame(localDateTime1, localDateTime0);
      
      Locale locale0 = Locale.KOREA;
      String string0 = dateTimeZone0.getName((-1L), locale0);
      assertEquals("+00:00", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test057()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateMidnight dateMidnight0 = new DateMidnight((-1344L), (DateTimeZone) null);
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfCentury(11);
      assertEquals((-1861921172000L), dateMidnight1.getMillis());
      
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks((-202));
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test058()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.equals((Object) null);
      DateMidnight dateMidnight0 = new DateMidnight((long) 3087);
      DateMidnight dateMidnight1 = dateMidnight0.withYear(1438);
      assertEquals((-16788298772000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test059()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeZone.forOffsetHours(0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      DateTime dateTime0 = localDateTime0.toDateTime((ReadableInstant) null);
      assertEquals((-7386070297365L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test060()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateMidnight dateMidnight0 = new DateMidnight((-1344L), (DateTimeZone) null);
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfCentury(11);
      assertEquals((-1861921172000L), dateMidnight1.getMillis());
      
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(11);
      boolean boolean0 = localDateTime0.isEqual(localDateTime1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test061()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forID((String) null);
      assertEquals("Europe/Amsterdam", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      LocalDateTime.now(dateTimeZone0);
      try { 
        DateTimeZone.forOffsetHoursMinutes(59, (-1670));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -1670
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      dateTimeZone0.isStandardOffset(3775168803400L);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      dateTimeZone0.isStandardOffset(3775168803400L);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeZone.forOffsetMillis(0);
      // Undeclared exception!
      try { 
        LocalDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      Partial partial0 = new Partial(localDateTime0);
      localDateTime0.isEqual(partial0);
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(4);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test069()  throws Throwable  {
      DateTimeZone.forOffsetMillis(0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gregorianChronology0);
      LocalDateTime localDateTime1 = localDateTime0.minusHours(13);
      boolean boolean0 = localDateTime1.isEqual(localDateTime0);
      assertFalse(boolean0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 59);
      assertEquals("+00:59", dateTimeZone0.toString());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      boolean boolean0 = localDateTime0.isSupported((DurationFieldType) null);
      assertEquals("UTC", dateTimeZone0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.getID());
      
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      LocalDateTime localDateTime0 = LocalDateTime.now();
      boolean boolean0 = localDateTime0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeZone.forOffsetMillis(0);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("-K6`rls%B^P8~P&5e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-K6`rls%B^P8~P&5e\" is malformed at \"K6`rls%B^P8~P&5e\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeZone.forOffsetMillis(0);
      try { 
        DateTimeZone.forOffsetHoursMinutes(967, (-1362));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -1362
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forID("UTC");
      assertSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds((-1302));
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.getID());
      
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.plusHours(0);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusHours(8);
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeZone.forOffsetMillis(0);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("H%T6A*!_v $ ?T8&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'H%T6A*!_v $ ?T8&' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeZone.forOffsetMillis(0);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("+Kig~pD7~w[j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+Kig~pD7~w[j\" is malformed at \"Kig~pD7~w[j\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateTimeZone.forOffsetMillis(0);
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test083()  throws Throwable  {
      DateTimeZone.forOffsetMillis(0);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Date date0 = localDateTime0.toDate();
      assertEquals("Sun Aug 18 04:07:29 CEST 2019", date0.toString());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test084()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      Date date0 = localDateTime0.toDate();
      assertEquals("Sun Aug 18 15:06:55 CEST 2019", date0.toString());
      assertEquals(4, localDateTime0.size());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
      assertNotSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusDays(4);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertSame(localDateTime1, localDateTime0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHoursMinutes((-509), 59);
      assertEquals("-509:59", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeZone.forOffsetHours(13);
      // Undeclared exception!
      try { 
        LocalDateTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeZone.forOffsetMillis(1963);
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeZone.forOffsetHours((-4));
      LocalDateTime localDateTime1 = localDateTime0.plusHours(0);
      assertSame(localDateTime0, localDateTime1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withYear(0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHoursMinutes(60, 4);
      assertEquals("+60:04", dateTimeZone1.getID());
      
      boolean boolean0 = localDateTime0.isEqual(localDateTime1);
      assertFalse(boolean0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1344L), (DateTimeZone) null);
      dateMidnight0.withYearOfCentury(11);
      // Undeclared exception!
      try { 
        LocalDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDate localDate0 = new LocalDate((-1344L));
      DateMidnight dateMidnight0 = new DateMidnight((-1344L), (DateTimeZone) null);
      dateMidnight0.withYearOfCentury(11);
      // Undeclared exception!
      try { 
        localDateTime0.isEqual(localDate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test093()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(0);
      assertSame(localDateTime1, localDateTime0);
      
      DateMidnight dateMidnight0 = new DateMidnight((long) 3087);
      DateMidnight dateMidnight1 = dateMidnight0.withYear(1438);
      assertEquals((-16788298772000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      DateTime dateTime0 = localDateTime0.toDateTime((ReadableInstant) null);
      assertEquals(0L, dateTime0.getMillis());
      
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(59);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test095()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      Interval interval0 = localDate0.toInterval(dateTimeZone0);
      assertEquals(1566172800000L, interval0.getEndMillis());
      
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(4);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test096()  throws Throwable  {
      DateTimeZone.forID((String) null);
      DateMidnight dateMidnight0 = new DateMidnight((long) 0);
      DateMidnight dateMidnight1 = dateMidnight0.withYear((-2563));
      assertEquals((-143047642772000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test097()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      Interval interval0 = localDate0.toInterval(dateTimeZone0);
      assertEquals(1566086400000L, interval0.getStartMillis());
      
      boolean boolean0 = localDateTime0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      DateTime dateTime0 = localDateTime0.toDateTime((ReadableInstant) null);
      assertEquals(0L, dateTime0.getMillis());
      
      boolean boolean0 = localDateTime0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test099()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateMidnight dateMidnight0 = new DateMidnight((-1344L), (DateTimeZone) null);
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfCentury(11);
      assertEquals((-1861921172000L), dateMidnight1.getMillis());
      
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      boolean boolean0 = localDateTime0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((long) 13);
      LocalDate localDate0 = dateMidnight0.toLocalDate();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("HPI2&?e0?Dom8%J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'HPI2&?e0?Dom8%J' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateMidnight dateMidnight0 = new DateMidnight((-1344L), (DateTimeZone) null);
      dateMidnight0.withYearOfCentury(11);
      // Undeclared exception!
      try { 
        localDateTime0.getField(11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 11
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1344L), (DateTimeZone) null);
      dateMidnight0.withYearOfCentury(11);
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(62035200000L);
      dateMidnight0.withYear(13);
      try { 
        DateTimeZone.forOffsetHoursMinutes(59, (-1670));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -1670
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      localDateTime0.toDateTime((ReadableInstant) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test105()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(0);
      Interval interval0 = localDate0.toInterval(dateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertEquals(1566086400000L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test106()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      Interval interval0 = localDate0.toInterval(dateTimeZone0);
      assertEquals(1566172800000L, interval0.getEndMillis());
      
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(0);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test107()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(2392);
      DateMidnight dateMidnight0 = new DateMidnight((-1344L), (DateTimeZone) null);
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfCentury(11);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals((-1861921172000L), dateMidnight1.getMillis());
      
      int int0 = localDateTime0.compareTo((ReadablePartial) localDateTime1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test108()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) gJChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withField(dateTimeFieldType0, 927);
      GregorianCalendar gregorianCalendar0 = dateMidnight1.toGregorianCalendar();
      LocalDateTime.fromCalendarFields(gregorianCalendar0);
      assertEquals("java.util.GregorianCalendar[time=-32893690772000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Amsterdam\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=180,lastRule=java.util.SimpleTimeZone[id=Europe/Amsterdam,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=927,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=3,DAY_OF_MONTH=18,DAY_OF_YEAR=230,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=40,SECOND=28,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertEquals(1566079200000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test109()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      DateMidnight dateMidnight0 = new DateMidnight(62035200000L);
      DateMidnight dateMidnight1 = dateMidnight0.withYear(13);
      assertEquals((-61726407572000L), dateMidnight1.getMillis());
      
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("+13:00", dateTimeZone0.getID());
      assertEquals("+13:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1761L));
      dateTime0.withYear(60);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) ethiopicChronology0);
      localDateTime0.toDateTime((ReadableInstant) null);
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test112()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      DateMidnight dateMidnight0 = new DateMidnight(62035200000L);
      dateMidnight0.withYear(13);
      assertEquals(62031600000L, dateMidnight0.getMillis());
      
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      Date date0 = localDateTime0.toDate();
      assertEquals("Sun Aug 18 15:06:25 CEST 2019", date0.toString());
      assertEquals("+13:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(0);
      assertSame(localDateTime1, localDateTime0);
      assertEquals("UTC", dateTimeZone0.toString());
      
      LocalDateTime localDateTime2 = new LocalDateTime();
      assertFalse(localDateTime2.equals((Object)localDateTime1));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LocalDateTime.now();
      // Undeclared exception!
      try { 
        LocalDateTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.plusDays(0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.toDateTime();
      // Undeclared exception!
      try { 
        LocalDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.toDateTime();
      // Undeclared exception!
      try { 
        localDateTime0.compareTo((ReadablePartial) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test119()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.plusMinutes(0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566093983875L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test120()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.plusMinutes(13);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566093983581L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test121()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.plusWeeks(0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566086783106L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test122()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(13);
      DateTime dateTime0 = localDateTime1.toDateTime();
      assertEquals(1573999582622L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone.forID((String) null);
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      LocalDateTime.Property localDateTime_Property0 = new LocalDateTime.Property(localDateTime0, dateTimeField0);
      LocalDateTime localDateTime1 = localDateTime_Property0.addToCopy(1677L);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test124()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      MonthDay monthDay0 = new MonthDay();
      localDateTime0.equals(monthDay0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566133581849L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Days days0 = Days.MIN_VALUE;
      gregorianChronology0.get((ReadablePeriod) days0, 1336L, 86399999L);
      Duration duration0 = new Duration(1336L, 365L);
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadableDuration) duration0);
      int int0 = localDateTime0.compareTo((ReadablePartial) localDateTime1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test126()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      DateTimeZone.forOffsetHoursMinutes(0, 1);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566133581149L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfDay();
      Interval interval0 = localDateTime_Property0.toInterval();
      interval0.toPeriod();
      boolean boolean0 = localDateTime0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test128()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Months months0 = Months.FIVE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      localDateTime0.isSupported(durationFieldType0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566093980501L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Days days0 = Days.MIN_VALUE;
      gregorianChronology0.get((ReadablePeriod) days0, 1336L, 86399999L);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("--org.joda.time.PeriodType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"--org.joda.time.PeriodType\" is malformed at \"-org.joda.time.PeriodType\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.toDateTime((DateTimeZone) null);
      // Undeclared exception!
      try { 
        localDateTime0.getField(11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 11
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Days days0 = Days.MIN_VALUE;
      gregorianChronology0.get((ReadablePeriod) days0, 1336L, 86399999L);
      try { 
        DateTimeZone.forOffsetHoursMinutes(1537, (-4438));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -4438
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DateTimeZone.forID("UTC");
      Days days0 = Days.THREE;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      int[] intArray0 = gregorianChronology0.get((ReadablePeriod) days0, 60000L, 1000L);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test133()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      localDateTime0.plusSeconds(0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566133578634L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test134()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(43);
      DateTime dateTime0 = localDateTime1.toDateTime();
      assertEquals(1566094021262L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      localDateTime0.toDateTime();
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test136()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(locale0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(gregorianCalendar0);
      localDateTime0.toDateTime();
      assertEquals("java.util.GregorianCalendar[time=1566093959695,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Amsterdam\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=180,lastRule=java.util.SimpleTimeZone[id=Europe/Amsterdam,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2019,MONTH=7,WEEK_OF_YEAR=34,WEEK_OF_MONTH=4,DAY_OF_MONTH=18,DAY_OF_YEAR=230,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=5,SECOND=59,MILLISECOND=695,ZONE_OFFSET=3600000,DST_OFFSET=3600000]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfDay();
      Interval interval0 = localDateTime_Property0.toInterval();
      interval0.toPeriod();
      LocalDateTime localDateTime1 = localDateTime0.plusHours((-3409));
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test138()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      localDateTime0.toDateTime(dateTimeZone0);
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      localDateTime0.toDateTime();
      // Undeclared exception!
      try { 
        DateTimeZone.forID("qz['Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'qz['Z' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      localDateTime0.toDateTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("+org.joda.time.PeriodType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+org.joda.time.PeriodType\" is malformed at \"org.joda.time.PeriodType\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.toDateTime();
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test142()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566093922815L, dateTime0.getMillis());
      
      Date date0 = localDateTime0.toDate();
      assertEquals("Sun Aug 18 04:05:22 CEST 2019", date0.toString());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test143()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      TimeZone timeZone0 = TimeZone.getTimeZone("if{EYv,:S,'75Uldd");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime1 = new LocalDateTime(dateTimeZone0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566093922404L, dateTime0.getMillis());
      
      int int0 = localDateTime0.compareTo((ReadablePartial) localDateTime1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test144()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      LocalDateTime localDateTime0 = new LocalDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime1 = LocalDateTime.now((Chronology) gJChronology0);
      localDateTime1.toDate();
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566093915384L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test145()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.plusDays(719527);
      DateTime dateTime0 = localDateTime0.toDateTime((DateTimeZone) null);
      assertEquals(1566093914661L, dateTime0.getMillis());
  }
}

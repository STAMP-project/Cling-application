/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 21:51:56 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.BoundFunction;
import com.google.javascript.rhino.head.Callable;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.EcmaError;
import com.google.javascript.rhino.head.EvaluatorException;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeBoolean;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJavaArray;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.NativeWith;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.Synchronizer;
import com.google.javascript.rhino.head.TopLevel;
import com.google.javascript.rhino.head.UniqueTag;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class IdScriptableObject_ESTest extends IdScriptableObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      NativeCall nativeCall0 = new NativeCall();
      boolean boolean0 = nativeObject0.sameValue(nativeCall0, nativeCall0);
      assertTrue(boolean0);
      assertTrue(nativeCall0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      NativeCall nativeCall0 = new NativeCall();
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(nativeObject0, nativeCall0, 0);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.checkPropertyChange("O~yNtgknvc{ERzP", scriptableObject0, nativeObject0);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      UniqueTag uniqueTag0 = (UniqueTag)Scriptable.NOT_FOUND;
      boolean boolean0 = nativeObject0.sameValue(uniqueTag0, nativeObject0.PERMANENT);
      assertTrue(nativeObject0.isExtensible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      UniqueTag uniqueTag0 = (UniqueTag)Scriptable.NOT_FOUND;
      boolean boolean0 = nativeObject0.sameValue("D2ZWg}Cil7WE'$+\"Gm", uniqueTag0);
      assertTrue(nativeObject0.isExtensible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeWith nativeWith0 = new NativeWith(nativeCall0, nativeCall0);
      nativeCall0.addIdFunctionProperty(nativeWith0, nativeWith0, 2826, "", 2826);
      assertFalse(nativeCall0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      ScriptableObject.defineConstProperty(baseFunction0, (String) null);
      assertFalse(baseFunction0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Class<Integer> class0 = Integer.class;
      nativeError0.defineProperty("error reporter", class0, 13);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      nativeCall0.defineOwnProperty(context0, "MBk=w)@.tZ(/", nativeCall0);
      assertFalse(nativeCall0.isSealed());
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context1 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context1);
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.Array;
      BaseFunction baseFunction0 = importerTopLevel0.getBuiltinCtor(topLevel_Builtins0);
      nativeCall0.defineOwnProperty(context1, (Object) "MBk=w)@.tZ(/", (ScriptableObject) baseFunction0, true);
      assertEquals(1, baseFunction0.getLength());
      assertEquals(1, baseFunction0.getArity());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod(context0, (Scriptable) nativeIterator_StopIteration0, "error reporter", (Object[]) null);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: error reporter is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeError nativeError0 = new NativeError();
      Context context0 = Context.getCurrentContext();
      importerTopLevel0.defineOwnProperties(context0, nativeError0);
      assertTrue(nativeError0.isExtensible());
      assertTrue(importerTopLevel0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(714L);
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptableObject("Qv&IENA\"Pn-");
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Expected argument of type object, but instead had type string
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Context context0 = Context.enter();
      context0.initStandardObjects((ScriptableObject) nativeCall0);
      NativeJavaArray nativeJavaArray0 = null;
      try {
        nativeJavaArray0 = new NativeJavaArray(nativeCall0, nativeCall0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Array expected
         //
         verifyException("com.google.javascript.rhino.head.NativeJavaArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      Context context0 = new Context();
      Scriptable scriptable0 = context0.initStandardObjects((ScriptableObject) baseFunction0);
      boolean boolean0 = ScriptableObject.hasProperty(scriptable0, 2558);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      ScriptableObject.putProperty((Scriptable) nativeCall0, 8, (Object) nativeCall0);
      assertFalse(nativeCall0.isEmpty());
      assertTrue(nativeCall0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeWith nativeWith0 = new NativeWith(nativeCall0, nativeCall0);
      ScriptableObject.redefineProperty(nativeWith0, "error reporter", true);
      assertTrue(nativeCall0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeObject0, 2);
      assertTrue(nativeObject0.isExtensible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Class<Object> class0 = Object.class;
      Object object0 = ScriptableObject.getTypedProperty((Scriptable) nativeIterator_StopIteration0, "}Dv%akz>5Yz!5U", class0);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertNull(object0);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptable("msg.setter1.parms");
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Expected argument of type object, but instead had type string
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ImporterTopLevel importerTopLevel1 = (ImporterTopLevel)ScriptableObject.ensureScriptable(importerTopLevel0);
      assertTrue(importerTopLevel1.isExtensible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeBoolean0, "error reporter");
      assertTrue(boolean0);
      assertTrue(nativeBoolean0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      NativeError nativeError0 = new NativeError();
      Context context0 = Context.getCurrentContext();
      BoundFunction boundFunction0 = new BoundFunction(context0, nativeError0, (Callable) null, nativeObject0, (Object[]) null);
      assertTrue(nativeError0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeJavaArray nativeJavaArray0 = null;
      try {
        nativeJavaArray0 = new NativeJavaArray(nativeCall0, nativeCall0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      Synchronizer synchronizer0 = new Synchronizer(nativeObject0);
      ScriptableObject.getTopScopeValue(synchronizer0, "");
      assertTrue(nativeObject0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      boolean boolean0 = baseFunction0.isGenericDescriptor(baseFunction0);
      assertTrue(baseFunction0.isExtensible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Object object0 = ScriptableObject.getProperty((Scriptable) importerTopLevel0, 8);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      Class<Integer> class0 = Integer.class;
      ScriptableObject.getTypedProperty((Scriptable) nativeObject0, 4, class0);
      assertTrue(nativeObject0.isEmpty());
      assertTrue(nativeObject0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(scriptable0).get(anyInt() , any(com.google.javascript.rhino.head.Scriptable.class));
      Class<Object> class0 = Object.class;
      Object object0 = ScriptableObject.getTypedProperty(scriptable0, (-6), class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test28()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.exportAsJSClass(15, (Scriptable) null, true);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Cannot modify a property of a sealed object: StopIteration.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }
}

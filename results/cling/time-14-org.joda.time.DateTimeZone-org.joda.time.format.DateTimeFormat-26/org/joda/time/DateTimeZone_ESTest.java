/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 02:33:34 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.MonthDay;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Provider provider0 = mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn((Set<String>) null).when(provider0).getAvailableIDs();
      // Undeclared exception!
      try { 
        DateTimeZone.setProvider(provider0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The provider doesn't have any available ids
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Provider provider0 = mock(Provider.class, new ViolatedAssumptionAnswer());
      doReturn(set0).when(provider0).getAvailableIDs();
      // Undeclared exception!
      try { 
        DateTimeZone.setProvider(provider0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The provider doesn't support UTC
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, CALLS_REAL_METHODS);
      doReturn((-84972390)).when(dateTimeZone0).getOffset(anyLong());
      doReturn(0).when(dateTimeZone0).getStandardOffset(anyLong());
      DateTimeZone.setDefault(dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      boolean boolean0 = dateTimeZone1.isStandardOffset(0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, CALLS_REAL_METHODS);
      doReturn((-158945115), (-158945115), 1765, 87, (-158945115)).when(dateTimeZone0).getOffset(anyLong());
      DateTimeZone.setDefault(dateTimeZone0);
      LocalDateTime.now();
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHoursMinutes((-393), 59);
      long long0 = dateTimeZone1.getMillisKeepLocal((DateTimeZone) null, 3141L);
      assertEquals("-393:59", dateTimeZone1.getID());
      assertEquals((-1259391744L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2431);
      String string0 = dateTimeZone0.getName((long) 1, locale0);
      assertEquals("+00:00:02.431", string0);
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) 2431, false);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Locale locale0 = Locale.TAIWAN;
      monthDay0.toString("-Europe/Amsterdam", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MonthDay monthDay0 = MonthDay.now();
      dateTimeZone0.getOffset((ReadableInstant) null);
      Locale locale0 = Locale.KOREAN;
      monthDay0.toString("ZonedChronology[", locale0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3161));
      DateTime dateTime0 = DateTime.now();
      dateTimeZone0.UTC.getOffset((ReadableInstant) dateTime0);
      Date date0 = new Date(623158436);
      MonthDay monthDay0 = MonthDay.fromDateFields(date0);
      Locale locale0 = Locale.KOREAN;
      try { 
        monthDay0.toString("F8MJ^;", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: F
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(325L);
      Locale locale0 = Locale.KOREAN;
      monthDay0.toString("^.$PQ::2;Rn", locale0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      Locale locale0 = Locale.TAIWAN;
      try { 
        monthDay0.toString("NoHours", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      long long0 = fixedDateTimeZone0.convertLocalToUTC(10800000L, true);
      assertEquals(10800000L, long0);
      
      String string0 = fixedDateTimeZone0.getName((-1242L), (Locale) null);
      assertNotNull(string0);
      assertEquals("+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3289));
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      MonthDay monthDay0 = new MonthDay((Chronology) julianChronology0);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.getOffsetFromLocal(31557600000L);
      Locale locale0 = Locale.GERMANY;
      try { 
        monthDay0.toString("cUtU1wIhEhh~x", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);
      assertEquals("+00:01", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test13()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Locale locale0 = Locale.ENGLISH;
      monthDay0.toString("E[g<lIs0W-;7i", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test14()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      Locale locale0 = Locale.GERMAN;
      cachedDateTimeZone0.getShortName((long) 1, locale0);
      MonthDay monthDay0 = new MonthDay((-3602342L));
      monthDay0.toString("2(w>rZBYtHW}*I@zs#J", locale0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      // Undeclared exception!
      try { 
        monthDay0.toString("ReadablePartial objects must have the same set of fields");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      dateTimeZone0.adjustOffset(2284L, true);
      MonthDay monthDay0 = new MonthDay((-1062L));
      Locale locale0 = Locale.TAIWAN;
      try { 
        monthDay0.toString("Ow`&~Utis3OfKbll", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test17()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.adjustOffset((-9223372036854775794L), false);
      Date date0 = new Date((-158945202L));
      MonthDay monthDay0 = MonthDay.fromDateFields(date0);
      Locale locale0 = Locale.ROOT;
      String string0 = monthDay0.toString("SCj1,>]b^o{.RNgo", locale0);
      assertEquals("0000000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test19()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      monthDay0.toString("#h@{fc$+H4.Sf", (Locale) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Locale locale0 = Locale.ENGLISH;
      try { 
        monthDay0.toString("below the supported minimum of ", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3289));
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      MonthDay monthDay0 = new MonthDay((Chronology) julianChronology0);
      DateTimeZone.forOffsetMillis(0);
      Locale locale0 = Locale.GERMANY;
      try { 
        monthDay0.toString("cUtU1wIhEhh~x", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test22()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Locale locale0 = Locale.FRANCE;
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      monthDay0.toString("hWJA>", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test23()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Locale locale0 = Locale.TAIWAN;
      MonthDay monthDay0 = new MonthDay((long) 1, (Chronology) buddhistChronology0);
      monthDay0.toString("IST", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test24()  throws Throwable  {
      NameProvider nameProvider0 = mock(NameProvider.class, new ViolatedAssumptionAnswer());
      doReturn("r)yHp\"yS4|\u0003%57").when(nameProvider0).getShortName(any(java.util.Locale.class) , anyString() , anyString());
      DateTimeZone.setNameProvider(nameProvider0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      String string0 = dateTimeZone0.getShortName(7200000L);
      assertEquals("r)yHp\"yS4|\u0003%57", string0);
      
      long long0 = dateTimeZone0.convertLocalToUTC((-2469L), true);
      assertEquals((-3602469L), long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, CALLS_REAL_METHODS);
      doReturn(1761, (-852), 1761, 1530, 0).when(dateTimeZone0).getOffset(anyLong());
      doReturn(false).when(dateTimeZone0).isFixed();
      doReturn(2101L, (long)1530).when(dateTimeZone0).nextTransition(anyLong());
      DateTimeZone.setDefault(dateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      dateTimeZone1.isLocalDateTimeGap(localDateTime0);
      MonthDay monthDay0 = MonthDay.now();
      Locale locale0 = Locale.ENGLISH;
      try { 
        monthDay0.toString("America/Los_Angeles", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(3);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      Locale locale0 = Locale.TAIWAN;
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      try { 
        monthDay0.toString("GJChronology", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test27()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, CALLS_REAL_METHODS);
      doReturn(114, (-1370), 114, 114, (-2083)).when(dateTimeZone0).getOffset(anyLong());
      BuddhistChronology.getInstance(dateTimeZone0);
      MonthDay monthDay0 = MonthDay.now();
      Locale locale0 = Locale.TAIWAN;
      monthDay0.toString("2/p^Rk", locale0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Locale locale0 = Locale.ENGLISH;
      try { 
        monthDay0.toString("LenientChronology[", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(3);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone.forTimeZone(timeZone0);
      DateTimeZone.forTimeZone(timeZone0);
      Date date0 = new Date(623158436);
      MonthDay monthDay0 = MonthDay.fromDateFields(date0);
      Locale locale0 = Locale.KOREAN;
      try { 
        monthDay0.toString("F8MJ^;", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: F
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      boolean boolean0 = dateTimeZone0.isStandardOffset(31083597720000L);
      assertTrue(boolean0);
      
      long long0 = dateTimeZone0.convertLocalToUTC(1453L, true);
      assertEquals((-3598547L), long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, CALLS_REAL_METHODS);
      doReturn((-158945115), 87).when(dateTimeZone0).getOffset(anyLong());
      doReturn((-1015L), 2928L).when(dateTimeZone0).nextTransition(anyLong());
      DateTimeZone.setDefault(dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      dateTimeZone1.convertLocalToUTC((long) (-158945115), false);
      // Undeclared exception!
      try { 
        CachedDateTimeZone.forZone(dateTimeZone1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Id must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test32()  throws Throwable  {
      DateTimeZone.forTimeZone((TimeZone) null);
      Locale locale0 = Locale.FRANCE;
      MonthDay monthDay0 = new MonthDay();
      monthDay0.toString("yiw6h+~R,fR[dK7reW", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test33()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
      MonthDay monthDay0 = MonthDay.now();
      Locale locale0 = Locale.GERMANY;
      monthDay0.toString("&!Yq`UJT", locale0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1, 1, 1, 1, 1);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      MonthDay monthDay0 = MonthDay.now();
      Locale locale0 = Locale.ENGLISH;
      try { 
        monthDay0.toString("t^`>{npFt^qMKV:Z[", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.convertLocalToUTC((-2469L), true);
      try { 
        DateTimeZone.forOffsetHoursMinutes(1, (-717));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -717
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test36()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Locale locale0 = Locale.FRANCE;
      MonthDay monthDay0 = new MonthDay((Chronology) buddhistChronology0);
      monthDay0.toString("83Dh.7-Z{f", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test37()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      MonthDay monthDay0 = new MonthDay((-3531L));
      monthDay0.toString("GMT-", locale0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeZone.setNameProvider((NameProvider) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3289));
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      MonthDay monthDay0 = new MonthDay((Chronology) julianChronology0);
      Locale locale0 = Locale.GERMANY;
      try { 
        monthDay0.toString("cUtU1wIhEhh~x", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test39()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(31536000000L);
      Locale locale0 = Locale.TAIWAN;
      monthDay0.toString("8!D(_v-`8Vulm]l", locale0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(80);
      dateTimeZone0.getShortName((-2755L));
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      Locale locale0 = Locale.TAIWAN;
      try { 
        monthDay0.toString(",X+", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Locale locale0 = new Locale("D/xnO?Gfy$gE~TewBe-", "w");
      try { 
        monthDay0.toString("D/xnO?Gfy$gE~TewBe-", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, CALLS_REAL_METHODS);
      doReturn((-2214), 120, (-2214), (-2214), 106).when(dateTimeZone0).getOffset(anyLong());
      doReturn(false).when(dateTimeZone0).isFixed();
      DateTimeZone.setDefault(dateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      dateTimeZone1.isLocalDateTimeGap(localDateTime0);
      MonthDay monthDay0 = new MonthDay((long) 120);
      Locale locale0 = Locale.CHINESE;
      try { 
        monthDay0.toString("org.joda.time.Partial", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test43()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, CALLS_REAL_METHODS);
      doReturn((-84972390), (-84972390), (-84972390), 18).when(dateTimeZone0).getOffset(anyLong());
      doReturn((long)(-84972390), (long)(-84972390)).when(dateTimeZone0).nextTransition(anyLong());
      DateTimeZone.setDefault(dateTimeZone0);
      MonthDay monthDay0 = MonthDay.now();
      assertEquals(17, monthDay0.getDayOfMonth());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      long long0 = dateTimeZone1.convertLocalToUTC((long) (-84972390), true);
      assertEquals((-84972408L), long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      long long0 = fixedDateTimeZone0.convertLocalToUTC(10800000L, true);
      assertEquals(10800000L, long0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00");
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test45()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-158945115), false);
      assertEquals((-162545115L), long0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forID("+00:00:00.087");
      assertEquals("+00:00:00.087", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test46()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-1190L));
      Locale locale0 = Locale.ENGLISH;
      monthDay0.toString("+&K@TP[2c<l&", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("*'^ZJdh,+L");
      DateTimeZone.forTimeZone(timeZone0);
      Date date0 = new Date((-158945202L));
      MonthDay monthDay0 = MonthDay.fromDateFields(date0);
      Locale locale0 = Locale.ROOT;
      monthDay0.toString("SCj1,>]b^o{.RNgo", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test48()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Locale locale0 = Locale.TAIWAN;
      monthDay0.toString("+ B#q9)Rko8sg%", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test49()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      DateTimeZone.setDefault(dateTimeZone0);
      MonthDay monthDay0 = MonthDay.now();
      Locale locale0 = Locale.CANADA_FRENCH;
      monthDay0.toString("$ey0C<l:|r*}", locale0);
      assertEquals(18, monthDay0.getDayOfMonth());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test50()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertNotNull(dateTimeZone0);
      
      MonthDay monthDay0 = MonthDay.now();
      Locale locale0 = Locale.CANADA_FRENCH;
      long long0 = dateTimeZone0.convertLocalToUTC((long) 1, false);
      assertEquals((-3599999L), long0);
      
      monthDay0.toString("$ey0C<l:|r*}", locale0);
      assertEquals(18, monthDay0.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, CALLS_REAL_METHODS);
      doReturn((-158945115), (-158945115), 1765, 87).when(dateTimeZone0).getOffset(anyLong());
      doReturn(false).when(dateTimeZone0).isFixed();
      doReturn(0L, 0L).when(dateTimeZone0).nextTransition(anyLong());
      DateTimeZone.setDefault(dateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      boolean boolean0 = dateTimeZone1.isLocalDateTimeGap(localDateTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test52()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(289L);
      Locale locale0 = Locale.JAPANESE;
      monthDay0.toString("x8_?EV^Rk;&X", locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test53()  throws Throwable  {
      DateTimeZone.getNameProvider();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 0);
      TimeZone.getDefault();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      CachedDateTimeZone cachedDateTimeZone1 = CachedDateTimeZone.forZone(dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeZone dateTimeZone2 = DateTimeZone.getDefault();
      cachedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      DateTimeZone dateTimeZone3 = DateTimeZone.getDefault();
      dateTimeZone1.previousTransition(1566095262403L);
      long long0 = fixedDateTimeZone0.convertLocalToUTC(1566095262403L, true);
      assertEquals(1566095262403L, long0);
      
      String string0 = dateTimeZone3.getShortName((long) (-3599));
      assertEquals("+01:00", string0);
      
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      Locale locale0 = Locale.TAIWAN;
      monthDay0.toString("C8%x;", locale0);
      DateTimeZone dateTimeZone4 = DateTimeZone.forOffsetMillis(515);
      Integer integer0 = new Integer(58);
      dateTimeZone2.equals(integer0);
      DateTimeUtils.setCurrentMillisOffset((-1799L));
      CachedDateTimeZone.forZone(dateTimeZone1);
      long long1 = dateTimeZone4.getMillisKeepLocal(cachedDateTimeZone1, 2780L);
      assertEquals(3295L, long1);
      assertEquals("+00:00:00.515", dateTimeZone4.getID());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test54()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertNotNull(dateTimeZone0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now();
      MonthDay monthDay0 = MonthDay.now();
      Locale locale0 = Locale.CANADA_FRENCH;
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      
      monthDay0.toString("$ey0C<l:|r*}", locale0);
      assertEquals(8, monthDay0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test55()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Locale locale0 = Locale.CANADA_FRENCH;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertEquals("+01:00", dateTimeZone0.getID());
      
      monthDay0.toString("$ey0C<l:|r*}", locale0);
      assertEquals(18, monthDay0.getDayOfMonth());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test56()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      MonthDay monthDay0 = MonthDay.now();
      Locale locale0 = Locale.CANADA_FRENCH;
      monthDay0.toString("$ey0C<l:|r*}", locale0);
  }
}

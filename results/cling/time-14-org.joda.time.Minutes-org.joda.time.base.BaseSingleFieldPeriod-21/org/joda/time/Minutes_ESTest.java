/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 23:11:45 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Minutes_ESTest extends Minutes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      Minutes minutes1 = Minutes.standardMinutesIn(minutes0);
      assertEquals(Integer.MIN_VALUE, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test01()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null, (Chronology) null);
      Days days0 = Days.daysIn(mutableInterval0);
      Minutes minutes0 = Minutes.standardMinutesIn(days0);
      assertEquals(1566083498271L, mutableInterval0.getEndMillis());
      
      LocalTime localTime0 = LocalTime.now();
      Minutes minutes1 = Minutes.minutesBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      assertSame(minutes1, minutes0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Minutes minutes0 = Minutes.standardMinutesIn(mutablePeriod0);
      Minutes minutes1 = Minutes.ONE;
      Minutes minutes2 = minutes0.plus(minutes1);
      assertSame(minutes2, minutes1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Period period0 = new Period();
      Minutes.standardMinutesIn(period0);
      Minutes minutes0 = Minutes.THREE;
      Minutes minutes1 = Minutes.standardMinutesIn(minutes0);
      assertSame(minutes1, minutes0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1L));
      Minutes minutes0 = Minutes.standardMinutesIn(mutablePeriod0);
      Minutes minutes1 = Minutes.MAX_VALUE;
      Minutes minutes2 = minutes0.plus(minutes1);
      assertEquals(0, minutes0.getMinutes());
      assertSame(minutes2, minutes1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(280);
      Minutes.standardMinutesIn(minutes0);
      LocalTime localTime0 = LocalTime.now();
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadablePartial) localTime0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1L));
      LocalDate localDate0 = new LocalDate(1L);
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      Minutes minutes1 = Minutes.standardMinutesIn(mutablePeriod0);
      assertEquals(0, minutes1.getMinutes());
      assertSame(minutes1, minutes0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(Integer.MIN_VALUE).when(dateTimeZone0).getOffset(anyLong());
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      Minutes minutes0 = Minutes.minutesBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      Minutes.standardMinutesIn(minutes0);
      assertEquals(1566083496417L, mutableDateTime0.getMillis());
      
      Minutes minutes1 = Minutes.minutes(2);
      assertEquals(2, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(604800L).when(dateTimeZone0).getMillisKeepLocal(any(org.joda.time.DateTimeZone.class) , anyLong());
      LocalDate localDate0 = new LocalDate(1030L, dateTimeZone0);
      LocalDate localDate1 = localDate0.minusMonths((-643));
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) localDate1, (ReadablePartial) localDate0);
      Minutes minutes1 = Minutes.minutesBetween((ReadablePartial) localDate0, (ReadablePartial) localDate1);
      int int0 = minutes0.compareTo((BaseSingleFieldPeriod) minutes1);
      assertEquals(28180800, minutes1.getMinutes());
      assertEquals((-1), int0);
      assertEquals((-28180800), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Interval interval0 = new Interval((-509L), (-9L));
      Seconds seconds0 = Seconds.secondsIn(interval0);
      Minutes minutes0 = seconds0.toStandardMinutes();
      Minutes minutes1 = Minutes.THREE;
      int int0 = minutes1.compareTo((BaseSingleFieldPeriod) minutes0);
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Interval interval0 = new Interval((-509L), (-1L));
      Seconds seconds0 = Seconds.secondsIn(interval0);
      Minutes minutes0 = seconds0.toStandardMinutes();
      int int0 = minutes0.compareTo((BaseSingleFieldPeriod) minutes0);
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Minutes minutes0 = Minutes.standardMinutesIn(seconds0);
      // Undeclared exception!
      try { 
        minutes0.ZERO.compareTo((BaseSingleFieldPeriod) seconds0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Minutes cannot be compared to class org.joda.time.Seconds
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(604800L).when(dateTimeZone0).getMillisKeepLocal(any(org.joda.time.DateTimeZone.class) , anyLong());
      LocalDate localDate0 = new LocalDate(1030L, dateTimeZone0);
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      Minutes minutes1 = minutes0.plus(minutes0);
      assertEquals(0, minutes1.getMinutes());
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Minutes minutes0 = Minutes.parseMinutes((String) null);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Minutes.parseMinutes("9Z0|&3<6,{gLR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"9Z0|&3<6,{gLR\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Minutes minutes0 = Minutes.minutesIn((ReadableInterval) null);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      boolean boolean0 = minutes0.ZERO.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      Seconds seconds0 = Seconds.TWO;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      int int0 = minutes0.MAX_VALUE.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Interval interval0 = new Interval((-959L), 392L);
      Duration duration0 = Duration.standardMinutes(604800000L);
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      Minutes minutes0 = Minutes.minutesIn(interval1);
      MutablePeriod mutablePeriod0 = minutes0.toMutablePeriod();
      Weeks weeks0 = Weeks.standardWeeksIn(mutablePeriod0);
      Minutes minutes1 = weeks0.toStandardMinutes();
      boolean boolean0 = minutes1.equals(minutes0);
      assertTrue(boolean0);
      assertEquals(604800000, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      Hours hours0 = minutes0.toStandardHours();
      boolean boolean0 = minutes0.equals(hours0);
      assertEquals(0, hours0.getHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(0);
      Object object0 = new Object();
      boolean boolean0 = minutes0.ONE.equals(object0);
      assertEquals(0, minutes0.getMinutes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-31));
      boolean boolean0 = minutes0.THREE.equals(minutes0);
      assertEquals((-31), minutes0.getMinutes());
      assertFalse(boolean0);
  }
}

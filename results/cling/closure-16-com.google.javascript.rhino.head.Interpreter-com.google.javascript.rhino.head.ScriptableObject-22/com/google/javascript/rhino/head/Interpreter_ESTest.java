/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 07:09:40 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.EcmaError;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.MemberBox;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeGenerator;
import com.google.javascript.rhino.head.NativeJavaArray;
import com.google.javascript.rhino.head.NativeJavaConstructor;
import com.google.javascript.rhino.head.NativeJavaMethod;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Interpreter_ESTest extends Interpreter_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test0()  throws Throwable  {
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Scriptable) null).when(scriptable0).getParentScope();
      doReturn((Scriptable) null).when(scriptable0).getPrototype();
      doReturn((String) null).when(scriptable0).toString();
      NativeJavaArray nativeJavaArray0 = null;
      try {
        nativeJavaArray0 = new NativeJavaArray(scriptable0, scriptable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test1()  throws Throwable  {
      Context context0 = new Context();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test2()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context(contextFactory0);
      ImporterTopLevel importerTopLevel0 = null;
      try {
        importerTopLevel0 = new ImporterTopLevel(context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Context associated with current Thread
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test3()  throws Throwable  {
      NativeContinuation nativeContinuation0 = mock(NativeContinuation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(nativeContinuation0).getAssociatedValue(any());
      doReturn((Scriptable) null).when(nativeContinuation0).getParentScope();
      doReturn((Scriptable) null).when(nativeContinuation0).getPrototype();
      doReturn((String) null).when(nativeContinuation0).toString();
      NativeJavaArray nativeJavaArray0 = null;
      try {
        nativeJavaArray0 = new NativeJavaArray(nativeContinuation0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test4()  throws Throwable  {
      NativeJavaConstructor nativeJavaConstructor0 = new NativeJavaConstructor((MemberBox) null);
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeJavaConstructor0, true);
      assertTrue(nativeGenerator0.isEmpty());
      assertTrue(nativeGenerator0.isExtensible());
      assertTrue(nativeGenerator0.isSealed());
      assertTrue(nativeJavaConstructor0.isEmpty());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test5()  throws Throwable  {
      NativeContinuation nativeContinuation0 = mock(NativeContinuation.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(nativeContinuation0).has(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      doReturn((Scriptable) null, (Scriptable) null, (Scriptable) null, (Scriptable) null).when(nativeContinuation0).getPrototype();
      NativeContinuation nativeContinuation1 = new NativeContinuation();
      boolean boolean0 = nativeContinuation1.isGenericDescriptor(nativeContinuation0);
      assertTrue(nativeContinuation1.isExtensible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test6()  throws Throwable  {
      Float float0 = new Float(0.0);
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptableObject(float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test7()  throws Throwable  {
      MemberBox[] memberBoxArray0 = new MemberBox[0];
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(memberBoxArray0, "error reporter");
      EcmaError ecmaError0 = null;
      try {
        ecmaError0 = new EcmaError(nativeJavaMethod0, "language version", 4, 0, "error reporter");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test8()  throws Throwable  {
      Script script0 = mock(Script.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(script0).exec(any(com.google.javascript.rhino.head.Context.class) , any(com.google.javascript.rhino.head.Scriptable.class));
      Scriptable scriptable0 = JavaAdapter.runScript(script0);
      assertEquals("global", scriptable0.getClassName());
  }
}

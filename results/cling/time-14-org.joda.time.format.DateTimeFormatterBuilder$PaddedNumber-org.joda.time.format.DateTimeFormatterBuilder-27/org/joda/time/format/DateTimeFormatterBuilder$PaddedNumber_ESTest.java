/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 03:17:40 GMT 2019
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeFieldType;
import org.joda.time.Partial;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DateTimeFormatterBuilder$PaddedNumber_ESTest extends DateTimeFormatterBuilder$PaddedNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Date date0 = new Date(16);
      YearMonth yearMonth0 = YearMonth.fromDateFields(date0);
      Partial partial0 = new Partial(dateTimeFieldType0, 16);
      partial0.getFormatter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, true, 16);
      Locale locale0 = Locale.JAPAN;
      dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
      assertEquals(16, stringBuffer0.length());
      assertEquals("\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Locale locale0 = new Locale("_fakE_o4fmeOD", "_fakE_o4fmeOD");
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 11, true);
      Date date0 = new Date((-50L));
      YearMonth yearMonth0 = YearMonth.fromDateFields(date0);
      Partial partial0 = new Partial(dateTimeFieldType0, 11);
      partial0.getFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("_fakE_o4fmeOD");
      dateTimeFormatterBuilder_FixedNumber0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
      assertEquals("_fakE_o4fmeOD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", stringBuffer0.toString());
      assertEquals(24, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Date date0 = new Date(16);
      YearMonth yearMonth0 = YearMonth.fromDateFields(date0);
      Partial partial0 = new Partial(dateTimeFieldType0, 16);
      partial0.getFormatter();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, true, 16);
      Locale locale0 = Locale.JAPAN;
      dateTimeFormatterBuilder_PaddedNumber0.printTo((Writer) stringWriter0, (ReadablePartial) yearMonth0, locale0);
      assertEquals("\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", stringWriter0.toString());
  }
}

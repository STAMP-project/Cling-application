/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 08:23:17 GMT 2019
 */

package org.mockito.asm.tree.analysis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.Label;
import org.mockito.asm.Type;
import org.mockito.asm.tree.IincInsnNode;
import org.mockito.asm.tree.LabelNode;
import org.mockito.asm.tree.LdcInsnNode;
import org.mockito.asm.tree.LookupSwitchInsnNode;
import org.mockito.asm.tree.MultiANewArrayInsnNode;
import org.mockito.asm.tree.VarInsnNode;
import org.mockito.asm.tree.analysis.BasicValue;
import org.mockito.asm.tree.analysis.BasicVerifier;
import org.mockito.asm.tree.analysis.SourceValue;
import org.mockito.asm.tree.analysis.Value;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BasicVerifier_ESTest extends BasicVerifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      VarInsnNode varInsnNode0 = new VarInsnNode(10, 8);
      Value value0 = basicVerifier0.newOperation(varInsnNode0);
      Value value1 = basicVerifier0.copyOperation(varInsnNode0, value0);
      assertEquals(2, value1.getSize());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      Type type0 = Type.CHAR_TYPE;
      Value value0 = basicVerifier0.newValue(type0);
      SourceValue sourceValue0 = new SourceValue(58);
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(sourceValue0);
      IincInsnNode iincInsnNode0 = new IincInsnNode(11, (-2146));
      basicVerifier0.unaryOperation(iincInsnNode0, value0);
      Value value1 = basicVerifier0.copyOperation(ldcInsnNode0, value0);
      assertSame(value1, value0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      MultiANewArrayInsnNode multiANewArrayInsnNode0 = new MultiANewArrayInsnNode("J`'UX", 161);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      basicVerifier0.copyOperation(multiANewArrayInsnNode0, basicValue0);
      VarInsnNode varInsnNode0 = new VarInsnNode(14, (-1586));
      Value value0 = basicVerifier0.newOperation(varInsnNode0);
      assertFalse(value0.equals((Object)basicValue0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      MultiANewArrayInsnNode multiANewArrayInsnNode0 = new MultiANewArrayInsnNode("J`'UX", 161);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      basicVerifier0.copyOperation(multiANewArrayInsnNode0, basicValue0);
      // Undeclared exception!
      try { 
        basicVerifier0.newOperation(multiANewArrayInsnNode0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      Type type0 = Type.CHAR_TYPE;
      Value value0 = basicVerifier0.newValue(type0);
      Label label0 = new Label();
      LabelNode labelNode0 = new LabelNode(label0);
      LabelNode[] labelNodeArray0 = new LabelNode[3];
      LookupSwitchInsnNode lookupSwitchInsnNode0 = new LookupSwitchInsnNode(labelNode0, (int[]) null, labelNodeArray0);
      basicVerifier0.unaryOperation(lookupSwitchInsnNode0, value0);
      BasicValue basicValue0 = (BasicValue)basicVerifier0.copyOperation(lookupSwitchInsnNode0, value0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      SourceValue sourceValue0 = new SourceValue(58);
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(sourceValue0);
      Value value0 = basicVerifier0.newOperation(ldcInsnNode0);
      BasicValue basicValue0 = (BasicValue)basicVerifier0.copyOperation(ldcInsnNode0, value0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      MultiANewArrayInsnNode multiANewArrayInsnNode0 = new MultiANewArrayInsnNode("J`'UX", 161);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      basicVerifier0.copyOperation(multiANewArrayInsnNode0, basicValue0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Value value0 = basicVerifier0.naryOperation(multiANewArrayInsnNode0, linkedList0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      VarInsnNode varInsnNode0 = new VarInsnNode(28, 28);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      Value value0 = basicVerifier0.copyOperation(varInsnNode0, basicValue0);
      assertEquals(2, value0.getSize());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 04:40:21 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.EvaluatorException;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.JavaMembers;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeBoolean;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeGenerator;
import com.google.javascript.rhino.head.NativeJavaMethod;
import com.google.javascript.rhino.head.NativeJavaTopPackage;
import com.google.javascript.rhino.head.NativeWith;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NativeArray_ESTest extends NativeArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test00()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(7);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes("error reporter");
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property error reporter not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(926L);
      IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(10000, nativeArray0, false);
      assertFalse(idFunctionObject0.isSealed());
      
      idFunctionObject0.delete("escape");
      assertEquals(1, idFunctionObject0.methodId());
      assertEquals("Array", idFunctionObject0.getFunctionName());
      assertFalse(idFunctionObject0.isEmpty());
      assertEquals(1, idFunctionObject0.getArity());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeArray.setMaximumInitialCapacity(0);
      NativeArray nativeArray0 = new NativeArray(926L);
      IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(10000, nativeArray0, false);
      assertEquals(1, idFunctionObject0.getLength());
      assertEquals(1, idFunctionObject0.methodId());
      
      nativeArray0.delete((-1436251657));
      assertEquals(926L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeError0, false);
      NativeArray.init(nativeGenerator0, true);
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Integer[] integerArray0 = nativeArray0.getIndexIds();
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeArray.init(nativeArray0, true);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes(2);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property 2 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes((-1));
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property -1 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(926L);
      nativeArray0.exportAsJSClass(10000, nativeArray0, false);
      NativeArray nativeArray1 = new NativeArray(13);
      nativeArray1.getIndexIds();
      // Undeclared exception!
      try { 
        nativeArray0.getIndexIds();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 24
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeError0, false);
      NativeArray.init(nativeGenerator0, true);
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.defineOwnProperty((Context) null, (Object) null, (ScriptableObject) nativeError0, false);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes((-961));
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property -961 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(926L);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      nativeArray0.defineOwnProperty(context0, (Object) context0, (ScriptableObject) importerTopLevel0, false);
      nativeArray0.exportAsJSClass(160, nativeArray0, false);
      // Undeclared exception!
      try { 
        nativeArray0.getIndexIds();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 24
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      NativeArray.init(nativeBoolean0, false);
      NativeArray nativeArray0 = new NativeArray(13);
      nativeArray0.delete(0);
      assertEquals("object", nativeArray0.getTypeOf());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0);
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Float float0 = new Float((double) 100);
      nativeArray0.getOwnPropertyDescriptor(context0, float0);
      assertEquals(0L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test11()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0);
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      nativeArray0.delete(118);
      assertEquals("Array", nativeArray0.getClassName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.put(779, (Scriptable) nativeArray0, (Object) nativeArray0.UNINITIALIZED_CONST);
      NativeArray.init(nativeArray0, true);
      assertEquals(780L, nativeArray0.getLength());
      assertEquals(780L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeArray.setMaximumInitialCapacity(0);
      NativeArray nativeArray0 = new NativeArray(10000);
      NativeArray.init(nativeArray0, false);
      Context context0 = Context.enter();
      Object object0 = nativeArray0.equivalentValues(context0);
      nativeArray0.getOwnPropertyDescriptor(context0, object0);
      assertEquals(10000L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeArray.init(nativeError0, true);
      NativeArray nativeArray0 = new NativeArray(8);
      nativeArray0.delete((-2163));
      assertFalse(nativeArray0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeArray nativeArray1 = new NativeArray(1);
      ContextFactory contextFactory0 = new ContextFactory();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeArray0, true);
      IdFunctionObject idFunctionObject0 = nativeArray1.exportAsJSClass(5556, nativeGenerator0, true);
      Context context0 = contextFactory0.enter();
      // Undeclared exception!
      try { 
        nativeArray0.execIdCall(idFunctionObject0, context0, idFunctionObject0, nativeArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.put((-316), (Scriptable) nativeArray0, (Object) nativeArray0.PERMANENT);
      assertFalse(nativeArray0.isEmpty());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test17()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeArray nativeArray0 = new NativeArray(1678L);
      nativeArray0.exportAsJSClass(2, nativeError0, true);
      // Undeclared exception!
      try { 
        nativeArray0.delete(4);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Cannot modify a property of a sealed object: 4.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      Class<NativeJavaTopPackage> class0 = NativeJavaTopPackage.class;
      JavaMembers javaMembers0 = new JavaMembers(nativeArray0, class0);
      NativeJavaMethod nativeJavaMethod0 = javaMembers0.ctors;
      Float float0 = new Float((double) 2);
      nativeArray0.put("", (Scriptable) nativeJavaMethod0, (Object) float0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      assertEquals("object", importerTopLevel0.getTypeOf());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test19()  throws Throwable  {
      NativeArray.setMaximumInitialCapacity(0);
      NativeArray nativeArray0 = new NativeArray(926L);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      nativeArray0.defineOwnProperty(context0, (Object) context0, (ScriptableObject) importerTopLevel0, false);
      nativeArray0.exportAsJSClass(160, nativeArray0, false);
      // Undeclared exception!
      try { 
        nativeArray0.getIndexIds();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 24
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test20()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1152L);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes(8);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property 8 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.put(0, (Scriptable) nativeArray0, (Object) nativeArray0.DONTENUM);
      NativeArray.init(nativeArray0, true);
      assertEquals(5L, nativeArray0.jsGet_length());
      assertEquals(5L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test22()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(926L);
      Object[] objectArray0 = new Object[8];
      IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(10000, nativeArray0, false);
      NativeArray nativeArray1 = new NativeArray(objectArray0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context(contextFactory0);
      nativeArray1.defineOwnProperty(context0, (Object) nativeArray0, (ScriptableObject) idFunctionObject0, false);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeWith nativeWith0 = new NativeWith(importerTopLevel0, nativeArray0);
      nativeArray0.put(8, (Scriptable) nativeWith0, (Object) importerTopLevel0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test24()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context(contextFactory0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      nativeArray0.getOwnPropertyDescriptor(context0, importerTopLevel0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test25()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(926L);
      IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(10000, nativeArray0, false);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context(contextFactory0);
      nativeArray0.defineOwnProperty(context0, (Object) nativeArray0, (ScriptableObject) idFunctionObject0, false);
      nativeArray0.has((-58), (Scriptable) idFunctionObject0);
  }
}

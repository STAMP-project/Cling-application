/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 23:09:58 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.Days;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.IslamicChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MutableInterval_ESTest extends MutableInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableInterval.parse("sS'K^*_qi7F'Ggy?j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: sS'K^*_qi7F'Ggy?j
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test1()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      MutableInterval mutableInterval0 = new MutableInterval((ReadablePeriod) null, dateTime0);
      assertEquals(1566083395171L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test2()  throws Throwable  {
      Instant instant0 = Instant.now();
      Days days0 = Days.MAX_VALUE;
      MutableInterval mutableInterval0 = new MutableInterval(instant0, days0);
      assertEquals(1566083395094L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test3()  throws Throwable  {
      ReadableInstant readableInstant0 = mock(ReadableInstant.class, new ViolatedAssumptionAnswer());
      doReturn((Chronology) null).when(readableInstant0).getChronology();
      doReturn(0L).when(readableInstant0).getMillis();
      MutableInterval mutableInterval0 = new MutableInterval((ReadableDuration) null, readableInstant0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(mutableInterval0, (PeriodType) null);
      MutableInterval mutableInterval1 = new MutableInterval(mutablePeriod0, (ReadableInstant) null);
      assertEquals(1566083394980L, mutableInterval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parse("IG4V=X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: IG4V=X
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ReadableInstant readableInstant0 = mock(ReadableInstant.class, new ViolatedAssumptionAnswer());
      doReturn((Chronology) null).when(readableInstant0).getChronology();
      doReturn(0L).when(readableInstant0).getMillis();
      MutableInterval mutableInterval0 = new MutableInterval((ReadableDuration) null, readableInstant0);
      MutableInterval mutableInterval1 = new MutableInterval(mutableInterval0);
      assertTrue(mutableInterval1.equals((Object)mutableInterval0));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MutableInterval mutableInterval1 = new MutableInterval(mutableInterval0, islamicChronology0);
      assertFalse(mutableInterval1.equals((Object)mutableInterval0));
  }
}

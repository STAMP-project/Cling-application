/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 20:57:31 GMT 2019
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.DurationFormatUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DurationFormatUtils_ESTest extends DurationFormatUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test00()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration((-3935L), "Search and Replace array lengths don't match: ", true);
      assertEquals("-935earch an0 Replace arra0 length-3 0ont match: ", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test01()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration((-520L), "/H~F~y^]YVBM5X*");
      assertEquals("/0~F~0^]YVB05X*", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-849), "");
      String string0 = DurationFormatUtils.formatDurationWords(397L, true, true);
      assertEquals("0 seconds", string0);
      
      String string1 = DurationFormatUtils.formatPeriod((long) (-849), 1161L, "", true, (TimeZone) simpleTimeZone0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-849), "");
      String string0 = DurationFormatUtils.formatDuration(1L, "");
      String string1 = DurationFormatUtils.formatPeriod((long) (-849), 1161L, "", true, (TimeZone) simpleTimeZone0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DurationFormatUtils.formatDurationWords((-848L), true, false);
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((-1751)).when(timeZone0).getDSTSavings();
      doReturn(4787, 4787, (-1751), (-1751), 4787).when(timeZone0).getOffset(anyLong());
      doReturn((-1751), 4787, 4787, (-2096), 4787).when(timeZone0).getRawOffset();
      doReturn(true, false, false, false, false).when(timeZone0).inDaylightTime(any(java.util.Date.class));
      // Undeclared exception!
      DurationFormatUtils.formatPeriod((-848L), 0L, "0 seconds", false, timeZone0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DurationFormatUtils.formatDuration(0L, "");
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((-1751)).when(timeZone0).getDSTSavings();
      doReturn(4787, 4787, (-1751), (-1751), 4787).when(timeZone0).getOffset(anyLong());
      doReturn((-1751), 4787, 4787, (-2096), 4787).when(timeZone0).getRawOffset();
      doReturn(true, false, false, false, false).when(timeZone0).inDaylightTime(any(java.util.Date.class));
      // Undeclared exception!
      DurationFormatUtils.formatPeriod((-848L), 0L, "0 seconds", false, timeZone0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      DurationFormatUtils.formatDuration(0L, "");
      String string0 = DurationFormatUtils.formatDurationWords(60000L, true, true);
      assertEquals("1 minute", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      DurationFormatUtils.formatDuration(0L, "");
      String string0 = DurationFormatUtils.formatDurationWords((-848L), true, false);
      assertEquals("0 seconds", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationISO(1L);
      assertEquals("P0Y0M0DT0H0M0.001S", string0);
      
      String string1 = DurationFormatUtils.formatPeriod(1L, (-1525L), "P0Y0M0DT0H0M0.001S");
      assertEquals("P0Y0-10DT07430-10.0013598474", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords((-848L), true, false);
      assertEquals("0 seconds", string0);
      
      String string1 = DurationFormatUtils.formatPeriodISO((-1492L), (-1802L));
      assertEquals("P-1Y11M30DT23H59M59.690S", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(0L, "");
      assertEquals("", string0);
      
      String string1 = DurationFormatUtils.formatPeriodISO((-1492L), (-1802L));
      assertEquals("P-1Y11M30DT23H59M59.690S", string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DurationFormatUtils.formatDuration(0L, "");
      String string0 = DurationFormatUtils.formatPeriod((-848L), (-1492L), "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(stringBuffer0);
      boolean boolean0 = durationFormatUtils_Token0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0, 0, 0).when(timeZone0).getRawOffset();
      String string0 = DurationFormatUtils.formatPeriod(1696L, 1696L, "Sdl+lM0B5Qq", false, timeZone0);
      assertEquals("00l+l00B5Qq", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test14()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriod(1L, (-1525L), "P0Y0M0DT0H0M0.001S");
      assertEquals("P0Y0-10DT07430-10.0013598474", string0);
      
      String string1 = DurationFormatUtils.formatDuration(1L, "", true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  @Ignore
  public void test15()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords((-37L), true, true);
      assertEquals("0 seconds", string0);
      
      String string1 = DurationFormatUtils.formatDuration((-37L), "");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test16()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords((-376L), false, true);
      assertEquals("0 days", string0);
      
      String string1 = DurationFormatUtils.formatDuration((-376L), "pb*aJ");
      assertEquals("pb*aJ", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test17()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(3600000L, true, true);
      assertEquals("1 hour", string0);
      
      String string1 = DurationFormatUtils.formatDuration((-37L), "");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  @Ignore
  public void test18()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriod(3703L, 3703L, "\"aUS nayz");
      assertEquals("\"aU0 na0z", string0);
      
      String string1 = DurationFormatUtils.formatDurationWords(2564L, false, false);
      assertEquals("0 days 0 hours 0 minutes 2 seconds", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test19()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords((-848L), true, false);
      assertEquals("0 seconds", string0);
      
      String string1 = DurationFormatUtils.formatPeriod((-848L), (-1492L), "");
      assertFalse(string1.equals((Object)string0));
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 02:09:55 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LocalDateTime_ESTest extends LocalDateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test000()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertEquals(1566094174578L, dateTime0.getMillis());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2145));
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-2145), true);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      LocalDateTime localDateTime0 = new LocalDateTime((-1913L), dateTimeZone0);
      // Undeclared exception!
      try { 
        LocalDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      YearMonth yearMonth0 = new YearMonth((long) (-41));
      assertEquals(1970, yearMonth0.getYear());
      
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(0);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      YearMonth yearMonth0 = new YearMonth((-637L));
      assertEquals(1, yearMonth0.getMonthOfYear());
      
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(0);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      MonthDay monthDay0 = new MonthDay((-788L));
      assertEquals(1, monthDay0.getMonthOfYear());
      
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(2077);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      YearMonth yearMonth0 = new YearMonth((-637L));
      boolean boolean0 = localDateTime0.equals(yearMonth0);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertFalse(boolean0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      assertEquals("UTC", dateTimeZone0.getID());
      
      MonthDay monthDay0 = new MonthDay((-626L));
      assertEquals(1, monthDay0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-1327L));
      boolean boolean0 = localDateTime0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      localDateTime0.isSupported(durationFieldType0);
      MonthDay monthDay0 = new MonthDay((-1800L));
      assertEquals(1, monthDay0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gregorianChronology0);
      gregorianChronology0.set(localDateTime0, (-1302L));
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      // Undeclared exception!
      try { 
        localDateTime0.getField(604800, (Chronology) ethiopicChronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 604800
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-1319L));
      try { 
        DateTimeZone.forOffsetHoursMinutes((-147600000), (-147600000));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -147600000
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 43);
      assertEquals("+00:43", dateTimeZone0.toString());
      
      YearMonth yearMonth0 = new YearMonth((long) (-1781));
      assertEquals(1, yearMonth0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test012()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      localDateTime0.plusSeconds(0);
      assertEquals(1566094171515L, dateTime0.getMillis());
      
      MonthDay monthDay0 = new MonthDay((-1493L));
      assertEquals(1, monthDay0.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) julianChronology0);
      LocalDateTime localDateTime1 = new LocalDateTime((-626L), dateTimeZone0);
      LocalDateTime localDateTime2 = localDateTime0.plusSeconds((-758));
      assertNotSame(localDateTime2, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-1319L));
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((-41), (-41), (-67));
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(gregorianCalendar0);
      LocalDateTime localDateTime1 = new LocalDateTime((long) (-67), (Chronology) null);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      YearMonth yearMonth0 = new YearMonth((-637L));
      assertEquals(1970, yearMonth0.getYear());
      
      LocalDateTime localDateTime1 = localDateTime0.plusHours(0);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusHours((-1580));
      assertNotSame(localDateTime1, localDateTime0);
      
      MonthDay monthDay0 = new MonthDay((long) (-455));
      assertEquals(1, monthDay0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test018()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((-637L));
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((long) (-3683));
      // Undeclared exception!
      try { 
        DateTimeZone.forID("I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'I' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((long) (-67), (Chronology) null);
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test021()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.toDate();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      long long0 = gregorianChronology0.set(localDateTime0, (-3600000L));
      assertEquals(1566094153513L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      YearMonth yearMonth0 = new YearMonth((long) (-41));
      assertEquals(1970, yearMonth0.getYear());
      
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes((-160));
      int int0 = localDateTime0.compareTo((ReadablePartial) localDateTime1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      MonthDay monthDay0 = new MonthDay((-788L));
      assertEquals(1, monthDay0.getDayOfMonth());
      
      LocalDateTime localDateTime1 = localDateTime0.plusDays(0);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test024()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gregorianChronology0);
      long long0 = gregorianChronology0.set(localDateTime0, (-1302L));
      assertEquals(1566094152684L, long0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusDays(995);
      int int0 = localDateTime0.compareTo((ReadablePartial) localDateTime1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test025()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeUtils.setCurrentMillisFixed(0);
      DateTime dateTime0 = localDateTime0.toDateTime((ReadableInstant) null);
      assertEquals(1566094152473L, dateTime0.getMillis());
      
      localDateTime0.plusHours(0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTimeZone.forOffsetMillis(0);
      // Undeclared exception!
      try { 
        LocalDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(0);
      assertSame(localDateTime1, localDateTime0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(1140);
      assertNotSame(localDateTime1, localDateTime0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(0);
      assertSame(localDateTime1, localDateTime0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test030()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      DateTimeZone.forOffsetMillis(0);
      localDateTime0.plusWeeks(1548);
      assertEquals(1566094151548L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.getID());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      boolean boolean0 = localDateTime0.equals(julianChronology0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      LocalDateTime localDateTime1 = new LocalDateTime((long) 43);
      boolean boolean0 = localDateTime1.isAfter(localDateTime0);
      assertFalse(boolean0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateTimeZone.forOffsetMillis(0);
      // Undeclared exception!
      try { 
        LocalDateTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
      assertSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      boolean boolean0 = localDateTime0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test036()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      localDateTime0.isSupported(durationFieldType0);
      assertEquals(1566094150046L, dateTime0.getMillis());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      DateTimeZone.forOffsetMillis(0);
      // Undeclared exception!
      try { 
        localDateTime0.getField((-431));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -431
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(11);
      assertEquals("+11:00", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(0);
      assertSame(localDateTime1, localDateTime0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test040()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      DateTimeZone.forOffsetMillis(0);
      localDateTime0.plusSeconds((-1834));
      assertEquals(1566094148908L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test041()  throws Throwable  {
      DateTimeZone.forOffsetMillis(0);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      LocalDateTime.fromCalendarFields(gregorianCalendar0);
      assertEquals("java.util.GregorianCalendar[time=1566094136208,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Amsterdam\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=180,lastRule=java.util.SimpleTimeZone[id=Europe/Amsterdam,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2019,MONTH=7,WEEK_OF_YEAR=34,WEEK_OF_MONTH=4,DAY_OF_MONTH=18,DAY_OF_YEAR=230,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=8,SECOND=56,MILLISECOND=208,ZONE_OFFSET=3600000,DST_OFFSET=3600000]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.plusHours(0);
      assertSame(localDateTime1, localDateTime0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.getID());
      
      LocalDateTime localDateTime1 = localDateTime0.plusHours(29);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTimeZone.forOffsetMillis(0);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("Period does not support field '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'Period does not support field '' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test046()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Date date0 = localDateTime0.toDate();
      assertEquals("Sun Aug 18 04:08:42 CEST 2019", date0.toString());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test047()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      Period period0 = Period.hours(59);
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded(period0, 59);
      DateTimeZone.forOffsetMillis(0);
      int int0 = localDateTime1.compareTo((ReadablePartial) localDateTime0);
      assertEquals(1566094122686L, dateTime0.getMillis());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.withFields(localDateTime0);
      assertEquals(4, localDateTime1.size());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test049()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      DateTimeZone.forOffsetMillis(0);
      localDateTime0.plusDays(0);
      assertEquals(1566094122144L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusDays(1140);
      assertNotSame(localDateTime1, localDateTime0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimeZone.forOffsetHours(11);
      // Undeclared exception!
      try { 
        LocalDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(1566100821480L).when(dateTimeZone0).getMillisKeepLocal(any(org.joda.time.DateTimeZone.class) , anyLong());
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      DateTimeZone.forOffsetHours(120);
      YearMonth yearMonth0 = new YearMonth((-1365L));
      // Undeclared exception!
      try { 
        localDateTime0.compareTo((ReadablePartial) yearMonth0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-41));
      assertEquals("-41:00", dateTimeZone0.toString());
      
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(0);
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-41));
      assertEquals("-41:00", dateTimeZone0.toString());
      
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes((-160));
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test055()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      localDateTime0.plusWeeks(0);
      assertEquals(1566094120716L, dateTime0.getMillis());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-105861870));
      assertEquals("-29:24:21.870", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(168);
      assertNotSame(localDateTime0, localDateTime1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeZone.forOffsetHoursMinutes(1, 1);
      // Undeclared exception!
      try { 
        LocalDateTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      assertEquals("UTC", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-105861870));
      assertEquals("-29:24:21.870", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeZone.forOffsetHours((-41));
      boolean boolean0 = localDateTime0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      localDateTime0.isSupported(durationFieldType0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(292272992);
      assertEquals("+81:11:12.992", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateTimeZone.forOffsetHours((-41));
      // Undeclared exception!
      try { 
        DateTimeZone.forID("-2019-08-18T04:00:54.869");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-2019-08-18T04:00:54.869\" is malformed at \"-08-18T04:00:54.869\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeZone.forOffsetMillis(1);
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimeZone.forID("UTC");
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(128);
      assertEquals("+128:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 43);
      assertEquals("+00:43", dateTimeZone0.toString());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.plusSeconds(0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("-18:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds((-11));
      assertNotSame(localDateTime1, localDateTime0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertEquals("+01:01", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTimeZone.forOffsetHours((-41));
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.plusHours(0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("-18:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test069()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) julianChronology0);
      Date date0 = localDateTime0.toDate();
      assertEquals("Mon Aug 05 04:08:29 CEST 2019", date0.toString());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(11);
      assertEquals("+11:00", dateTimeZone1.getID());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(32);
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("+32:00", dateTimeZone0.getID());
      assertEquals("+32:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeZone.forOffsetHours((-41));
      // Undeclared exception!
      try { 
        DateTimeZone.forID("2019-08-18T04:05:06.725");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '2019-08-18T04:05:06.725' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimeZone.forOffsetHours(32);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("+dW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+dW\" is malformed at \"dW\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeZone.forOffsetHours((-41));
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test074()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(1566100821480L).when(dateTimeZone0).getMillisKeepLocal(any(org.joda.time.DateTimeZone.class) , anyLong());
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(120);
      assertEquals("+120:00", dateTimeZone1.toString());
      
      Date date0 = localDateTime0.toDate();
      assertEquals("Sun Aug 18 04:00:21 CEST 2019", date0.toString());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusDays(0);
      assertSame(localDateTime1, localDateTime0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertEquals("+01:00", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gregorianChronology0);
      Partial partial0 = new Partial(localDateTime0);
      gregorianChronology0.set(partial0, 1450L);
      // Undeclared exception!
      try { 
        LocalDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((-413), 1551, (-2147483580), 0, (-1877), (-2147483580));
      DateMidnight dateMidnight0 = new DateMidnight((long) 0);
      dateMidnight0.withYearOfCentury(0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(gregorianCalendar0);
      // Undeclared exception!
      try { 
        localDateTime0.compareTo((ReadablePartial) localDate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test078()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeUtils.setCurrentMillisFixed(0);
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(0);
      DateTime dateTime0 = localDateTime1.toDateTime((ReadableInstant) null);
      assertEquals(1566094086173L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test079()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds((-2147483050));
      LocalDate localDate0 = new LocalDate(localDateTime1);
      DateTime dateTime0 = localDate0.toDateTime((LocalTime) null);
      assertEquals((-581374314206L), dateTime0.getMillis());
      
      LocalDateTime localDateTime2 = localDateTime1.plusWeeks((-993));
      assertNotSame(localDateTime0, localDateTime2);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test080()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(31);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      Interval interval0 = new Interval((-1), 1304);
      DateTime dateTime0 = interval0.getEnd();
      DateTime dateTime1 = dateTime0.withFields(localDateTime0);
      assertEquals(1566086885355L, dateTime1.getMillis());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      localDateTime0.equals(zonedChronology0);
      assertEquals("+00:00:00.031", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test081()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(31);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = LocalDateTime.now();
      Interval interval0 = new Interval((-1), 1304);
      DateTime dateTime0 = interval0.getEnd();
      DateTime dateTime1 = dateTime0.withFields(localDateTime1);
      assertEquals(1566094084854L, dateTime1.getMillis());
      
      boolean boolean0 = localDateTime0.isAfter(localDateTime1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test082()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(1566100821480L).when(dateTimeZone0).getMillisKeepLocal(any(org.joda.time.DateTimeZone.class) , anyLong());
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.isSupported((DurationFieldType) null);
      DateTimeZone dateTimeZone1 = DateTimeZone.forID((String) null);
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(1255);
      Date date0 = localDateTime0.toDate();
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone1);
      localDateTime1.toDateTime(dateTime0);
      assertEquals(1566094071530L, dateTime0.getMillis());
      assertEquals("Sun Aug 18 04:00:21 CEST 2019", date0.toString());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes((-2147483050));
      LocalDate localDate0 = new LocalDate(localDateTime1);
      localDate0.toDateTime((LocalTime) null);
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test084()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-41));
      assertEquals("-41:00", dateTimeZone0.toString());
      
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((-41), (-41), (-67));
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(gregorianCalendar0);
      DateTime dateTime0 = localDateTime0.toDateTime((ReadableInstant) null);
      assertEquals((-60703085972000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test085()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeZone.forID("UTC");
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      long long0 = gregorianChronology0.set(localDateTime0, (-3600000L));
      assertEquals(1566094055543L, long0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test086()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertEquals("UTC", dateTimeZone0.toString());
      
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((-384), 0, 1989, 57, 59, (-2147483639));
      LocalDate localDate0 = LocalDate.fromCalendarFields(gregorianCalendar0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertEquals((-48017060372000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(31);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      Interval interval0 = new Interval((-1), 1304);
      DateTime dateTime0 = interval0.getEnd();
      dateTime0.withFields(localDateTime0);
      try { 
        DateTimeZone.forOffsetHoursMinutes(31, (-41));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -41
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test088()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(0);
      assertSame(localDateTime1, localDateTime0);
      
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar((-384), 0, 1989, 57, 59, (-2147483639));
      LocalDate localDate0 = LocalDate.fromCalendarFields(gregorianCalendar0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertEquals((-48017060372000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Instant instant0 = dateMidnight0.toInstant();
      DateTime dateTime0 = instant0.toDateTime();
      dateTime0.withTimeAtStartOfDay();
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test090()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(31);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusHours(1304);
      Interval interval0 = new Interval((-1), 1304);
      DateTime dateTime0 = interval0.getEnd();
      DateTime dateTime1 = dateTime0.withFields(localDateTime1);
      assertEquals(1570781225810L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test091()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeUtils.setCurrentMillisFixed(0);
      localDateTime0.toDateTime((ReadableInstant) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes((-2147483050));
      LocalDate localDate0 = new LocalDate(localDateTime1);
      localDate0.toDateTime((LocalTime) null);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("YTSn}=c/u9Y?qX(;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'YTSn}=c/u9Y?qX(;' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test093()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gregorianChronology0);
      long long0 = gregorianChronology0.set(localDateTime0, (-1302L));
      assertEquals(1566094019478L, long0);
      
      Date date0 = localDateTime0.toDate();
      assertEquals("Sun Aug 18 04:06:59 CEST 2019", date0.toString());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test094()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(31);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = LocalDateTime.now();
      Interval interval0 = new Interval((-1), 1304);
      DateTime dateTime0 = interval0.getEnd();
      DateTime dateTime1 = dateTime0.withFields(localDateTime0);
      assertEquals(1566086818818L, dateTime1.getMillis());
      
      int int0 = localDateTime1.compareTo((ReadablePartial) localDateTime0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test095()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(31);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.plusDays((-4061));
      Interval interval0 = new Interval((-1), 1304);
      DateTime dateTime0 = interval0.getEnd();
      DateTime dateTime1 = dateTime0.withFields(localDateTime0);
      assertEquals(1566086818100L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test096()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(0);
      LocalDateTime localDateTime2 = localDateTime1.withYear((-1023));
      LocalDate localDate0 = localDateTime2.toLocalDate();
      localDate0.toDateTime((LocalTime) null);
      assertEquals(1566094017358L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LocalDateTime.now();
      // Undeclared exception!
      try { 
        LocalDateTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LocalDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test099()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      localDateTime0.isSupported(durationFieldType0);
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes((-2147483050));
      LocalDate localDate0 = new LocalDate(localDateTime1);
      DateTime dateTime0 = localDate0.toDateTime((LocalTime) null);
      assertEquals((-127282911155934L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalDateTime.now((Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("-MIT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-MIT\" is malformed at \"MIT\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeZone.forOffsetHours((-41));
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      // Undeclared exception!
      try { 
        localDateTime0.getField((-41), (Chronology) iSOChronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -41
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      dateTime0.toLocalDateTime();
      // Undeclared exception!
      try { 
        DateTimeZone.forID("+dW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+dW\" is malformed at \"dW\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(1566100821458L).when(dateTimeZone0).getMillisKeepLocal(any(org.joda.time.DateTimeZone.class) , anyLong());
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forID((String) null);
      localDateTime0.toDateTime(dateTimeZone1);
      // Undeclared exception!
      try { 
        LocalDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.toDateTime();
      YearMonth yearMonth0 = new YearMonth(266L);
      // Undeclared exception!
      try { 
        localDateTime0.compareTo((ReadablePartial) yearMonth0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test105()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566086813600L, dateTime0.getMillis());
      
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(0);
      assertSame(localDateTime0, localDateTime1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test106()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.plusMinutes(1140);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566094013253L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test107()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566094012875L, dateTime0.getMillis());
      
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(0);
      assertSame(localDateTime0, localDateTime1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test108()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      localDateTime0.plusWeeks(2019);
      Duration duration0 = Duration.standardSeconds(62120704L);
      Period period0 = new Period(dateTime0, duration0);
      assertEquals(1566094012481L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test109()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Date date0 = localDateTime0.toDate();
      localDateTime0.equals(date0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566093993999L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) julianChronology0);
      Months months0 = Months.SIX;
      julianChronology0.get((ReadablePeriod) months0, (long) 2147483460, (-2949L));
      LocalDateTime localDateTime1 = localDateTime0.plusHours((-292269054));
      int int0 = localDateTime1.compareTo((ReadablePartial) localDateTime0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Months months0 = Months.SIX;
      julianChronology0.get((ReadablePeriod) months0, (long) 2147483460, (-2949L));
      // Undeclared exception!
      try { 
        LocalDateTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test112()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(1566100821458L).when(dateTimeZone0).getMillisKeepLocal(any(org.joda.time.DateTimeZone.class) , anyLong());
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      boolean boolean0 = localDateTime0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      DateTime dateTime0 = localDateTime0.toDateTime(dateTimeZone1);
      assertEquals(1566093621458L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test113()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(999999986L).when(dateTimeZone0).getMillisKeepLocal(any(org.joda.time.DateTimeZone.class) , anyLong());
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(996399986L, dateTime0.getMillis());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      boolean boolean0 = localDateTime0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.toDateTime();
      // Undeclared exception!
      try { 
        DateTimeZone.forID("4~7>xP_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '4~7>xP_' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      localDateTime0.toDateTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        localDateTime0.getField(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 4
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      localDateTime0.toDateTime();
      DateTimeZone.setDefault(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.toDateTime();
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-173));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -173
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test118()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeZone.forID("UTC");
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566093991369L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test119()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566086791050L, dateTime0.getMillis());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      assertSame(dateTimeZone0, fixedDateTimeZone0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test120()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(1566100821458L).when(dateTimeZone0).getMillisKeepLocal(any(org.joda.time.DateTimeZone.class) , anyLong());
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forID((String) null);
      DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetHours(11);
      assertEquals("+11:00", dateTimeZone2.toString());
      
      DateTime dateTime0 = localDateTime0.toDateTime(dateTimeZone1);
      assertEquals(1566093621458L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test121()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.plusSeconds(0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566093990289L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test122()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566093989965L, dateTime0.getMillis());
      
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds((-1052));
      assertNotSame(localDateTime0, localDateTime1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Instant.parse("+2019-08-18T04:01:19.594");
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test124()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566086789229L, dateTime0.getMillis());
      
      LocalDateTime localDateTime1 = localDateTime0.plusHours(0);
      assertSame(localDateTime0, localDateTime1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test125()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.forLanguageTag("+2019-08-18T04:01:19.594");
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(timeZone0, locale0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(gregorianCalendar0);
      Instant.parse("+2019-08-18T04:01:19.594");
      localDateTime0.plusHours(165);
      assertEquals("java.util.GregorianCalendar[time=1566093975412,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Amsterdam\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=180,lastRule=java.util.SimpleTimeZone[id=Europe/Amsterdam,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2019,MONTH=7,WEEK_OF_YEAR=34,WEEK_OF_MONTH=4,DAY_OF_MONTH=18,DAY_OF_YEAR=230,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=6,SECOND=15,MILLISECOND=412,ZONE_OFFSET=3600000,DST_OFFSET=3600000]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test126()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) julianChronology0);
      Date date0 = localDateTime0.toDate();
      assertEquals("Mon Aug 05 04:05:55 CEST 2019", date0.toString());
      
      DateTime dateTime0 = localDateTime0.toDateTime(dateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertEquals(1566093955436L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.toDateTime();
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      localDateTime0.toDateTime();
      // Undeclared exception!
      try { 
        DateTimeZone.forID("-MIT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-MIT\" is malformed at \"MIT\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = Duration.standardSeconds(62120704L);
      Period period0 = new Period(dateTime0, duration0);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("+dW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+dW\" is malformed at \"dW\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.toDateTime();
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test131()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfDay(0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566086753050L, dateTime0.getMillis());
      
      int int0 = localDateTime0.compareTo((ReadablePartial) localDateTime1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test132()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusDays(0);
      DateTime dateTime0 = localDateTime1.toDateTime();
      assertEquals(1566093952590L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test133()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.plusDays(1140);
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1566093952088L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-41));
      assertEquals("-41:00", dateTimeZone0.toString());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1);
      assertEquals("+00:00:00.001", dateTimeZone1.toString());
  }
}

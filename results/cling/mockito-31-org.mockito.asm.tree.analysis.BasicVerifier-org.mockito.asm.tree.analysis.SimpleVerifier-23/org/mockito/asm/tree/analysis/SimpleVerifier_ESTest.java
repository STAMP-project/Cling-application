/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 08:02:04 GMT 2019
 */

package org.mockito.asm.tree.analysis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.Type;
import org.mockito.asm.tree.InsnNode;
import org.mockito.asm.tree.IntInsnNode;
import org.mockito.asm.tree.MethodInsnNode;
import org.mockito.asm.tree.TypeInsnNode;
import org.mockito.asm.tree.VarInsnNode;
import org.mockito.asm.tree.analysis.BasicValue;
import org.mockito.asm.tree.analysis.SimpleVerifier;
import org.mockito.asm.tree.analysis.SourceValue;
import org.mockito.asm.tree.analysis.Value;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SimpleVerifier_ESTest extends SimpleVerifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      IntInsnNode intInsnNode0 = new IntInsnNode(33, 33);
      Value value0 = simpleVerifier0.copyOperation(intInsnNode0, (Value) null);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      VarInsnNode varInsnNode0 = new VarInsnNode(34, 34);
      Value value0 = simpleVerifier0.copyOperation(varInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      InsnNode insnNode0 = new InsnNode(32);
      LinkedHashSet<SourceValue> linkedHashSet0 = new LinkedHashSet<SourceValue>();
      SourceValue sourceValue0 = new SourceValue(14, linkedHashSet0);
      SourceValue sourceValue1 = (SourceValue)simpleVerifier0.copyOperation(insnNode0, sourceValue0);
      assertEquals(14, sourceValue1.size);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(48, (String) null);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      Value value0 = simpleVerifier0.copyOperation(typeInsnNode0, basicValue0);
      assertSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      VarInsnNode varInsnNode0 = new VarInsnNode(119, 3);
      LinkedHashSet<BasicValue> linkedHashSet0 = new LinkedHashSet<BasicValue>();
      SourceValue sourceValue0 = new SourceValue(0, linkedHashSet0);
      // Undeclared exception!
      try { 
        simpleVerifier0.unaryOperation(varInsnNode0, sourceValue0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.analysis.SourceValue cannot be cast to org.mockito.asm.tree.analysis.BasicValue
         //
         verifyException("org.mockito.asm.tree.analysis.SimpleVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<BasicValue> class0 = BasicValue.class;
      Type type0 = Type.getType(class0);
      SimpleVerifier simpleVerifier0 = new SimpleVerifier(type0, type0, false);
      Value value0 = simpleVerifier0.newValue(type0);
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(46, "F");
      Value value1 = simpleVerifier0.copyOperation(typeInsnNode0, value0);
      assertEquals(1, value1.getSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<BasicValue> class0 = BasicValue.class;
      Type type0 = Type.getType(class0);
      BasicValue basicValue0 = new BasicValue(type0);
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(37, " array reference", "TVc.4a/d28^4AsFPR", " array reference");
      methodInsnNode0.setOpcode(45);
      Value value0 = simpleVerifier0.copyOperation(methodInsnNode0, basicValue0);
      assertSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<BasicValue> class0 = BasicValue.class;
      Type type0 = Type.getType(class0);
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      Value value0 = simpleVerifier0.newValue(type0);
      IntInsnNode intInsnNode0 = new IntInsnNode(44, 5);
      Value value1 = simpleVerifier0.copyOperation(intInsnNode0, value0);
      assertSame(value1, value0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      VarInsnNode varInsnNode0 = new VarInsnNode(122, 3);
      LinkedHashSet<BasicValue> linkedHashSet0 = new LinkedHashSet<BasicValue>();
      SourceValue sourceValue0 = new SourceValue(14, linkedHashSet0);
      // Undeclared exception!
      try { 
        simpleVerifier0.unaryOperation(varInsnNode0, sourceValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<BasicValue> class0 = BasicValue.class;
      Type type0 = Type.getType(class0);
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      Value value0 = simpleVerifier0.newValue(type0);
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(47, "Lfloat;");
      Value value1 = simpleVerifier0.copyOperation(typeInsnNode0, value0);
      assertEquals(1, value1.getSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<BasicValue> class0 = BasicValue.class;
      Type type0 = Type.getType(class0);
      BasicValue basicValue0 = new BasicValue(type0);
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(37, " array reference", "TVc.4a/d28^4AsFPR", " array reference");
      Value value0 = simpleVerifier0.copyOperation(methodInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      InsnNode insnNode0 = new InsnNode(35);
      BasicValue basicValue1 = (BasicValue)simpleVerifier0.copyOperation(insnNode0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Type type0 = Type.CHAR_TYPE;
      SimpleVerifier simpleVerifier0 = new SimpleVerifier(type0, type0, true);
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(31, "[S", "[S", "[S");
      BasicValue basicValue0 = new BasicValue(type0);
      BasicValue basicValue1 = (BasicValue)simpleVerifier0.copyOperation(methodInsnNode0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(29, " array reference", "W]:FgTt.6\"qI*;N!rEp", " array reference");
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = simpleVerifier0.copyOperation(methodInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(27, (String) null);
      Value value0 = simpleVerifier0.copyOperation(typeInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      VarInsnNode varInsnNode0 = new VarInsnNode(26, 26);
      Value value0 = simpleVerifier0.copyOperation(varInsnNode0, basicValue0);
      assertSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(28, "N9rray refurenFe", "N9rray refurenFe", "N9rray refurenFe");
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = simpleVerifier0.copyOperation(methodInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<BasicValue> class0 = BasicValue.class;
      Type type0 = Type.getType(class0);
      SimpleVerifier simpleVerifier0 = new SimpleVerifier(type0, type0, false);
      Value value0 = simpleVerifier0.newValue(type0);
      VarInsnNode varInsnNode0 = new VarInsnNode(30, 2);
      Value value1 = simpleVerifier0.copyOperation(varInsnNode0, value0);
      assertEquals(1, value1.getSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<BasicValue> class0 = BasicValue.class;
      Type type0 = Type.getType(class0);
      SimpleVerifier simpleVerifier0 = new SimpleVerifier(type0, type0, false);
      Value value0 = simpleVerifier0.newValue(type0);
      VarInsnNode varInsnNode0 = new VarInsnNode(25, 2);
      Value value1 = simpleVerifier0.copyOperation(varInsnNode0, value0);
      assertSame(value1, value0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      InsnNode insnNode0 = new InsnNode(21);
      Value value0 = simpleVerifier0.copyOperation(insnNode0, basicValue0);
      assertSame(value0, basicValue0);
  }
}

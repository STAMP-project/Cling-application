/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 00:19:34 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DateTimeField;
import org.joda.time.LocalTime;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.CopticChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LocalTime$Property_ESTest extends LocalTime$Property_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1, 1, 1, 1);
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      LocalTime localTime1 = localTime_Property0.addNoWrapToCopy(12);
      localTime1.toString("^");
      boolean boolean0 = localTime0.isBefore(localTime1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1, 1, 1, 1);
      String string0 = localTime0.toString((String) null);
      assertEquals("01:01:01.001", string0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalTime localTime0 = mock(LocalTime.class, new ViolatedAssumptionAnswer());
      doReturn(copticChronology0, copticChronology0).when(localTime0).getChronology();
      doReturn((-374L), (-374L), 3602526L, 3602526L, 3602526L).when(localTime0).getLocalMillis();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(2146318437).when(dateTimeField0).getMaximumValue(anyLong());
      doReturn((-1592)).when(dateTimeField0).getMinimumValue(anyLong());
      doReturn((long)2146318437, (long)2146318437).when(dateTimeField0).set(anyLong() , anyInt());
      doReturn("I", ";E2Rs93JZxdGx9%").when(dateTimeField0).toString();
      LocalTime.Property localTime_Property0 = new LocalTime.Property(localTime0, dateTimeField0);
      LocalTime localTime1 = localTime_Property0.withMinimumValue();
      LocalTime localTime2 = localTime_Property0.withMaximumValue();
      localTime2.compareTo((ReadablePartial) localTime1);
      // Undeclared exception!
      try { 
        localTime1.toString("Standard");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
}

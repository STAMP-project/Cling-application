/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 21:00:38 GMT 2019
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.apache.commons.lang3.time.DurationFormatUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DurationFormatUtils_ESTest extends DurationFormatUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DurationFormatUtils.formatDuration(0L, "", true);
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0, 0, 0, 0).when(timeZone0).getRawOffset();
      doReturn(false, false, false, false, false).when(timeZone0).inDaylightTime(any(java.util.Date.class));
      // Undeclared exception!
      DurationFormatUtils.formatPeriod(0L, (-1411L), "NFD", true, timeZone0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test01()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(1L, "0 days 0 hours 0 minutes 0 seconds", true);
      assertEquals("0 0a000 0 hour 0 0inute00 0 econ00", string0);
      
      String string1 = DurationFormatUtils.formatDuration(1L, "0 0a000 0 hour 0 0inute00 0 econ00", false);
      assertEquals("0 0a000 0 hour 0 0inute00 0 econ00", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(498L, true, true);
      assertEquals("0 seconds", string0);
      
      String string1 = DurationFormatUtils.formatPeriod(1014L, 498L, "sIkUUOT%=IDnz2C5R");
      assertEquals("2678399IkUUOT%=IDnz2C5R", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(1014L, "sIkUUOT%=IDnz2C5R");
      assertEquals("1IkUUOT%=IDnz2C5R", string0);
      
      String string1 = DurationFormatUtils.formatPeriod(1014L, 498L, "sIkUUOT%=IDnz2C5R");
      assertEquals("2678399IkUUOT%=IDnz2C5R", string1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DurationFormatUtils.formatDurationISO((-407L));
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(1895, 4, (-2360), 95, (-2360)).when(timeZone0).getDSTSavings();
      doReturn(1895, 1895, 1895, (-2876), 3914).when(timeZone0).getOffset(anyLong());
      doReturn((-2876), (-2360), 1895, 3914, (-1)).when(timeZone0).getRawOffset();
      doReturn(true, true, true, false, true).when(timeZone0).inDaylightTime(any(java.util.Date.class));
      // Undeclared exception!
      DurationFormatUtils.formatPeriod((long) 95, (-2401L), "0:00:-2.99", true, timeZone0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DurationFormatUtils.formatDurationHMS((-2401L));
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(1895, 4, (-2360), 95, (-2360)).when(timeZone0).getDSTSavings();
      doReturn(1895, 1895, 1895, (-2876), 3914).when(timeZone0).getOffset(anyLong());
      doReturn((-2876), (-2360), 1895, 3914, (-1)).when(timeZone0).getRawOffset();
      doReturn(true, true, true, false, true).when(timeZone0).inDaylightTime(any(java.util.Date.class));
      // Undeclared exception!
      DurationFormatUtils.formatPeriod((long) 95, (-2401L), "0:00:-2.99", true, timeZone0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(0L, "0:00:-2.47");
      assertEquals("0:00:-2.47", string0);
      
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, (-1), (-92), 0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(1716, 6883, (-1556), 41, 0).when(timeZone0).getRawOffset();
      doReturn(false).when(timeZone0).inDaylightTime(any(java.util.Date.class));
      String string1 = DurationFormatUtils.formatPeriod(0L, 2203L, "QYa(:qJzrs", true, timeZone0);
      assertEquals("QYa(:qJzr2", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(0L, "M]");
      assertEquals("0]", string0);
      
      String string1 = DurationFormatUtils.formatDurationWords(60000L, true, true);
      assertEquals("1 minute", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(0L, "M]");
      assertEquals("0]", string0);
      
      String string1 = DurationFormatUtils.formatDurationWords(0L, true, true);
      assertEquals("0 seconds", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationISO((-3420L));
      assertEquals("P0Y0M0DT0H0M-3.80S", string0);
      
      String string1 = DurationFormatUtils.formatPeriod(0L, (-765L), "P0Y0M0DT0H0M-3.80S");
      assertEquals("P0Y0-10DT07430-1-3.803599235", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(0L, "");
      assertEquals("", string0);
      
      String string1 = DurationFormatUtils.formatPeriod(0L, (-765L), "P0Y0M0DT0H0M-3.80S");
      assertEquals("P0Y0-10DT07430-1-3.803599235", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test11()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationHMS((-2401L));
      assertEquals("0:00:-2.99", string0);
      
      String string1 = DurationFormatUtils.formatDurationWords((-1), false, true);
      assertEquals("0 days", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(1L, "M]");
      assertEquals("0]", string0);
      
      String string1 = DurationFormatUtils.formatDurationWords(3600000L, true, true);
      assertEquals("1 hour", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test13()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords((-2053L), true, false);
      assertEquals("-2 seconds", string0);
      
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, (-1), (-92), 0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(1716, 6883, (-1556), 41, 0).when(timeZone0).getRawOffset();
      doReturn(false).when(timeZone0).inDaylightTime(any(java.util.Date.class));
      String string1 = DurationFormatUtils.formatPeriod(0L, 2203L, "QYa(:qJzrs", true, timeZone0);
      assertEquals("QYa(:qJzr2", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test14()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriodISO(0L, 60000L);
      assertEquals("P0Y0M0DT0H1M0.000S", string0);
      
      String string1 = DurationFormatUtils.formatDurationWords(60000L, true, true);
      assertEquals("1 minute", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test15()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(0L, "M]");
      assertEquals("0]", string0);
      
      String string1 = DurationFormatUtils.formatDurationWords((-1656L), true, false);
      assertEquals("-1 seconds", string1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("lX/e");
      boolean boolean0 = durationFormatUtils_Token0.equals("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test17()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriod((-3208L), (-1012L), "Minimum abbreviation width with offset is 7");
      assertEquals("0ini00u abbreviation wi0th with off02et i 7", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test18()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(104L, false, true);
      assertEquals("0 days", string0);
      
      String string1 = DurationFormatUtils.formatDuration(956L, "0 days");
      assertEquals("0 0a00", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test19()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriod(956L, 498L, "0 days 0 hours 0 minutes 0 seconds");
      assertEquals("0 30a059 0 hour 0 1439inute59 0 econ3059", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test20()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriodISO(0L, 60000L);
      assertEquals("P0Y0M0DT0H1M0.000S", string0);
      
      String string1 = DurationFormatUtils.formatDuration(0L, "M]");
      assertEquals("0]", string1);
  }
}

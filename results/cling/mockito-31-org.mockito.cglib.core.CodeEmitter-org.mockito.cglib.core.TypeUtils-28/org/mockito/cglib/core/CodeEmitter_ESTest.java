/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 09:57:59 GMT 2019
 */

package org.mockito.cglib.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.Label;
import org.mockito.asm.Type;
import org.mockito.cglib.core.Block;
import org.mockito.cglib.core.ClassEmitter;
import org.mockito.cglib.core.CodeEmitter;
import org.mockito.cglib.core.ProcessSwitchCallback;
import org.mockito.cglib.core.Signature;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class CodeEmitter_ESTest extends CodeEmitter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-3), 1, "RZC|i'Ntt", "doubleValue", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.FLOAT_TYPE;
      Block block0 = new Block(codeEmitter0);
      Label label0 = block0.getStart();
      // Undeclared exception!
      try { 
        codeEmitter0.if_cmp(type0, 3432, label0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3432
         //
         verifyException("org.mockito.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "b;60wN", "b;60wN", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) 1);
      codeEmitter0.push(false);
      assertEquals(128, CodeEmitter.OR);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.VOID_TYPE;
      codeEmitter0.box(type0);
      Type type1 = Type.BYTE_TYPE;
      codeEmitter0.box(type1);
      assertEquals(1, type1.getSize());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-20), 1, "RZC|i'Ntt", "oublMValu_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = Type.SHORT_TYPE;
      codeEmitter0.box(type0);
      Class<InputStream> class0 = InputStream.class;
      Type type1 = Type.getType(class0);
      codeEmitter0.box(type1);
      assertEquals(3, Type.BYTE);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.INT_TYPE;
      classEmitter0.visit((-1), 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.box(type0);
      codeEmitter0.push(true);
      assertEquals(153, CodeEmitter.EQ);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(181, 1, "|;RWB", "|;RWB", (String) null, stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.FLOAT_TYPE;
      codeEmitter0.push(false);
      codeEmitter0.box(type0);
      assertEquals(3, Type.BYTE);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.INT_TYPE;
      classEmitter0.visit((-1), 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.box(type0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1401;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(201);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[23];
      classEmitter0.visit(2, 201, "<init>", "<init>", "<init>", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      int[] intArray0 = new int[3];
      intArray0[2] = 155;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.box(type0);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(189);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[23];
      classEmitter0.visit(2, 189, "<init>", "<init>", "<init>", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.INT_TYPE;
      int[] intArray0 = new int[3];
      intArray0[2] = 155;
      codeEmitter0.box(type0);
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0, true);
      assertEquals(155, CodeEmitter.LT);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.box(type0);
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(8, Type.DOUBLE);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(1, 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.CHAR_TYPE;
      Type type1 = Type.DOUBLE_TYPE;
      codeEmitter0.box(type0);
      codeEmitter0.unbox_or_zero(type1);
      assertEquals(8, type1.getSort());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push(2.0F);
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.box(type0);
      assertEquals(5, Type.INT);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 1, "RZC|i'Ntt", "oublMValu_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.push((float) 154);
      codeEmitter0.box(type0);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 2, "b;60wN", "", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((float) 181);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.box(type0);
      assertFalse(codeEmitter0.isStaticHook());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 2, "b;60wN", "", "b;60wN", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.push((double) 1);
      codeEmitter0.box(type0);
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 1, "RZC|i'Ntt", "oublMValu_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.push((-1.0));
      codeEmitter0.box(type0);
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(364, 181, "_`g+>l7QTLY=bw*W", "_`g+>l7QTLY=bw*W", "0tek\";r,u^\"", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push(100.0);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.box(type0);
      assertEquals(155, CodeEmitter.LT);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 1, "RZC|i'Ntt", "oublMValu_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = codeEmitter0.getReturnType();
      codeEmitter0.newarray(type0);
      Type type1 = Type.DOUBLE_TYPE;
      codeEmitter0.unbox_or_zero(type1);
      assertEquals(7, Type.LONG);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.INT_TYPE;
      classEmitter0.visit((-1), 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type1 = Type.DOUBLE_TYPE;
      codeEmitter0.unbox_or_zero(type1);
      codeEmitter0.newarray(type0);
      assertEquals(1, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-9), 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      Type type0 = Type.DOUBLE_TYPE;
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.newarray(type0);
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(0, Type.VOID);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 2074, "{Z@mS6=`3<GcS:", "`L", "{Z@mS6e$23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((float) 181);
      Type type0 = Type.BOOLEAN_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(124, CodeEmitter.USHR);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(181, 1, "|;RWB", "", (String) null, stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((float) 128);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(10, Type.OBJECT);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push(2.0F);
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "L", "{Z@mS6e$23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((float) 2);
      Type type0 = Type.FLOAT_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(5, Type.INT);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 1, "RZC|i'Ntt", "oublMValu_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push(0.01910828F);
      Type type0 = Type.FLOAT_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(153, CodeEmitter.EQ);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(199);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push(2.0F);
      Type type0 = Type.INT_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(5, Type.INT);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1077);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.INT_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push((float) 3);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(181, 1, "|;RWB", "", (String) null, stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push(1796.9846F);
      Type type0 = Type.SHORT_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(6, Type.FLOAT);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push(2.0F);
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.newarray(type0);
      assertFalse(codeEmitter0.isStaticHook());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(201);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[23];
      classEmitter0.visit(2, 201, "<init>", "<init>", "<init>", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push((float) 158);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push(2.0F);
      Type type0 = codeEmitter0.getReturnType();
      codeEmitter0.newarray(type0);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 1, "RZC|i'Ntt", "oublMValu_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((float) 154);
      Type type0 = codeEmitter0.getReturnType();
      codeEmitter0.newarray(type0);
      assertEquals(96, CodeEmitter.ADD);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 2, "b;60wN", "", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push(2.0F);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(96, CodeEmitter.ADD);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 2, "b;60wN", "", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push(2.0F);
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.newarray(type0);
      assertFalse(codeEmitter0.isStaticHook());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 1, "RZC|i'Ntt", "oublMValu_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.push((float) 154);
      codeEmitter0.newarray(type0);
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 1, "RZC|i'Ntt", "oublMValu_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((float) 154);
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "b;60wN", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.BOOLEAN_TYPE;
      codeEmitter0.push((double) 1);
      codeEmitter0.newarray(type0);
      assertEquals(124, CodeEmitter.USHR);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "b;60wN", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.BOOLEAN_TYPE;
      codeEmitter0.push(2382.67);
      codeEmitter0.newarray(type0);
      assertEquals(155, CodeEmitter.LT);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(181, 1, "|;RWB", "", (String) null, stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push((double) 126);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 1, "RZC|i'Ntt", "oublMValu_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.FLOAT_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push((-2374.39));
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-20), 1, "RZC|i'Ntt", "RZC|i'Ntt", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.INT_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push((double) 157);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(181, 1, "|;RWB", "|;RWB", (String) null, stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) 112);
      Type type0 = Type.SHORT_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(2, Type.CHAR);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 1, "RZC|i'Ntt", "oublMValu_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = codeEmitter0.getReturnType();
      codeEmitter0.newarray(type0);
      codeEmitter0.push((-1.0));
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 2, "b;60wN", "", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push((double) 1);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 2, "b;60wN", "", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) 1);
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 1, "RZC|i'Ntt", "oublMValu_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push((-1.0));
      assertEquals(124, CodeEmitter.USHR);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-20), 1, "RZC|i'Ntt", "RZC|i'Ntt", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) 157);
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(9, Type.ARRAY);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.unbox_or_zero(type0);
      codeEmitter0.push(true);
      assertEquals(124, CodeEmitter.USHR);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.create_arg_array();
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(0, Type.VOID);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-20), 1, "RZC|i'Ntt", "oblMValju_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((-587.0F));
      codeEmitter0.push(true);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 1, "RZC|i'Ntt", "oublMValu_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((float) 154);
      codeEmitter0.create_arg_array();
      assertEquals(100, CodeEmitter.SUB);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 2, "b;60wN", "", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) 1);
      codeEmitter0.push(true);
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-20), 1, "RZC|i'Ntt", "RZC|i'Ntt", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push(0.75);
      codeEmitter0.push(true);
      assertEquals(96, CodeEmitter.ADD);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 2, "b;60wN", "", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.unbox_or_zero(type0);
      codeEmitter0.push((double) 1);
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 2, "b;60wN", "", "b;60wN", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.unbox_or_zero(type0);
      codeEmitter0.push((double) 1);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "b;60wN", "b;60wN", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((float) 156);
      codeEmitter0.push((double) 1);
      assertFalse(codeEmitter0.isStaticHook());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "b;60wN", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) 1);
      codeEmitter0.push(2382.67);
      assertFalse(codeEmitter0.isStaticHook());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-197), (-1795520165), "'ka0*pT$?-Ov", (String) null, "'ka0*pT$?-Ov", (String[]) null);
      Type type0 = Type.INT_TYPE;
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type1 = classEmitter0.getClassType();
      codeEmitter0.aaload(1);
      codeEmitter0.cast_numeric(type1, type0);
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(230);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[5];
      classEmitter0.visit(2, 230, "<init>", "<init>", "9~~)c/Dh", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.BOOLEAN_TYPE;
      codeEmitter0.zero_or_null(type0);
      Type type1 = classEmitter0.getClassType();
      codeEmitter0.cast_numeric(type1, type0);
      assertEquals(124, CodeEmitter.USHR);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.INT_TYPE;
      classEmitter0.visit((-1), 2, "b;60wN", "b;60wN", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type1 = Type.BOOLEAN_TYPE;
      codeEmitter0.push((double) 1);
      codeEmitter0.cast_numeric(type0, type1);
      assertEquals(124, CodeEmitter.USHR);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(181, 1, "|;RWB", "~", (String) null, stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      int[] intArray0 = new int[0];
      Type type0 = Type.SHORT_TYPE;
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, (ProcessSwitchCallback) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.box(type0);
      assertEquals(124, CodeEmitter.USHR);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(201);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[23];
      classEmitter0.visit(2, 201, "<init>", "<init>", "<init>", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.load_args(4, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-20), 1, "RZC|i'Ntt", "RZC|i'Ntt", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.load_args((-327), 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -327
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(122, 1, "RZC|i'Ntt", "RZC|i'Ntt", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.INT_TYPE;
      classEmitter0.visit((-1), 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.box(type0);
      codeEmitter0.newarray(type0);
      assertEquals(2, Type.CHAR);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(199);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.INT_TYPE;
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.load_args(126, 125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(199);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.INT_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.load_args();
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(181, 1, "|;RWB", "|;RWB", (String) null, stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.box(type0);
      assertEquals(2, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(181, 1, "|;RWB", "|;RWB", (String) null, stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.load_args(3, 126);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-20), 1, "RZC|V'Ntt", "RZC|V'Ntt", "RZC|V'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.load_args();
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(181, 1, "|;RWB", "|;RWB", (String) null, stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.FLOAT_TYPE;
      Type type1 = Type.LONG_TYPE;
      codeEmitter0.newarray(type1);
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(3, Type.BYTE);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.INT_TYPE;
      classEmitter0.visit(0, 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("charValue", type0, typeArray0);
      classEmitter0.begin_method(166, signature0, typeArray0);
      Type type1 = Type.getObjectType("[|FNfAJ");
      codeEmitter0.unbox_or_zero(type1);
      assertEquals(100, CodeEmitter.SUB);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 2, "b;60wN", "", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.box(type0);
      assertFalse(codeEmitter0.isStaticHook());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 2, "b;60wN", "", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.load_args((-2377), 155);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2377
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 2, "b;60wN", "", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.unbox_or_zero(type0);
      codeEmitter0.newarray(type0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 1, "RZC|i'Ntt", "oublMValu_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.LONG_TYPE;
      Type type1 = codeEmitter0.getReturnType();
      codeEmitter0.newarray(type1);
      codeEmitter0.box(type0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 1, "RZC|i'Ntt", "oublMValu_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = codeEmitter0.getReturnType();
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.load_args(126, 130);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = codeEmitter0.getReturnType();
      codeEmitter0.newarray(type0);
      codeEmitter0.load_args();
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(181, 1, "|;RWB", "", (String) null, stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.SHORT_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-20), 1, "RZC|i'Ntt", "oblMValju_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.SHORT_TYPE;
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.load_args(10, (-54));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-20), 1, "RZC|i'Ntt", "RZC|i'Ntt", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.SHORT_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.load_args();
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(181, 1, "|;RWB", "", (String) null, stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.SHORT_TYPE;
      codeEmitter0.box(type0);
      codeEmitter0.newarray(type0);
      assertEquals(1, Type.BOOLEAN);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(181, 1, "|;RWB", "|;RWB", (String) null, stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.FLOAT_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.box(type0);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(181, 1, "|;RWB", "|;RWB", (String) null, stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.FLOAT_TYPE;
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.load_args(3, 126);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(181, 1, "|;RWB", "|;RWB", (String) null, stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.FLOAT_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.unbox_or_zero(type0);
      assertFalse(codeEmitter0.isStaticHook());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(204);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[5];
      Class<Object> class0 = Object.class;
      Type type0 = Type.getType(class0);
      classEmitter0.visit((-1252), 1, "\" has been declared differently", "\" has been declared differently", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.unbox(type0);
      assertEquals(1, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(204);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[5];
      classEmitter0.visit(2, 204, "<init>", "<init>", "9~~)c/rh", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Signature signature0 = new Signature("<init>", "9~~)c/rh");
      codeEmitter0.invoke_static_this(signature0);
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(204);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[23];
      classEmitter0.visit(2, 204, "<init>", "<init>", "<init>", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.INT_TYPE;
      Signature signature0 = new Signature("<init>", "<init>");
      // Undeclared exception!
      try { 
        codeEmitter0.invoke_virtual(type0, signature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(204);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[23];
      classEmitter0.visit(2, 204, "<init>", "<init>", "<init>", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.load_args();
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push(1.0);
      Class<Object> class0 = Object.class;
      Type type0 = Type.getType(class0);
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 2, "b;60wN", "", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.push((double) 1);
      codeEmitter0.box(type0);
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "b;60wN", "b;60wN", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) 1);
      // Undeclared exception!
      try { 
        codeEmitter0.load_args(158, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 2, "b;60wN", "", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) 1);
      // Undeclared exception!
      try { 
        codeEmitter0.load_args((-2377), 155);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2377
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.DOUBLE_TYPE;
      classEmitter0.visit(2147483645, 1, "<init>", "Q|YA:", "classInfo is null! ", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.newarray(type0);
      codeEmitter0.box(type0);
      assertEquals(5, Type.INT);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-197), 157, "'ka0*pT$?-Ov", (String) null, "'ka0*pT$?-Ov", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.load_args(3, 2137707694);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 1, "RZC|i'Ntt", "oublMValu_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.load_args();
      assertEquals(124, CodeEmitter.USHR);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(0, 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.newarray(type0);
      Type type1 = Type.getObjectType("[|FNfAJ");
      codeEmitter0.unbox_or_zero(type1);
      assertEquals(100, CodeEmitter.SUB);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 1, "RZC|i'Ntt", "oublMValu_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((-1.0));
      codeEmitter0.create_arg_array();
      assertEquals(153, CodeEmitter.EQ);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(201);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[23];
      classEmitter0.visit(2, 201, "<init>", "<init>", "<init>", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[0];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(201);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[23];
      classEmitter0.visit(2, 201, "<init>", "<init>", "<init>", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[4];
      intArray0[0] = 116;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(201);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[23];
      classEmitter0.visit(2, 201, "<init>", "<init>", "<init>", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[1];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(128, CodeEmitter.OR);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(198);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[23];
      classEmitter0.visit(2, 198, "I%/YIF[vgk>^$|+8", "I%/YIF[vgk>^$|+8", "I%/YIF[vgk>^$|+8", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.INT_TYPE;
      int[] intArray0 = new int[3];
      codeEmitter0.newarray(type0);
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0, false);
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1077);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.INT_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[0];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.INT_TYPE;
      classEmitter0.visit((-1), 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1401;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(204);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[23];
      classEmitter0.visit(2, 204, "<init>", "<init>", "<init>", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.INT_TYPE;
      int[] intArray0 = new int[3];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0, true);
      codeEmitter0.newarray(type0);
      assertEquals(8, Type.DOUBLE);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-20), 1, "RZC|i'Ntt", "RZC|i'Ntt", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[8];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-20), 1, "RZC|i'Ntt", "oublMValu_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[4];
      intArray0[0] = 126;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 1, "RZC|i'Ntt", "oublMValu_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.LONG_TYPE;
      int[] intArray0 = new int[0];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      codeEmitter0.newarray(type0);
      assertEquals(0, Type.VOID);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 2, "b;60wN", "", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[1];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(155, CodeEmitter.LT);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2596, 14, "Type ", "{Z@mS6=`23<GcBS:", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = codeEmitter0.getReturnType();
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[7];
      intArray0[0] = 153;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(209);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[23];
      classEmitter0.visit(2, 209, "<init>", "<init>", "<init>", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      int[] intArray0 = new int[1];
      Type type0 = codeEmitter0.getReturnType();
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, (ProcessSwitchCallback) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(198);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[23];
      classEmitter0.visit(2, 198, "I%/YIF[vgk>^$|+8", "I%/YIF[vgk>^$|+8", "I%/YIF[vgk>^$|+8", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.SHORT_TYPE;
      int[] intArray0 = new int[3];
      codeEmitter0.newarray(type0);
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0, false);
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-20), 1, "RZC|i'Ntt", "oblMValju_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.SHORT_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[4];
      intArray0[0] = 155;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(181, 1, "|;RWB", "|;RWB", (String) null, stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.SHORT_TYPE;
      int[] intArray0 = new int[1];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      codeEmitter0.newarray(type0);
      assertEquals(124, CodeEmitter.USHR);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-197), 157, "'ka0*pT$?-Ov", (String) null, "'ka0*pT$?-Ov", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.FLOAT_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[1];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(201);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[23];
      classEmitter0.visit(2, 201, "<init>", "<init>", "<init>", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[9];
      intArray0[0] = 158;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 1, "RZC|i'Ntt", "oublMValu_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      int[] intArray0 = new int[0];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      Type type0 = Type.FLOAT_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(128, CodeEmitter.OR);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(0, 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.DOUBLE_TYPE;
      int[] intArray0 = new int[6];
      intArray0[4] = 6;
      codeEmitter0.newarray(type0);
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 1, "RZC|i'Ntt", "oublMValu_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      int[] intArray0 = new int[0];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(4, Type.SHORT);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(181, 1, "|;RWB", "", (String) null, stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.SHORT_TYPE;
      codeEmitter0.box(type0);
      Label label0 = codeEmitter0.make_label();
      // Undeclared exception!
      try { 
        codeEmitter0.if_cmp(type0, 148, label0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.mockito.asm.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2612, 9, "n'<LLiH|fbb>", "{Z@mS6=`23<GcBS:", "UW4<Q;e5{E>", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.DOUBLE_TYPE;
      Label label0 = codeEmitter0.make_label();
      codeEmitter0.if_cmp(type0, 156, label0);
      Type type1 = Type.FLOAT_TYPE;
      codeEmitter0.box(type1);
      assertFalse(codeEmitter0.isStaticHook());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 2, "b;60wN", "", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push(2.0F);
      codeEmitter0.push(true);
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 1, "'X[^N^h!EJ'w\"(3", "'X[^N^h!EJ'w\"(3", "LocalVariableTypeTable", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.FLOAT_TYPE;
      codeEmitter0.not();
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(9, Type.ARRAY);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 2, "b;60wN", "", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push(2.0F);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.box(type0);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2612, 9, "n'<LLiH|fbb>", "{Z@mS6=`23<GcBS:", "UW4<Q;e5{E>", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push(0.0F);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.box(type0);
      assertEquals(3, Type.BYTE);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 2, "b;60wN", "", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push(2.0F);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(9, Type.ARRAY);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(181, 1, "|;RWB", "|;RWB", (String) null, stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.FLOAT_TYPE;
      codeEmitter0.push(false);
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(128, CodeEmitter.OR);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "L", "L", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push(0.019354839F);
      codeEmitter0.aaload(5);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-20), 1, "RZC|i'Ntt", "oublMValu_", "RZC|i'Ntt", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((float) 112);
      codeEmitter0.aaload(3);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "L", "{Z@mS6e$23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((float) 2);
      Type type0 = Type.FLOAT_TYPE;
      codeEmitter0.unbox_or_zero(type0);
      assertFalse(codeEmitter0.isStaticHook());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(1, 2, "b;60wN", "L", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push(2.0F);
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(2, Type.CHAR);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(181, 1, "|;RWB", "~", (String) null, stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.FLOAT_TYPE;
      codeEmitter0.unbox_or_zero(type0);
      codeEmitter0.push((double) 0);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(189);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[23];
      classEmitter0.visit(2, 189, "<init>", "<init>", "<init>", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push(218.67F);
      codeEmitter0.aaload(4);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(189);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[23];
      classEmitter0.visit(2, 189, "<init>", "<init>", "<init>", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push(0.0F);
      codeEmitter0.aaload(4);
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(181, 2, "b;60wN", "", "{Z@mS6=`23<GcBS:", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push(2.0F);
      codeEmitter0.push((double) 1);
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(181);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-1), 2, "b;60wN", "b;60wN", "b;60wN", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.FLOAT_TYPE;
      codeEmitter0.unbox_or_zero(type0);
      codeEmitter0.push((double) 1);
      assertEquals(108, CodeEmitter.DIV);
  }
}

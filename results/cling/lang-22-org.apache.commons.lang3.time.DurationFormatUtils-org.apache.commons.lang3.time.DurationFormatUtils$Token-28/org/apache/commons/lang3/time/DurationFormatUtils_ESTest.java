/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 21:37:50 GMT 2019
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.apache.commons.lang3.time.DurationFormatUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DurationFormatUtils_ESTest extends DurationFormatUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DurationFormatUtils.formatDuration(0L, "");
      // Undeclared exception!
      DurationFormatUtils.formatPeriod(0L, (-2923L), "");
  }

  @Test(timeout = 4000)
  @Ignore
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("m");
      String string0 = DurationFormatUtils.formatPeriod((-3164L), 0L, "a{1 ", false, timeZone0);
      assertEquals("a{1 ", string0);
      
      String string1 = DurationFormatUtils.formatDuration((-3164L), "m");
      assertEquals("0", string1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DurationFormatUtils.formatDurationHMS(0L);
      // Undeclared exception!
      DurationFormatUtils.formatPeriod(0L, (-2923L), "");
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationISO(0L);
      assertEquals("P0Y0M0DT0H0M0.000S", string0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("P0Y0M0DT0H0M0.000S");
      String string1 = DurationFormatUtils.formatPeriod(0L, (-1919L), "l:Ryj!t0%{;.l^'Xub~", true, timeZone0);
      assertEquals("l:R-1j!t0%{;.l^Xub~", string1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DurationFormatUtils.formatDurationISO(15);
      TimeZone timeZone0 = TimeZone.getTimeZone("a{1 ");
      // Undeclared exception!
      DurationFormatUtils.formatPeriod(0L, (-1005L), "a{1 ", true, timeZone0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      DurationFormatUtils.formatPeriod((-1969L), 0L, "");
      String string0 = DurationFormatUtils.formatDurationHMS(0L);
      assertEquals("0:00:00.000", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationISO((-3L));
      assertEquals("P0Y0M0DT0H0M0.97S", string0);
      
      String string1 = DurationFormatUtils.formatDuration((-1L), "P0Y000DT00000.971247");
      assertEquals("P0Y000DT00000.971247", string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DurationFormatUtils.formatDuration(5002L, "P0Y000DT024000.0000");
      TimeZone timeZone0 = TimeZone.getTimeZone("P0Y000DT024000.0000");
      // Undeclared exception!
      DurationFormatUtils.formatPeriod(86400000L, (long) (-336), "BhOPJ", true, timeZone0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("DJ");
      String string0 = DurationFormatUtils.formatPeriod((-4586L), 2459L, "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'", true, timeZone0);
      assertEquals("P0000Y0M0DT0H0M7.045S", string0);
      
      String string1 = DurationFormatUtils.formatDuration(0L, "SND");
      assertEquals("0ND", string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DurationFormatUtils.formatDuration(86400000L, "P0Y0M0DT0H0M0.000S", true);
      TimeZone timeZone0 = TimeZone.getTimeZone("P0Y000DT024000.0000");
      // Undeclared exception!
      DurationFormatUtils.formatPeriod(86400000L, (long) (-336), "BhOPJ", true, timeZone0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      DurationFormatUtils.formatDuration(0L, "-", false);
      String string0 = DurationFormatUtils.formatDurationWords(0L, true, true);
      assertEquals("0 seconds", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test11()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(3600000L, "AmFOX'<N", true);
      assertEquals("A60FOX<N", string0);
      
      String string1 = DurationFormatUtils.formatDurationWords(0L, false, false);
      assertEquals("0 days 0 hours 0 minutes 0 seconds", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationISO(15);
      assertEquals("P0Y0M0DT0H0M0.015S", string0);
      
      String string1 = DurationFormatUtils.formatPeriodISO(15, 0L);
      assertEquals("P-1Y11M30DT23H59M59.985S", string1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("y", (-1912));
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("y", (-3873));
      boolean boolean0 = durationFormatUtils_Token1.equals(durationFormatUtils_Token0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("y", (-1912));
      boolean boolean0 = durationFormatUtils_Token0.equals("y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0, 0, 0).when(timeZone0).getRawOffset();
      String string0 = DurationFormatUtils.formatPeriod(2193L, (-2631L), "P0Y0M0DT0H0M0.13S", false, timeZone0);
      assertEquals("P0Y0-10DT07430-10.133595176", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test16()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriod((-3L), 1244L, "P0Y0M0DT0H0M0.97S");
      assertEquals("P0Y000DT00000.971247", string0);
      
      String string1 = DurationFormatUtils.formatDuration((-1L), "P0Y000DT00000.971247");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  @Ignore
  public void test17()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(86400000L, true, true);
      assertEquals("1 day", string0);
      
      String string1 = DurationFormatUtils.formatDuration(3600000L, "AmFOX'<N", true);
      assertEquals("A60FOX<N", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test18()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(3600000L, false, true);
      assertEquals("0 days 1 hour", string0);
      
      String string1 = DurationFormatUtils.formatDuration(3600000L, "AmFOX'<N", true);
      assertEquals("A60FOX<N", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test19()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriod(616L, 0L, "");
      assertEquals("", string0);
      
      String string1 = DurationFormatUtils.formatDurationWords(616L, true, false);
      assertEquals("0 seconds", string1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("y", (-1912));
      boolean boolean0 = durationFormatUtils_Token0.equals(durationFormatUtils_Token0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test21()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationISO((-3L));
      assertEquals("P0Y0M0DT0H0M0.97S", string0);
      
      String string1 = DurationFormatUtils.formatPeriod((-3L), 1244L, "P0Y0M0DT0H0M0.97S");
      assertEquals("P0Y000DT00000.971247", string1);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 17:58:46 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MutablePeriod_ESTest extends MutablePeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3656L), periodType0);
      Weeks weeks0 = Weeks.ONE;
      // Undeclared exception!
      try { 
        mutablePeriod0.add((ReadablePeriod) weeks0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'weeks'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      mutablePeriod0.add((ReadablePeriod) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Months months0 = Months.NINE;
      Period period0 = months0.toPeriod();
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null, (PeriodType) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Days days0 = Days.SIX;
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      mutablePeriod0.setWeeks(4);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1274L), (-1274L));
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period(mutablePeriod0, periodType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      PeriodType periodType0 = seconds0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 0, periodType0);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      mutablePeriod0.set(durationFieldType0, 0);
      assertEquals("weekyears", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(8, 8, 8, 8, 1310, 8, 1310, 8);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      // Undeclared exception!
      try { 
        mutablePeriod0.set(durationFieldType0, 1310);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'weekyears'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2, 2, 2, 2, 1310, 2, 0, 1310);
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      mutablePeriod0.add(durationFieldType0, 0);
      mutablePeriod0.add((long) 2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 1);
      Duration duration0 = new Duration(1, 0);
      mutablePeriod0.add((ReadableDuration) duration0);
      // Undeclared exception!
      try { 
        mutablePeriod0.add((DurationFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Days days0 = Days.FOUR;
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      // Undeclared exception!
      try { 
        mutablePeriod0.add(durationFieldType0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'centuries'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Duration duration0 = Duration.standardHours((-2414L));
      mutablePeriod0.add((ReadableDuration) duration0);
      Months months0 = Months.SEVEN;
      mutablePeriod0.mergePeriod(months0);
      assertEquals(1, months0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2364), (-2364), (-2364), (-2364), (-2364), (-2364), 0, 0);
      mutablePeriod0.mergePeriod((ReadablePeriod) null);
      Duration duration0 = Duration.standardMinutes((-2364));
      mutablePeriod0.add((ReadableDuration) duration0);
      assertEquals((-39L), duration0.getStandardHours());
  }
}

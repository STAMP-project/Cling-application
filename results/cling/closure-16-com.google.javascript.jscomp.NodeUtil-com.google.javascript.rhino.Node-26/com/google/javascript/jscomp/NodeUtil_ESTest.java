/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 05:51:17 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newString("ctCkp");
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertFalse(node0.isName());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(16);
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail((-646));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -646
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = NodeUtil.opToStr(119);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.isGet(node0);
      assertFalse(boolean0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName("com.google.javascript.rhino.jstype.FunctionType$Kind");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newString(0, "dR)");
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
      boolean boolean1 = NodeUtil.isValidQualifiedName("P%0c*");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = new Node(43);
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals((-1), node0.getCharno());
      assertEquals("false", string0);
      assertTrue(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = Node.newString("aLXy#s}l", 37, 43);
      boolean boolean0 = NodeUtil.isSymmetricOperation(node0);
      assertTrue(node0.isString());
      assertEquals(151595, node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "AMBIGUOUS_FUNCTION_DECL");
      NodeUtil.getImpureBooleanValue(node0);
      assertEquals(38, node0.getType());
      assertTrue(node0.isName());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(63).when(node0).getType();
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node(3136, 3136, 3136);
      NodeUtil.getImpureBooleanValue(node0);
      assertEquals(3136, node0.getType());
      assertEquals(12848192, node0.getSourcePosition());
      assertEquals(3136, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "AMBIGUOUS_FUNCTION_DECL");
      String string0 = NodeUtil.getStringValue(node0);
      assertNull(string0);
      
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
      assertFalse(boolean0);
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = Node.newString("y/KupO;pS8=C", 2, 16);
      NodeUtil.getStringValue(node0);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
      assertEquals(8208, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.getStringValue(node1);
      assertEquals(122, node1.getType());
      assertEquals(49164, node1.getSourcePosition());
      
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
      assertEquals(12, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.isRelationalOperation(node0);
      assertFalse(boolean0);
      
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
      assertEquals(44, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = NodeUtil.opToStr(53);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(44);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 44: TRUE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      NodeUtil.nodeTypeMayHaveSideEffects(node0);
      NodeUtil.mayHaveSideEffects(node0);
      assertEquals(12, node0.getType());
      assertEquals(49164, node0.getSourcePosition());
      assertEquals(12, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node(12);
      Node node1 = Node.newString("$JnwLj");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(40, node1.getType());
      
      Node node2 = new Node(86, node0, node0, node0, node0);
      assertEquals(86, node2.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node2.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = NodeUtil.getInverseOperator(16);
      assertEquals(14, int0);
      
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = Node.newString("y/KupO;pS8=C", 2, 16);
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
      assertEquals(8208, node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newNumber(797.3856811);
      NodeUtil.isSimpleOperatorType(118);
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("797.3856811", string0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getParent();
      doReturn(false, true).when(node1).isBlock();
      doReturn(false).when(node1).isCatch();
      doReturn(false).when(node1).isScript();
      doReturn(false).when(node1).isTry();
      NodeUtil.removeChild(node1, node1);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertEquals(49164, node0.getSourcePosition());
      assertEquals(12, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(87, 3567, 3567).when(node0).getType();
      NodeUtil.mayHaveSideEffects(node0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node1 = Node.newString((-175), "Error");
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax0.getExceptionHandler(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = Node.newString("y/KupO;pS8=C", 2, 16);
      assertFalse(node0.isFunction());
      
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      int int0 = NodeUtil.getCount(node0, nodeUtil_MatchDeclaration0, nodeUtil_BooleanResultPredicate0);
      assertEquals(0, int0);
      assertEquals(40, node0.getType());
      assertEquals(8208, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-2234)).when(node0).getType();
      Predicate<Node> predicate0 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.Node.class));
      boolean boolean0 = NodeUtil.containsType(node0, 35, predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newString(0, "dR)");
      boolean boolean0 = node0.isUnscopedQualifiedName();
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(114);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.opToStr(42);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
      assertEquals(44, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newNumber(797.3856811);
      NodeUtil.isImmutableValue(node0);
      boolean boolean0 = NodeUtil.isLoopStructure(node0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-3864), (-3864)).when(node0).getType();
      boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
      Node node1 = Node.newString("2t2F]");
      boolean boolean1 = NodeUtil.isForIn(node1);
      assertFalse(node1.isFor());
      assertTrue(boolean1 == boolean0);
      assertTrue(node1.isString());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(3136, 3136, 3136);
      NodeUtil.isImmutableValue(node0);
      assertFalse(node0.isExprResult());
      
      NodeUtil.isExprCall(node0);
      assertEquals(12848192, node0.getSourcePosition());
      assertEquals(3136, node0.getType());
      assertEquals(3136, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      NodeUtil.getLoopCodeBlock(node0);
      assertEquals(49164, node0.getSourcePosition());
      assertEquals(12, node0.getType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = new Node(12);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(12, node0.getType());
      assertEquals((-1), node0.getCharno());
      
      boolean boolean0 = NodeUtil.isValidPropertyName("$JnwLj");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      NodeUtil.newUndefinedNode(node0);
      int int0 = NodeUtil.getInverseOperator(43);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node(12);
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node(12);
      Node node1 = node0.removeFirstChild();
      assertNull(node1);
      
      NodeUtil.evaluatesToLocalValue(node0);
      assertEquals(12, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newNumber(797.3856811);
      Node node1 = node0.removeChildren();
      assertNull(node1);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = new Node(3136, 3136, 3136);
      Node node1 = node0.cloneTree();
      assertEquals(12848192, node1.getSourcePosition());
      assertNotSame(node1, node0);
      assertEquals(3136, node1.getType());
      
      int int0 = NodeUtil.getInverseOperator(0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1, 38, 149).when(node0).getType();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newString("2t2F]");
      NodeUtil.evaluatesToLocalValue(node0, (Predicate<Node>) null);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      
      String string0 = NodeUtil.trimJsWhiteSpace("2t2F]");
      assertEquals("2t2F]", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newNumber((double) 4);
      assertFalse(node0.isAssign());
      
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getFirstChild();
      doReturn(true).when(node1).isExprResult();
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node1);
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      NodeUtil.mayEffectMutableState(node0);
      // Undeclared exception!
      try { 
        node0.addChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newNumber(797.3856811);
      Node node1 = new Node((-2580), node0, node0);
      assertEquals((-2580), node1.getType());
      assertTrue(node1.hasOneChild());
      assertEquals((-1), node1.getLineno());
      
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "AMBIGUOUS_FUNCTION_DECL");
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      Node node1 = new Node(3506, node0, node0, 54, 37);
      assertEquals(3506, node1.getType());
      assertEquals(221221, node1.getSourcePosition());
      
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
      assertFalse(boolean0);
      assertTrue(node0.isName());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      NodeUtil.mayEffectMutableState(node0);
      assertFalse(node0.isString());
      assertEquals(49164, node0.getSourcePosition());
      
      Node node1 = Node.newString("y/KupO;pS8=C", (-2364), (-35));
      assertEquals(40, node1.getType());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newString("", (-585), 116);
      NodeUtil.copyNameAnnotations(node0, node0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("AMBIGUOUS_FUNCTION_DECL", (Node) null);
      NodeUtil.isSimpleOperatorType(48);
      node0.setWasEmptyNode(false);
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isVar());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newString("$JnwLj");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertEquals(40, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newNumber(797.3856811);
      boolean boolean0 = node0.getBooleanProp(48);
      assertTrue(node0.isNumber());
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(49, 148, 32).when(node1).getType();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newNumber(797.3856811);
      Node node1 = Node.newString(49, "_3cASS");
      node0.isEquivalentTo(node1);
      boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(87, 3567, 3567).when(node0).getType();
      NodeUtil.mayHaveSideEffects(node0);
      SyntheticAst syntheticAst0 = new SyntheticAst("NaN");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newNumber(797.3856811);
      node0.getBooleanProp(48);
      Node node1 = new Node((-2580), node0, node0);
      node0.addChildrenToFront(node1);
      assertEquals((-2580), node1.getType());
      assertEquals((-1), node1.getSourcePosition());
      
      NodeUtil.mayHaveSideEffects(node0, (AbstractCompiler) null);
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(118);
      Node node0 = Node.newString("y9tA]z9.>dg9XWS", 31, 31);
      node0.setLineno(16);
      assertEquals(16, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1441, 1441, 1441).when(node0).getType();
      NodeUtil.mayHaveSideEffects(node0);
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      Node node1 = NodeUtil.booleanNode(true);
      // Undeclared exception!
      try { 
        NodeUtil.isConstantByConvention(codingConvention0, node1, node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // TRUE is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = Node.newString("y/KupO;pS8=C", 2, 16);
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assignment op:STRING y/KupO;pS8=C 2
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = Node.newString("y/KupO;pS8=C", 2, 16);
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
      boolean boolean0 = NodeUtil.referencesThis(node0);
      assertEquals(8208, node0.getSourcePosition());
      assertFalse(boolean0);
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      NodeUtil.mayEffectMutableState(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assignment op:EQ 12
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      NodeUtil.mayEffectMutableState(node0);
      boolean boolean0 = NodeUtil.referencesThis(node0);
      assertEquals(49164, node0.getSourcePosition());
      assertEquals(12, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(49, 148, 32).when(node1).getType();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
      Node node2 = new Node(47, node0, node0, node0, 51, (-646));
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      boolean boolean0 = nodeUtil_NumbericResultPredicate0.apply(node2);
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      assertEquals(47, node2.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "AMBIGUOUS_FUNCTION_DECL");
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assignment op:NAME AMBIGUOUS_FUNCTION_DECL [is_constant_name: 1]
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newString("$JnwLj");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals((-1), node0.getLineno());
      assertEquals(40, node0.getType());
      
      boolean boolean0 = NodeUtil.isAssociative(96);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-3864), (-3864)).when(node0).getType();
      NodeUtil.isLiteralValue(node0, false);
      Node node1 = new Node(29, node0, node0, node0, node0, 4095, 45);
      boolean boolean0 = NodeUtil.isBooleanResult(node1);
      assertEquals(16773165, node1.getSourcePosition());
      assertEquals(29, node1.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newNumber(797.3856811);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = new Node(3136, 3136, 3136);
      NodeUtil.isImmutableValue(node0);
      node0.setLineno(438);
      assertEquals(438, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = Node.newString("y/KupO;pS8=C", 2, 16);
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
      node0.setWasEmptyNode(false);
      assertEquals(8208, node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = new Node(12);
      Node node1 = Node.newString("$JnwLj");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // EQ does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = new Node(3136, 3136, 3136);
      NodeUtil.isImmutableValue(node0);
      // Undeclared exception!
      try { 
        node0.getAncestor((-400));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = new Node(12);
      Node node1 = Node.newString("$JnwLj");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(40, node1.getType());
      
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = new Node(12);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      Node node2 = Node.newString("$JnwLj");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.evaluatesToLocalValue(node2, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(node2.isString());
      
      boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
      assertEquals(122, node1.getType());
      assertFalse(boolean0);
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = Node.newString(0, "I:fb6|o8)([%bql", 8198, 524288);
      assertEquals(33583103, node0.getSourcePosition());
      assertEquals(0, node0.getType());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "AMBIGUOUS_FUNCTION_DECL");
      node0.children();
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      try { 
        node0.setString("k");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // EQ 12 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertFalse(node0.isNumber());
      assertTrue(node1.isVoid());
      
      String string0 = node0.checkTreeEquals(node1);
      assertEquals(12, node1.getCharno());
      assertEquals("Node tree inequality:\nTree1:\nEQ 12\n\n\nTree2:\nVOID 12\n    NUMBER 0.0 12\n\n\nSubtree1: EQ 12\n\n\nSubtree2: VOID 12\n    NUMBER 0.0 12\n", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      NodeUtil.setDebugInformation(node0, node0, "uLC1.t!G9|q1");
      assertEquals(12, node0.getType());
      
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) jqueryCodingConvention0, "uLC1.t!G9|q1", node0, "-MS+SsES.2!A<L`,M");
      assertEquals(49164, node1.getSourcePosition());
      assertTrue(node1.isGetProp());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      node0.setLineno(110);
      assertEquals(110, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = node1.isEquivalentTo(node1);
      assertEquals(1, node1.getChildCount());
      assertFalse(node0.isNull());
      assertEquals(122, node1.getType());
      assertTrue(boolean0);
      assertEquals(49164, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      boolean boolean0 = node0.isQualifiedName();
      assertEquals(12, node0.getType());
      assertEquals(49164, node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "AMBIGUOUS_FUNCTION_DECL");
      // Undeclared exception!
      try { 
        NodeUtil.copyNameAnnotations(node0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newString("y/KupO;pS8=C", 2, 16);
      Node node1 = node0.clonePropsFrom(node0);
      assertEquals(8208, node1.getSourcePosition());
      assertEquals(40, node1.getType());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = Node.newNumber(797.3856811);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getParent();
      doReturn(49, 15, 2513, 1).when(node1).getType();
      doReturn("y9tA]z9.>dg9XWS").when(node1).toString();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodey9tA]z9.>dg9XWS
         //  parent:NUMBER 797.3856811
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newString("6WQ@q#<ugW");
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING 6WQ@q#<ugW is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = new Node(3136, 3136, 3136);
      Node node1 = node0.getAncestor(3136);
      assertNull(node1);
      assertEquals(3136, node0.getType());
      assertEquals(12848192, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      boolean boolean0 = node0.isEquivalentTo(node0);
      boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
      assertEquals(49164, node0.getSourcePosition());
      assertEquals(12, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = Node.newString("aLXy#s}l", 37, 43);
      NodeUtil.isConstantByConvention(codingConvention0, node0, node0);
      assertEquals(40, node0.getType());
      assertEquals(151595, node0.getSourcePosition());
      assertEquals(43, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getLastChild();
      doReturn("1L(ai=EHl-b)").when(node0).getString();
      doReturn(2).when(node0).getType();
      doReturn(true).when(node0).isGetProp();
      boolean boolean0 = NodeUtil.isConstantByConvention(codingConvention0, node0, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node0).getChildCount();
      doReturn(true).when(node0).isTry();
      boolean boolean0 = NodeUtil.hasFinally(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      String string0 = NodeUtil.getArrayElementStringValue(node1);
      assertEquals(122, node1.getType());
      assertEquals(12, node0.getType());
      assertEquals("", string0);
      assertEquals(49164, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = NodeUtil.precedence(16);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "AMBIGUOUS_FUNCTION_DECL");
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertTrue(node0.isName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(node0).isNull();
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(321);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 321
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "AMBIGUOUS_FUNCTION_DECL");
      boolean boolean0 = NodeUtil.mayBeString(node0, true);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
      assertEquals(38, node0.getType());
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isFalse());
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.getVarsDeclaredInBranch(node1);
      assertEquals(49164, node1.getSourcePosition());
      assertEquals(12, node0.getType());
      assertTrue(node1.isVoid());
      assertFalse(node1.isFunction());
      assertEquals(12, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      NodeUtil.getVarsDeclaredInBranch(node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertEquals(12, node0.getType());
      assertEquals(49164, node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newString("2t2F]");
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getParent();
      doReturn(true).when(node1).isFunction();
      doReturn(true).when(node1).isName();
      Collection<Node> collection0 = NodeUtil.getVarsDeclaredInBranch(node1);
      assertFalse(collection0.contains(node1));
      
      NodeUtil.evaluatesToLocalValue(node0, (Predicate<Node>) null);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      int int0 = NodeUtil.getNameReferenceCount(node1, "R8%p=rOtAUME*udy");
      assertFalse(node0.isName());
      assertEquals(0, int0);
      assertEquals(49164, node1.getSourcePosition());
      assertTrue(node1.isVoid());
      assertEquals(12, node0.getType());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = new Node(43);
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      NodeUtil.isPrototypeProperty(node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertEquals(49164, node0.getSourcePosition());
      assertEquals(12, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = new Node(12);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      // Undeclared exception!
      try { 
        node0.removeChild(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = NodeUtil.getSourceName((Node) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getParent();
      doReturn((StaticSourceFile) null).when(node0).getStaticSourceFile();
      StaticSourceFile staticSourceFile0 = NodeUtil.getSourceFile(node0);
      assertNull(staticSourceFile0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test104()  throws Throwable  {
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("zSoA+rOl+!s\"");
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getParent();
      doReturn((StaticSourceFile) null).when(node0).getStaticSourceFile();
      StaticSourceFile staticSourceFile0 = NodeUtil.getSourceFile(node0);
      assertSame(staticSourceFile0, jSSourceFile0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = new Node(33);
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
      assertEquals(37, node1.getType());
      assertTrue(node0.isGetProp());
      assertTrue(boolean0);
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getParent();
      doReturn("new child has existing parent").when(node0).getSourceFileName();
      String string0 = NodeUtil.getSourceName(node0);
      assertEquals("new child has existing parent", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(node0).isGetElem();
      doReturn(false).when(node0).isGetProp();
      Node[] nodeArray0 = new Node[7];
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = new Node(3136, 3136, 3136);
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 3136
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.numberNode(100.0, node0);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got NUMBER
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = Node.newString("aLXy#s}l", 37, 43);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getFirstChild();
      doReturn(124).when(node1).getType();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertEquals(151595, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(jSDocInfo0).when(node0).getJSDocInfo();
      JSDocInfo jSDocInfo1 = NodeUtil.getBestJSDocInfo(node0);
      assertFalse(jSDocInfo1.isDeprecated());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((JSDocInfo) null).when(node0).getJSDocInfo();
      doReturn((Node) null).when(node0).getParent();
      JSDocInfo jSDocInfo0 = NodeUtil.getBestJSDocInfo(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NodeUtil.isCommutative(42);
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Node node1 = new Node(2778, node0, node0, node0, 54, 146);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2778
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      boolean boolean0 = node0.isOnlyModifiesThisCall();
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.mayHaveSideEffects(node0);
      assertEquals(12, node0.getType());
      assertEquals(49164, node0.getSourcePosition());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      assertEquals(49164, node1.getSourcePosition());
      assertTrue(node2.isVoid());
      
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertEquals(12, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = new Node(12);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(12, node0.getType());
      assertEquals((-1), node0.getLineno());
      
      boolean boolean0 = NodeUtil.isAssociative(96);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = new Node(12);
      node0.addChildToFront(node0);
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("a?~1u*1[I");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = Node.newString("y/KupO;pS8=C", 2, 16);
      Node node1 = new Node(92, node0, node0);
      NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchDeclaration0);
      assertEquals(92, node1.getType());
      
      NodeUtil.evaluatesToLocalValue(node0);
      assertEquals(8208, node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("AMBIGUOUS_FUNCTION_DECL", (Node) null);
      boolean boolean0 = NodeUtil.isSimpleOperatorType(48);
      assertFalse(boolean0);
      
      NodeUtil.isForIn(node0);
      assertFalse(node0.isFor());
      assertEquals(118, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isVar());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newNumber(797.3856811);
      boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
      boolean boolean1 = NodeUtil.isBooleanResult(node0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = new Node(52);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(node0.isExprResult());
      
      boolean boolean1 = NodeUtil.isExprCall(node0);
      assertTrue(boolean1 == boolean0);
      assertTrue(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertTrue(boolean0);
      assertEquals(44, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newString("", (-585), 116);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertEquals((-1), node0.getLineno());
      assertEquals(40, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node(12);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertEquals(12, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      assertFalse(node0.isHook());
      assertFalse(node0.isOr());
      
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getParent();
      doReturn(false).when(node1).isFunction();
      Node node2 = NodeUtil.getBestLValue(node1);
      assertEquals(12, node0.getType());
      assertEquals(49164, node0.getSourcePosition());
      assertNull(node2);
      assertEquals(12, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = Node.newString("y/KupO;pS8=C", 2, 16);
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
      Node node1 = new Node(36, node0, node0, node0);
      assertEquals(36, node1.getType());
      assertTrue(node0.isString());
      assertEquals(8208, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = NodeUtil.getInverseOperator(16);
      assertEquals(14, int0);
      
      Node node0 = Node.newString("y/KupO;pS8=C", 2, 16);
      Node node1 = new Node(92, node0, node0);
      assertEquals(8208, node0.getSourcePosition());
      assertTrue(node0.isString());
      assertEquals(92, node1.getType());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = NodeUtil.getInverseOperator(17);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "AMBIGUOUS_FUNCTION_DECL");
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
      boolean boolean1 = NodeUtil.referencesThis(node0);
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(boolean1 == boolean0);
      assertEquals(38, node0.getType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      assertFalse(node0.isFunction());
      
      NodeUtil.getNearestFunctionName(node0);
      assertEquals(49164, node0.getSourcePosition());
      assertEquals(12, node0.getType());
      assertEquals(12, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = new Node(12);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
      assertEquals(12, node0.getType());
      assertTrue(node1.isVoid());
      assertEquals((-1), node1.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newNumber(797.3856811);
      boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
      assertFalse(boolean0);
      
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = Node.newString(0, "dR)");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.isSimpleOperatorType(114);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "AMBIGUOUS_FUNCTION_DECL");
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = Node.newNumber(797.3856811);
      NodeUtil.mayHaveSideEffects(node0, (AbstractCompiler) null);
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertTrue(boolean0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
      assertFalse(boolean0);
      
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(49, 148, 32).when(node0).getType();
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("com.google.javascript.rhino.jstype.FunctionType$Kind").when(node0).getQualifiedName();
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(node1).getType();
      boolean boolean1 = NodeUtil.mayHaveSideEffects(node1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(51);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = new Node(52);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(node0.isGetProp());
      assertFalse(boolean0);
      
      NodeUtil.getPrototypeClassName(node0);
      assertTrue(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
      
      Node node1 = node0.useSourceInfoIfMissingFrom(node0);
      assertEquals(12, node1.getType());
      assertEquals(49164, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("7q\"}{Yt-");
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      Node node0 = syntheticAst0.getAstRoot(abstractCompiler0);
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      assertFalse(boolean0);
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      NodeUtil.isCallOrNew(node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertEquals(49164, node0.getSourcePosition());
      assertEquals(12, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "AMBIGUOUS_FUNCTION_DECL");
      Node node1 = new Node(8367, node0, node0);
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 21:42:41 GMT 2019
 */

package org.joda.time.chrono;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.LenientChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ISOChronology_ESTest extends ISOChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(iSOChronology0);
      lenientChronology0.getDateTimeMillis((long) 188, 188, 188, 188, 188);
      LenientChronology lenientChronology1 = LenientChronology.getInstance(lenientChronology0);
      assertNotSame(lenientChronology0, lenientChronology1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1, 1, 1);
      assertEquals((-62135597972000L), dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 3);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      iSOChronology0.assemble(assembledChronology_Fields0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(dateTimeZone0).getID();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(dateTimeZone0).toString();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertNotNull(iSOChronology0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test4()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 3);
      assertEquals(1566078154700L, mutableDateTime0.getMillis());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      long long0 = iSOChronology0.getDateTimeMillis(0, 4, 2, 0);
      assertEquals((-62159270400000L), long0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test5()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 3);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      long long0 = lenientChronology0.getDateTimeMillis(5, 0, 4, (-794));
      assertEquals(1566078153710L, mutableDateTime0.getMillis());
      assertEquals((-62011959572794L), long0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test6()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 3);
      assertEquals(1566078152566L, mutableDateTime0.getMillis());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      long long0 = iSOChronology0.getDateTimeMillis((long) 4, 1, 5, 2, 4);
      assertEquals(302004L, long0);
  }
}

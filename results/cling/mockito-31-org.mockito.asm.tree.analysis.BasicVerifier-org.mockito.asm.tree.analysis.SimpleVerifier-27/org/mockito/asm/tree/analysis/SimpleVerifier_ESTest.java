/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 08:07:19 GMT 2019
 */

package org.mockito.asm.tree.analysis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mockito.asm.Type;
import org.mockito.asm.tree.IntInsnNode;
import org.mockito.asm.tree.JumpInsnNode;
import org.mockito.asm.tree.LabelNode;
import org.mockito.asm.tree.TypeInsnNode;
import org.mockito.asm.tree.analysis.AnalyzerException;
import org.mockito.asm.tree.analysis.BasicValue;
import org.mockito.asm.tree.analysis.SimpleVerifier;
import org.mockito.asm.tree.analysis.SourceValue;
import org.mockito.asm.tree.analysis.Value;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SimpleVerifier_ESTest extends SimpleVerifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      Type type0 = Type.getObjectType("[S");
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(44, "[S");
      Value value0 = simpleVerifier0.newValue(type0);
      BasicValue basicValue0 = (BasicValue)simpleVerifier0.copyOperation(typeInsnNode0, value0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      IntInsnNode intInsnNode0 = new IntInsnNode(43, 43);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = simpleVerifier0.copyOperation(intInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      LabelNode labelNode0 = new LabelNode();
      // Undeclared exception!
      try { 
        simpleVerifier0.unaryOperation(labelNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicVerifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SimpleVerifier simpleVerifier0 = new SimpleVerifier(type0, type0, linkedList0, false);
      Type type1 = Type.getObjectType("[S");
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(37, "[S");
      Value value0 = simpleVerifier0.newValue(type1);
      BasicValue basicValue0 = (BasicValue)simpleVerifier0.copyOperation(typeInsnNode0, value0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SimpleVerifier simpleVerifier0 = new SimpleVerifier(type0, type0, linkedList0, false);
      Type type1 = Type.getObjectType("[S");
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(27, "[S");
      Value value0 = simpleVerifier0.newValue(type1);
      BasicValue basicValue0 = (BasicValue)simpleVerifier0.copyOperation(typeInsnNode0, value0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SimpleVerifier simpleVerifier0 = new SimpleVerifier(type0, type0, linkedList0, false);
      Type type1 = Type.LONG_TYPE;
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(26, "[S");
      Value value0 = simpleVerifier0.newValue(type1);
      Value value1 = simpleVerifier0.copyOperation(typeInsnNode0, value0);
      assertEquals(2, value1.getSize());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SimpleVerifier simpleVerifier0 = new SimpleVerifier(type0, type0, linkedList0, false);
      Type type1 = Type.getObjectType("[S");
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(47, "[S");
      Value value0 = simpleVerifier0.newValue(type1);
      BasicValue basicValue0 = (BasicValue)simpleVerifier0.copyOperation(typeInsnNode0, value0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SimpleVerifier simpleVerifier0 = new SimpleVerifier();
      LabelNode labelNode0 = new LabelNode();
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(21, labelNode0);
      SourceValue sourceValue0 = new SourceValue(268435456);
      try { 
        simpleVerifier0.copyOperation(jumpInsnNode0, sourceValue0);
        fail("Expecting exception: AnalyzerException");
      
      } catch(AnalyzerException e) {
         //
         // Expected I, but found org.mockito.asm.tree.analysis.SourceValue@0
         //
         verifyException("org.mockito.asm.tree.analysis.BasicVerifier", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 19:54:37 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = StringUtils.substring("Minimum abbreviation width is 4", 17, 17);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringUtils.repeat("*!;DHvk$b`<Fzy9+;", 1);
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = StringUtils.repeat("G/NzF`T ", 1);
      assertEquals("G/NzF`T ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("G/NzF`T ");
      assertEquals("G/NzF`T", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = StringUtils.repeat("", 1);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWith("iPN${aMqwG@/Xbd'M", "c:NTQ26J%'(tD{kya");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = StringUtils.repeat("G/NzF`T ", 1);
      assertEquals("G/NzF`T ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("G/NzF`T ", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, "5'q@qq");
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat("5'q@qq", 1);
      assertEquals("5'q@qq", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = StringUtils.repeat("", 1);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = StringUtils.repeat("*!;DkbF`<Fzy9+;", 1);
      assertNotNull(string0);
      assertEquals("*!;DkbF`<Fzy9+;", string0);
      
      boolean boolean0 = StringUtils.endsWith((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "\\u";
      String[] stringArray0 = new String[13];
      boolean boolean0 = StringUtils.endsWithAny(string0, stringArray0);
      assertFalse(boolean0);
      
      String string1 = StringUtils.trim(string0);
      String string2 = StringUtils.repeat(string1, 1);
      assertEquals("\\u", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringUtils.normalizeSpace((String) null);
      String string0 = StringUtils.repeat("", 4464);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = StringUtils.repeat("", 232);
      String string1 = StringUtils.normalizeSpace("");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringUtils.normalizeSpace((String) null);
      String string0 = StringUtils.repeat("]9PU<;@4 # l", 4452);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = StringUtils.repeat("fB", 21);
      assertEquals("fBfBfBfBfBfBfBfBfBfBfBfBfBfBfBfBfBfBfBfBfB", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("fB");
      assertEquals("fB", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = StringUtils.repeat("", 7);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWith("iPN${aMqwG@/Xbd'M", "c:NTQ26J%'(tD{kya");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = StringUtils.repeat("G/NzF`T ", 57);
      assertNotNull(string0);
      assertEquals("G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T ", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("G/NzF`T ", "G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T G/NzF`T ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = StringUtils.repeat("", 745);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("[", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = StringUtils.repeat("CnM]1r8Vizm", 4933);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("CnM]1r8Vizm", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = StringUtils.repeat("", 122);
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringUtils.endsWith((String) null, (String) null);
      String string0 = StringUtils.repeat("&,", 745);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = StringUtils.repeat("", 6406);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithAny("", (String[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat("N\"B0ws-zFMY|9O$kCoJ:", 10);
      assertEquals("N\"B0ws-zFMY|9O$kCoJ:N\"B0ws-zFMY|9O$kCoJ:N\"B0ws-zFMY|9O$kCoJ:N\"B0ws-zFMY|9O$kCoJ:N\"B0ws-zFMY|9O$kCoJ:N\"B0ws-zFMY|9O$kCoJ:N\"B0ws-zFMY|9O$kCoJ:N\"B0ws-zFMY|9O$kCoJ:N\"B0ws-zFMY|9O$kCoJ:N\"B0ws-zFMY|9O$kCoJ:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = StringUtils.repeat("", 48);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWith((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "\\u";
      String[] stringArray0 = new String[13];
      StringUtils.endsWithAny(string0, stringArray0);
      String string1 = StringUtils.repeat("", 6);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, "?O5'q@qv");
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat("k=", 107);
      assertNotNull(string0);
      assertEquals("k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=k=", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = StringUtils.repeat("Cannot clone ClonPPble :ype ", 32);
      assertEquals("Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.endsWithAny("Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype Cannot clone ClonPPble :ype ", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = StringUtils.repeat("2", 1);
      assertEquals("2", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "2";
      boolean boolean0 = StringUtils.endsWithAny("2", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = StringUtils.repeat("", 3510);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "N\"B0ws-zFMY|$kCoJ:";
      boolean boolean0 = StringUtils.endsWithAny("N\"B0ws-zFMY|$kCoJ:", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringUtils.repeat("G/NzF`T ", 57);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "G/NzF`T ";
      StringUtils.endsWithAny("G/NzF`T ", stringArray0);
  }
}

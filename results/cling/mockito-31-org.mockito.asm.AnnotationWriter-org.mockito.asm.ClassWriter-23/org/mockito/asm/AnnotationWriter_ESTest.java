/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 09:12:09 GMT 2019
 */

package org.mockito.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.AnnotationVisitor;
import org.mockito.asm.AnnotationWriter;
import org.mockito.asm.ByteVector;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.FieldVisitor;
import org.mockito.asm.Item;
import org.mockito.asm.MethodWriter;
import org.mockito.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AnnotationWriter_ESTest extends AnnotationWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-579));
      classWriter0.visitSource("XpTi4MJ", "XpTi4MJ");
      Item[] itemArray0 = new Item[2];
      classWriter0.typeTable = itemArray0;
      int int0 = classWriter0.addUninitializedType("XlY*", (-579));
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("-BE\u0001Xlmolt0gBl");
      assertEquals(2, int1);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(91, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      Item[] itemArray0 = new Item[2];
      classWriter0.typeTable = itemArray0;
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(24, byteArray0.length);
      
      classWriter0.addUninitializedType("XlY*", (-569));
      int int0 = classWriter0.addType("-BE\u0001Xlnolt0gBl");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1309);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "PHH]m!Xt0)| ";
      stringArray0[1] = "";
      stringArray0[2] = "Synthetic";
      classWriter0.visit(2, (-1174), "PHH]m!Xt0)| ", "PHH]m!Xt0)| ", "", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(114, byteArray0.length);
      
      int int0 = classWriter0.newConst("");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "KpXbY+lvc0a`{";
      stringArray0[1] = "y=CL`B2da.PvT";
      stringArray0[2] = "KpXbY+lvc0a`{";
      stringArray0[3] = "KpXbY+lvc0a`{";
      classWriter0.visit((-569), (-569), "KpXbY+lvc0a`{", "KpXbY+lvc0a`{", "y=CL`B2da.PvT", stringArray0);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newConstItem("}rJzR0OR@yh^");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1309);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "PHH]m!Xt0)| ";
      stringArray0[1] = "";
      stringArray0[2] = "Synthetic";
      classWriter0.visit(2, (-1174), "PHH]m!Xt0)| ", "PHH]m!Xt0)| ", "", stringArray0);
      classWriter0.toByteArray();
      Short short0 = new Short((short) (-194));
      Item item0 = classWriter0.newConstItem(short0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "KpXbY+lvc0a`{";
      stringArray0[1] = "y=CL`B2da.PvT";
      stringArray0[2] = "KpXbY+lvc0a`{";
      stringArray0[3] = "KpXbY+lvc0a`{";
      classWriter0.visit((-569), (-569), "KpXbY+lvc0a`{", "KpXbY+lvc0a`{", "y=CL`B2da.PvT", stringArray0);
      classWriter0.toByteArray();
      Short short0 = new Short((short)1796);
      FieldVisitor fieldVisitor0 = classWriter0.visitField((-661), "\"P@/Ebmg[tpCkTXMbl", "", "", short0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      classWriter0.newMethodItem("8CnL", "void", "void", false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8CnL";
      classWriter0.visit(316, (-784), "Bb)bA[e7>cm&|3p>tAb", "Bb)bA[e7>cm&|3p>tAb", "Bb)bA[e7>cm&|3p>tAb", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(117, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      String[] stringArray0 = new String[0];
      classWriter0.visit(2, 1, "java/lang/Object", "java/lang/Object", (String) null, stringArray0);
      classWriter0.invalidFrames = true;
      classWriter0.toByteArray();
      Item item0 = classWriter0.newDouble(630.4380026);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      String[] stringArray0 = new String[0];
      classWriter0.visit(2, (-908), "java/lang/Object", "java/lang/Object", "java/lang/Object", stringArray0);
      classWriter0.invalidFrames = true;
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(103, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3127);
      classWriter0.invalidFrames = true;
      classWriter0.newConstItem("_$4}\"/S}");
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2047);
      ClassWriter classWriter1 = new ClassWriter(2);
      classWriter0.addUninitializedType("EnclosingMethod", 1);
      classWriter1.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter1.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3119);
      classWriter0.newInteger(1324);
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1309);
      classWriter0.visitAnnotation("Synthetic", false);
      classWriter0.toByteArray();
      Short short0 = new Short((short) (-194));
      Item item0 = classWriter0.newConstItem(short0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.visitAnnotation("Nk#eqx", false);
      classWriter0.newMethodItem("Nk#eqx", "Nk#eqx", "Nk#eqx", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(88, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(67);
      classWriter0.newDouble(0.0);
      classWriter0.visitAnnotation("Synthetic", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(87, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      classWriter0.visitAnnotation("", false);
      Boolean boolean0 = Boolean.TRUE;
      classWriter0.newConstItem(boolean0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(74, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(67);
      classWriter0.visitAnnotation("Synthetic", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(78, byteArray0.length);
      
      classWriter0.addUninitializedType("", 9);
      int int0 = classWriter0.addType("l1[");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      Boolean boolean0 = Boolean.valueOf("Nk#eqx");
      classWriter0.newConst(boolean0);
      Item item0 = classWriter0.newMethodItem("8CnL", "void", "void", false);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      classWriter0.newConst("Code");
      Item item0 = classWriter0.newDouble(6);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      Item[] itemArray0 = new Item[1];
      classWriter0.typeTable = itemArray0;
      classWriter0.addUninitializedType("XlY*", (-569));
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector0, 2);
      // Undeclared exception!
      try { 
        annotationWriter0.visit("org.mockito.asm.Label", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.ClassWriter@5a4d137
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3099);
      Short short0 = new Short((short) (-2250));
      classWriter0.newConstItem(short0);
      classWriter0.visitAnnotation("org.mockito.asm.ClassWriter", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(99, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      int int0 = classWriter0.newConst("Code");
      assertEquals(2, int0);
      
      classWriter0.newConstItem("Code");
      classWriter0.visitAnnotation("HK5y91).{LzWGzcq4j", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(95, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.visitAnnotation("Nk#eqx", true);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newMethodItem("", "value ", "R", false);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(67);
      classWriter0.visitAnnotation("Synthetic", true);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newDouble(0.0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Nk#eqx";
      stringArray0[1] = "j7=od&I`lg)CV@Ty";
      stringArray0[2] = "Nk#eqx";
      stringArray0[3] = "Bt~8,BA";
      classWriter0.visit(1, (-316), "JJ(fItILMo>~ 9:6", "j7=od&I`lg)CV@Ty", "6r2ZpHSAHZtC+_", stringArray0);
      classWriter0.visitAnnotation("j7=od&I`lg)CV@Ty", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(218, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.visitAnnotation("Nk#eqx", true);
      Boolean boolean0 = new Boolean(true);
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(2, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(78, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", true);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("java/lang/String", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.visitAnnotation("Nk#eqx", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(73, byteArray0.length);
      
      classWriter0.addUninitializedType("Nk#eqx", 1);
      int int0 = classWriter0.addType("Deprecated");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("tk#eqo", true);
      Boolean boolean0 = new Boolean("tk#eqo");
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(2, int0);
      
      annotationVisitor0.visit("tk#eqo", boolean0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(83, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1309);
      classWriter0.visitSource("", "");
      classWriter0.newLong(3L);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(86, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      int int0 = classWriter0.newConst("Code");
      assertEquals(2, int0);
      
      classWriter0.newConstItem("Code");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(34, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      classWriter0.visitSource("", "");
      int int0 = classWriter0.newMethod("p[#Q1~ifn%&]", "java/lang/String", "", false);
      assertEquals(6, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(124, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2047);
      classWriter0.newDouble(2138.179424724079);
      classWriter0.visitSource("org.mockito.asm.ClassWriter", "jcr.+R?SlGQmngHs");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(129, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1309);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "PHH]m!Xt0)| ";
      classWriter0.visitSource("PHH]m!Xt0)| ", "");
      stringArray0[1] = "";
      stringArray0[2] = "Synthetic";
      classWriter0.visit(2, (-1174), "PHH]m!Xt0)| ", "PHH]m!Xt0)| ", "", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(164, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1309);
      classWriter0.visitSource("PHH]m!Xt0)| ", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(89, byteArray0.length);
      
      int int0 = classWriter0.newConst("");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      Boolean boolean0 = Boolean.valueOf("C_4?IdFp;Amj:,T");
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
      
      classWriter0.visitSource("u!Y0x(3A@BS", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(93, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1309);
      classWriter0.visitSource("Synthetic", (String) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(57, byteArray0.length);
      
      int int0 = classWriter0.newField("5LVYm,9VA'Xu", "5LVYm,9VA'Xu", "EnclosingMethod");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3119);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("Label offset position has not been resolved yet", false);
      classWriter0.visitSource("", "");
      classWriter0.toByteArray();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@18033968
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3119);
      Boolean boolean0 = Boolean.TRUE;
      classWriter0.newConstItem(boolean0);
      classWriter0.visitSource("SourceFile", "a``!XcIk9![gx2J");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(94, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1309);
      classWriter0.visitSource("PHH]m!Xt0)| ", "");
      classWriter0.toByteArray();
      Item item0 = classWriter0.newMethodItem("PHH]m!Xt0)| ", "KwiRG;5TgAZL|l73Pl", "Synthetic", true);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-579));
      classWriter0.visitSource("XpTi4MJ", "XpTi4MJ");
      int int0 = classWriter0.addType("-BE\u0001Xlmolt0gBl");
      assertEquals(1, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(91, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      Class<Integer> class0 = Integer.class;
      Type type0 = Type.getType(class0);
      classWriter0.newConstItem(type0);
      classWriter0.visitSource("PHH]m!Xt0)| ", "PHH]m!Xt0)| ");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(124, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3099);
      Short short0 = new Short((short) (-2250));
      classWriter0.newConstItem(short0);
      classWriter0.newInteger((short) (-2250));
      classWriter0.visitSource("Deprecated", (String) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(63, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("Nk#eqx", false);
      Boolean boolean0 = Boolean.valueOf("Nk#eqx");
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(2, int0);
      
      annotationVisitor0.visit("Nk#eqx", boolean0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(85, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.visitAnnotation("Nk#eqx", false);
      classWriter0.toByteArray();
      Byte byte0 = new Byte((byte)80);
      Item item0 = classWriter0.newConstItem(byte0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3108);
      Byte byte0 = new Byte((byte)80);
      classWriter0.newConstItem(byte0);
      classWriter0.visitAnnotation("C7\"<l L<$+?3", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(84, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      Boolean boolean0 = Boolean.valueOf("Cke9x");
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
      
      String[] stringArray0 = new String[0];
      classWriter0.visit(2, (-908), "Cke9x", "Cke9x", (String) null, stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(97, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      Boolean boolean0 = Boolean.valueOf("Nk#eqx");
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8CnL";
      classWriter0.visit(316, (-784), "Bb)bA[e7>cm&|3p>tAb", "Bb)bA[e7>cm&|3p>tAb", "Bb)bA[e7>cm&|3p>tAb", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(105, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      Class<Integer> class0 = Integer.class;
      Type type0 = Type.getType(class0);
      classWriter0.newConstItem(type0);
      classWriter0.visitAnnotation("Synthetic", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(101, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      Class<Integer> class0 = Integer.class;
      Type type0 = Type.getType(class0);
      classWriter0.newConstItem(type0);
      classWriter0.visitAnnotation("Synthetic", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(99, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3119);
      Item item0 = classWriter0.newFloat(1456.2092F);
      Item item1 = classWriter0.newFloat(1456.2092F);
      assertSame(item1, item0);
      
      classWriter0.visitSource("Label offset position has not been resolved yet", "qxG{DGw$?uHCr:'J4");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(146, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3119);
      classWriter0.newFloat(1456.2092F);
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 2);
      classWriter0.newFloat(1456.2092F);
      classWriter0.visitInnerClass("qxG{DGw$?uHCr:'J4", "Deprecated", "Label offset position has not been resolved yet", 3119);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3119);
      classWriter0.visitOuterClass("", "", "");
      Item item0 = classWriter0.newFloat((-731.21313F));
      Item item1 = classWriter0.newFloat((-731.21313F));
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3119);
      classWriter0.newFloat(1456.2092F);
      classWriter0.newFloat(1456.2092F);
      classWriter0.visit(1653, 3119, "", "", "", (String[]) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(55, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3119);
      Item item0 = classWriter0.newFloat(1456.2092F);
      classWriter0.visitSource((String) null, "1GU");
      Item item1 = classWriter0.newFloat(1456.2092F);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3119);
      classWriter0.newFloat(1456.2092F);
      classWriter0.newFloat(1456.2092F);
      classWriter0.visitSource("InnerClasses", (String) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(65, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      classWriter0.newFieldItem("Code", "", "");
      classWriter0.newFieldItem("Code", "", "");
      classWriter0.visitInnerClass("Hs.", (String) null, "k!m|(<%{pn#", 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3119);
      Type type0 = Type.DOUBLE_TYPE;
      classWriter0.visitField(1, "org.mockito.asm.MethodWriter", "value ", "C^", type0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(128, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3119);
      Type type0 = Type.DOUBLE_TYPE;
      classWriter0.newConstItem(type0);
      classWriter0.visitInnerClass((String) null, "Deprecated", "", 1);
      classWriter0.visitInnerClass("", "Z9,yv[#m", (String) null, 8);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3119);
      Type type0 = Type.DOUBLE_TYPE;
      classWriter0.newConstItem(type0);
      classWriter0.visitOuterClass("EnclosingMethod", "Eh\"AC|_u-oM5U-", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-581));
      classWriter0.addUninitializedType("XlY*", (-581));
      Item item0 = classWriter0.newConstItem("XlY*");
      assertNotNull(item0);
      
      int int0 = classWriter0.addUninitializedType("XlY*", (-581));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-581));
      classWriter0.addUninitializedType("XlY*", (-581));
      classWriter0.addUninitializedType("XlY*", (-581));
      classWriter0.visitOuterClass("XlY*", "Exceptions", "3Tgj#wf|4-=DW");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      classWriter0.newFieldItem("Code", "", "");
      classWriter0.newMethodItem("", "", "", true);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(50);
      ByteVector byteVector0 = classWriter0.pool;
      classWriter0.visitOuterClass("org.mockito.asm.ClassWriter", "org.mockito.asm.ClassWriter", "org.mockito.asm.ClassWriter");
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector0, 1);
      classWriter0.visitOuterClass("org.mockito.asm.ClassWriter", "org.mockito.asm.ClassWriter", "org.mockito.asm.ClassWriter");
      // Undeclared exception!
      try { 
        annotationWriter0.visit("Signature", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.ClassWriter@3109bc9b
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-587));
      classWriter0.newFieldItem("Code", "", "");
      classWriter0.newMethodItem("", "", "", true);
      classWriter0.visitInnerClass("\"", "Code", ",^uMX=1<cCV", 16777226);
      classWriter0.visitInnerClass("", "mLZ 3swo", "", 16777226);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-587));
      classWriter0.newFieldItem("Code", "", "");
      classWriter0.newMethodItem("", "", "", true);
      classWriter0.visitInnerClass("\"", "Code", ",^uMX=1<cCV", 16777226);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(108, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(50);
      classWriter0.visitOuterClass("org.mockito.asm.ClassWriter", "org.mockito.asm.ClassWriter", "org.mockito.asm.ClassWriter");
      classWriter0.visitOuterClass("org.mockito.asm.ClassWriter", "org.mockito.asm.ClassWriter", "org.mockito.asm.ClassWriter");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.mockito.asm.MethodWriter";
      classWriter0.visit(2, 2, "org.mockito.asm.ClassWriter", "org.mockito.asm.MethodWriter", "org.mockito.asm.ClassWriter", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(146, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(50);
      classWriter0.visitOuterClass("org.mockito.asm.ClassWriter", "org.mockito.asm.ClassWriter", "org.mockito.asm.ClassWriter");
      classWriter0.visitOuterClass("org.mockito.asm.ClassWriter", "org.mockito.asm.ClassWriter", "org.mockito.asm.ClassWriter");
      classWriter0.visitInnerClass("84fCA)dbR,zAW{", "org.mockito.asm.ClassWriter", (String) null, 1281);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(50);
      classWriter0.visitOuterClass("org.mockito.asm.ClassWriter", "org.mockito.asm.ClassWriter", "org.mockito.asm.ClassWriter");
      classWriter0.visitOuterClass("org.mockito.asm.ClassWriter", "org.mockito.asm.ClassWriter", "org.mockito.asm.ClassWriter");
      classWriter0.visitSource("value ", "org.mockito.asm.ClassWriter");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1309);
      classWriter0.visitField(1, "\"", "\"", "f", "f");
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("\"", false);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("f", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.ClassWriter@11086955
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1309);
      classWriter0.visitSource("Synthtc", (String) null);
      // Undeclared exception!
      try { 
        classWriter0.newConstItem((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(50);
      ByteVector byteVector0 = classWriter0.pool;
      classWriter0.visitOuterClass("org.mockito.asm.ClassWriter", (String) null, "org.mockito.asm.ClassWriter");
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector0, 1);
      // Undeclared exception!
      try { 
        annotationWriter0.visit("org.mockito.asm.ClassWriter", byteVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.ByteVector@346f4daa
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "char";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 6, "A%EXJ@c=:T#umFbM", "A%EXJ@c=:T#umFbM", "char", stringArray0, false, false);
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector0, 6);
      classWriter0.toByteArray();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        annotationWriter0.visit("r);[", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@74b9829d
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.visitOuterClass("JJ(fItILMo>~ 9:6", "Nk#eqx", "Nk#eqx");
      Type type0 = Type.DOUBLE_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3119);
      Type type0 = Type.DOUBLE_TYPE;
      classWriter0.newConstItem(type0);
      classWriter0.visitInnerClass("java/lang/Class", (String) null, "", 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3119);
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector0, 3119);
      classWriter0.visitSource((String) null, "1GU");
      // Undeclared exception!
      try { 
        annotationWriter0.visit("k~", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      Type type0 = Type.VOID_TYPE;
      classWriter0.newConstItem(type0);
      classWriter0.visitSource("uM]>lxujhPwiUGcX", "PHH]m!Xt0)| ");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(112, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      classWriter0.newLong(4294967295L);
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      classWriter0.visitAnnotation("Cke9x", false);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newLong(4294967295L);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("Cke9x", false);
      classWriter0.newLong(4294967295L);
      ByteVector byteVector0 = new ByteVector();
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("Code", byteVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.ByteVector@3dd12f79
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1309);
      classWriter0.visitAnnotation("y Rnthetic", true);
      classWriter0.newLong(3L);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(86, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      classWriter0.newLong(4294967295L);
      String[] stringArray0 = new String[0];
      classWriter0.visit(2, (-908), "java/lang/Object", "java/lang/Object", (String) null, stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(112, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2632);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "D{=9";
      stringArray0[1] = "D{=9";
      stringArray0[2] = "D{=9";
      stringArray0[3] = "D{=9";
      stringArray0[4] = "D{=9";
      stringArray0[5] = "D{=9";
      stringArray0[6] = "D{=9";
      classWriter0.visit((-316), (-38), "D{=9", "D{=9", "D{=9", stringArray0);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newLong((-2849L));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      String[] stringArray0 = new String[0];
      classWriter0.visit(2, (-908), "jrava/lon/Objfct", "jrava/lon/Objfct", (String) null, stringArray0);
      classWriter0.invalidFrames = true;
      classWriter0.toByteArray();
      Item item0 = classWriter0.newFloat(1);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2653);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "D{=9";
      stringArray0[1] = "D{=9";
      stringArray0[2] = "D{=9";
      stringArray0[3] = "D{=9";
      stringArray0[4] = "D{=9";
      stringArray0[5] = "D{=9";
      stringArray0[6] = "D{=9";
      classWriter0.visit((-316), (-38), "D{=9", "D{=9", "D{=9", stringArray0);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newFloat(2653);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3119);
      classWriter0.newFloat(1456.2092F);
      classWriter0.newFloat(1456.2092F);
      classWriter0.visitAnnotation("Label offset position has not been resolved yet", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(121, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3119);
      ByteVector byteVector0 = new ByteVector();
      classWriter0.newFloat(1456.2092F);
      Item item0 = classWriter0.newFloat(1456.2092F);
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 3119);
      // Undeclared exception!
      try { 
        annotationWriter0.visit("0", item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.Item@19c23be2
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3119);
      classWriter0.newFloat(1456.2092F);
      classWriter0.newFloat(1456.2092F);
      classWriter0.visitAnnotation("Label offset position has not been resolved yet", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(119, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3119);
      classWriter0.newFloat(1456.2092F);
      classWriter0.newFloat(1456.2092F);
      classWriter0.visitInnerClass("", "qxG{DGw$?uHCr:'J4", "", 3119);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(89, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      classWriter0.newFieldItem("Code", "", "");
      classWriter0.newFieldItem("Code", "", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(47, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      classWriter0.visitInnerClass("<#", "<#", "<#", 2);
      classWriter0.toByteArray();
      Type type0 = Type.SHORT_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", true);
      classWriter0.addType("");
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("java/lang/String", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      classWriter0.visitInnerClass("", "", "", 2);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(61, byteArray0.length);
      
      int int0 = classWriter0.addType("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("Nk#eqx", false);
      classWriter0.visitInnerClass("Nk#eqx", "Nk#eqx", "Nk#eqx", 2);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("n}Ojy@zM-8g", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.ClassWriter@55d7d10c
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3119);
      classWriter0.newMethod("T*wO4p3", "", "vV!;4PygQ)", true);
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      classWriter0.visitAnnotation("Nk#eqx", false);
      classWriter0.newMethodItem("B[yU<", "n}Ojy@zM-8g", "Synthetic", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(122, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      Boolean boolean0 = Boolean.valueOf("Nk#eqx");
      classWriter0.newConst(boolean0);
      Item item0 = classWriter0.newMethodItem("B[yU<", "n}Ojy@zM-8g", "Synthetic", true);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      classWriter0.visitAnnotation("C_4?IdFp;Amj:,T", true);
      classWriter0.newMethodItem("8qCnL", "void", "void", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(110, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1309);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "PHH]m!Xt0)| ";
      stringArray0[1] = "";
      stringArray0[2] = "Synthetic";
      classWriter0.visit(2, (-1174), "PHH]m!Xt0)| ", "PHH]m!Xt0)| ", "", stringArray0);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newMethodItem("PHH]m!Xt0)| ", "KwiRG;5TgAZL|l73Pl", "Synthetic", true);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      Type type0 = Type.VOID_TYPE;
      classWriter0.newConstItem(type0);
      classWriter0.visitAnnotation("Synthetic", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(85, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      classWriter0.invalidFrames = true;
      classWriter0.newField("][RO5TTw%n", "java/lang/Object", ";yCmQ0V1cIE~");
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1309);
      classWriter0.visitAnnotation("\"", false);
      int int0 = classWriter0.newField("SourceFile", "\"", "\"");
      assertEquals(5, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(96, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      Item item0 = classWriter0.newFieldItem("Code", "", "");
      int int0 = classWriter0.newConst("Code");
      assertEquals(6, int0);
      
      Item item1 = classWriter0.newFieldItem("Code", "", "");
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(67);
      classWriter0.visitAnnotation("Synthetic", true);
      int int0 = classWriter0.newField("Synthetic", "Synthetic", "Synthetic");
      assertEquals(4, int0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(89, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3119);
      int int0 = classWriter0.newField("5LVYm,9VA'Xu", "5LVYm,9VA'Xu", "5LVYm,9VA'Xu");
      assertEquals(4, int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "t]}X&V-";
      stringArray0[1] = "A%EXJ@c=:T#umFbM";
      stringArray0[2] = "t]}X&V-";
      stringArray0[3] = "t]}X&V-";
      stringArray0[4] = "5LVYm,9VA'Xu";
      classWriter0.visit(4, (-722), "5LVYm,9VA'Xu", "t]}X&V-", "5LVYm,9VA'Xu", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(155, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("Cke9x", false);
      String[] stringArray0 = new String[0];
      classWriter0.visit(2, (-908), "java/lang/Object", "java/lang/Object", (String) null, stringArray0);
      ByteVector byteVector0 = new ByteVector();
      classWriter0.invalidFrames = true;
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        annotationVisitor0.visit("Code", byteVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.ByteVector@568d7e98
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.visitAnnotation("j7=od&I`lg)CV@Ty", true);
      classWriter0.toByteArray();
      Type type0 = Type.DOUBLE_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Nk#eqx";
      stringArray0[1] = "j7=od&I`lg)CV@Ty";
      stringArray0[2] = "Nk#eqx";
      stringArray0[3] = "Bt~8,BA";
      classWriter0.visit(1, (-316), "JJ(fItILMo>~ 9:6", "j7=od&I`lg)CV@Ty", "6r2ZpHSAHZtC+_", stringArray0);
      classWriter0.toByteArray();
      Type type0 = Type.DOUBLE_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8CnL";
      classWriter0.visit(316, (-784), "Bb)bA[e7>cm&|3p>tAb", "Bb)bA[e7>cm&|3p>tAb", "Bb)bA[e7>cm&|3p>tAb", stringArray0);
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, false, byteVector0, byteVector0, 1732);
      classWriter0.toByteArray();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        annotationWriter0.visit("void", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@bf6a590
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      classWriter0.visitAnnotation("Uk#Vqx", false);
      Character character0 = new Character('L');
      classWriter0.newConstItem(character0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(80, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1309);
      classWriter0.visitAnnotation("Synthetic", true);
      classWriter0.toByteArray();
      Character character0 = Character.valueOf('V');
      Item item0 = classWriter0.newConstItem(character0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1309);
      classWriter0.visitSource("Synthetic", (String) null);
      classWriter0.toByteArray();
      Character character0 = Character.valueOf('V');
      Item item0 = classWriter0.newConstItem(character0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      classWriter0.visitAnnotation("Cke9x", false);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(555, 555);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1315);
      classWriter0.visitField(1315, "Signature", "", "Signature", "");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1, (-1101));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1309);
      classWriter0.visitAnnotation("Synthetic", true);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(3, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1309);
      classWriter0.visitSource("Synthetic", "Synthetic");
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(3, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      classWriter0.getCommonSuperClass("org.mockito.asm.Label", "org.mockito.asm.Label");
      classWriter0.visitAnnotation("org.mockito.asm.Label", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(90, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      classWriter0.getCommonSuperClass("org.mockito.asm.Label", "org.mockito.asm.Label");
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector0, 2);
      // Undeclared exception!
      try { 
        annotationWriter0.visit("org.mockito.asm.Label", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.asm.ClassWriter@5400cc7d
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-569));
      classWriter0.getCommonSuperClass("org.mockito.asm.Label", "org.mockito.asm.Label");
      classWriter0.visitAnnotation("u-i7?<Cf6v9c&2Xz", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(83, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-579));
      classWriter0.visitSource("XpTi4MJ", "XpTi4MJ");
      classWriter0.getCommonSuperClass("org.mockito.asm.Label", "org.mockito.asm.Label");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(91, byteArray0.length);
  }
}

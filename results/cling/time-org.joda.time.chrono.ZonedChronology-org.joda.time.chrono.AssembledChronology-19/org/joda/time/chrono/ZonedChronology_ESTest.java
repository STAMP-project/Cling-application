/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 17:36:25 GMT 2019
 */

package org.joda.time.chrono;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.GregorianCalendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.LocalDate;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.RemainderDateTimeField;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ZonedChronology_ESTest extends ZonedChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test00()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn("ii8o").when(dateTimeZone0).getID();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(dateTimeZone0).toString();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(lenientChronology0, dateTimeZone0);
      long long0 = zonedChronology0.getDateTimeMillis((-1854), 2491, (-946), (-20));
      assertEquals((-114207668372020L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertNotNull(dateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(lenientChronology0, dateTimeZone0);
      long long0 = zonedChronology0.getDateTimeMillis((long) 1, 1, 1, 1970, 1970);
      assertEquals(2031970L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null).when(chronology0).centuries();
      doReturn((DateTimeField) null).when(chronology0).centuryOfEra();
      doReturn((DateTimeField) null).when(chronology0).clockhourOfDay();
      doReturn((DateTimeField) null).when(chronology0).clockhourOfHalfday();
      doReturn((DateTimeField) null).when(chronology0).dayOfMonth();
      doReturn((DateTimeField) null).when(chronology0).dayOfWeek();
      doReturn((DateTimeField) null).when(chronology0).dayOfYear();
      doReturn((DurationField) null).when(chronology0).days();
      doReturn((DateTimeField) null).when(chronology0).era();
      doReturn((DurationField) null).when(chronology0).eras();
      doReturn((DateTimeField) null).when(chronology0).halfdayOfDay();
      doReturn((DurationField) null).when(chronology0).halfdays();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).hourOfDay();
      doReturn((DateTimeField) null).when(chronology0).hourOfHalfday();
      doReturn((DurationField) null).when(chronology0).hours();
      doReturn((DurationField) null).when(chronology0).millis();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).millisOfDay();
      doReturn((DateTimeField) null).when(chronology0).millisOfSecond();
      doReturn((DateTimeField) null).when(chronology0).minuteOfDay();
      doReturn((DateTimeField) null).when(chronology0).minuteOfHour();
      doReturn((DurationField) null).when(chronology0).minutes();
      doReturn((DateTimeField) null).when(chronology0).monthOfYear();
      doReturn((DurationField) null).when(chronology0).months();
      doReturn((DateTimeField) null).when(chronology0).secondOfDay();
      doReturn((DateTimeField) null).when(chronology0).secondOfMinute();
      doReturn((DurationField) null).when(chronology0).seconds();
      doReturn((String) null).when(chronology0).toString();
      doReturn((DateTimeField) null).when(chronology0).weekOfWeekyear();
      doReturn((DurationField) null).when(chronology0).weeks();
      doReturn((DateTimeField) null).when(chronology0).weekyear();
      doReturn((DateTimeField) null).when(chronology0).weekyearOfCentury();
      doReturn((DurationField) null).when(chronology0).weekyears();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).year();
      doReturn((DateTimeField) null).when(chronology0).yearOfCentury();
      doReturn((DateTimeField) null).when(chronology0).yearOfEra();
      doReturn((DurationField) null).when(chronology0).years();
      Chronology chronology1 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(chronology0).when(chronology1).withUTC();
      boolean boolean0 = zonedChronology0.equals(durationFieldType0);
      assertFalse(boolean0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-2147483049));
      ZonedChronology zonedChronology1 = ZonedChronology.getInstance(chronology1, dateTimeZone1);
      assertFalse(zonedChronology1.equals((Object)zonedChronology0));
  }

  @Test(timeout = 4000)
  @Ignore
  public void test04()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null).when(chronology0).centuries();
      doReturn((DateTimeField) null).when(chronology0).centuryOfEra();
      doReturn((DateTimeField) null).when(chronology0).clockhourOfDay();
      doReturn((DateTimeField) null).when(chronology0).clockhourOfHalfday();
      doReturn((DateTimeField) null).when(chronology0).dayOfMonth();
      doReturn((DateTimeField) null).when(chronology0).dayOfWeek();
      doReturn((DateTimeField) null).when(chronology0).dayOfYear();
      doReturn((DurationField) null).when(chronology0).days();
      doReturn((DateTimeField) null).when(chronology0).era();
      doReturn((DurationField) null).when(chronology0).eras();
      doReturn(0L).when(chronology0).getDateTimeMillis(anyInt() , anyInt() , anyInt() , anyInt() , anyInt() , anyInt() , anyInt());
      doReturn((DateTimeField) null).when(chronology0).halfdayOfDay();
      doReturn((DurationField) null).when(chronology0).halfdays();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).hourOfDay();
      doReturn((DateTimeField) null).when(chronology0).hourOfHalfday();
      doReturn((DurationField) null).when(chronology0).hours();
      doReturn((DurationField) null).when(chronology0).millis();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).millisOfDay();
      doReturn((DateTimeField) null).when(chronology0).millisOfSecond();
      doReturn((DateTimeField) null).when(chronology0).minuteOfDay();
      doReturn((DateTimeField) null).when(chronology0).minuteOfHour();
      doReturn((DurationField) null).when(chronology0).minutes();
      doReturn((DateTimeField) null).when(chronology0).monthOfYear();
      doReturn((DurationField) null).when(chronology0).months();
      doReturn((DateTimeField) null).when(chronology0).secondOfDay();
      doReturn((DateTimeField) null).when(chronology0).secondOfMinute();
      doReturn((DurationField) null).when(chronology0).seconds();
      doReturn((String) null, (String) null).when(chronology0).toString();
      doReturn((DateTimeField) null).when(chronology0).weekOfWeekyear();
      doReturn((DurationField) null).when(chronology0).weeks();
      doReturn((DateTimeField) null).when(chronology0).weekyear();
      doReturn((DateTimeField) null).when(chronology0).weekyearOfCentury();
      doReturn((DurationField) null).when(chronology0).weekyears();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).year();
      doReturn((DateTimeField) null).when(chronology0).yearOfCentury();
      doReturn((DateTimeField) null).when(chronology0).yearOfEra();
      doReturn((DurationField) null).when(chronology0).years();
      Chronology chronology1 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(chronology0).when(chronology1).withUTC();
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn("").when(dateTimeZone0).getID();
      doReturn(599).when(dateTimeZone0).getOffset(anyLong());
      doReturn(1970).when(dateTimeZone0).getOffsetFromLocal(anyLong());
      doReturn("", "org.joda.time.chrono.AssembledChronology").when(dateTimeZone0).toString();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology1, dateTimeZone0);
      try { 
        zonedChronology0.getDateTimeMillis(91, (-2395), 1775, 963, 963, 1775, 91);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal instant due to time zone offset transition: 1969-12-31T23:59:58.030
         //
         verifyException("org.joda.time.chrono.ZonedChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null).when(chronology0).centuries();
      doReturn((DateTimeField) null).when(chronology0).centuryOfEra();
      doReturn((DateTimeField) null).when(chronology0).clockhourOfDay();
      doReturn((DateTimeField) null).when(chronology0).clockhourOfHalfday();
      doReturn((DateTimeField) null).when(chronology0).dayOfMonth();
      doReturn((DateTimeField) null).when(chronology0).dayOfWeek();
      doReturn((DateTimeField) null).when(chronology0).dayOfYear();
      doReturn((DurationField) null).when(chronology0).days();
      doReturn((DateTimeField) null).when(chronology0).era();
      doReturn((DurationField) null).when(chronology0).eras();
      doReturn(0L).when(chronology0).getDateTimeMillis(anyLong() , anyInt() , anyInt() , anyInt() , anyInt());
      doReturn((DateTimeField) null).when(chronology0).halfdayOfDay();
      doReturn((DurationField) null).when(chronology0).halfdays();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).hourOfDay();
      doReturn((DateTimeField) null).when(chronology0).hourOfHalfday();
      doReturn((DurationField) null).when(chronology0).hours();
      doReturn((DurationField) null).when(chronology0).millis();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).millisOfDay();
      doReturn((DateTimeField) null).when(chronology0).millisOfSecond();
      doReturn((DateTimeField) null).when(chronology0).minuteOfDay();
      doReturn((DateTimeField) null).when(chronology0).minuteOfHour();
      doReturn((DurationField) null).when(chronology0).minutes();
      doReturn((DateTimeField) null).when(chronology0).monthOfYear();
      doReturn((DurationField) null).when(chronology0).months();
      doReturn((DateTimeField) null).when(chronology0).secondOfDay();
      doReturn((DateTimeField) null).when(chronology0).secondOfMinute();
      doReturn((DurationField) null).when(chronology0).seconds();
      doReturn((String) null, (String) null).when(chronology0).toString();
      doReturn((DateTimeField) null).when(chronology0).weekOfWeekyear();
      doReturn((DurationField) null).when(chronology0).weeks();
      doReturn((DateTimeField) null).when(chronology0).weekyear();
      doReturn((DateTimeField) null).when(chronology0).weekyearOfCentury();
      doReturn((DurationField) null).when(chronology0).weekyears();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).year();
      doReturn((DateTimeField) null).when(chronology0).yearOfCentury();
      doReturn((DateTimeField) null).when(chronology0).yearOfEra();
      doReturn((DurationField) null).when(chronology0).years();
      Chronology chronology1 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(chronology0).when(chronology1).withUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology1, dateTimeZone0);
      long long0 = zonedChronology0.getDateTimeMillis(0L, 1698, 1698, 3188, 3188);
      assertEquals((-3600000L), long0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null).when(chronology0).centuries();
      doReturn((DateTimeField) null).when(chronology0).centuryOfEra();
      doReturn((DateTimeField) null).when(chronology0).clockhourOfDay();
      doReturn((DateTimeField) null).when(chronology0).clockhourOfHalfday();
      doReturn((DateTimeField) null).when(chronology0).dayOfMonth();
      doReturn((DateTimeField) null).when(chronology0).dayOfWeek();
      doReturn((DateTimeField) null).when(chronology0).dayOfYear();
      doReturn((DurationField) null).when(chronology0).days();
      doReturn((DateTimeField) null).when(chronology0).era();
      doReturn((DurationField) null).when(chronology0).eras();
      doReturn((DateTimeField) null).when(chronology0).halfdayOfDay();
      doReturn((DurationField) null).when(chronology0).halfdays();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).hourOfDay();
      doReturn((DateTimeField) null).when(chronology0).hourOfHalfday();
      doReturn((DurationField) null).when(chronology0).hours();
      doReturn((DurationField) null).when(chronology0).millis();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).millisOfDay();
      doReturn((DateTimeField) null).when(chronology0).millisOfSecond();
      doReturn((DateTimeField) null).when(chronology0).minuteOfDay();
      doReturn((DateTimeField) null).when(chronology0).minuteOfHour();
      doReturn((DurationField) null).when(chronology0).minutes();
      doReturn((DateTimeField) null).when(chronology0).monthOfYear();
      doReturn((DurationField) null).when(chronology0).months();
      doReturn((DateTimeField) null).when(chronology0).secondOfDay();
      doReturn((DateTimeField) null).when(chronology0).secondOfMinute();
      doReturn((DurationField) null).when(chronology0).seconds();
      doReturn((String) null).when(chronology0).toString();
      doReturn((DateTimeField) null).when(chronology0).weekOfWeekyear();
      doReturn((DurationField) null).when(chronology0).weeks();
      doReturn((DateTimeField) null).when(chronology0).weekyear();
      doReturn((DateTimeField) null).when(chronology0).weekyearOfCentury();
      doReturn((DurationField) null).when(chronology0).weekyears();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).year();
      doReturn((DateTimeField) null).when(chronology0).yearOfCentury();
      doReturn((DateTimeField) null).when(chronology0).yearOfEra();
      doReturn((DurationField) null).when(chronology0).years();
      Chronology chronology1 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(chronology0).when(chronology1).withUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2147483049));
      ZonedChronology.getInstance(chronology1, dateTimeZone0);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      LocalDate.fromCalendarFields(gregorianCalendar0);
      assertEquals("java.util.GregorianCalendar[time=1565717724363,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Amsterdam\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=180,lastRule=java.util.SimpleTimeZone[id=Europe/Amsterdam,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2019,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=225,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=35,SECOND=24,MILLISECOND=363,ZONE_OFFSET=3600000,DST_OFFSET=3600000]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      iSOChronology0.assemble(assembledChronology_Fields0);
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      DateTimeField dateTimeField0 = zonedChronology0.millisOfSecond();
      RemainderDateTimeField remainderDateTimeField0 = (RemainderDateTimeField)assembledChronology_Fields0.weekyearOfCentury;
      DurationField durationField0 = zonedChronology0.centuries();
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null, (DurationField) null).when(chronology0).centuries();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).centuryOfEra();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).clockhourOfDay();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).clockhourOfHalfday();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).dayOfMonth();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).dayOfWeek();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).dayOfYear();
      doReturn((DurationField) null, assembledChronology_Fields0.weeks).when(chronology0).days();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).era();
      doReturn((DurationField) null, millisDurationField0).when(chronology0).eras();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).halfdayOfDay();
      doReturn((DurationField) null, assembledChronology_Fields0.years).when(chronology0).halfdays();
      doReturn((DateTimeField) null, (DateTimeField) null, (DateTimeField) null, dateTimeField0).when(chronology0).hourOfDay();
      doReturn((DateTimeField) null, remainderDateTimeField0).when(chronology0).hourOfHalfday();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).hours();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).millis();
      doReturn((DateTimeField) null, (DateTimeField) null, assembledChronology_Fields0.yearOfCentury, assembledChronology_Fields0.weekyearOfCentury).when(chronology0).millisOfDay();
      doReturn((DateTimeField) null, assembledChronology_Fields0.weekyearOfCentury).when(chronology0).millisOfSecond();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).minuteOfDay();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).minuteOfHour();
      doReturn((DurationField) null, assembledChronology_Fields0.years).when(chronology0).minutes();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).monthOfYear();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).months();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).secondOfDay();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).secondOfMinute();
      doReturn((DurationField) null, assembledChronology_Fields0.years).when(chronology0).seconds();
      doReturn((String) null, "!},mcATNu\"mV;", "X", "X").when(chronology0).toString();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).weekOfWeekyear();
      doReturn((DurationField) null, durationField0).when(chronology0).weeks();
      doReturn((DateTimeField) null, assembledChronology_Fields0.centuryOfEra).when(chronology0).weekyear();
      doReturn((DateTimeField) null, assembledChronology_Fields0.yearOfCentury).when(chronology0).weekyearOfCentury();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).weekyears();
      doReturn((DateTimeField) null, (DateTimeField) null, (DateTimeField) null, (DateTimeField) null).when(chronology0).year();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).yearOfCentury();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).yearOfEra();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).years();
      Chronology chronology1 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(chronology0).when(chronology1).withUTC();
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-2147483049));
      ZonedChronology zonedChronology1 = ZonedChronology.getInstance(chronology1, dateTimeZone1);
      ZonedChronology zonedChronology2 = ZonedChronology.getInstance(zonedChronology1, dateTimeZone1);
      assertNotSame(zonedChronology2, zonedChronology0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null).when(chronology0).centuries();
      doReturn((DateTimeField) null).when(chronology0).centuryOfEra();
      doReturn((DateTimeField) null).when(chronology0).clockhourOfDay();
      doReturn((DateTimeField) null).when(chronology0).clockhourOfHalfday();
      doReturn((DateTimeField) null).when(chronology0).dayOfMonth();
      doReturn((DateTimeField) null).when(chronology0).dayOfWeek();
      doReturn((DateTimeField) null).when(chronology0).dayOfYear();
      doReturn((DurationField) null).when(chronology0).days();
      doReturn((DateTimeField) null).when(chronology0).era();
      doReturn((DurationField) null).when(chronology0).eras();
      doReturn((DateTimeField) null).when(chronology0).halfdayOfDay();
      doReturn((DurationField) null).when(chronology0).halfdays();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).hourOfDay();
      doReturn((DateTimeField) null).when(chronology0).hourOfHalfday();
      doReturn((DurationField) null).when(chronology0).hours();
      doReturn((DurationField) null).when(chronology0).millis();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).millisOfDay();
      doReturn((DateTimeField) null).when(chronology0).millisOfSecond();
      doReturn((DateTimeField) null).when(chronology0).minuteOfDay();
      doReturn((DateTimeField) null).when(chronology0).minuteOfHour();
      doReturn((DurationField) null).when(chronology0).minutes();
      doReturn((DateTimeField) null).when(chronology0).monthOfYear();
      doReturn((DurationField) null).when(chronology0).months();
      doReturn((DateTimeField) null).when(chronology0).secondOfDay();
      doReturn((DateTimeField) null).when(chronology0).secondOfMinute();
      doReturn((DurationField) null).when(chronology0).seconds();
      doReturn((String) null, "!},mcATNu\"mV;").when(chronology0).toString();
      doReturn((DateTimeField) null).when(chronology0).weekOfWeekyear();
      doReturn((DurationField) null).when(chronology0).weeks();
      doReturn((DateTimeField) null).when(chronology0).weekyear();
      doReturn((DateTimeField) null).when(chronology0).weekyearOfCentury();
      doReturn((DurationField) null).when(chronology0).weekyears();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).year();
      doReturn((DateTimeField) null).when(chronology0).yearOfCentury();
      doReturn((DateTimeField) null).when(chronology0).yearOfEra();
      doReturn((DurationField) null).when(chronology0).years();
      Chronology chronology1 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(chronology0).when(chronology1).withUTC();
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-2147483049));
      ZonedChronology zonedChronology1 = ZonedChronology.getInstance(chronology1, dateTimeZone1);
      boolean boolean0 = zonedChronology0.equals(zonedChronology1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null).when(chronology0).centuries();
      doReturn((DateTimeField) null).when(chronology0).centuryOfEra();
      doReturn((DateTimeField) null).when(chronology0).clockhourOfDay();
      doReturn((DateTimeField) null).when(chronology0).clockhourOfHalfday();
      doReturn((DateTimeField) null).when(chronology0).dayOfMonth();
      doReturn((DateTimeField) null).when(chronology0).dayOfWeek();
      doReturn((DateTimeField) null).when(chronology0).dayOfYear();
      doReturn((DurationField) null).when(chronology0).days();
      doReturn((DateTimeField) null).when(chronology0).era();
      doReturn((DurationField) null).when(chronology0).eras();
      doReturn((DateTimeField) null).when(chronology0).halfdayOfDay();
      doReturn((DurationField) null).when(chronology0).halfdays();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).hourOfDay();
      doReturn((DateTimeField) null).when(chronology0).hourOfHalfday();
      doReturn((DurationField) null).when(chronology0).hours();
      doReturn((DurationField) null).when(chronology0).millis();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).millisOfDay();
      doReturn((DateTimeField) null).when(chronology0).millisOfSecond();
      doReturn((DateTimeField) null).when(chronology0).minuteOfDay();
      doReturn((DateTimeField) null).when(chronology0).minuteOfHour();
      doReturn((DurationField) null).when(chronology0).minutes();
      doReturn((DateTimeField) null).when(chronology0).monthOfYear();
      doReturn((DurationField) null).when(chronology0).months();
      doReturn((DateTimeField) null).when(chronology0).secondOfDay();
      doReturn((DateTimeField) null).when(chronology0).secondOfMinute();
      doReturn((DurationField) null).when(chronology0).seconds();
      doReturn((String) null).when(chronology0).toString();
      doReturn((DateTimeField) null).when(chronology0).weekOfWeekyear();
      doReturn((DurationField) null).when(chronology0).weeks();
      doReturn((DateTimeField) null).when(chronology0).weekyear();
      doReturn((DateTimeField) null).when(chronology0).weekyearOfCentury();
      doReturn((DurationField) null).when(chronology0).weekyears();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).year();
      doReturn((DateTimeField) null).when(chronology0).yearOfCentury();
      doReturn((DateTimeField) null).when(chronology0).yearOfEra();
      doReturn((DurationField) null).when(chronology0).years();
      Chronology chronology1 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(chronology0).when(chronology1).withUTC();
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn("ii8o").when(dateTimeZone0).getID();
      ZonedChronology.getInstance(chronology1, dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(47);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, dateTimeZone1);
      try { 
        zonedChronology0.getDateTimeMillis(1772, 47, 47, 60000, 1, 2147348552, 60000);
        fail("Expecting exception: IllegalFieldValueException");
      
      } catch(IllegalFieldValueException e) {
         //
         // Value 60000 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null).when(chronology0).centuries();
      doReturn((DateTimeField) null).when(chronology0).centuryOfEra();
      doReturn((DateTimeField) null).when(chronology0).clockhourOfDay();
      doReturn((DateTimeField) null).when(chronology0).clockhourOfHalfday();
      doReturn((DateTimeField) null).when(chronology0).dayOfMonth();
      doReturn((DateTimeField) null).when(chronology0).dayOfWeek();
      doReturn((DateTimeField) null).when(chronology0).dayOfYear();
      doReturn((DurationField) null).when(chronology0).days();
      doReturn((DateTimeField) null).when(chronology0).era();
      doReturn((DurationField) null).when(chronology0).eras();
      doReturn((DateTimeField) null).when(chronology0).halfdayOfDay();
      doReturn((DurationField) null).when(chronology0).halfdays();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).hourOfDay();
      doReturn((DateTimeField) null).when(chronology0).hourOfHalfday();
      doReturn((DurationField) null).when(chronology0).hours();
      doReturn((DurationField) null).when(chronology0).millis();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).millisOfDay();
      doReturn((DateTimeField) null).when(chronology0).millisOfSecond();
      doReturn((DateTimeField) null).when(chronology0).minuteOfDay();
      doReturn((DateTimeField) null).when(chronology0).minuteOfHour();
      doReturn((DurationField) null).when(chronology0).minutes();
      doReturn((DateTimeField) null).when(chronology0).monthOfYear();
      doReturn((DurationField) null).when(chronology0).months();
      doReturn((DateTimeField) null).when(chronology0).secondOfDay();
      doReturn((DateTimeField) null).when(chronology0).secondOfMinute();
      doReturn((DurationField) null).when(chronology0).seconds();
      doReturn((String) null).when(chronology0).toString();
      doReturn((DateTimeField) null).when(chronology0).weekOfWeekyear();
      doReturn((DurationField) null).when(chronology0).weeks();
      doReturn((DateTimeField) null).when(chronology0).weekyear();
      doReturn((DateTimeField) null).when(chronology0).weekyearOfCentury();
      doReturn((DurationField) null).when(chronology0).weekyears();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).year();
      doReturn((DateTimeField) null).when(chronology0).yearOfCentury();
      doReturn((DateTimeField) null).when(chronology0).yearOfEra();
      doReturn((DurationField) null).when(chronology0).years();
      Chronology chronology1 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(chronology0).when(chronology1).withUTC();
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn("ii8o").when(dateTimeZone0).getID();
      ZonedChronology.getInstance(chronology1, dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(47);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, dateTimeZone1);
      try { 
        zonedChronology0.getDateTimeMillis((long) 1772, 1772, 60000, 1379, 1772);
        fail("Expecting exception: IllegalFieldValueException");
      
      } catch(IllegalFieldValueException e) {
         //
         // Value 1772 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null).when(chronology0).centuries();
      doReturn((DateTimeField) null).when(chronology0).centuryOfEra();
      doReturn((DateTimeField) null).when(chronology0).clockhourOfDay();
      doReturn((DateTimeField) null).when(chronology0).clockhourOfHalfday();
      doReturn((DateTimeField) null).when(chronology0).dayOfMonth();
      doReturn((DateTimeField) null).when(chronology0).dayOfWeek();
      doReturn((DateTimeField) null).when(chronology0).dayOfYear();
      doReturn((DurationField) null).when(chronology0).days();
      doReturn((DateTimeField) null).when(chronology0).era();
      doReturn((DurationField) null).when(chronology0).eras();
      doReturn((DateTimeField) null).when(chronology0).halfdayOfDay();
      doReturn((DurationField) null).when(chronology0).halfdays();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).hourOfDay();
      doReturn((DateTimeField) null).when(chronology0).hourOfHalfday();
      doReturn((DurationField) null).when(chronology0).hours();
      doReturn((DurationField) null).when(chronology0).millis();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).millisOfDay();
      doReturn((DateTimeField) null).when(chronology0).millisOfSecond();
      doReturn((DateTimeField) null).when(chronology0).minuteOfDay();
      doReturn((DateTimeField) null).when(chronology0).minuteOfHour();
      doReturn((DurationField) null).when(chronology0).minutes();
      doReturn((DateTimeField) null).when(chronology0).monthOfYear();
      doReturn((DurationField) null).when(chronology0).months();
      doReturn((DateTimeField) null).when(chronology0).secondOfDay();
      doReturn((DateTimeField) null).when(chronology0).secondOfMinute();
      doReturn((DurationField) null).when(chronology0).seconds();
      doReturn((String) null, (String) null, (String) null).when(chronology0).toString();
      doReturn((DateTimeField) null).when(chronology0).weekOfWeekyear();
      doReturn((DurationField) null).when(chronology0).weeks();
      doReturn((DateTimeField) null).when(chronology0).weekyear();
      doReturn((DateTimeField) null).when(chronology0).weekyearOfCentury();
      doReturn((DurationField) null).when(chronology0).weekyears();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).year();
      doReturn((DateTimeField) null).when(chronology0).yearOfCentury();
      doReturn((DateTimeField) null).when(chronology0).yearOfEra();
      doReturn((DurationField) null).when(chronology0).years();
      Chronology chronology1 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(chronology0).when(chronology1).withUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4053);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology1, dateTimeZone0);
      Chronology chronology2 = zonedChronology0.withZone(fixedDateTimeZone0);
      assertSame(chronology2, chronology0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null, (DurationField) null).when(chronology0).centuries();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).centuryOfEra();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).clockhourOfDay();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).clockhourOfHalfday();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).dayOfMonth();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).dayOfWeek();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).dayOfYear();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).days();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).era();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).eras();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).halfdayOfDay();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).halfdays();
      doReturn((DateTimeField) null, (DateTimeField) null, (DateTimeField) null, (DateTimeField) null).when(chronology0).hourOfDay();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).hourOfHalfday();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).hours();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).millis();
      doReturn((DateTimeField) null, (DateTimeField) null, (DateTimeField) null, (DateTimeField) null).when(chronology0).millisOfDay();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).millisOfSecond();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).minuteOfDay();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).minuteOfHour();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).minutes();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).monthOfYear();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).months();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).secondOfDay();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).secondOfMinute();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).seconds();
      doReturn((String) null, (String) null, (String) null).when(chronology0).toString();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).weekOfWeekyear();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).weeks();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).weekyear();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).weekyearOfCentury();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).weekyears();
      doReturn((DateTimeField) null, (DateTimeField) null, (DateTimeField) null, (DateTimeField) null).when(chronology0).year();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).yearOfCentury();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).yearOfEra();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).years();
      Chronology chronology1 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(chronology0).when(chronology1).withUTC();
      DateTimeZone dateTimeZone0 = mock(DateTimeZone.class, new ViolatedAssumptionAnswer());
      doReturn("ii").when(dateTimeZone0).getID();
      doReturn((String) null).when(dateTimeZone0).toString();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology1, dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(47);
      Chronology chronology2 = zonedChronology0.withZone(dateTimeZone1);
      assertNotSame(chronology2, zonedChronology0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null, (DurationField) null).when(chronology0).centuries();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).centuryOfEra();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).clockhourOfDay();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).clockhourOfHalfday();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).dayOfMonth();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).dayOfWeek();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).dayOfYear();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).days();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).era();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).eras();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).halfdayOfDay();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).halfdays();
      doReturn((DateTimeField) null, (DateTimeField) null, (DateTimeField) null, (DateTimeField) null).when(chronology0).hourOfDay();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).hourOfHalfday();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).hours();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).millis();
      doReturn((DateTimeField) null, (DateTimeField) null, (DateTimeField) null, (DateTimeField) null).when(chronology0).millisOfDay();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).millisOfSecond();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).minuteOfDay();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).minuteOfHour();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).minutes();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).monthOfYear();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).months();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).secondOfDay();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).secondOfMinute();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).seconds();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(chronology0).toString();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).weekOfWeekyear();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).weeks();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).weekyear();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).weekyearOfCentury();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).weekyears();
      doReturn((DateTimeField) null, (DateTimeField) null, (DateTimeField) null, (DateTimeField) null).when(chronology0).year();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).yearOfCentury();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).yearOfEra();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).years();
      Chronology chronology1 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(chronology0).when(chronology1).withUTC();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology1, fixedDateTimeZone0);
      ZonedChronology zonedChronology1 = ZonedChronology.getInstance(zonedChronology0, fixedDateTimeZone0);
      boolean boolean0 = zonedChronology1.equals(zonedChronology0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null, (DurationField) null).when(chronology0).centuries();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).centuryOfEra();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).clockhourOfDay();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).clockhourOfHalfday();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).dayOfMonth();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).dayOfWeek();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).dayOfYear();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).days();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).era();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).eras();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).halfdayOfDay();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).halfdays();
      doReturn((DateTimeField) null, (DateTimeField) null, (DateTimeField) null, (DateTimeField) null).when(chronology0).hourOfDay();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).hourOfHalfday();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).hours();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).millis();
      doReturn((DateTimeField) null, (DateTimeField) null, (DateTimeField) null, (DateTimeField) null).when(chronology0).millisOfDay();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).millisOfSecond();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).minuteOfDay();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).minuteOfHour();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).minutes();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).monthOfYear();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).months();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).secondOfDay();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).secondOfMinute();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).seconds();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(chronology0).toString();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).weekOfWeekyear();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).weeks();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).weekyear();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).weekyearOfCentury();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).weekyears();
      doReturn((DateTimeField) null, (DateTimeField) null, (DateTimeField) null, (DateTimeField) null).when(chronology0).year();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).yearOfCentury();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).yearOfEra();
      doReturn((DurationField) null, (DurationField) null).when(chronology0).years();
      Chronology chronology1 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(chronology0).when(chronology1).withUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology1, dateTimeZone0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1762);
      ZonedChronology zonedChronology1 = ZonedChronology.getInstance(zonedChronology0, dateTimeZone1);
      boolean boolean0 = zonedChronology0.equals(zonedChronology1);
      assertFalse(boolean0);
  }
}

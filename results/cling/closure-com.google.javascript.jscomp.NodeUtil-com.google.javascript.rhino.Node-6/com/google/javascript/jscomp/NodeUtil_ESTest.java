/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 04:11:54 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.GlobalNamespace;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.ReorderConstantExpression;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.copyNameAnnotations(node0, node0);
      assertEquals(43, node0.getType());
      assertTrue(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.isSimpleOperator(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName("b");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "+infinity");
      Node node1 = new Node(1046, node0, node0);
      assertEquals(1046, node1.getType());
      assertEquals(38, node0.getType());
      assertTrue(node1.hasOneChild());
      assertEquals((-1), node1.getLineno());
      
      Node node2 = Node.newString("WzCF");
      NodeUtil.evaluatesToLocalValue(node2);
      assertEquals((-1), node2.getLineno());
      assertEquals((-1), node2.getCharno());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(36, 62, 36).when(node0).getType();
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      boolean boolean1 = NodeUtil.isValidQualifiedName("Moving functions + variable into deeper modules");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = Node.newString("Moving functions + variable into deeper modules");
      Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
      assertEquals(40, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = new Node((-3976), (-3976), 0);
      NodeUtil.getPureBooleanValue(node0);
      assertEquals((-3976), node0.getType());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, object0, object0, object0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.isRelationalOperation(node1);
      assertEquals(0, node1.getSourcePosition());
      assertEquals(122, node1.getType());
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(64, 122).when(node0).getType();
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("true", string0);
      assertEquals((-1), node0.getCharno());
      assertEquals(44, node0.getType());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = NodeUtil.opToStr(44);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(43);
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.numberNode(42, node0);
      assertEquals(0, node1.getCharno());
      assertTrue(node1.isNumber());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(36, 37, 36).when(node0).getType();
      NodeUtil.mayEffectMutableState(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node1).getNext();
      doReturn((Object) null, (Object) null).when(node1).getProp(anyInt());
      Node node2 = NodeUtil.newVarNode("Moving functions + variable into deeper modules", node1);
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node2, abstractCompiler0);
      assertEquals(0, node2.getSourcePosition());
      assertTrue(node2.isVar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node0).getSideEffectFlags();
      doReturn(true).when(node0).isCall();
      boolean boolean0 = NodeUtil.callHasLocalResult(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got TRUE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(36, 36, 36).when(node0).getType();
      NodeUtil.mayEffectMutableState(node0);
      Node node1 = Node.newString("Moving functions + variable into deeper modules", 0, 16);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "+infinity");
      NodeUtil.isSimpleOperatorType(13);
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test018()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(36, 37, 36).when(node0).getType();
      NodeUtil.mayEffectMutableState(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node1).getNext();
      doReturn((Object) null, (Object) null).when(node1).getProp(anyInt());
      Node node2 = NodeUtil.newVarNode("Moving functions + variable into deeper modules", node1);
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      doReturn((JSTypeRegistry) null).when(abstractCompiler0).getTypeRegistry();
      GlobalNamespace globalNamespace0 = new GlobalNamespace(abstractCompiler0, node2, node2);
      // Undeclared exception!
      try { 
        globalNamespace0.getSlot("!");
        fail("Expecting exception: AbstractMethodError");
      
      } catch(AbstractMethodError e) {
         //
         // com.google.javascript.jscomp.AbstractCompiler.throwInternalError(Ljava/lang/String;Ljava/lang/Exception;)V
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Predicate<Node> predicate0 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(predicate0).apply(any(com.google.javascript.rhino.Node.class));
      int int0 = NodeUtil.getCount(node0, predicate0, predicate0);
      assertTrue(node0.isFalse());
      assertEquals(0, int0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = NodeUtil.numberNode(Double.NEGATIVE_INFINITY, node0);
      NodeUtil.referencesThis(node1);
      assertEquals(29, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node1.isNumber());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Predicate<Node> predicate0 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(predicate0).apply(any(com.google.javascript.rhino.Node.class));
      int int0 = NodeUtil.getCount(node0, predicate0, predicate0);
      assertTrue(node0.isFalse());
      assertEquals(1, int0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      NodeUtil.booleanNode(true);
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getNext();
      doReturn((Object) null, (Object) null).when(node0).getProp(anyInt());
      NodeUtil.newVarNode("Moving functions + variable into deeper modules", node0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("goog.tweak.getBoolean", (Node) null);
      assertFalse(node0.isName());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isVar());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "+infinity");
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      boolean boolean1 = NodeUtil.isImmutableValue(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(36, 37, 36).when(node0).getType();
      NodeUtil.mayEffectMutableState(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node1).getNext();
      doReturn((Object) null, (Object) null).when(node1).getProp(anyInt());
      Node node2 = NodeUtil.newVarNode("Moving functions + variable into deeper modules", node1);
      boolean boolean0 = NodeUtil.isSwitchCase(node2);
      assertEquals(118, node2.getType());
      assertEquals(0, node2.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      assertFalse(node0.isCall());
      
      boolean boolean0 = NodeUtil.isFunctionObjectCall(node0);
      boolean boolean1 = NodeUtil.isSimpleOperator(node0);
      assertTrue(boolean1 == boolean0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.numberNode(42, node0);
      NodeUtil.mayBeStringHelper(node1);
      boolean boolean0 = NodeUtil.isLiteralValue(node1, true);
      assertEquals(0, node1.getCharno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newNumber((-1130.19521960685));
      NodeUtil.isExprAssign(node0);
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = NodeUtil.numberNode(Double.NEGATIVE_INFINITY, node0);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
      assertEquals((-1), node1.getLineno());
      assertEquals(29, node1.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(true).when(node0).isExprResult();
      // Undeclared exception!
      try { 
        NodeUtil.isExprCall(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "+infinity");
      closureCodingConvention0.extractClassNameIfRequire(node0, node0);
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertFalse(boolean0);
      assertEquals(38, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.numberNode(42, node0);
      boolean boolean0 = NodeUtil.isLoopStructure(node1);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isLiteralValue(node1, true);
      assertEquals(0, node1.getCharno());
      assertTrue(node1.isNumber());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "LSXsGJ5\"V:^1dp.");
      NodeUtil.getLoopCodeBlock(node0);
      assertEquals(2, node0.getChildCount());
      assertTrue(node0.isGetProp());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newString(3000, "JSC_MISSING_EXTENDS_TAG", 3000, 1351);
      NodeUtil.mayEffectMutableState(node0, (AbstractCompiler) null);
      assertEquals(12289351, node0.getSourcePosition());
      assertEquals(3000, node0.getType());
      
      boolean boolean0 = NodeUtil.isValidPropertyName("JSC_MISSING_EXTENDS_TAG");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getParent();
      doReturn(true).when(node0).isName();
      // Undeclared exception!
      try { 
        NodeUtil.isVarDeclaration(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node1).getType();
      boolean boolean0 = NodeUtil.isSimpleOperator(node1);
      assertFalse(boolean0);
      
      Node node2 = node0.removeChildren();
      assertNull(node2);
      assertEquals(43, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertFalse(boolean0);
      
      Node node1 = node0.removeChildren();
      assertEquals(43, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getNext();
      doReturn((Object) null, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newVarNode("Moving functions + variable into deeper modules", node0);
      NodeUtil.getStringNumberValue("~i4!<Au4p L; ");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeVAR 0
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(29);
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got FALSE
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "+infinity");
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getFirstChild();
      doReturn(true).when(node1).isExprResult();
      boolean boolean0 = NodeUtil.isExprAssign(node1);
      boolean boolean1 = NodeUtil.isImmutableValue(node0);
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(38, node0.getType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node0).getChildCount();
      doReturn(true).when(node0).isFor();
      boolean boolean0 = NodeUtil.isForIn(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newString("WzCF");
      String string0 = node0.toString(false, false, false);
      assertEquals("STRING WzCF", string0);
      
      NodeUtil.evaluatesToLocalValue(node0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getNext();
      doReturn((Object) null, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newVarNode("Moving functions + variable into deeper modules", node0);
      assertEquals(0, node1.getSourcePosition());
      assertEquals(118, node1.getType());
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(32);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, object0, object0, object0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.mayHaveSideEffects(node1);
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "+infinity");
      NodeUtil.isSimpleOperatorType(13);
      String string0 = node0.toString(false, false, false);
      assertEquals("NAME +infinity", string0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = NodeUtil.newVarNode("Moving functions + variable into deeper modules", node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.valueCheck(node1, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(118, node1.getType());
      assertTrue(boolean0);
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node1.getLineno());
      assertEquals(44, node0.getType());
      
      Node node2 = Node.newString("L}6}Fsjo!G");
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node2);
      assertFalse(node2.isName());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "+infinity");
      Node node1 = NodeUtil.numberNode(2.147483647E9, node0);
      boolean boolean0 = NodeUtil.isNumericResultHelper(node1);
      assertFalse(node1.isName());
      assertTrue(node0.isName());
      assertEquals((-1), node1.getLineno());
      
      Node node2 = Node.newString("WzCF");
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node2);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "+infinity");
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
      assertEquals(38, node0.getType());
      
      Node node1 = Node.newString("WzCF");
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node1);
      assertFalse(node1.isNull());
      assertEquals((-1), node1.getCharno());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(36, 37, 36).when(node0).getType();
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
      
      Node node1 = Node.newString("L}6}Fsjo!G");
      NodeUtil.evaluatesToLocalValue(node1);
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(40, node1.getType());
      assertTrue(node1.isString());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "+infinity");
      boolean boolean0 = NodeUtil.referencesThis(node0);
      assertEquals(38, node0.getType());
      assertFalse(boolean0);
      
      Node node1 = Node.newString("WzCF");
      NodeUtil.evaluatesToLocalValue(node1);
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.isString());
      assertFalse(node1.isNull());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.numberNode(42, node0);
      NodeUtil.mayHaveSideEffects(node1);
      assertEquals(0, node1.getSourcePosition());
      assertEquals(39, node1.getType());
      
      Node node2 = Node.newString("arguments");
      NodeUtil.evaluatesToLocalValue(node2);
      assertEquals(40, node2.getType());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.valueCheck(node0, nodeUtil_MayBeStringResultPredicate0);
      assertFalse(boolean0);
      assertFalse(node0.isFalse());
      
      Node node1 = Node.newString("L}6}Fsjo!G");
      NodeUtil.evaluatesToLocalValue(node1);
      assertTrue(node1.isString());
      assertEquals((-1), node1.getCharno());
      assertEquals(40, node1.getType());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.numberNode(42, node0);
      boolean boolean0 = NodeUtil.referencesThis(node1);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      boolean boolean1 = NodeUtil.isValidDefineValue(node1, compilerOptions0.stripNameSuffixes);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, node1.getCharno());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.numberNode(42, node0);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
      assertFalse(boolean0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      boolean boolean1 = NodeUtil.isValidDefineValue(node1, compilerOptions0.stripNameSuffixes);
      assertEquals(0, node1.getCharno());
      assertTrue(node1.isNumber());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "+infinity");
      Node node1 = new Node(1046, node0, node0);
      NodeUtil.evaluatesToLocalValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1046
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, object0, object0, object0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.mayHaveSideEffects(node1);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
      assertEquals(0, node1.getSourcePosition());
      assertFalse(boolean0);
      assertTrue(node1.isVoid());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = NodeUtil.newVarNode("Moving functions + variable into deeper modules", node0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.valueCheck(node1, nodeUtil_MayBeStringResultPredicate0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeVAR
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "+infinity");
      assertFalse(node0.isFunction());
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(13);
      boolean boolean1 = NodeUtil.referencesThis(node0);
      assertFalse(boolean1 == boolean0);
      assertEquals(38, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(36, 37, 36).when(node0).getType();
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      boolean boolean1 = NodeUtil.isSimpleOperatorType(32);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.evaluatesToLocalValue(node0);
      boolean boolean0 = NodeUtil.isConstantName(node0);
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "+infinity");
      Node node1 = NodeUtil.numberNode(2.147483647E9, node0);
      NodeUtil.isNumericResultHelper(node1);
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(39, node1.getType());
      
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertFalse(node0.isThis());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "+infinity");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertFalse(boolean0);
      
      String string0 = node0.toString(false, false, false);
      assertEquals("NAME +infinity", string0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newString("sr~nBnts", 35, 41);
      NodeUtil.evaluatesToLocalValue(node0);
      assertEquals(143401, node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.valueCheck(node0, nodeUtil_MayBeStringResultPredicate0);
      assertFalse(boolean0);
      
      NodeUtil.evaluatesToLocalValue(node0);
      assertEquals(44, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("Expected statement but was ");
      Node node1 = NodeUtil.newName(closureCodingConvention0, "JSC_DUP_VAR_DECLARATION", node0, "T[");
      NodeUtil.newName(closureCodingConvention0, "T[", node1);
      boolean boolean0 = NodeUtil.isSimpleOperator(node1);
      assertEquals(38, node1.getType());
      assertFalse(boolean0);
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newString(710, "new child has existing sibling");
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 710
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString(3000, "JSC_MISSING_EXTENDS_TAG", 3000, 1351);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(108);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 108
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = new Node(1, 64, (-724));
      assertEquals(1, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newString(3000, "JSC_MISSING_EXTENDS_TAG", 3000, 1351);
      boolean boolean0 = node0.isQualifiedName();
      assertFalse(boolean0);
      assertEquals(12289351, node0.getSourcePosition());
      assertEquals(3000, node0.getType());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FALSE is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node0.setSourceEncodedPositionForTree(192);
      assertEquals(0, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node0).getType();
      doReturn((String) null).when(node0).toString();
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assignment op:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "+infinity");
      boolean boolean0 = NodeUtil.referencesThis(node0);
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean1 == boolean0);
      assertTrue(node0.isName());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(node0).isName();
      boolean boolean0 = NodeUtil.isVarDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(36, 37, 36).when(node0).getType();
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
      
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node1).getNext();
      doReturn((Object) null, (Object) null).when(node1).getProp(anyInt());
      Node node2 = NodeUtil.newVarNode("Moving functions + variable into deeper modules", node1);
      Node node3 = new Node(53, node2, node2, node2, node2, 2481, 37);
      assertEquals(0, node2.getSourcePosition());
      assertTrue(node2.isVar());
      assertEquals(10162213, node3.getSourcePosition());
      assertEquals(53, node3.getType());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((JSDocInfo) null).when(node0).getJSDocInfo();
      doReturn(true, false).when(node0).isFunction();
      NodeUtil.getFunctionJSDocInfo(node0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newString(3000, "JSC_MISSING_EXTENDS_TAG", 3000, 1351);
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      NodeUtil.isConstantByConvention(codingConvention0, node0, node0);
      assertEquals(12289351, node0.getSourcePosition());
      assertEquals(3000, node0.getType());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(64, 64).when(node0).getType();
      Double double0 = NodeUtil.getNumberValue(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1421).when(node1).getChildCount();
      doReturn(double0, double0).when(node1).getProp(anyInt());
      doReturn(true, true).when(node1).isTry();
      NodeUtil.maybeAddFinally(node1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = new Node(52, 48, 52);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MatchShallowStatement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.isNullOrUndefined(node0);
      assertEquals((-1), node0.getLineno());
      assertEquals(44, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(38);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "LSXsGJ5\"V:^1dp.");
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertTrue(node0.isGetProp());
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.numberNode(42, node0);
      boolean boolean0 = NodeUtil.isBooleanResult(node1);
      assertEquals(39, node1.getType());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(2316, 9).when(node0).getType();
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      Node node0 = new Node(28);
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_NumbericResultPredicate0, nodeUtil_NumbericResultPredicate0);
      assertEquals(28, node0.getType());
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(719, 47).when(node0).getType();
      boolean boolean0 = NodeUtil.isBooleanResult(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(4095);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4095
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newString("3qbd8Jp(%zMlb");
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_BooleanResultPredicate0, nodeUtil_BooleanResultPredicate0);
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(719, 35).when(node0).getType();
      boolean boolean0 = NodeUtil.isBooleanResult(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "LKD/\"~<,`KLQy$vU");
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertTrue(node0.isName());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = new Node(52, 48, 52);
      boolean boolean0 = NodeUtil.isBooleanResult(node0);
      assertEquals(196660, node0.getSourcePosition());
      assertEquals(52, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(36, 37, 36).when(node0).getType();
      NodeUtil.mayEffectMutableState(node0);
      Node node1 = new Node(51);
      assertTrue(node1.isIn());
      
      Node node2 = NodeUtil.newVarNode("Moving functions + variable into deeper modules", node1);
      int int0 = NodeUtil.getNameReferenceCount(node2, "H[;CH;$OV8b9-,yp");
      assertEquals(0, int0);
      assertTrue(node2.isVar());
      assertEquals((-1), node2.getLineno());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, object0, object0, object0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.redeclareVarsInsideBranch(node1);
      assertTrue(node1.isVoid());
      assertEquals(0, node1.getSourcePosition());
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(node0).isFunction();
      doReturn(false).when(node0).isName();
      NodeUtil.redeclareVarsInsideBranch(node0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(node0).getQualifiedName();
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("U2U_FUNCTION_TYPE").when(node0).getQualifiedName();
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(node0).toString();
      Node node1 = new Node(4095, node0, node0, (-1277), 51);
      node1.removeFirstChild();
      assertFalse(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(36, 37, 36).when(node0).getType();
      NodeUtil.mayEffectMutableState(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node1).getNext();
      doReturn((Object) null, (Object) null).when(node1).getProp(anyInt());
      Node node2 = NodeUtil.newVarNode("Moving functions + variable into deeper modules", node1);
      // Undeclared exception!
      try { 
        node2.getChildBefore(node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(node0).isGetProp();
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      assertTrue(node1.isCall());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getParent();
      doReturn((StaticSourceFile) null).when(node0).getStaticSourceFile();
      StaticSourceFile staticSourceFile0 = NodeUtil.getSourceFile(node0);
      assertNull(staticSourceFile0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test102()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("O&gS~H>':CW", sourceFile_Generator0);
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getParent();
      doReturn((StaticSourceFile) null).when(node0).getStaticSourceFile();
      StaticSourceFile staticSourceFile0 = NodeUtil.getSourceFile(node0);
      assertSame(staticSourceFile0, jSSourceFile0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(node0).isGetElem();
      doReturn(false).when(node0).isGetProp();
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        NodeUtil.isConstantByConvention(codingConvention0, node1, node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CALL [free_call: 1] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newString((-1752), "#h?tO/;<}iE0^");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got FALSE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(node0).isCall();
      doReturn(true).when(node0).isNoSideEffectsCall();
      boolean boolean0 = NodeUtil.functionCallHasSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      NodeUtil.isEmptyBlock(node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertEquals(83, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(node0).isBlock();
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-205), 2, 0).when(node1).getType();
      boolean boolean1 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.numberNode(42, node0);
      NodeUtil.mayHaveSideEffects(node1);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      NodeUtil.isValidDefineValue(node1, compilerOptions0.stripTypes);
      assertEquals(0, node1.getCharno());
      assertEquals(39, node1.getType());
      assertEquals(0, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(true).when(node0).isCall();
      doReturn(false).when(node0).isNoSideEffectsCall();
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(jSDocInfo0).when(node0).getJSDocInfo();
      JSDocInfo jSDocInfo1 = NodeUtil.getBestJSDocInfo(node0);
      assertFalse(jSDocInfo1.isNoShadow());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node(51);
      NodeUtil.getBestJSDocInfo(node0);
      assertEquals(51, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isIn());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(36, 37, 36).when(node0).getType();
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      Node node1 = NodeUtil.booleanNode(true);
      boolean boolean1 = node1.isNoSideEffectsCall();
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.isTrue());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(3212, 3212, 24, 3212, 108).when(node0).getType();
      doReturn(true).when(node0).isNull();
      Node node1 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      boolean boolean1 = NodeUtil.isSimpleOperator(node1);
      assertTrue(boolean1 == boolean0);
      assertEquals(44, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString((-1752), "#h?tO/;<}iE0^");
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "#h?tO/;<}iE0^", node0, "Object");
      boolean boolean0 = node1.isQualifiedName();
      assertTrue(boolean0);
      assertEquals((-1), node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.mayHaveSideEffects(node0);
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isTrue());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(36, 36, 36).when(node0).getType();
      NodeUtil.mayEffectMutableState(node0);
      Node node1 = Node.newString("Moving functions + variable into deeper modules", 0, 16);
      NodeUtil.isForIn(node1);
      assertEquals(16, node1.getSourcePosition());
      assertTrue(node1.isString());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.isSimpleOperatorType(30);
      Node node1 = NodeUtil.numberNode(Double.NEGATIVE_INFINITY, node0);
      boolean boolean0 = NodeUtil.isNumericResultHelper(node1);
      assertEquals(44, node0.getType());
      assertEquals((-1), node1.getLineno());
      assertEquals(29, node1.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(36, 37, 36).when(node0).getType();
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      Node node1 = new Node(51);
      assertFalse(node1.isExprResult());
      
      boolean boolean1 = NodeUtil.isPrototypePropertyDeclaration(node1);
      assertFalse(boolean1 == boolean0);
      assertTrue(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "+infinity");
      NodeUtil.isSimpleOperatorType(13);
      Node node1 = NodeUtil.numberNode(2.147483647E9, node0);
      boolean boolean0 = NodeUtil.isNumericResultHelper(node1);
      assertEquals(38, node0.getType());
      assertTrue(boolean0);
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.isNumber());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "+infinity");
      boolean boolean0 = NodeUtil.isSimpleOperatorType(13);
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.mayHaveSideEffects(node0);
      assertEquals((-1), node0.getCharno());
      assertEquals(38, node0.getType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(node0).isExprResult();
      boolean boolean0 = NodeUtil.isExprCall(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-205), 2, 0).when(node1).getType();
      boolean boolean1 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(node0).getType();
      NodeUtil.mayEffectMutableState(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node1).getNext();
      doReturn((Object) null, (Object) null).when(node1).getProp(anyInt());
      Node node2 = NodeUtil.newVarNode("Moving functions + variable into deeper modules", node1);
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      NodeUtil.mayEffectMutableState(node2, abstractCompiler0);
      assertEquals(0, node2.getSourcePosition());
      assertEquals(118, node2.getType());
      assertEquals(0, node2.getCharno());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((JSDocInfo) null).when(node1).getJSDocInfo();
      doReturn(node0).when(node1).getParent();
      NodeUtil.getBestJSDocInfo(node1);
      assertFalse(node0.isName());
      assertTrue(node0.isParamList());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = NodeUtil.getInverseOperator((-924));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      assertFalse(node0.isFunction());
      
      NodeUtil.getNearestFunctionName(node0);
      assertTrue(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(node0).isFunction();
      // Undeclared exception!
      try { 
        NodeUtil.getNearestFunctionName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, object0, object0, object0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertFalse(boolean0);
      
      NodeUtil.redeclareVarsInsideBranch(node1);
      assertTrue(node1.isVoid());
      assertEquals(0, node1.getCharno());
      assertEquals(122, node1.getType());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newString("Osyntheti", 2, 29);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertEquals(8221, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.numberNode(42, node0);
      NodeUtil.mayHaveSideEffects(node1);
      NodeUtil.evaluatesToLocalValue(node1);
      assertEquals(39, node1.getType());
      assertEquals(0, node1.getSourcePosition());
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getLastChild();
      doReturn(true).when(node0).isGetProp();
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypeClassName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(node0).isGetProp();
      Node node1 = NodeUtil.getPrototypeClassName(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newString("Expected statement but was ");
      node0.addChildrenToFront(node0);
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "+infinity");
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0);
      assertEquals(38, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newString(3000, "JSC_MISSING_EXTENDS_TAG", 3000, 1351);
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node1 = NodeUtil.newName(codingConvention0, "JSC_MISSING_EXTENDS_TAG", node0);
      assertEquals(38, node1.getType());
      assertEquals(12289351, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "LSXsGJ5\"V:^1dp.");
      NodeUtil.getSourceName(node0);
      assertEquals(2, node0.getChildCount());
      assertEquals(33, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isGetProp());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = Node.newString("Expected statement but was ");
      Node node1 = NodeUtil.newName(closureCodingConvention0, "JSC_DUP_VAR_DECLARATION", node0, "T[");
      Node node2 = NodeUtil.getRootOfQualifiedName(node1);
      assertFalse(node0.isName());
      assertEquals(38, node1.getType());
      assertEquals((-1), node2.getLineno());
      assertTrue(node0.isString());
  }
}

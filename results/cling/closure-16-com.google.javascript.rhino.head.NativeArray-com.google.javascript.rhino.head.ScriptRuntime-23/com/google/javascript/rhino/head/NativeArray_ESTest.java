/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 07:51:54 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.EcmaError;
import com.google.javascript.rhino.head.EvaluatorException;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.TopLevel;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NativeArray_ESTest extends NativeArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn("(new ").when(scriptable0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      long long0 = NativeArray.getLengthProperty((Context) null, scriptable0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      int int0 = nativeArray0.findPrototypeId("Vzpl< ShZmaQ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Method[] methodArray0 = new Method[6];
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      nativeArray0.activatePrototypeMap(7);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      context0.initStandardObjects((ScriptableObject) nativeArray0);
      assertFalse(nativeArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2207L));
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      nativeArray0.defineOwnProperty(context0, (Object) contextFactory0, (ScriptableObject) nativeArray0, true);
      assertEquals(0L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test04()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(10000);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes(10000);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property 10000 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Method[] methodArray0 = new Method[2];
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      nativeArray0.defaultPut("language version", nativeArray0);
      Integer[] integerArray0 = nativeArray0.getIndexIds();
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      Method[] methodArray0 = new Method[12];
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      NativeError nativeError0 = new NativeError();
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes((-1911460416), (Scriptable) nativeError0);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property -1911460416 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-13L));
      Class<NativeObject> class0 = NativeObject.class;
      // Undeclared exception!
      try { 
        nativeArray0.getDefaultValue(class0);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.NativeObject
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483647L);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes(114);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property 114 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      Short short0 = new Short((short)289);
      nativeArray0.defineOwnProperty(context0, (Object) short0, (ScriptableObject) importerTopLevel0, false);
      assertEquals(290L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483647L);
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      nativeArray0.getOwnPropertyDescriptor(context0, importerTopLevel0);
      assertEquals("Array", nativeArray0.getClassName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      int int0 = nativeArray0.getAttributes(1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1958L);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes(48);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Property 48 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4299L);
      NativeCall nativeCall0 = new NativeCall();
      IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(13, nativeCall0, false);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      nativeArray0.execIdCall(idFunctionObject0, context0, nativeCall0, idFunctionObject0, context0.emptyArgs);
      assertEquals(1, idFunctionObject0.getLength());
      assertEquals(1, idFunctionObject0.getArity());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2046L));
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      Float float0 = new Float(0.0F);
      ScriptableObject scriptableObject0 = nativeArray0.getOwnPropertyDescriptor(context0, float0);
      assertNull(scriptableObject0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test15()  throws Throwable  {
      Context context0 = Context.getContext();
      NativeArray nativeArray0 = new NativeArray((-431L));
      Integer integer0 = Integer.valueOf(69);
      ScriptableObject scriptableObject0 = nativeArray0.getOwnPropertyDescriptor(context0, integer0);
      assertNull(scriptableObject0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(360L);
      Integer[] integerArray0 = nativeArray0.getIndexIds();
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      Integer[] integerArray0 = nativeArray0.getIndexIds();
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1176L));
      Float float0 = new Float(4.0);
      nativeArray0.setInstanceIdValue(1, float0);
      assertEquals(4L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test19()  throws Throwable  {
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      NativeArray nativeArray0 = new NativeArray(1154L);
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn(nativeArray0).when(scriptable0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      // Undeclared exception!
      try { 
        NativeArray.getLengthProperty(context0, scriptable0);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      NativeString nativeString0 = new NativeString("msg.java.no_such_method");
      long long0 = NativeArray.getLengthProperty(context0, nativeString0);
      assertEquals(23L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Method[] methodArray0 = new Method[7];
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      Context context0 = new Context();
      long long0 = NativeArray.getLengthProperty(context0, nativeArray0);
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(10000);
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.getTypedProperty((Scriptable) nativeArray0, (-1684), class0);
      assertNull(baseFunction0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      nativeArray0.put("error reporter", (Scriptable) importerTopLevel0, (Object) "error reporter");
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test24()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(importerTopLevel0, context0, 160, 2);
      // Undeclared exception!
      try { 
        nativeArray0.execIdCall(idFunctionObject0, context0, idFunctionObject0, importerTopLevel0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=160 MASTER=com.google.javascript.rhino.head.ImporterTopLevel@70fd4ee
         //
         verifyException("com.google.javascript.rhino.head.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Method[] methodArray0 = new Method[6];
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = Context.enter((Context) null, contextFactory0);
      NativeError nativeError0 = new NativeError();
      nativeArray0.defineOwnProperty(context0, context0, nativeError0);
      assertEquals(6L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Context context0 = new Context();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      ScriptableObject scriptableObject0 = nativeArray0.getOwnPropertyDescriptor(context0, "");
      assertNull(scriptableObject0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483647L);
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeArray0, 2730);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1431655723L);
      nativeArray0.delete(1522);
      assertEquals("Array", nativeArray0.getClassName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2046L));
      NativeArray.init(nativeArray0, false);
      assertEquals(0L, nativeArray0.jsGet_length());
      assertEquals(0L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      Object object0 = ScriptableObject.getProperty((Scriptable) nativeArray0, 0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Method[] methodArray0 = new Method[1];
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      nativeArray0.delete((-3936));
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(501L);
      nativeArray0.delete(10000);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeArray0, (-2370));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Method[] methodArray0 = new Method[12];
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      // Undeclared exception!
      try { 
        ScriptableObject.deleteProperty((Scriptable) nativeArray0, 4);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // com.google.javascript.rhino.head.UniqueTag
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483647L);
      Object object0 = nativeArray0.get((long) 150);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2682L));
      TopLevel topLevel0 = new TopLevel();
      ScriptableObject.putProperty((Scriptable) nativeArray0, 4, (Object) topLevel0);
      boolean boolean0 = nativeArray0.contains((Object) null);
      assertEquals(5L, nativeArray0.jsGet_length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-664674077828931759L));
      ScriptableObject.hasProperty((Scriptable) nativeArray0, 1952257861);
      assertEquals((-664674077828931759L), nativeArray0.getLength());
      assertEquals((-664674077828931759L), nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Method[] methodArray0 = new Method[7];
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      NativeArray nativeArray1 = new NativeArray(methodArray0);
      nativeArray0.put(120, (Scriptable) nativeArray1, (Object) nativeArray1);
      assertFalse(nativeArray1.isEmpty());
      assertEquals(121L, nativeArray1.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Method[] methodArray0 = new Method[6];
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      nativeArray0.exportAsJSClass(565, (Scriptable) null, false);
      // Undeclared exception!
      try { 
        nativeArray0.getIndexIds();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 24
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(360L);
      ScriptableObject.putProperty((Scriptable) nativeArray0, 172, (Object) nativeArray0);
      assertTrue(nativeArray0.isEmpty());
      assertEquals(360L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Scriptable scriptable0 = Context.toObject((Object) context0, (Scriptable) importerTopLevel0);
      assertEquals("JavaObject", scriptable0.getClassName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4299L);
      NativeCall nativeCall0 = new NativeCall();
      Object[] objectArray0 = new Object[7];
      IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(13, nativeCall0, false);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      NativeArray nativeArray1 = (NativeArray)nativeArray0.execIdCall(idFunctionObject0, context0, nativeCall0, nativeCall0, objectArray0);
      assertEquals(7L, nativeArray1.jsGet_length());
      assertEquals("Array", nativeArray1.getClassName());
      assertEquals(4299L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test43()  throws Throwable  {
      Method[] methodArray0 = new Method[6];
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      Double double0 = new Double(2);
      Context context0 = Context.getContext();
      nativeArray0.getOwnPropertyDescriptor(context0, double0);
  }
}

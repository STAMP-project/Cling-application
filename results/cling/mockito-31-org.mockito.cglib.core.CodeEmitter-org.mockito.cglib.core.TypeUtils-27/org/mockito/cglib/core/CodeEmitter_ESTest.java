/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 09:57:52 GMT 2019
 */

package org.mockito.cglib.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mockito.asm.ClassAdapter;
import org.mockito.asm.ClassVisitor;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.Label;
import org.mockito.asm.MethodVisitor;
import org.mockito.asm.Type;
import org.mockito.cglib.core.Block;
import org.mockito.cglib.core.ClassEmitter;
import org.mockito.cglib.core.CodeEmitter;
import org.mockito.cglib.core.ProcessSwitchCallback;
import org.mockito.cglib.core.Signature;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class CodeEmitter_ESTest extends CodeEmitter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.BYTE_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[19];
      Signature signature0 = new Signature("B", "-)o$E~;8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 192, signature0, typeArray0);
      codeEmitter0.if_cmp(type0, 8, (Label) null);
      codeEmitter0.box(type0);
      assertEquals(10, Type.OBJECT);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$>~;:^8?|1Pe", "-)o$>~;:^8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, (Type[]) null);
      Block block0 = codeEmitter0.begin_block();
      Label label0 = block0.getStart();
      Type type0 = Type.FLOAT_TYPE;
      codeEmitter0.if_cmp(type0, 4, label0);
      assertEquals(8, Type.DOUBLE);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[19];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      Type type0 = Type.VOID_TYPE;
      codeEmitter0.box(type0);
      codeEmitter0.push(1.0);
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      codeEmitter0.push((double) 1);
      Signature signature1 = new Signature("-)o$E~;8?|1Pe", "-)o$E~;8?|1Pe");
      Type type0 = signature1.getReturnType();
      codeEmitter0.box(type0);
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      codeEmitter0.push((double) 1);
      codeEmitter0.push(true);
      assertEquals(153, CodeEmitter.EQ);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      codeEmitter0.push((double) 1);
      codeEmitter0.push(false);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[19];
      Signature signature0 = new Signature("S", "-)o$E~;8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 192, signature0, typeArray0);
      codeEmitter0.push((double) 1);
      int[] intArray0 = new int[9];
      intArray0[0] = 4;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[19];
      Signature signature0 = new Signature("B", "-)ho$ES;8?|1Ph");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 192, signature0, typeArray0);
      codeEmitter0.push((double) 1);
      int[] intArray0 = new int[2];
      intArray0[1] = 126;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertFalse(codeEmitter0.isStaticHook());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[1];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      int[] intArray0 = new int[2];
      intArray0[1] = 3;
      codeEmitter0.push((double) 1);
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:X.^8?|1Pe", "-)o$E~;:X.^8?|1Pe");
      Type[] typeArray0 = new Type[8];
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 90, signature0, typeArray0);
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.box(type0);
      codeEmitter0.push((double) 1);
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[2];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.box(type0);
      Type type1 = Type.getReturnType("-)o$E~;:^8?|1Pe");
      codeEmitter0.box(type1);
      assertEquals(155, CodeEmitter.LT);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      Signature signature0 = new Signature("qC8zzs'L/a0%ktxi", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      codeEmitter0.push(true);
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("Short", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      codeEmitter0.push(false);
      assertEquals(100, CodeEmitter.SUB);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[10];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      Type type0 = Type.INT_TYPE;
      codeEmitter0.box(type0);
      int[] intArray0 = new int[5];
      intArray0[0] = 100;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[2];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 201, signature0, typeArray0);
      Type type0 = Type.LONG_TYPE;
      int[] intArray0 = new int[2];
      intArray0[0] = (-1805);
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      codeEmitter0.box(type0);
      assertEquals(128, CodeEmitter.OR);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[10];
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(type0).getInternalName();
      doReturn(0).when(type0).getSize();
      doReturn(201, 201, 201).when(type0).getSort();
      doReturn((String) null).when(type0).toString();
      typeArray0[0] = type0;
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.box(typeArray0[0]);
      int[] intArray0 = new int[3];
      intArray0[0] = 154;
      intArray0[1] = 158;
      intArray0[2] = 158;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(155, CodeEmitter.LT);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.CHAR_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[19];
      typeArray0[0] = type0;
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      Type type1 = Type.DOUBLE_TYPE;
      codeEmitter0.unbox_or_zero(type1);
      // Undeclared exception!
      try { 
        codeEmitter0.create_arg_array();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.INT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[12];
      typeArray0[0] = type0;
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      codeEmitter0.push((float) (-1));
      // Undeclared exception!
      try { 
        codeEmitter0.create_arg_array();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      codeEmitter0.push((double) 1);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.box(type0);
      assertFalse(codeEmitter0.isStaticHook());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$>~;:^8?|1Pe", "-)o$>~;:^8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, (Type[]) null);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.box(type0);
      codeEmitter0.push((double) 96);
      assertFalse(codeEmitter0.isStaticHook());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$>~;:^8?|1Pe", "-)o$>~;:^8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, (Type[]) null);
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push((double) 0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      Type type0 = Type.FLOAT_TYPE;
      codeEmitter0.newarray(type0);
      Type type1 = Type.DOUBLE_TYPE;
      codeEmitter0.unbox_or_zero(type1);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Type type0 = Type.INT_TYPE;
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 98, signature0, typeArray0);
      codeEmitter0.push(0.0);
      codeEmitter0.newarray(type0);
      assertEquals(1, Type.BOOLEAN);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$>~;:^8?|1Pe", "-)o$>~;:^8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, (Type[]) null);
      Type type0 = Type.SHORT_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push(0.0);
      assertEquals(153, CodeEmitter.EQ);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:X.^8?|1Pe", "-)o$E~;:X.^8?|1Pe");
      Type[] typeArray0 = new Type[8];
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(154, 154).when(type0).getSort();
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      Type type1 = Type.DOUBLE_TYPE;
      codeEmitter0.unbox_or_zero(type1);
      assertEquals(112, CodeEmitter.REM);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.unbox_or_zero(type0);
      codeEmitter0.newarray(type0);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$>~;:^8?|1Pe", "-)o$>~;:^8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, (Type[]) null);
      Type type0 = Type.BOOLEAN_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push((float) 108);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?o1Pe", "-)o$E~;:^8?o1Pe");
      Type[] typeArray0 = new Type[2];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push((float) 2);
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:X.8?|1Pe", "-)o$E~;:X.8?|1Pe");
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 154, signature0, typeArray0);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.push((float) 5);
      codeEmitter0.newarray(type0);
      assertEquals(0, Type.VOID);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:X.^8?|1Pe", "-)o$E~;:X.^8?|1Pe");
      Type[] typeArray0 = new Type[8];
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, (-440), signature0, typeArray0);
      Type type0 = Type.FLOAT_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push((float) 2);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:Xw^8?|1Pe", "-)o$E~;:Xw^8?|1Pe");
      Type[] typeArray0 = new Type[8];
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, (-3869), signature0, typeArray0);
      Type type0 = Type.FLOAT_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push(1107.3768F);
      assertFalse(codeEmitter0.isStaticHook());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.INT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = new Signature("-)o$E~;8?|1Pe", "-)o$E~;8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.push(2.0F);
      codeEmitter0.newarray(type0);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.INT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = new Signature("-)o$E~;8?|1Pe", "-)o$E~;8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.push(2.4F);
      codeEmitter0.newarray(type0);
      assertEquals(6, Type.FLOAT);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.SHORT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[19];
      Signature signature0 = new Signature("-)o$E~;8?|1Pe", "-)o$E~;8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      codeEmitter0.push(2.0F);
      codeEmitter0.newarray(type0);
      assertEquals(128, CodeEmitter.OR);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.SHORT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[19];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 192, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      codeEmitter0.push((float) 7);
      assertFalse(codeEmitter0.isStaticHook());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$>~;:^8?|1Pe", "-)o$>~;:^8?|1Pe");
      Type[] typeArray0 = new Type[1];
      Type type0 = Type.BYTE_TYPE;
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      codeEmitter0.push((float) 5);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(182);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[0];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("H)L:d(~|bd;m 'h").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 134, signature0, typeArray0);
      codeEmitter0.push((float) 2);
      Type type0 = Type.VOID_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[10];
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(201, 201).when(type0).getSort();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.push((float) 201);
      codeEmitter0.newarray(type0);
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?o1Pe", "-)o$E~;:^8?o1Pe");
      Type[] typeArray0 = new Type[2];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push((float) 2);
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[1];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push((float) 9);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[2];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 4, signature0, typeArray0);
      codeEmitter0.push((float) 104);
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(96, CodeEmitter.ADD);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[2];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 4, signature0, typeArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push((double) 10);
      assertEquals(128, CodeEmitter.OR);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      codeEmitter0.push((double) 1);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(155, CodeEmitter.LT);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?o1Pe", "-)o$E~;:^8?o1Pe");
      Type[] typeArray0 = new Type[2];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push((double) 116);
      assertEquals(128, CodeEmitter.OR);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[19];
      Signature signature0 = new Signature("B", "-)o$E~;8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 211, signature0, typeArray0);
      codeEmitter0.push((double) 1);
      Type type0 = Type.FLOAT_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(2, Type.CHAR);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[2];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      codeEmitter0.push((-3029.541805883811));
      Type type0 = Type.FLOAT_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.INT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      codeEmitter0.push((double) 1);
      codeEmitter0.newarray(type0);
      assertEquals(8, Type.DOUBLE);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.INT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = new Signature("-)o$E~;8?|1Pe", "-)o$E~;8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.push((double) 112);
      codeEmitter0.newarray(type0);
      assertEquals(5, Type.INT);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.SHORT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[19];
      Signature signature0 = new Signature("S", "-)o$E~;8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 192, signature0, typeArray0);
      codeEmitter0.push((double) 1);
      codeEmitter0.newarray(type0);
      assertEquals(155, CodeEmitter.LT);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.SHORT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[19];
      Signature signature0 = new Signature("-)o$E~;8?|1Pe", "-)o$E~;8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      codeEmitter0.push((double) 112);
      codeEmitter0.newarray(type0);
      assertEquals(7, Type.LONG);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.BYTE_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[19];
      Signature signature0 = new Signature("B", "-)o$E~;8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 211, signature0, typeArray0);
      codeEmitter0.push((double) 1);
      codeEmitter0.newarray(type0);
      assertEquals(1, Type.BOOLEAN);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.BYTE_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[19];
      Signature signature0 = new Signature("B", "-)o$E~;8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 211, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      codeEmitter0.push((double) 2);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.VOID_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[19];
      Signature signature0 = new Signature("V", "-)o$E~;8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 192, signature0, typeArray0);
      codeEmitter0.push((double) 1);
      codeEmitter0.newarray(type0);
      assertEquals(3, Type.BYTE);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(182);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[0];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("H)L:d(~|bd;m 'h").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 134, signature0, typeArray0);
      codeEmitter0.push((-1076.3811748277942));
      Type type0 = Type.VOID_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(155, CodeEmitter.LT);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[1];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push((double) 1);
      assertFalse(codeEmitter0.isStaticHook());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      codeEmitter0.push((double) 1);
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[1];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.push(2039.0);
      codeEmitter0.newarray(type0);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[2];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 4, signature0, typeArray0);
      codeEmitter0.push((double) 153);
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.INT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[12];
      typeArray0[0] = type0;
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      Type type1 = Type.DOUBLE_TYPE;
      codeEmitter0.unbox_or_zero(type1);
      // Undeclared exception!
      try { 
        codeEmitter0.create_arg_array();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      Signature signature0 = new Signature("qC8zzs'L/a0%ktxi", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      codeEmitter0.push(108.0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      codeEmitter0.push((double) 1);
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(4, Type.SHORT);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[0];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("H)L:d(~|bd;m 'h").when(signature0).getDescriptor();
      Type[] typeArray1 = new Type[2];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 6, signature0, typeArray1);
      codeEmitter0.push(1.0);
      codeEmitter0.push(2.0F);
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[1];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      codeEmitter0.push(2039.0);
      codeEmitter0.push((double) 1);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Type type0 = Type.INT_TYPE;
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 98, signature0, typeArray0);
      Type type1 = Type.CHAR_TYPE;
      codeEmitter0.cast_numeric(type0, type1);
      codeEmitter0.not();
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Type type0 = Type.INT_TYPE;
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 98, signature0, typeArray0);
      Type type1 = Type.VOID_TYPE;
      codeEmitter0.cast_numeric(type0, type1);
      codeEmitter0.not();
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[2];
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn("-)o$E~;:^8?|1Pe").when(type0).getInternalName();
      doReturn(201, 142, 201, 201, 142).when(type0).getSort();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      Type type1 = Type.LONG_TYPE;
      codeEmitter0.unbox_or_zero(type0);
      codeEmitter0.cast_numeric(type1, typeArray0[0]);
      assertEquals(6, Type.FLOAT);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Type type0 = Type.INT_TYPE;
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 98, signature0, typeArray0);
      codeEmitter0.unbox_or_zero(type0);
      Type type1 = Type.CHAR_TYPE;
      codeEmitter0.cast_numeric(type0, type1);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.SHORT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[19];
      Signature signature0 = new Signature("S", "-)o$E~;8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 192, signature0, typeArray0);
      codeEmitter0.push((double) 1);
      Type type1 = Type.DOUBLE_TYPE;
      codeEmitter0.cast_numeric(type1, type0);
      assertEquals(1, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[2];
      Type type0 = Type.BYTE_TYPE;
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      Class<Object> class0 = Object.class;
      Type type1 = Type.getType(class0);
      codeEmitter0.unbox_or_zero(type1);
      assertEquals(3, Type.BYTE);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.INT_TYPE;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      Signature signature0 = new Signature("B71T[a", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 5, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      Type type1 = Type.getReturnType("B71T[a");
      codeEmitter0.newarray(type1);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.INT_TYPE;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      Signature signature0 = new Signature("B71T[a", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 5, signature0, typeArray0);
      codeEmitter0.unbox_or_zero(type0);
      Type type1 = Type.getReturnType("B71T[a");
      codeEmitter0.newarray(type1);
      assertEquals(124, CodeEmitter.USHR);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.INT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      Class<Object> class0 = Object.class;
      Type type1 = Type.getType(class0);
      codeEmitter0.newarray(type0);
      codeEmitter0.unbox_or_zero(type1);
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Type type0 = Type.INT_TYPE;
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 98, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.INT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = type0;
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.create_arg_array();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[1];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      Type type0 = Type.LONG_TYPE;
      Class<Object> class0 = Object.class;
      Type type1 = Type.getType(class0);
      codeEmitter0.newarray(type0);
      codeEmitter0.unbox_or_zero(type1);
      assertEquals(1, Type.BOOLEAN);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[1];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(0, Type.VOID);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[1];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.box(type0);
      assertEquals(8, Type.DOUBLE);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[1];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.load_args(10, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[12];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.create_arg_array();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      Signature signature0 = new Signature("qC8zzs'L/a0%ktxi", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        classEmitter0.visit(5, 104, "q2r.aJf#zv+S5e 5T/", "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[2];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      Class<Object> class0 = Object.class;
      Type type0 = Type.getType(class0);
      Type type1 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type1);
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("Short", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      Type type1 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type1);
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(0, Type.VOID);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.INT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = type0;
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      Type type1 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type1);
      // Undeclared exception!
      try { 
        codeEmitter0.create_arg_array();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[2];
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(201, 142).when(type0).getSort();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      Class<Object> class0 = Object.class;
      Type type1 = Type.getType(class0);
      codeEmitter0.unbox_or_zero(type1);
      assertEquals(10, type1.getSort());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[2];
      Type type1 = Type.VOID_TYPE;
      typeArray0[0] = type1;
      typeArray0[1] = type0;
      Signature signature0 = new Signature("qC8zzs'L/a0%ktxi", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, (-17), signature0, typeArray0);
      codeEmitter0.newarray(type1);
      codeEmitter0.create_arg_array();
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.SHORT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[19];
      Signature signature0 = new Signature("S", "-)o$E~;8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 192, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      Class<Object> class0 = Object.class;
      Type type1 = Type.getType(class0);
      codeEmitter0.unbox_or_zero(type1);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.SHORT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[19];
      typeArray0[1] = type0;
      Signature signature0 = new Signature("S", "-)o$E~;8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 192, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      codeEmitter0.unbox_or_zero(typeArray0[1]);
      assertFalse(codeEmitter0.isStaticHook());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[2];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 201, signature0, typeArray0);
      Type type0 = Type.SHORT_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.box(type0);
      assertEquals(96, CodeEmitter.ADD);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;:^8?|1Pe").when(signature0).getDescriptor();
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(3, 4).when(type0).getSort();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, (-1), signature0, typeArray0);
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.load_args(6, 116);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.SHORT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[19];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 192, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.create_arg_array();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(type0).getDescriptor();
      doReturn(3, 6, 9, 9).when(type0).getSort();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 10, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Type type0 = Type.FLOAT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = typeArray0[1];
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = type0;
      Signature signature0 = new Signature("ArZaCcZR0/[sd", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, (-4611), signature0, typeArray0);
      codeEmitter0.create_arg_array();
      codeEmitter0.newarray(type0);
      assertEquals(153, CodeEmitter.EQ);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[2];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      Class<Object> class0 = Object.class;
      Type type0 = Type.getType(class0);
      codeEmitter0.unbox_or_zero(type0);
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        classEmitter0.visit(158, (-1431655764), "-)o$E~;:^8?|1Pe", "B", "B", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.INT_TYPE;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      Signature signature0 = new Signature("B71T[a", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 5, signature0, typeArray0);
      codeEmitter0.unbox_or_zero(type0);
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        classEmitter0.visit(0, 6, "B71T[a", "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      codeEmitter0.push((double) 1);
      Class<Object> class0 = Object.class;
      Type type0 = Type.getType(class0);
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(3, Type.BYTE);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.INT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[12];
      typeArray0[0] = type0;
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      codeEmitter0.push((double) 1);
      // Undeclared exception!
      try { 
        codeEmitter0.create_arg_array();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.DOUBLE_TYPE;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      Signature signature0 = new Signature("_$\"-", type0, typeArray0);
      ClassAdapter classAdapter0 = new ClassAdapter((ClassVisitor) null);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      codeEmitter0.create_arg_array();
      assertEquals(128, CodeEmitter.OR);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[1];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      Type type0 = Type.LONG_TYPE;
      Label label0 = codeEmitter0.make_label();
      codeEmitter0.if_cmp(type0, 5, label0);
      codeEmitter0.box(type0);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[10];
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(201).when(type0).getSort();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.if_cmp(type0, 156, (Label) null);
      Type type1 = Type.LONG_TYPE;
      codeEmitter0.box(type1);
      assertEquals(7, Type.LONG);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = new Signature("-)o$E~;:8>?|1Pe", "-)o$E~;:8>?|1Pe");
      Type type0 = Type.BYTE_TYPE;
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, (-1), signature0, typeArray0);
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[3];
      intArray0[2] = 155;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(100, CodeEmitter.SUB);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[19];
      Signature signature0 = new Signature("S", "-)o$E~;8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 192, signature0, typeArray0);
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[0];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(96, CodeEmitter.ADD);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[2];
      intArray0[0] = 156;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.BYTE_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[19];
      Signature signature0 = new Signature("B", "-)o$E~;8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 211, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[1];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.INT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[8];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[3];
      intArray0[2] = 116;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.INT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[8];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[0];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.INT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[8];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.INT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      int[] intArray0 = new int[20];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      codeEmitter0.newarray(type0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[1];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[2];
      intArray0[1] = 8;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[12];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      int[] intArray0 = new int[0];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[2];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[3];
      intArray0[0] = 128;
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, (ProcessSwitchCallback) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[1];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[2];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:X.8?|1Pe", "-)o$E~;:X.8?|1Pe");
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 154, signature0, typeArray0);
      Type type0 = Type.CHAR_TYPE;
      int[] intArray0 = new int[3];
      intArray0[2] = 9;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      codeEmitter0.newarray(type0);
      assertFalse(codeEmitter0.isStaticHook());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[1];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[0];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(100, CodeEmitter.SUB);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?o1Pe", "-)o$E~;:^8?o1Pe");
      Type[] typeArray0 = new Type[2];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[20];
      intArray0[0] = 126;
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, (ProcessSwitchCallback) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      int[] intArray0 = new int[20];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:X.^8?|1Pe", "-)o$E~;:X.^8?|1Pe");
      Type[] typeArray0 = new Type[8];
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(154, 142).when(type0).getSort();
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[2];
      intArray0[1] = 128;
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, (ProcessSwitchCallback) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:Xw^8?|1Pe", "-)o$E~;:Xw^8?|1Pe");
      Type[] typeArray0 = new Type[8];
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, (-3869), signature0, typeArray0);
      Type type0 = Type.VOID_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[0];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:X.^8?|1Pe", "-)o$E~;:X.^8?|1Pe");
      Type[] typeArray0 = new Type[8];
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(154, 154).when(type0).getSort();
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:Xw^8?|1Pe", "-)o$E~;:Xw^8?|1Pe");
      Type[] typeArray0 = new Type[8];
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, (-3869), signature0, typeArray0);
      Type type0 = Type.VOID_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[1];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[2];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 201, signature0, typeArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1805);
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      Type type0 = Type.SHORT_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(2, Type.CHAR);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.SHORT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[19];
      Signature signature0 = new Signature("S", "-)o$E~;8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 192, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[0];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(124, CodeEmitter.USHR);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.SHORT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[19];
      Signature signature0 = new Signature("S", "-)o$E~;8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 192, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[9];
      intArray0[0] = 4;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[2];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 201, signature0, typeArray0);
      int[] intArray0 = new int[2];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      Type type0 = Type.SHORT_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[0];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("H)L:d(~|bd;m 'h").when(signature0).getDescriptor();
      Type[] typeArray1 = new Type[3];
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((-1936591320), 6).when(type0).getSort();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray1);
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[1];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0, false);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:Xw^8?|1Pe", "-)o$E~;:Xw^8?|1Pe");
      Type[] typeArray0 = new Type[8];
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, (-3869), signature0, typeArray0);
      Type type0 = Type.FLOAT_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[0];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(96, CodeEmitter.ADD);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:Xw^8?|1Pe", "-)o$E~;:Xw^8?|1Pe");
      Type[] typeArray0 = new Type[8];
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1130, signature0, typeArray0);
      Type type0 = Type.FLOAT_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[7];
      intArray0[0] = 112;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:Xw^8?|1Pe", "-)o$E~;:Xw^8?|1Pe");
      Type[] typeArray0 = new Type[8];
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, (-3869), signature0, typeArray0);
      Type type0 = Type.FLOAT_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[1];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(96, CodeEmitter.ADD);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[1];
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[3];
      intArray0[2] = 153;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[1];
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[0];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(155, CodeEmitter.LT);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[1];
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[5];
      intArray0[0] = 153;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      int[] intArray0 = new int[20];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(124, CodeEmitter.USHR);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:X.8?|1Pe", "-)o$E~;:X.8?|1Pe");
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type[] typeArray0 = new Type[0];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 142, signature0, typeArray0);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.if_cmp(type0, 187, (Label) null);
      Type type1 = Type.FLOAT_TYPE;
      codeEmitter0.box(type1);
      assertFalse(type1.equals((Object)type0));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[10];
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(type0).getInternalName();
      doReturn(0).when(type0).getSize();
      doReturn(201, 201, 201, 0).when(type0).getSort();
      doReturn((String) null).when(type0).toString();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.if_cmp(type0, 156, (Label) null);
      codeEmitter0.box(type0);
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[10];
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(201).when(type0).getSort();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.if_cmp(type0, 156, (Label) null);
      Type type1 = Type.FLOAT_TYPE;
      codeEmitter0.box(type1);
      assertEquals(10, Type.OBJECT);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.CHAR_TYPE;
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = type0;
      typeArray0[6] = type0;
      Signature signature0 = new Signature("=ss;6%4", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1464, signature0, typeArray0);
      codeEmitter0.push(604.7415F);
      codeEmitter0.create_arg_array();
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.INT_TYPE;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      Signature signature0 = new Signature("B71T[a", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 5, signature0, typeArray0);
      codeEmitter0.push((float) 2);
      codeEmitter0.push((float) 0);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[12];
      Signature signature0 = mock(Signature.class, new ViolatedAssumptionAnswer());
      doReturn(typeArray0).when(signature0).getArgumentTypes();
      doReturn("-)o$E~;8?|1Pe").when(signature0).getDescriptor();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      codeEmitter0.push((float) (-1));
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[3];
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 98, signature0, typeArray0);
      codeEmitter0.push(0.0);
      codeEmitter0.push(0.0F);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.INT_TYPE;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      Signature signature0 = new Signature("B71T[a", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 5, signature0, typeArray0);
      codeEmitter0.push((float) 2);
      codeEmitter0.create_arg_array();
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Type type0 = Type.FLOAT_TYPE;
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = typeArray0[1];
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = type0;
      Signature signature0 = new Signature("ArZaCcZR0/[sd", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, (-4611), signature0, typeArray0);
      codeEmitter0.create_arg_array();
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(3, Type.BYTE);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[1];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      codeEmitter0.push((double) 1);
      codeEmitter0.push((float) 9);
      assertEquals(155, CodeEmitter.LT);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Signature signature0 = new Signature("-)o$E~;:^8?|1Pe", "-)o$E~;:^8?|1Pe");
      Type[] typeArray0 = new Type[1];
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      codeEmitter0.push((float) 0);
      codeEmitter0.push((double) 1);
      assertFalse(codeEmitter0.isStaticHook());
  }
}

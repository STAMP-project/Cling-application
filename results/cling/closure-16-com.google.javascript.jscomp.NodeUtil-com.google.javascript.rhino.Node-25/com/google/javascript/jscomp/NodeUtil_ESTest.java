/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 05:51:28 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeSimplifyRegExp;
import com.google.javascript.jscomp.ReorderConstantExpression;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("uxB", "uxB").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(jqueryCodingConvention0, "uxB", node0);
      NodeUtil.redeclareVarsInsideBranch(node1);
      assertTrue(node1.isName());
      assertEquals(0, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = Node.newString("Glv", 302, 33);
      NodeUtil.copyNameAnnotations(node0, node0);
      assertEquals(1237025, node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(113, 1187, 1154).when(node0).getType();
      NodeUtil.mayEffectMutableState(node0);
      Node node1 = Node.newString("slash_v", (-1000), 113);
      NodeUtil.isHoistedFunctionDeclaration(node1);
      assertEquals((-1), node1.getSourcePosition());
      assertTrue(node1.isString());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("uxB", "uxB").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "uxB", node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        peepholeRemoveDeadCode0.tryFoldDo(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName("~QC~bGQ6L.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = new Node(62);
      Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
      assertEquals(62, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.getPureBooleanValue(node0);
      assertEquals(44, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = new Node(43);
      NodeUtil.getImpureBooleanValue(node0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("r\"1\"m:L", "r\"1\"m:L").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "r\"1\"m:L", node0);
      NodeUtil.getPureBooleanValue(node1);
      assertTrue(node1.isName());
      assertEquals(0, node1.getSourcePosition());
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString("slash_v", (-1000), 113);
      NodeUtil.getImpureBooleanValue(node0);
      assertTrue(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = new Node(44);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("true", string0);
      assertEquals(44, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(100).when(node0).getType();
      NodeUtil.getPureBooleanValue(node0);
      Node node1 = Node.newString("H=81");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
      assertEquals((-1), node1.getCharno());
      assertEquals(40, node1.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "FyTi9]LF6|UD");
      NodeUtil.isSimpleOperator(node0);
      String string0 = NodeUtil.opToStr(43);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = new Node(655, node0, node0, node0, 38, 35);
      assertEquals(655, node1.getType());
      assertFalse(node1.isTry());
      assertEquals(155683, node1.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
      
      boolean boolean0 = NodeUtil.isTryCatchNodeContainer(node0);
      assertTrue(node0.isTrue());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = new Node(4095, 133, 133);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      NodeUtil.isValidDefineValue(node0, set0);
      NodeUtil.getNearestFunctionName(node0);
      assertEquals(4095, node0.getType());
      assertEquals(544901, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node(4095, 133, 133);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertFalse(boolean0);
      
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node1 = peepholeSimplifyRegExp0.optimizeSubtree(node0);
      assertEquals(4095, node0.getType());
      assertEquals(544901, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = new Node(4095, 133, 133);
      NodeUtil.isNameReferenced(node0, ")g>*h~#sasdeyK9>q");
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertFalse(boolean0);
      assertEquals(544901, node0.getSourcePosition());
      assertEquals(4095, node0.getType());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = new Node(3153);
      NodeUtil.isSimpleOperator(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew(node0, (-4934));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node0 = Node.newString(51, ".2J");
      assertFalse(node0.isRegExp());
      
      Node node1 = peepholeSimplifyRegExp0.optimizeSubtree(node0);
      boolean boolean0 = NodeUtil.isSimpleOperator(node1);
      assertTrue(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.REGION;
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, "google_exportSymbol", sourceExcerptProvider_SourceExcerpt0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.isStatementBlock(node1);
      assertFalse(boolean0);
      
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchDeclaration0);
      assertEquals(122, node1.getType());
      assertEquals(0, node1.getCharno());
      assertEquals(0, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getFirstChild();
      Predicate<Node> predicate0 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false, false).when(predicate0).apply(any(com.google.javascript.rhino.Node.class));
      boolean boolean0 = NodeUtil.has(node1, predicate0, predicate0);
      assertFalse(boolean0);
      assertEquals(43, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      Node node0 = Node.newString("!=");
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 40, nodeUtil_NumbericResultPredicate0);
      assertEquals(1, int0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.REGION;
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, "google_exportSymbol", sourceExcerptProvider_SourceExcerpt0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.isValidQualifiedName("2J");
      assertFalse(boolean0);
      
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchDeclaration0);
      assertTrue(node1.isVoid());
      assertEquals(0, node1.getSourcePosition());
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(120, (-502), 120).when(node0).getType();
      NodeUtil.mayEffectMutableState(node0);
      Node node1 = new Node(47, 38, 30);
      NodeUtil.isSimpleFunctionObjectCall(node1);
      assertTrue(node1.isRegExp());
      assertEquals(155678, node1.getSourcePosition());
      assertEquals(38, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      NodeUtil.isLoopStructure(node0);
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertTrue(node0.isParamList());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Node node1 = Node.newString("slash_v", (-1000), 113);
      Node node2 = new Node(1, node1, node1, node0, 120, 98);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node1).copyInformationFromForTree(any(com.google.javascript.rhino.Node.class));
      doReturn((Node) null).when(node1).getFirstChild();
      doReturn((Node) null, (Node) null, node0).when(node1).getNext();
      doReturn(0).when(node1).getType();
      doReturn(false).when(node1).isGetElem();
      doReturn(false).when(node1).isGetProp();
      doReturn((String) null, (String) null, (String) null).when(node1).toString();
      Node[] nodeArray0 = new Node[0];
      Node node2 = NodeUtil.newCallNode(node1, nodeArray0);
      NodeUtil.setDebugInformation(node2, node2, "$oH");
      boolean boolean0 = NodeUtil.containsFunction(node2);
      assertFalse(boolean0);
      assertTrue(node2.isCall());
      
      NodeUtil.getArgumentForCallOrNew(node2, 2707);
      assertEquals((-1), node2.getCharno());
      assertFalse(node0.isString());
      assertEquals((-1), node2.getLineno());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      assertTrue(node1.isCall());
      
      NodeUtil.getArgumentForCallOrNew(node1, 2707);
      assertEquals(83, node0.getType());
      assertFalse(node1.isGetElem());
      assertFalse(node0.isCall());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(true).when(node0).isExprResult();
      // Undeclared exception!
      try { 
        NodeUtil.isExprCall(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.getLoopCodeBlock(node0);
      assertEquals(44, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.REGION;
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, "google_exportSymbol", sourceExcerptProvider_SourceExcerpt0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newUndefinedNode(node0);
      int int0 = NodeUtil.getInverseOperator((-1014));
      assertEquals((-1), int0);
      
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchDeclaration0);
      assertEquals(0, node1.getCharno());
      assertEquals(122, node1.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = new Node(1);
      Node node1 = node0.cloneTree();
      assertEquals(1, node1.getType());
      assertNotSame(node1, node0);
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NodeUtil.getInverseOperator((-1038));
      Node node0 = new Node(29, 0, 8);
      node0.detachChildren();
      assertEquals(8, node0.getSourcePosition());
      assertEquals(29, node0.getType());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node(4095, 133, 6);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      NodeUtil.isValidDefineValue(node0, set0);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertEquals(4095, node0.getType());
      assertTrue(node1.isVoid());
      assertEquals(544774, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = NodeUtil.trimJsWhiteSpace(".2J");
      assertEquals(".2J", string0);
      
      Node node0 = new Node(44);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(44, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("!=", "!=").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "!=", node0);
      boolean boolean0 = node1.isOnlyModifiesThisCall();
      assertFalse(boolean0);
      assertTrue(node1.isName());
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      node0.addSuppression("{");
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.isForIn(node0);
      assertFalse(boolean0);
      assertFalse(node0.isFor());
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertTrue(node0.isTrue());
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = new Node(4095, 133, 133);
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "FyTi9]LF6|UD");
      Node node1 = Node.newString("L&#VQ", 49, 3329);
      NodeUtil.isSimpleOperator(node1);
      assertEquals(204033, node1.getSourcePosition());
      assertTrue(node1.isString());
      
      String string0 = NodeUtil.getPrototypePropertyName(node0);
      assertEquals(38, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals("UD", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      NodeUtil.isImmutableValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative((-282));
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(32);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      NodeUtil.isSimpleOperator(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = NodeUtil.newName(codingConvention0, "r\"1\"m:L", node0);
      node0.isEquivalentToTyped(node1);
      assertEquals(38, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
      
      NodeUtil.isSimpleOperator(node0);
      assertEquals(44, node0.getType());
      assertFalse(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("uxB", "uxB").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "uxB", node0);
      Node node2 = new Node(1);
      CodingConvention codingConvention1 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      NodeUtil.isSimpleOperator(node1);
      // Undeclared exception!
      try { 
        NodeUtil.isConstantByConvention(codingConvention1, node2, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = new Node(4095, 133, 133);
      Node node1 = new Node(43);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      NodeUtil.isValidDefineValue(node1, set0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node2 = NodeUtil.newName(closureCodingConvention0, "generateExports", node0, ")g>*h~#sasdeyK9>q");
      boolean boolean0 = NodeUtil.isBooleanResult(node2);
      assertEquals(544901, node2.getSourcePosition());
      assertEquals(38, node2.getType());
      assertEquals(4095, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newString("L&#VQ", 49, 3329);
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertEquals(204033, node0.getSourcePosition());
      assertTrue(node0.isString());
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isCommutative(46);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-15)).when(node0).getType();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      NodeUtil.valueCheck(node0, sourceMap_DetailLevel0);
      Node node1 = Node.newString("L&#VQ", 49, 3329);
      boolean boolean0 = NodeUtil.isSimpleOperator(node1);
      assertEquals(204033, node1.getSourcePosition());
      assertTrue(node1.isString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = new Node(4095, 133, 133);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      NodeUtil.isValidDefineValue(node0, set0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newName(closureCodingConvention0, "generateExports", node0, ")g>*h~#sasdeyK9>q");
      NodeUtil.isBooleanResult(node1);
      assertEquals(4095, node0.getType());
      assertEquals(544901, node1.getSourcePosition());
      assertTrue(node1.isName());
      assertEquals(133, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = new Node(4095, 133, 133);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      NodeUtil.isValidDefineValue(node0, set0);
      boolean boolean0 = NodeUtil.isBooleanResult(node0);
      assertEquals(544901, node0.getSourcePosition());
      assertEquals(4095, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("uxB", "uxB").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "uxB", node0);
      Node node2 = new Node(1);
      boolean boolean0 = NodeUtil.mayBeString(node2, false);
      boolean boolean1 = NodeUtil.isLiteralValue(node1, false);
      assertFalse(boolean1 == boolean0);
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getCharno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("uxB", "uxB").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "uxB", node0);
      boolean boolean0 = NodeUtil.mayBeString(node1, false);
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isLiteralValue(node1, false);
      assertEquals(0, node1.getSourcePosition());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getLastChild();
      doReturn(false, false, false, false).when(node1).isGetElem();
      doReturn(false, false, false, false, true).when(node1).isGetProp();
      doReturn((String) null, (String) null, (String) null, (String) null).when(node1).toString();
      Node[] nodeArray0 = new Node[0];
      Node node2 = NodeUtil.newCallNode(node1, nodeArray0);
      NodeUtil.isFunctionObjectCall(node2);
      NodeUtil.isObjectCallMethod(node2, "");
      Predicate<Node> predicate0 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.Node.class));
      NodeUtil.evaluatesToLocalValue(node2, predicate0);
      NodeUtil.isFunctionObjectApply(node2);
      boolean boolean0 = NodeUtil.isSimpleOperator(node2);
      assertEquals(83, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertTrue(node2.isCall());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-1099), (-1099)).when(node0).getType();
      boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
      boolean boolean1 = NodeUtil.isCommutative(29);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      Node node1 = node0.getAncestor(52);
      assertNull(node1);
      
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
      assertTrue(node0.isTrue());
      assertFalse(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(node1).getLastChild();
      doReturn(false, false, false, false).when(node1).isGetElem();
      doReturn(false, false, false, false, true).when(node1).isGetProp();
      doReturn((String) null, (String) null, (String) null, (String) null).when(node1).toString();
      Node[] nodeArray0 = new Node[0];
      Node node2 = NodeUtil.newCallNode(node1, nodeArray0);
      NodeUtil.isFunctionObjectCall(node2);
      NodeUtil.isObjectCallMethod(node2, "");
      Predicate<Node> predicate0 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.Node.class));
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node2, predicate0);
      assertFalse(node0.isString());
      assertFalse(boolean0);
      
      NodeUtil.isFunctionObjectApply(node2);
      boolean boolean1 = NodeUtil.isImmutableValue(node2);
      assertTrue(node2.isCall());
      assertFalse(node0.isCall());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newString("H=81");
      boolean boolean0 = NodeUtil.isAssociative(43);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = node0.isSyntheticBlock();
      assertFalse(boolean0);
      
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
      assertTrue(node0.isTrue());
      assertEquals((-1), node0.getLineno());
      assertEquals(44, node0.getType());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node(44);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      node0.putBooleanProp(42, false);
      assertEquals(44, node0.getType());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(node0).getType();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      NodeUtil.valueCheck(node0, sourceMap_DetailLevel0);
      Node node1 = new Node(38, 43, 98);
      Node node2 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node1).when(node2).getParent();
      doReturn(true, true).when(node2).isFunction();
      // Undeclared exception!
      try { 
        NodeUtil.getNearestFunctionName(node2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 43 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node0).getType();
      NodeUtil.isGetOrSetKey(node0);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node1 = Node.newString(51, ".2J");
      Node node2 = peepholeSimplifyRegExp0.optimizeSubtree(node1);
      Node node3 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node2).when(node3).getFirstChild();
      doReturn(node2, (Node) null).when(node3).getParent();
      doReturn(true, true).when(node3).isFunction();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      NodeUtil.valueCheck(node2, sourceMap_DetailLevel0);
      // Undeclared exception!
      try { 
        NodeUtil.getNearestFunctionName(node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = new Node(44);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      Node node1 = NodeUtil.newExpr(node0);
      NodeUtil.getStringValue(node1);
      assertFalse(node0.isFalse());
      assertTrue(node1.isExprResult());
      assertEquals((-1), node1.getCharno());
      assertEquals(130, node1.getType());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newString("H=81");
      Node node1 = node0.getAncestor(0);
      assertNotNull(node1);
      assertEquals(40, node1.getType());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newString("pfM-CKjaEZ");
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // STRING pfM-CKjaEZ does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString("H=81");
      // Undeclared exception!
      try { 
        node0.getExistingIntProp((-1952));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: -1952
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newString("~QC~bGQ6L", 31, (-1175));
      assertEquals((-1), node0.getCharno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      String string0 = node0.toStringTree();
      assertEquals("TRUE\n", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      node0.setLineno(2931);
      assertEquals(12005376, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = new Node(655, node0, node0, node0, 38, 35);
      node1.setLineno(15);
      assertEquals(15, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.setDebugInformation(node0, node0, "$oH");
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        NodeUtil.isConstantByConvention(codingConvention0, node0, node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // TRUE [originalname: $oH] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("!=", "!=").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "!=", node0);
      NodeUtil.copyNameAnnotations(node1, node1);
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isNull());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newString("Glv", 302, 33);
      node0.setSourceEncodedPositionForTree(302);
      assertEquals(302, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("r\"1\"m:L", "r\"1\"m:L").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "r\"1\"m:L", node0);
      // Undeclared exception!
      try { 
        NodeUtil.setDebugInformation(node1, node1, "r\"1\"m:L");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ErrorReporter errorReporter0 = mock(ErrorReporter.class, new ViolatedAssumptionAnswer());
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assignment op:PARAM_LIST
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      assertFalse(node0.isFunction());
      
      boolean boolean0 = NodeUtil.referencesThis(node0);
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = NodeUtil.numberNode(397.31222, (Node) null);
      assertFalse(node0.isName());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isVarDeclaration(node0);
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = new Node(46, node0, node0, node0, node0);
      assertEquals(46, node1.getType());
      assertEquals((-1), node0.getLineno());
      assertEquals(44, node0.getType());
      assertFalse(node1.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("Mq!y7RzR5").when(node0).getString();
      doReturn(32).when(node0).getType();
      doReturn(false).when(node0).isGetProp();
      boolean boolean0 = NodeUtil.isConstantByConvention(codingConvention0, node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getLastChild();
      doReturn("@XRP6q").when(node0).getString();
      doReturn(42).when(node0).getType();
      doReturn(true).when(node0).isGetProp();
      boolean boolean0 = NodeUtil.isConstantByConvention(codingConvention0, node0, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = new Node(15, 38, 8);
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals(15, node0.getType());
      assertNull(string0);
      assertEquals(155656, node0.getSourcePosition());
      assertEquals(8, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = NodeUtil.precedence(52);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(node0).isNull();
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = NodeUtil.numberNode((-1120.0), node0);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
      assertEquals(44, node0.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(117, 117, 43, 0, 0).when(node0).getType();
      doReturn(false).when(node0).isNull();
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node(39, 4174, 153);
      boolean boolean0 = NodeUtil.isNumericResult(node0);
      assertEquals(17096857, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(1060);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1060
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
      assertTrue(node0.isTrue());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(37, node1.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object object0 = new Object();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(object0, object0, object0, object0).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.getVarsDeclaredInBranch(node1);
      assertFalse(node1.isName());
      assertEquals(0, node1.getSourcePosition());
      assertTrue(node1.isVoid());
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newString("H=81");
      NodeUtil.getVarsDeclaredInBranch(node0);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getParent();
      doReturn(true).when(node0).isFunction();
      doReturn(true).when(node0).isName();
      NodeUtil.getVarsDeclaredInBranch(node0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(440, (-1), 32).when(node1).getType();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      Predicate<Node> predicate0 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(predicate0).apply(any(com.google.javascript.rhino.Node.class));
      NodeUtil.getNodeTypeReferenceCount(node1, 103, predicate0);
      assertEquals(37, node1.getType());
      assertEquals((-1), node0.getCharno());
      assertTrue(node1.isCall());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newString("J9I PP");
      NodeUtil.isPrototypeProperty(node0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getParent();
      doReturn((StaticSourceFile) null).when(node0).getStaticSourceFile();
      StaticSourceFile staticSourceFile0 = NodeUtil.getSourceFile(node0);
      assertNull(staticSourceFile0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newString("Glv", 302, 33);
      NodeUtil.getInputId(node0);
      assertEquals(1237025, node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Node node1 = NodeUtil.booleanNode(true);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = new Node(3153);
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 3153
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(node0).isCall();
      doReturn(true).when(node0).isNoSideEffectsCall();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = NodeUtil.functionCallHasSideEffects(node0, abstractCompiler0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node0).getType();
      doReturn(false).when(node0).isNew();
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(28, 0, 0).when(node0).getType();
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = new Node(43);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      boolean boolean1 = NodeUtil.isBooleanResult(node0);
      assertTrue(boolean1 == boolean0);
      assertTrue(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertTrue(boolean0);
      assertEquals(44, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(true).when(node0).isCall();
      doReturn(false).when(node0).isNoSideEffectsCall();
      AbstractCompiler abstractCompiler0 = mock(AbstractCompiler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0, abstractCompiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(true).when(node0).isNew();
      doReturn(false).when(node0).isNoSideEffectsCall();
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ErrorReporter errorReporter0 = mock(ErrorReporter.class, new ViolatedAssumptionAnswer());
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      NodeUtil.getBestJSDocInfo(node0);
      assertEquals(83, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isParamList());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null, (Node) null, node0).when(node1).getLastChild();
      doReturn(true, true, true, true).when(node1).isGetProp();
      doReturn("zv fmo", "zv fmo", "0").when(node1).toString();
      Node[] nodeArray0 = new Node[0];
      Node node2 = NodeUtil.newCallNode(node1, nodeArray0);
      NodeUtil.isFunctionObjectCall(node2);
      NodeUtil.isObjectCallMethod(node2, "");
      Predicate<Node> predicate0 = (Predicate<Node>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.Node.class));
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node2, predicate0);
      assertFalse(node2.isString());
      assertTrue(node2.isCall());
      assertEquals((-1), node2.getLineno());
      assertTrue(node0.isTrue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("uxB", "uxB").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "uxB", node0);
      boolean boolean0 = NodeUtil.isSimpleOperator(node1);
      assertEquals(0, node1.getCharno());
      assertTrue(node1.isName());
      
      boolean boolean1 = NodeUtil.isCommutative(22);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      boolean boolean0 = NodeUtil.isFunctionObjectCall(node1);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isSimpleOperator(node1);
      assertTrue(node1.isCall());
      assertTrue(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("is_namespace");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("Z\"");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).copyInformationFrom(any(com.google.javascript.rhino.Node.class));
      Node node1 = Node.newString(12288, "");
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("uxB", "uxB").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "uxB", node0);
      boolean boolean0 = NodeUtil.mayBeString(node1, false);
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isSimpleOperator(node1);
      assertFalse(boolean1);
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = new Node((-4483));
      assertFalse(node0.isExprResult());
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(52);
      boolean boolean1 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals((-4483), node0.getType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(113, 1187, 1154).when(node0).getType();
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
      
      Node node1 = Node.newString("slash_v", (-1000), 113);
      boolean boolean1 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(node1.isString());
      assertEquals((-1), node1.getLineno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = new Node(44);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(44, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(1060, 1060, (-1062)).when(node0).getType();
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
      
      Node node1 = Node.newString("    ");
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      int int0 = NodeUtil.getNodeTypeReferenceCount(node1, 2050, nodeUtil_BooleanResultPredicate0);
      assertEquals(0, int0);
      assertEquals(40, node1.getType());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("}", (Node) null);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      Node node2 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node1).when(node2).getParent();
      doReturn(true).when(node2).isName();
      NodeUtil.getAssignedValue(node2);
      assertTrue(node0.isVar());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = new Node(655, node0, node0, node0, 38, 501);
      Node node2 = null;
      try {
        node2 = new Node(501, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = new Node(3153);
      NodeUtil.isSimpleOperator(node0);
      Node node1 = new Node(54, node0, node0);
      assertEquals(54, node1.getType());
      assertEquals(3153, node0.getType());
      assertFalse(node1.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newNumber(913.039, 5, 5);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertEquals(20485, node0.getSourcePosition());
      assertTrue(node0.isNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(node0).getType();
      NodeUtil.isGetOrSetKey(node0);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node1 = Node.newString(51, ".2J");
      Node node2 = peepholeSimplifyRegExp0.optimizeSubtree(node1);
      Node node3 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(node2).when(node3).getFirstChild();
      doReturn(node2, (Node) null).when(node3).getParent();
      doReturn(true, true).when(node3).isFunction();
      // Undeclared exception!
      try { 
        NodeUtil.getNearestFunctionName(node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(node0.isTrue());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node(4095, 133, 133);
      Node node1 = NodeUtil.newVarNode("~QC~bGQ6L..", node0);
      NodeUtil.mayEffectMutableState(node1);
      assertEquals(544901, node1.getSourcePosition());
      assertEquals(4095, node0.getType());
      assertEquals(118, node1.getType());
      assertFalse(node1.isTypeOf());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getFirstChild();
      doReturn(41).when(node0).getType();
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("uxB", "uxB").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "uxB", node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertEquals(0, node1.getCharno());
      assertTrue(node1.isName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(65, (-745), 65).when(node0).getType();
      NodeUtil.mayHaveSideEffects(node0);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(8);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 8
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newNumber(127.5, (-2088), 839);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(117, 117, 43).when(node0).getType();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(116, 96, 116).when(node0).getType();
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isFalse());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("uxB", (Object) null).when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "uxB", node0);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node1);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isSimpleOperator(node1);
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getCharno());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = Node.newString(51, ".2J");
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isBooleanResult(node0);
      assertEquals((-1), node0.getLineno());
      assertEquals(51, node0.getType());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((Node) null).when(node0).getLastChild();
      doReturn(true).when(node0).isGetProp();
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypeClassName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      assertFalse(node0.isGetProp());
      
      NodeUtil.getPrototypeClassName(node0);
      assertEquals(44, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(113, 1187, 1154).when(node0).getType();
      NodeUtil.mayEffectMutableState(node0);
      Node node1 = Node.newString("slash_v", (-1000), 113);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
      assertEquals(40, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("r\"1\"m:L", "r\"1\"m:L").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "r\"1\"m:L", node0);
      boolean boolean0 = NodeUtil.isSwitchCase(node1);
      assertEquals(38, node1.getType());
      assertFalse(boolean0);
      assertEquals(0, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      doReturn(true).when(codingConvention0).isConstantKey(anyString());
      Node node0 = Node.newString("uxB");
      assertTrue(node0.isString());
      
      Node node1 = NodeUtil.newQualifiedNameNode(codingConvention0, "H=81.", node0, "H=81.");
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.isGetProp());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      doReturn(false).when(codingConvention0).isConstantKey(anyString());
      Node node0 = Node.newString("uxB");
      assertTrue(node0.isString());
      
      Node node1 = NodeUtil.newQualifiedNameNode(codingConvention0, "H=81.", node0, "H=81.");
      assertEquals(2, node1.getChildCount());
      assertEquals(33, node1.getType());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = new Node(39, 4174, 153);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CodingConvention codingConvention0 = mock(CodingConvention.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(codingConvention0).isConstant(anyString());
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("r\"1\"m:L", "r\"1\"m:L").when(node0).getProp(anyInt());
      Node node1 = NodeUtil.newName(codingConvention0, "r\"1\"m:L", node0);
      assertTrue(node1.isName());
      
      Node node2 = NodeUtil.getRootOfQualifiedName(node1);
      assertEquals(0, node2.getCharno());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = NodeUtil.isLatin("J");
      assertTrue(boolean0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 23:10:18 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.Days;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.Months;
import org.joda.time.MutableInterval;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.EthiopicChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MutableInterval_ESTest extends MutableInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test0()  throws Throwable  {
      Interval interval0 = new Interval((Object) null);
      assertEquals(1566083415277L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test1()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadablePeriod) null, (ReadableInstant) null);
      assertEquals(1566083415258L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test2()  throws Throwable  {
      Days days0 = Days.THREE;
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, days0);
      assertEquals(1566342615232L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test3()  throws Throwable  {
      Months months0 = Months.TWO;
      Instant instant0 = Instant.now();
      MutableInterval mutableInterval0 = new MutableInterval(months0, instant0);
      assertEquals(1566083415193L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test4()  throws Throwable  {
      MutableInterval mutableInterval0 = MutableInterval.parse((String) null);
      assertEquals(1566083415000L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ReadableInstant readableInstant0 = mock(ReadableInstant.class, new ViolatedAssumptionAnswer());
      doReturn((Chronology) null).when(readableInstant0).getChronology();
      doReturn(0L).when(readableInstant0).getMillis();
      ReadableDuration readableDuration0 = mock(ReadableDuration.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(readableDuration0).getMillis();
      MutableInterval mutableInterval0 = new MutableInterval(readableInstant0, readableDuration0);
      MutableInterval mutableInterval1 = new MutableInterval(mutableInterval0);
      assertTrue(mutableInterval1.equals((Object)mutableInterval0));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      MutableInterval mutableInterval1 = new MutableInterval(mutableInterval0, ethiopicChronology0);
      assertFalse(mutableInterval1.equals((Object)mutableInterval0));
  }
}

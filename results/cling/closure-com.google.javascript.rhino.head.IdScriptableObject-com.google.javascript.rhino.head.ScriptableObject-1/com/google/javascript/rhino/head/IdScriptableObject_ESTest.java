/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 16:27:56 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.BoundFunction;
import com.google.javascript.rhino.head.Callable;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.EcmaError;
import com.google.javascript.rhino.head.EvaluatorException;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.MemberBox;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeFunction;
import com.google.javascript.rhino.head.NativeGenerator;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJSON;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeJavaConstructor;
import com.google.javascript.rhino.head.NativeNumber;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.NativeWith;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import java.lang.annotation.Annotation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class IdScriptableObject_ESTest extends IdScriptableObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      BaseFunction baseFunction0 = new BaseFunction(nativeError0, nativeError0);
      baseFunction0.checkPropertyChange(":Yw=(+#Wyq6G|0>", nativeError0, nativeError0);
      assertTrue(nativeError0.isEmpty());
      assertTrue(baseFunction0.isExtensible());
      assertTrue(nativeError0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeWith nativeWith0 = new NativeWith(nativeError0, nativeError0);
      Object object0 = ScriptableObject.getProperty((Scriptable) nativeError0, 1);
      nativeError0.addIdFunctionProperty(nativeWith0, object0, 4, "5m}^ ZF[+L-zP@?d", 4);
      assertFalse(nativeError0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      ScriptableObject.defineConstProperty(nativeError0, "_");
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Class<Object> class0 = Object.class;
      nativeCall0.defineProperty("6M,K),FkA4O?sK:M/P", class0, 5);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test04()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeArray nativeArray0 = new NativeArray(8);
      Context context0 = Context.getContext();
      nativeIterator_StopIteration0.put("__iterator__", (Scriptable) nativeArray0, (Object) nativeArray0);
      assertFalse(nativeArray0.isEmpty());
      
      nativeArray0.defineOwnProperty(context0, (Object) "__iterator__", (ScriptableObject) nativeIterator_StopIteration0, true);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod(context0, (Scriptable) nativeError0, "com/google/javascript/rhino/head/JavaAdapter", (Object[]) null);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: com/google/javascript/rhino/head/JavaAdapter is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      BaseFunction baseFunction0 = new BaseFunction(nativeError0, nativeError0);
      Object[] objectArray0 = ScriptableObject.getPropertyIds(baseFunction0);
      assertEquals(0, objectArray0.length);
      assertTrue(nativeError0.isExtensible());
      assertTrue(baseFunction0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.contains("null,null,null,null,null,null,null");
      assertTrue(nativeArray0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      ScriptableObject.putConstProperty(nativeError0, "", (Object) null);
      assertFalse(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Context context0 = Context.getContext();
      NativeCall nativeCall0 = context0.currentActivationCall;
      NativeWith nativeWith0 = new NativeWith(nativeError0, nativeCall0);
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptableObject(nativeWith0);
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Expected argument of type object, but instead had type object
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1L);
      ScriptableObject scriptableObject0 = ScriptableObject.ensureScriptableObject(nativeArray0);
      assertTrue(scriptableObject0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeJavaConstructor nativeJavaConstructor0 = new NativeJavaConstructor((MemberBox) null);
      assertFalse(nativeJavaConstructor0.isSealed());
      
      nativeJavaConstructor0.sealObject();
      nativeJavaConstructor0.exportAsJSClass(1, nativeIterator_StopIteration0, true);
      assertTrue(nativeJavaConstructor0.isSealed());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Context context0 = Context.enter();
      BoundFunction boundFunction0 = new BoundFunction(context0, nativeError0, (Callable) null, nativeError0, (Object[]) null);
      assertTrue(nativeError0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      BaseFunction baseFunction0 = new BaseFunction(nativeError0, nativeError0);
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(nativeError0, baseFunction0, 1042795819);
      Context context0 = new Context();
      baseFunction0.defineOwnProperty(context0, "__iterator__", scriptableObject0);
      assertTrue(nativeError0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeIterator.getStopIterationObject(nativeError0);
      assertTrue(nativeError0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      BaseFunction baseFunction0 = new BaseFunction(nativeError0, nativeError0);
      ScriptableObject.putProperty((Scriptable) nativeError0, 1602, (Object) baseFunction0);
      assertFalse(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeError0, 13);
      assertFalse(boolean0);
      assertTrue(nativeError0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ScriptableObject.redefineProperty(nativeIterator_StopIteration0, "error reporter", false);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeObject0, 4);
      assertTrue(boolean0);
      assertTrue(nativeObject0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Class<Object> class0 = Object.class;
      Object object0 = ScriptableObject.getTypedProperty((Scriptable) nativeCall0, (String) null, class0);
      assertTrue(nativeCall0.isExtensible());
      assertTrue(nativeCall0.isEmpty());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptable("P(EgU}");
        fail("Expecting exception: EcmaError");
      
      } catch(EcmaError e) {
         //
         // TypeError: Expected argument of type object, but instead had type string
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeError nativeError1 = (NativeError)ScriptableObject.ensureScriptable(nativeError0);
      assertTrue(nativeError1.isExtensible());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test22()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      Class<Object> class0 = Object.class;
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass(importerTopLevel0, class0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Scriptable) null, (Scriptable) null).when(scriptable0).getParentScope();
      doReturn((Scriptable) null).when(scriptable0).getPrototype();
      doReturn((String) null, (String) null).when(scriptable0).toString();
      NativeFunction nativeFunction0 = mock(NativeFunction.class, CALLS_REAL_METHODS);
      NativeGenerator nativeGenerator0 = new NativeGenerator(scriptable0, nativeFunction0, scriptable0);
      assertTrue(nativeGenerator0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      boolean boolean0 = nativeIterator_StopIteration0.isGenericDescriptor(nativeError0);
      assertTrue(boolean0);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeWith nativeWith0 = new NativeWith(nativeIterator_StopIteration0, nativeError0);
      Object object0 = ScriptableObject.getProperty((Scriptable) nativeWith0, 8);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertNotNull(object0);
      assertTrue(nativeError0.isEmpty());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test26()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-1565.2086241));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "language version";
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        nativeNumber0.defineFunctionProperties(stringArray0, class0, 1);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Method \"language version\" not found in \"java.lang.Object\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test28()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeWith nativeWith0 = new NativeWith(importerTopLevel0, importerTopLevel0);
      NativeCall nativeCall0 = new NativeCall();
      nativeCall0.defineOwnProperty(context0, nativeWith0, importerTopLevel0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      NativeWith nativeWith0 = new NativeWith((Scriptable) null, (Scriptable) null);
      Scriptable scriptable0 = mock(Scriptable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(scriptable0).get(anyString() , any(com.google.javascript.rhino.head.Scriptable.class));
      doReturn((Scriptable) null, (Scriptable) null).when(scriptable0).getParentScope();
      doReturn((String) null, (String) null).when(scriptable0).toString();
      NativeJSON.stringify(context0, scriptable0, "", scriptable0, nativeWith0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Class<Annotation> class0 = Annotation.class;
      ScriptableObject.getTypedProperty((Scriptable) nativeError0, 32, class0);
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test31()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      // Undeclared exception!
      try { 
        nativeError0.exportAsJSClass(150, (Scriptable) null, true);
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Cannot modify a property of a sealed object: Error.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test32()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      NativeArray nativeArray0 = new NativeArray(8);
      nativeArray0.exportAsJSClass(8, nativeObject0, true);
      // Undeclared exception!
      try { 
        nativeObject0.put(1305, (Scriptable) nativeArray0, (Object) "__iterator__");
        fail("Expecting exception: EvaluatorException");
      
      } catch(EvaluatorException e) {
         //
         // Cannot modify a property of a sealed object: 1305.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }
}

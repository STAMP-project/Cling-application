/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 20:56:47 GMT 2019
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.DurationFormatUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DurationFormatUtils_ESTest extends DurationFormatUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test00()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(2632L, " 1 days");
      assertEquals(" 1 0a02", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test01()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(2440L, true, true);
      assertEquals("2 seconds", string0);
      
      String string1 = DurationFormatUtils.formatPeriod(4036L, 2440L, "2 seconds");
      assertEquals("2 86398econ3086398", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(1573L, "NExO32>7mM5L| T");
      assertEquals("NExO32>7005L| T", string0);
      
      String string1 = DurationFormatUtils.formatPeriod(1573L, 525L, "NExO32>7005L| T");
      assertEquals("NExO32>7005L| T", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DurationFormatUtils.formatDurationISO((-1230L));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(7, "aZjQ");
      // Undeclared exception!
      DurationFormatUtils.formatPeriod((-1L), (-937L), ";", false, (TimeZone) simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DurationFormatUtils.formatDuration(0L, ";");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(7, "aZjQ");
      // Undeclared exception!
      DurationFormatUtils.formatPeriod((-1L), (-937L), ";", false, (TimeZone) simpleTimeZone0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      DurationFormatUtils.formatDuration(0L, ";");
      String string0 = DurationFormatUtils.formatPeriodISO(0L, 312);
      assertEquals("P0Y0M0DT0H0M0.312S", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      DurationFormatUtils.formatDuration(0L, ";");
      String string0 = DurationFormatUtils.formatDurationWords(60000L, true, true);
      assertEquals("1 minute", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(3214L, "P0Y0M0DT0H0M3.214S");
      assertEquals("P0Y000DT00003.2143214", string0);
      
      String string1 = DurationFormatUtils.formatDurationWords(3214L, true, true);
      assertEquals("3 seconds", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      DurationFormatUtils.formatDuration(0L, ";");
      String string0 = DurationFormatUtils.formatDurationWords(0L, false, false);
      assertEquals("0 days 0 hours 0 minutes 0 seconds", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationISO((-1230L));
      assertEquals("P0Y0M0DT0H0M-1.70S", string0);
      
      String string1 = DurationFormatUtils.formatPeriodISO(0L, 312);
      assertEquals("P0Y0M0DT0H0M0.312S", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationISO(3214L);
      assertEquals("P0Y0M0DT0H0M3.214S", string0);
      
      String string1 = DurationFormatUtils.formatPeriod(3214L, (-1822L), "P0Y0M0DT0H0M3.214S");
      assertEquals("P0Y0-10DT07430-13.2143594964", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test11()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationHMS(0L);
      assertEquals("0:00:00.000", string0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      String string1 = DurationFormatUtils.formatPeriod((-1959L), 1L, "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'", true, timeZone0);
      assertEquals("P0000Y0M0DT0H0M1.960S", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(3214L, "P0Y0M0DT0H0M3.214S");
      assertEquals("P0Y000DT00003.2143214", string0);
      
      String string1 = DurationFormatUtils.formatPeriod(3214L, (-1822L), "P0Y0M0DT0H0M3.214S");
      assertEquals("P0Y0-10DT07430-13.2143594964", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test13()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(3214L, "P0Y0M0DT0H0M3.214S");
      assertEquals("P0Y000DT00003.2143214", string0);
      
      String string1 = DurationFormatUtils.formatPeriod((-1L), 3214L, "P0Y000DT00003.2143214");
      assertEquals("P0Y000DT00003.2143214", string1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("d");
      boolean boolean0 = durationFormatUtils_Token0.equals("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Search and Replace array lengthQ don't match: ");
      String string0 = DurationFormatUtils.formatPeriod((-2200L), 0L, "Minimum abbreviation width with offset is 7", false, timeZone0);
      assertEquals("0ini0u abbreviation wi0th with off2et i 7", string0);
      
      String string1 = DurationFormatUtils.formatDuration(0L, "Minimum abbreviation width with offset is 7");
      assertEquals("0ini00u abbreviation wi0th with off00et i 7", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test16()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(3214L, true, true);
      assertEquals("3 seconds", string0);
      
      String string1 = DurationFormatUtils.formatDuration(3214L, "P0Y000DT00003.2143214");
      assertEquals("P0Y000DT00003.2143214", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test17()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(0L, false, true);
      assertEquals("0 days", string0);
      
      String string1 = DurationFormatUtils.formatDuration(0L, "", false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  @Ignore
  public void test18()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(3600032L, true, true);
      assertEquals("1 hour", string0);
      
      String string1 = DurationFormatUtils.formatDuration(3600032L, "1 hour", true);
      assertEquals("1 hour", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4767), "}|(yg");
      String string0 = DurationFormatUtils.formatPeriod((long) (-2031), (long) (-2031), "}|(yg", true, (TimeZone) simpleTimeZone0);
      assertEquals("}|(0g", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test20()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriod((-1L), 3214L, "P0Y000DT00003.2143214");
      assertEquals("P0Y000DT00003.2143214", string0);
      
      String string1 = DurationFormatUtils.formatDuration(3214L, "P0Y000DT00003.2143214");
      assertEquals("P0Y000DT00003.2143214", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test21()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationISO(3214L);
      assertEquals("P0Y0M0DT0H0M3.214S", string0);
      
      String string1 = DurationFormatUtils.formatPeriod((-1L), 3214L, "P0Y000DT00003.2143214");
      assertEquals("P0Y000DT00003.2143214", string1);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 22:04:47 GMT 2019
 */

package org.mockito.cglib.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mockito.asm.ClassAdapter;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.Label;
import org.mockito.asm.MethodVisitor;
import org.mockito.asm.Type;
import org.mockito.cglib.core.ClassEmitter;
import org.mockito.cglib.core.CodeEmitter;
import org.mockito.cglib.core.ProcessSwitchCallback;
import org.mockito.cglib.core.Signature;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class CodeEmitter_ESTest extends CodeEmitter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.DOUBLE_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(1, 7, "RuntimeInvisible`arameterAnnotations", "CGLIB$SWATICHkOK1", "CGLIB$SWATICHkOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Label label0 = codeEmitter0.mark();
      codeEmitter0.if_cmp(type0, 130, label0);
      assertEquals(2, Type.CHAR);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.VOID_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(107, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((double) 1);
      codeEmitter0.box(type0);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(2133447807, 131072, "System", "`d+;~@l!//hpcWD4n", "Y$iM4\"#>%wJ2D;g,;s", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) 1);
      Class<Object> class0 = Object.class;
      Type type0 = Type.getType(class0);
      codeEmitter0.box(type0);
      assertEquals(6, Type.FLOAT);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-39));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[2];
      classEmitter0.visit(104, 7, "no 'this' pointer within static method", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((double) 1);
      codeEmitter0.push(true);
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(107, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((double) 1);
      codeEmitter0.push(false);
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-39));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[2];
      classEmitter0.visit(104, 7, "no 'this' pointer within static method", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((double) 1);
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(107, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((double) 1);
      int[] intArray0 = new int[3];
      intArray0[2] = 154;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(8, 7, "RuntimeInvisibleParameterAnnotations", "r*t(56lVkQl&mGWe", "r*t(56lVkQl&mGWe", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) 1);
      int[] intArray0 = new int[1];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(2147483645, 2, "org.mockito.asm.Label", "]eN^spEO", "3`<sQ.T{n41H3{", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) 1);
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.box(type0);
      assertEquals(10, Type.OBJECT);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.VOID_TYPE;
      String[] stringArray0 = new String[1];
      classEmitter0.visit(107, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type1 = Type.BOOLEAN_TYPE;
      codeEmitter0.box(type1);
      codeEmitter0.box(type0);
      assertEquals(8, Type.DOUBLE);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Class<Object> class0 = Object.class;
      Type type0 = Type.getType(class0);
      codeEmitter0.box(type0);
      Type type1 = Type.BOOLEAN_TYPE;
      codeEmitter0.box(type1);
      assertEquals(100, CodeEmitter.SUB);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = Type.INT_TYPE;
      codeEmitter0.box(type0);
      codeEmitter0.push(true);
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(107, 7, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = Type.BOOLEAN_TYPE;
      codeEmitter0.box(type0);
      codeEmitter0.push(false);
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.DOUBLE_TYPE;
      String[] stringArray0 = new String[0];
      ClassAdapter classAdapter1 = new ClassAdapter(classAdapter0);
      MethodVisitor methodVisitor0 = classAdapter1.visitMethod(156, "hiort", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK2", stringArray0);
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      Signature signature0 = new Signature("", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 4369, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      int[] intArray0 = new int[4];
      intArray0[0] = 3;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      int[] intArray0 = new int[1];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0, false);
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.box(type0);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-27));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.LONG_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit((-731), 7, "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      int[] intArray0 = new int[2];
      intArray0[1] = 156;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0, true);
      codeEmitter0.box(type0);
      assertEquals(124, CodeEmitter.USHR);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-27));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.LONG_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(6, 7, "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.box(type0);
      codeEmitter0.push((double) 0);
      assertEquals(128, CodeEmitter.OR);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-27));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(6, 7, "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.box(type0);
      codeEmitter0.push((double) 0);
      assertEquals(155, CodeEmitter.LT);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-64));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.BYTE_TYPE;
      String[] stringArray0 = new String[2];
      classEmitter0.visit(4, 7, "no 'this' pointer within static method", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((float) 2);
      codeEmitter0.box(type0);
      assertEquals(9, Type.ARRAY);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.FLOAT_TYPE;
      String[] stringArray0 = new String[1];
      classEmitter0.visit(8, 7, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.box(type0);
      codeEmitter0.push((-1.0F));
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(107, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((-1255.0F));
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.box(type0);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(107, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((double) 1);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.box(type0);
      assertEquals(9, Type.ARRAY);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.FLOAT_TYPE;
      String[] stringArray0 = new String[1];
      classEmitter0.visit(8, 7, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) 8);
      codeEmitter0.box(type0);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(107, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.push((double) 107);
      codeEmitter0.box(type0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-27));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(6, 7, "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.push((double) 0);
      codeEmitter0.newarray(type0);
      assertEquals(3, Type.BYTE);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.FLOAT_TYPE;
      String[] stringArray0 = new String[7];
      classEmitter0.visit(1212, 8, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "StackMapTable", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push(0.0);
      codeEmitter0.newarray(type0);
      assertEquals(124, CodeEmitter.USHR);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.getObjectType("mY- 4C\"g");
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("mY- 4C\"g", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 6701, signature0, typeArray0);
      codeEmitter0.push(0.0);
      Type type1 = Type.INT_TYPE;
      codeEmitter0.newarray(type1);
      assertEquals(96, CodeEmitter.ADD);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-27));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(6, 7, "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.SHORT_TYPE;
      codeEmitter0.push((double) 0);
      codeEmitter0.newarray(type0);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(2147483645, 2, "org.mockito.asm.Label", "]eN^spEO", "3`<sQ.T{n41H3{", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.newarray(type0);
      Type type1 = Type.DOUBLE_TYPE;
      codeEmitter0.unbox_or_zero(type1);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-34));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = codeEmitter0.getReturnType();
      codeEmitter0.newarray(type0);
      codeEmitter0.push(0.0);
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-27));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.LONG_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(6, 7, "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.newarray(type0);
      codeEmitter0.push((double) 0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-34));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((float) 2);
      Type type0 = Type.BOOLEAN_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(0, Type.VOID);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(107, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = Type.BOOLEAN_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push((float) 8);
      assertEquals(100, CodeEmitter.SUB);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((float) 2);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "SyWtem", "SyWtem", "SyWtem", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((float) 112);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(2, type0.getSort());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((float) 2);
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(8, 7, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push((-1.0F));
      assertEquals(100, CodeEmitter.SUB);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Type type0 = Type.FLOAT_TYPE;
      ClassWriter classWriter0 = new ClassWriter(1);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-175), (-2959), "Integer", "Integer", "floatValue", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((float) 2);
      codeEmitter0.newarray(type0);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-34));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((float) 2);
      Type type0 = Type.INT_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(8, Type.DOUBLE);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-34));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.INT_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(6, 7, "RuntimeInvisible`arameterAnnota3ions", "RuntimeInvisible`arameterAnnota3ions", "RuntimeInvisible`arameterAnnota3ions", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((-2701.664F));
      codeEmitter0.newarray(type0);
      assertEquals(6, Type.FLOAT);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-34));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((float) 2);
      Type type0 = Type.getReturnType("System");
      codeEmitter0.newarray(type0);
      assertEquals(2, Type.CHAR);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push(1774.168F);
      Type type0 = Type.getReturnType("System");
      codeEmitter0.newarray(type0);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-39));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[2];
      classEmitter0.visit(104, 7, "no 'this' pointer within static method", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((float) 2);
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(124, CodeEmitter.USHR);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.push((-0.4117647F));
      codeEmitter0.newarray(type0);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-34));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = codeEmitter0.getReturnType();
      codeEmitter0.newarray(type0);
      codeEmitter0.push((float) 6);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-34));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((float) 2);
      Type type0 = codeEmitter0.getReturnType();
      codeEmitter0.newarray(type0);
      assertEquals(4, Type.SHORT);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.DOUBLE_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(107, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((float) 2);
      codeEmitter0.newarray(type0);
      assertEquals(8, Type.DOUBLE);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.FLOAT_TYPE;
      String[] stringArray0 = new String[1];
      classEmitter0.visit(8, 7, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.newarray(type0);
      codeEmitter0.push((-1.0F));
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.DOUBLE_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(65, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.newarray(type0);
      codeEmitter0.push(1813.37F);
      assertEquals(100, CodeEmitter.SUB);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(107, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((double) 1);
      Type type0 = Type.BOOLEAN_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(155, CodeEmitter.LT);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(92, 3125, ";1ak:6X[E`Ac,Q(72", "7{ E}$E6`U", "nuntimeInvisibleParameterAnnotations", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push(2501.332111608);
      Type type0 = Type.BOOLEAN_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(2, Type.CHAR);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(107, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((double) 1);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(128, CodeEmitter.OR);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(107, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.push((double) 107);
      assertEquals(128, CodeEmitter.OR);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(8, 7, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) 8);
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(7, Type.LONG);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.FLOAT_TYPE;
      String[] stringArray0 = new String[3];
      classEmitter0.visit((-1096), 116, "RuntimeInvisibleParameterAnnotations", "boe", "boe", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((double) 1);
      codeEmitter0.newarray(type0);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[4];
      classEmitter0.visit((-16), 386, "StackMapTable", "StackMapTable", "StackMapTable", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) 1);
      Type type0 = Type.INT_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(5, type0.getSort());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-34));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.INT_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(6, 7, "RuntimeInvisible`arameterAnnota3ions", "RuntimeInvisible`arameterAnnota3ions", "RuntimeInvisible`arameterAnnota3ions", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((-1.0));
      codeEmitter0.newarray(type0);
      assertEquals(128, CodeEmitter.OR);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.SHORT_TYPE;
      String[] stringArray0 = new String[4];
      classEmitter0.visit(10, 6, "", "I", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push(1.0);
      codeEmitter0.newarray(type0);
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(8, 7, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) 8);
      Type type0 = Type.SHORT_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(153, CodeEmitter.EQ);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(2147483645, 2, "org.mockito.asm.Label", "]eN^spEO", "3`<sQ.T{n41H3{", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) 1);
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(100, CodeEmitter.SUB);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.BYTE_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(2, (-16), "0^Do/oHkLjeF2+X< ", "sf*O2>-tz55U#4yp", "!D4V>SHf|g7tXlOl|h;", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) (-16));
      codeEmitter0.newarray(type0);
      assertEquals(7, Type.LONG);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-39));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.VOID_TYPE;
      String[] stringArray0 = new String[2];
      classEmitter0.visit(104, 7, "no 'this' pointer within static method", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((double) 1);
      codeEmitter0.newarray(type0);
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((double) (-14));
      Type type0 = Type.VOID_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(128, CodeEmitter.OR);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(2147483645, 2, "org.mockito.asm.Label", "]eN^spEO", "3`<sQ.T{n41H3{", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) 1);
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.DOUBLE_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(65, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((double) 1);
      codeEmitter0.newarray(type0);
      assertEquals(100, CodeEmitter.SUB);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.FLOAT_TYPE;
      String[] stringArray0 = new String[1];
      classEmitter0.visit(8, 7, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) 8);
      codeEmitter0.newarray(type0);
      assertEquals(1, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.DOUBLE_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit((-610), 10, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "StackMapTable", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) 5);
      codeEmitter0.newarray(type0);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(2147483645, 2, "org.mockito.asm.Label", "]eN^spEO", "3`<sQ.T{n41H3{", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.not();
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(124, CodeEmitter.USHR);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-27));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(6, 7, "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.create_arg_array();
      codeEmitter0.push((double) 0);
      assertEquals(96, CodeEmitter.ADD);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-34));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((float) 2);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(2, type0.getSort());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(8, 7, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.not();
      codeEmitter0.push((-1.0F));
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-34));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((float) 2);
      codeEmitter0.not();
      assertEquals(128, CodeEmitter.OR);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(8, 7, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.create_arg_array();
      codeEmitter0.push((-1.0F));
      assertEquals(153, CodeEmitter.EQ);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(8, 7, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) 8);
      codeEmitter0.not();
      assertEquals(155, CodeEmitter.LT);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(2147483645, 2, "org.mockito.asm.Label", "]eN^spEO", "3`<sQ.T{n41H3{", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) 1);
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(10, Type.OBJECT);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-64));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[2];
      classEmitter0.visit(4, 7, "no 'this' pointer within static method", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((double) 1);
      codeEmitter0.push((float) 2);
      assertEquals(100, CodeEmitter.SUB);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(65, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((double) 1);
      codeEmitter0.push(1813.37F);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(107, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((double) 1);
      codeEmitter0.push((double) 107);
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.DOUBLE_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(65, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type1 = Type.getReturnType("CGLIB$STATICHOOK1");
      codeEmitter0.not();
      codeEmitter0.cast_numeric(type1, type0);
      assertEquals(10, Type.OBJECT);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.DOUBLE_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(65, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type1 = Type.getReturnType("CGLIB$STATICHOOK1");
      codeEmitter0.not();
      codeEmitter0.cast_numeric(type0, type1);
      assertEquals(1, Type.BOOLEAN);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-39));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.VOID_TYPE;
      String[] stringArray0 = new String[2];
      classEmitter0.visit(109, 7, "no 'this' pointer within static method", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type1 = Type.BYTE_TYPE;
      codeEmitter0.cast_numeric(type0, type1);
      codeEmitter0.not();
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      MethodVisitor methodVisitor0 = mock(MethodVisitor.class, new ViolatedAssumptionAnswer());
      Type type0 = Type.getObjectType(":2^h");
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Type type1 = Type.getObjectType("l-QKfk&o8,O63o0X`NZ");
      Signature signature0 = new Signature("l-QKfk&o8,O63o0X`NZ", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 48, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      codeEmitter0.cast_numeric(type0, type1);
      assertEquals(153, CodeEmitter.EQ);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.DOUBLE_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(65, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.create_arg_array();
      Type type1 = Type.getReturnType("CGLIB$STATICHOOK1");
      codeEmitter0.cast_numeric(type1, type0);
      assertEquals(10, Type.OBJECT);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.DOUBLE_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(65, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.create_arg_array();
      Type type1 = Type.getReturnType("CGLIB$STATICHOOK1");
      codeEmitter0.cast_numeric(type0, type1);
      assertEquals(9, Type.ARRAY);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-39));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.VOID_TYPE;
      String[] stringArray0 = new String[2];
      classEmitter0.visit(109, 7, "no 'this' pointer within static method", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.create_arg_array();
      Type type1 = Type.BYTE_TYPE;
      codeEmitter0.cast_numeric(type0, type1);
      assertEquals(8, Type.DOUBLE);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.DOUBLE_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(65, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((double) 1);
      Type type1 = Type.getReturnType("CGLIB$STATICHOOK1");
      codeEmitter0.cast_numeric(type1, type0);
      assertEquals(8, Type.DOUBLE);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.DOUBLE_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(65, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((double) 1);
      Type type1 = Type.getReturnType("CGLIB$STATICHOOK1");
      codeEmitter0.cast_numeric(type0, type1);
      assertEquals(5, Type.INT);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-39));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.VOID_TYPE;
      String[] stringArray0 = new String[2];
      classEmitter0.visit(109, 7, "no 'this' pointer within static method", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((double) 1);
      Type type1 = Type.BYTE_TYPE;
      codeEmitter0.cast_numeric(type0, type1);
      assertEquals(0, Type.VOID);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-39));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.VOID_TYPE;
      String[] stringArray0 = new String[2];
      classEmitter0.visit(104, 7, "no 'this' pointer within static method", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((double) 1);
      Type type1 = Type.BYTE_TYPE;
      codeEmitter0.cast_numeric(type1, type0);
      assertEquals(6, Type.FLOAT);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-27));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.LONG_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(6, 7, "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[0];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(96, CodeEmitter.ADD);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(137);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "Sy9tem", "Sy9tem", "Sy9tem", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      int[] intArray0 = new int[1];
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, (ProcessSwitchCallback) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = Type.DOUBLE_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[6];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.BYTE_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(2, (-16), "0^Do/oHkLjeF2+X< ", "sf*O2>-tz55U#4yp", "!D4V>SHf|g7tXlOl|h;", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.newarray(type0);
      Class<Object> class0 = Object.class;
      Type type1 = Type.getType(class0);
      codeEmitter0.unbox_or_zero(type1);
      assertEquals(155, CodeEmitter.LT);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.newarray(type0);
      codeEmitter0.box(type0);
      assertEquals(3, Type.BYTE);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[4];
      classEmitter0.visit(8, (-1008), "StackMapTable", "<init>", "^", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = Type.BYTE_TYPE;
      Signature signature0 = new Signature("<init>", "StackMapTable");
      codeEmitter0.invoke_virtual_this(signature0);
      codeEmitter0.newarray(type0);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(2147483645, 2, "org.mockito.asm.Label", "]eN^spEO", "3`<sQ.T{n41H3{", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.load_args(156, (-891));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit((-456), 4, "gxh3QgND@Dg|;,$", "kf", "gxh3QgND@Dg|;,$", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.load_args((-1971065357), 96);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1971065357
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-34));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.INT_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(6, 7, "RuntimeInvisible`arameterAnnota3ions", "RuntimeInvisible`arameterAnnota3ions", "RuntimeInvisible`arameterAnnota3ions", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.unbox_or_zero(type0);
      codeEmitter0.newarray(type0);
      assertEquals(8, Type.DOUBLE);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-34));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.INT_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(6, 7, "RuntimeInvisible`arameterAnnota3ions", "RuntimeInvisible`arameterAnnota3ions", "RuntimeInvisible`arameterAnnota3ions", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      Signature signature0 = new Signature("RuntimeInvisible`arameterAnnota3ions", type0, typeArray0);
      CodeEmitter codeEmitter1 = new CodeEmitter(classEmitter0, codeEmitter0, 108, signature0, typeArray0);
      codeEmitter1.create_arg_array();
      codeEmitter0.newarray(type0);
      assertEquals(9, Type.ARRAY);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-27));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.LONG_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit((-731), 7, "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.newarray(type0);
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(2, Type.CHAR);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-27));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.LONG_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit((-731), 7, "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.newarray(type0);
      codeEmitter0.box(type0);
      assertEquals(2, Type.CHAR);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(2147483645, 2, "org.mockito.asm.Label", "]eN^spEO", "3`<sQ.T{n41H3{", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.load_args(156, (-891));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-27));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.LONG_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(6, 7, "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.load_args(0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.DOUBLE_TYPE;
      String[] stringArray0 = new String[4];
      classEmitter0.visit(8, (-1008), "StackMapTable", "<init>", "^", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Signature signature0 = new Signature("<init>", "StackMapTable");
      codeEmitter0.invoke_virtual_this(signature0);
      codeEmitter0.newarray(type0);
      assertEquals(96, CodeEmitter.ADD);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-27));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.LONG_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(6, 7, "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.unbox_or_zero(type0);
      Type type1 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type1);
      assertEquals(4, Type.SHORT);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-27));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(6, 7, "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.box(type0);
      codeEmitter0.newarray(type0);
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(2, 2, "System", "System", "`d+;~@l!//hpcWD4n", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.load_args(112, (-273));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.load_args();
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[2];
      classEmitter0.visit(158, 1, "StackMapTable", "StackMapTable", "StackMapTable", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.checkcast_this();
      Type type0 = codeEmitter0.getReturnType();
      codeEmitter0.newarray(type0);
      assertEquals(5, Type.INT);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      classEmitter0.visit((-16), (-1797), "' is invalid", "ZQs1D)ER@3X0DAZj:", "' is invalid", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = Type.VOID_TYPE;
      codeEmitter0.newarray(type0);
      Class<Object> class0 = Object.class;
      Type type1 = Type.getType(class0);
      codeEmitter0.unbox_or_zero(type1);
      assertEquals(100, CodeEmitter.SUB);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.VOID_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(107, 7, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type1 = Type.BOOLEAN_TYPE;
      codeEmitter0.box(type1);
      codeEmitter0.newarray(type0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-39));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.VOID_TYPE;
      String[] stringArray0 = new String[2];
      classEmitter0.visit(104, 7, "no 'this' pointer within static method", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.load_args(21, (-3370));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(1, (-2969), "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = codeEmitter0.getReturnType();
      codeEmitter0.newarray(type0);
      codeEmitter0.load_args(0, (-569));
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-27));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.LONG_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(6, 7, "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.unbox_or_zero(type0);
      Type type1 = Type.SHORT_TYPE;
      codeEmitter0.newarray(type1);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-27));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(6, 7, "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Type type0 = Type.SHORT_TYPE;
      codeEmitter0.box(type0);
      codeEmitter0.newarray(type0);
      assertEquals(155, CodeEmitter.LT);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "SyWtem", "SyWtem", "SyWtem", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = Type.getReturnType("SyWtem");
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.load_args(116, 95);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = Type.getType("System");
      codeEmitter0.newarray(type0);
      codeEmitter0.load_args();
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.FLOAT_TYPE;
      String[] stringArray0 = new String[1];
      classEmitter0.visit(8, 7, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.newarray(type0);
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.FLOAT_TYPE;
      String[] stringArray0 = new String[1];
      classEmitter0.visit(8, 7, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.newarray(type0);
      codeEmitter0.box(type0);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.FLOAT_TYPE;
      String[] stringArray0 = new String[3];
      classEmitter0.visit((-1096), 116, "RuntimeInvisibleParameterAnnotations", "boe", "boe", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.load_args(6, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Type type0 = Type.FLOAT_TYPE;
      ClassWriter classWriter0 = new ClassWriter(1);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-175), (-2959), "Integer", "Integer", "floatValue", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.newarray(type0);
      codeEmitter0.load_args((-370), (-618));
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[5];
      classEmitter0.visit(5, 9, "<init>", "<init>", "<init>", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Signature signature0 = new Signature("<init>", "end of block is unset");
      codeEmitter0.invoke_static_this(signature0);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.BYTE_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(107, 7, "J", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = type0;
      typeArray0[6] = type0;
      Signature signature0 = new Signature("CGLIB$STATICHOOK1", type0, typeArray0);
      CodeEmitter codeEmitter1 = new CodeEmitter(classEmitter0, codeEmitter0, 128, signature0, typeArray0);
      codeEmitter1.create_arg_array();
      // Undeclared exception!
      try { 
        classEmitter0.begin_method(2133538948, signature0, typeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(2133447807, 131072, "System", "`d+;~@l!//hpcWD4n", "Y$iM4\"#>%wJ2D;g,;s", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) 1);
      Class<Object> class0 = Object.class;
      Type type0 = Type.getType(class0);
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(5, Type.INT);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.BYTE_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(107, 7, "J", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((double) 1);
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = type0;
      typeArray0[6] = type0;
      Signature signature0 = new Signature("CGLIB$STATICHOOK1", type0, typeArray0);
      CodeEmitter codeEmitter1 = new CodeEmitter(classEmitter0, codeEmitter0, 128, signature0, typeArray0);
      codeEmitter1.create_arg_array();
      assertFalse(codeEmitter1.isStaticHook());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(11);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.DOUBLE_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(0, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.newarray(type0);
      codeEmitter0.unbox_or_zero(type0);
      assertEquals(124, CodeEmitter.USHR);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.DOUBLE_TYPE;
      String[] stringArray0 = new String[4];
      classEmitter0.visit(8, (-1008), "StackMapTable", "<init>", "^", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Class<Object> class0 = Object.class;
      Type type1 = Type.getType(class0);
      codeEmitter0.newarray(type0);
      codeEmitter0.unbox_or_zero(type1);
      assertEquals(1, type1.getDimensions());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.DOUBLE_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(65, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.newarray(type0);
      codeEmitter0.box(type0);
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.DOUBLE_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(107, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.newarray(type0);
      // Undeclared exception!
      try { 
        codeEmitter0.load_args(1, 809);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.DOUBLE_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(65, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.load_args();
      codeEmitter0.newarray(type0);
      assertEquals(124, CodeEmitter.USHR);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(8, 7, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.push((double) 8);
      codeEmitter0.create_arg_array();
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      int[] intArray0 = new int[1];
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.newarray(type0);
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      int[] intArray0 = new int[0];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(1, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[3];
      intArray0[0] = 153;
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, (ProcessSwitchCallback) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      int[] intArray0 = new int[1];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0, false);
      Type type0 = Type.BYTE_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-34));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.INT_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(6, 7, "RuntimeInvisible`arameterAnnota3ions", "RuntimeInvisible`arameterAnnota3ions", "RuntimeInvisible`arameterAnnota3ions", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      int[] intArray0 = new int[2];
      intArray0[1] = 156;
      codeEmitter0.newarray(type0);
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(96, CodeEmitter.ADD);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-27));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.INT_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(6, 7, "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, (ProcessSwitchCallback) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-27));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.INT_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(6, 7, "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[4];
      intArray0[0] = 116;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-34));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.INT_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(6, 7, "RuntimeInvisible`arameterAnnota3ions", "RuntimeInvisible`arameterAnnota3ions", "RuntimeInvisible`arameterAnnota3ions", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      int[] intArray0 = new int[2];
      codeEmitter0.newarray(type0);
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(100, CodeEmitter.SUB);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = Type.LONG_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[3];
      intArray0[2] = 126;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(128, CodeEmitter.OR);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-48));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.LONG_TYPE;
      String[] stringArray0 = new String[1];
      classEmitter0.visit(6, 7, "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, (ProcessSwitchCallback) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-27));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.LONG_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit((-731), 7, "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[2];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0, true);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      int[] intArray0 = new int[1];
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0, false);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[5];
      intArray0[0] = 104;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      int[] intArray0 = new int[1];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0, true);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.newarray(type0);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-34));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = codeEmitter0.getReturnType();
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, (ProcessSwitchCallback) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-34));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = codeEmitter0.getReturnType();
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[1];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = codeEmitter0.getReturnType();
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[2];
      intArray0[0] = 6;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-27));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.VOID_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(6, 7, "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, (ProcessSwitchCallback) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(160);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.SHORT_TYPE;
      String[] stringArray0 = new String[4];
      classEmitter0.visit(10, 4, "", "S", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[2];
      intArray0[1] = 108;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.SHORT_TYPE;
      String[] stringArray0 = new String[4];
      classEmitter0.visit(10, 6, "", "I", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[0];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-14));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      Type type0 = Type.getReturnType("System");
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[9];
      intArray0[3] = 96;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(160);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.SHORT_TYPE;
      String[] stringArray0 = new String[7];
      classEmitter0.visit(10, 4, "", "RuntimeInvisible`arameterAnnotations", "RuntimeInvisible`arameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[2];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(96, CodeEmitter.ADD);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.FLOAT_TYPE;
      classEmitter0.visit(4, 1, "nuntimeInvisibleParameterAnnotations", "nuntimeInvisibleParameterAnnotations", "nuntimeInvisibleParameterAnnotations", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[2];
      intArray0[1] = 124;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.FLOAT_TYPE;
      String[] stringArray0 = new String[1];
      classEmitter0.visit(8, 7, "RuntimeInvisibleParameterAnnotations", "r*t(56lVkQl&mGWe", "r*t(56lVkQl&mGWe", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[1];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.FLOAT_TYPE;
      String[] stringArray0 = new String[1];
      classEmitter0.visit(8, 7, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[5];
      intArray0[0] = 104;
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, (ProcessSwitchCallback) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.FLOAT_TYPE;
      String[] stringArray0 = new String[1];
      classEmitter0.visit(8, 7, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[0];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0, false);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.DOUBLE_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(4, 7, "long longValue()", "`d+;~DC@l!//hpcWD4n", "`d+;~DC@l!//hpcWD4n", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      int[] intArray0 = new int[1];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.newarray(type0);
      codeEmitter0.process_switch(intArray0, processSwitchCallback0, false);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.DOUBLE_TYPE;
      String[] stringArray0 = new String[0];
      ClassAdapter classAdapter1 = new ClassAdapter(classAdapter0);
      MethodVisitor methodVisitor0 = classAdapter1.visitMethod(156, "hiort", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK2", stringArray0);
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      Signature signature0 = new Signature("", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 4369, signature0, typeArray0);
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[4];
      intArray0[0] = 3;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.DOUBLE_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(107, 7, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.newarray(type0);
      int[] intArray0 = new int[0];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.FLOAT_TYPE;
      classEmitter0.visit(3125, 1, "nuntimeInvisibleParameterAnnotations", "nuntimeInvisibleParameterAnnotations", "7{ E}$E6`U", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      Label label0 = codeEmitter0.mark();
      codeEmitter0.if_cmp(type0, 154, label0);
      Type type1 = Type.LONG_TYPE;
      codeEmitter0.box(type1);
      assertEquals(157, CodeEmitter.GT);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.FLOAT_TYPE;
      classEmitter0.visit(3125, 1, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "7{ E}$E6`U", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.box(type0);
      Label label0 = codeEmitter0.make_label();
      codeEmitter0.if_cmp(type0, 104, label0);
      assertEquals(7, Type.LONG);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.FLOAT_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(1212, (-3952), "RuntimeInvisibleParameterAnnotations", "r*t(56lVkQl&mGWe", "StackMapTable", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.box(type0);
      Label label0 = codeEmitter0.make_label();
      codeEmitter0.if_cmp(type0, 156, label0);
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-34));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(2, 1, "System", "System", "System", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((float) 2);
      Type type0 = Type.CHAR_TYPE;
      codeEmitter0.box(type0);
      assertEquals(2, type0.getSort());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-12));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.FLOAT_TYPE;
      String[] stringArray0 = new String[7];
      classEmitter0.visit(2, 8, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "StackMapTable", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.unbox_or_zero(type0);
      Type type1 = Type.CHAR_TYPE;
      codeEmitter0.box(type1);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.DOUBLE_TYPE;
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = classAdapter0.visitMethod(156, "hiort", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK2", stringArray0);
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      Signature signature0 = new Signature("", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 4369, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      codeEmitter0.push((float) 0);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Type type0 = Type.FLOAT_TYPE;
      ClassWriter classWriter0 = new ClassWriter(1);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-175), (-2959), "Integer", "Integer", "floatValue", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.unbox_or_zero(type0);
      codeEmitter0.push((float) 2);
      assertEquals(100, CodeEmitter.SUB);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.DOUBLE_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(65, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push(1.0F);
      codeEmitter0.zero_or_null(type0);
      assertEquals(4, Type.SHORT);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.FLOAT_TYPE;
      String[] stringArray0 = new String[7];
      classEmitter0.visit(1212, 8, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "StackMapTable", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      codeEmitter0.unbox_or_zero(type0);
      codeEmitter0.push(0.0);
      assertEquals(96, CodeEmitter.ADD);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      Type type0 = Type.BYTE_TYPE;
      String[] stringArray0 = new String[0];
      classEmitter0.visit(107, 7, "J", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push(1.0F);
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = type0;
      typeArray0[6] = type0;
      Signature signature0 = new Signature("CGLIB$STATICHOOK1", type0, typeArray0);
      CodeEmitter codeEmitter1 = new CodeEmitter(classEmitter0, codeEmitter0, 128, signature0, typeArray0);
      codeEmitter1.create_arg_array();
      assertEquals(128, CodeEmitter.OR);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassEmitter classEmitter0 = new ClassEmitter(classAdapter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(107, 7, "RuntimeInvisibleParameterAnnotations", "CGLIB$STATICHOOK1", "CGLIB$STATICHOOK1", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      codeEmitter0.push((double) 1);
      codeEmitter0.push(0.0F);
      assertEquals(128, CodeEmitter.OR);
  }
}

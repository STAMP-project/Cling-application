/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 12:24:48 GMT 2019
 */

package org.apache.commons.math.geometry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.geometry.CardanEulerSingularityException;
import org.apache.commons.math.geometry.Rotation;
import org.apache.commons.math.geometry.RotationOrder;
import org.apache.commons.math.geometry.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Rotation_ESTest extends Rotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rotation rotation0 = new Rotation((-314.32718992398), (-452.6), Double.NaN, (-314.32718992398), true);
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      Rotation rotation1 = new Rotation((-1986.258560136585), (-452.6), (-452.6), (-4064.832711), false);
      try { 
        rotation1.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.4999999999999999, 0.4999999999999999, 0.4999999999999999, 0.4999999999999999, true);
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {3.141592653589793, 1.5707963267948966, 1.5707963267948966}, doubleArray0, 0.01);
      assertEquals(0.5, rotation0.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      Rotation rotation0 = new Rotation(rotationOrder0, (-2316.913205277014), 0.25, (-2316.913205277014));
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {1.5821730722532246, 0.25000000000000155, 1.5821730722532246}, doubleArray0, 0.01);
      assertEquals((-0.9921334576825578), rotation0.getQ3(), 0.01);
      assertEquals((-0.12467473338522769), rotation0.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      Rotation rotation0 = new Rotation((-314.32718992398), (-452.6), Double.NaN, (-314.32718992398), true);
      rotation0.getAngles(rotationOrder0);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      Rotation rotation0 = new Rotation(rotationOrder0, Double.NaN, (-452.6), (-363.7));
      RotationOrder rotationOrder1 = RotationOrder.YZY;
      rotation0.getAngles(rotationOrder1);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      Rotation rotation0 = new Rotation();
      Rotation rotation1 = new Rotation(1.0, 1.0, 1.0, 1.0, true);
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      Rotation rotation0 = new Rotation(0.0, 1965.6592432, 808.142, 0.0, false);
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rotation rotation0 = new Rotation(647.860994, (-0.08084011363640553), (-0.08084011363640553), 647.860994, true);
      Rotation rotation1 = new Rotation();
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      try { 
        rotation1.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rotation rotation0 = new Rotation(4578.62, 0.8243172248545965, 0.8243172248545965, 4578.62, false);
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      Vector3D vector3D0 = rotationOrder0.getA1();
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      RotationOrder rotationOrder1 = RotationOrder.XYX;
      Rotation rotation1 = new Rotation((-314.32718992398), (-452.6), Double.NaN, (-314.32718992398), true);
      double[] doubleArray0 = rotation0.getAngles(rotationOrder1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      Vector3D vector3D0 = rotationOrder0.getA1();
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      RotationOrder rotationOrder1 = RotationOrder.XYX;
      Rotation rotation1 = new Rotation(rotationOrder1, Double.NaN, (-452.6), (-363.7));
      double[] doubleArray0 = rotation0.getAngles(rotationOrder1);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      Rotation rotation0 = new Rotation(vector3D0, 554.10370252);
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      Rotation rotation1 = new Rotation(0.9999999999, 1133.480785, (-2693.33214993), 2123.678248988, true);
      assertEquals((-0.7455970438997855), rotation1.getQ2(), 0.01);
      assertEquals(0.3137822873555247, rotation1.getQ1(), 0.01);
      assertEquals(2.768307072132206E-4, rotation1.getQ0(), 0.01);
      assertEquals(0.587899351619472, rotation1.getQ3(), 0.01);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertEquals(1.1833954881963462, rotation0.getAngle(), 0.01);
      assertArrayEquals(new double[] {0.0, 1.1833954881963464, 0.0}, doubleArray0, 0.01);
      assertEquals(-0.0, rotation0.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      Rotation rotation0 = new Rotation(rotationOrder0, (-2693.33214993), 554.10370252, 0.9999999999);
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertEquals((-0.58061169021901), rotation0.getQ0(), 0.01);
      assertArrayEquals(new double[] {2.154346850042584, 1.1833954881963467, 0.9999999998999999}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.6, 0.6, 0.6, (-791.3177200151054), false);
      Rotation rotation1 = new Rotation((-791.3177200151054), (-967.58801), (-265.0880084383), (-967.58801), true);
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.0, (-0.1), 1086.464052298534, 0.0, true);
      rotation0.revert();
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.6, 0.6, 0.6, (-791.3177200151054), false);
      Rotation rotation1 = new Rotation((-791.3177200151054), (-967.58801), (-265.0880084383), (-967.58801), true);
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      Rotation rotation0 = new Rotation(2.0, (-774.9936), 2.0, 4156773.60783538, true);
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.0, 0.0, 0.0, 0.0, false);
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = new Vector3D((-1.1769960666932793), vector3D0, (-1.1769960666932793), vector3D0, (-1.1769960666932793), vector3D0);
      Rotation rotation0 = new Rotation(vector3D1, vector3D0);
      Rotation rotation1 = new Rotation((-100.244005047733), Double.NaN, 1280.3153381029, (-1.1769960666932793), true);
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = new Vector3D((-1.1769960666932793), vector3D0, (-1.1769960666932793), vector3D0, (-1.1769960666932793), vector3D0);
      Rotation rotation0 = new Rotation(vector3D1, vector3D0, vector3D1, vector3D1);
      Rotation rotation1 = new Rotation(vector3D1, vector3D0);
      rotation0.revert();
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      try { 
        rotation1.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1113.9089058781024), (-1113.9089058781024), (-1113.9089058781024), (-1113.9089058781024), true);
      Rotation rotation1 = rotation0.applyInverseTo(rotation0);
      RotationOrder rotationOrder0 = mock(RotationOrder.class, new ViolatedAssumptionAnswer());
      try { 
        rotation1.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Rotation rotation0 = new Rotation(2.0, (-775.4338435087849), 2.0, 4156773.60783538, true);
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      Rotation rotation0 = new Rotation(rotationOrder0, 3397.79200421214, 0.9040546249134632, 3542.340302305868);
      Vector3D vector3D0 = rotation0.getAxis();
      Vector3D vector3D1 = rotation0.applyTo(vector3D0);
      Vector3D vector3D2 = rotationOrder0.getA3();
      Rotation rotation1 = new Rotation(vector3D0, vector3D1, vector3D0, vector3D2);
      try { 
        rotation1.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      Rotation rotation0 = new Rotation(vector3D0, 554.10370252);
      double[][] doubleArray0 = rotation0.getMatrix();
      Rotation rotation1 = new Rotation(0.9999999999, 1133.480785, (-2693.33214993), 2123.678248988, true);
      assertEquals(0.587899351619472, rotation1.getQ3(), 0.01);
      assertEquals(0.3137822873555247, rotation1.getQ1(), 0.01);
      assertEquals((-0.7455970438997855), rotation1.getQ2(), 0.01);
      assertEquals(2.768307072132206E-4, rotation1.getQ0(), 0.01);
      
      Rotation rotation2 = new Rotation(doubleArray0, 1133.480785);
      assertEquals(-0.0, rotation0.getQ1(), 0.01);
      assertEquals(1.1833954881963462, rotation2.getAngle(), 0.01);
      assertEquals(1.1833954881963462, rotation0.getAngle(), 0.01);
      assertEquals(-0.0, rotation0.getQ3(), 0.01);
      assertEquals(0.8299949233863925, rotation0.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      Rotation rotation0 = new Rotation(vector3D0, 554.10370252);
      double[][] doubleArray0 = rotation0.getMatrix();
      assertEquals(3, doubleArray0.length);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      Rotation rotation1 = new Rotation(rotationOrder0, (-2693.33214993), 554.10370252, 0.9999999999);
      assertEquals((-0.58061169021901), rotation1.getQ0(), 0.01);
      assertEquals(0.5823476774883697, rotation1.getQ2(), 0.01);
      assertEquals(1.902633083430453, rotation1.getAngle(), 0.01);
      
      Rotation rotation2 = new Rotation(doubleArray0, 1133.480785);
      assertEquals(0.0, rotation2.getQ1(), 0.01);
      assertEquals(0.8299949233863925, rotation2.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      Rotation rotation0 = new Rotation(0.0, 0.0, (-0.9999999999), 0.0, true);
      rotation0.revert();
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Rotation rotation0 = new Rotation((-0.2289609140270814), (-0.013397313912), (-0.013397313912), (-0.2289609140270814), true);
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertEquals((-0.7058993724750328), rotation0.getQ0(), 0.01);
      assertEquals((-0.04130467212501274), rotation0.getQ1(), 0.01);
      assertEquals((-0.04130467212501274), rotation0.getQ2(), 0.01);
      assertArrayEquals(new double[] {(-1.5707963267948997), (-1.4539025308325775), (-1.5707963267948997)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusK;
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01);
      
      Rotation rotation1 = rotation0.applyTo(rotation0);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation1.getAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.0, (-0.013397313912028141), (-0.013397313912028141), 0.0, true);
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      Rotation rotation1 = new Rotation(0.0, 0.5846530442870458, 1.0, (-0.999999999999998), false);
      try { 
        rotation1.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1.0), (-1.0), (-1.0), (-1.0), true);
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Rotation rotation0 = new Rotation((-4026.6527690888574), 0.4999999999999999, (-4026.6527690888574), (-4026.6527690888574), false);
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      Vector3D vector3D0 = rotationOrder0.getA1();
      Rotation rotation0 = new Rotation((-2582.44), Double.NaN, (-140.9572174), Double.NaN, true);
      RotationOrder rotationOrder1 = RotationOrder.XZY;
      Vector3D vector3D1 = rotationOrder0.getA2();
      Rotation rotation1 = new Rotation(vector3D1, vector3D0);
      try { 
        rotation1.getAngles(rotationOrder1);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      Vector3D vector3D0 = rotationOrder0.getA1();
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      RotationOrder rotationOrder1 = RotationOrder.XZY;
      rotation0.applyTo(rotation0);
      Vector3D vector3D1 = rotationOrder0.getA2();
      Rotation rotation1 = new Rotation(vector3D1, vector3D0);
      try { 
        rotation1.getAngles(rotationOrder1);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Rotation rotation0 = new Rotation(3229.65172040821, (-0.013397313912028141), (-0.013397313912028141), 3229.65172040821, true);
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Rotation rotation0 = new Rotation((-4064.832711), (-1262.5742019213274), (-12.019905406038111), (-12.019905406038111), false);
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Rotation rotation0 = new Rotation((-0.2289609140270814), (-0.013397313912), (-0.013397313912), (-0.2289609140270814), true);
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      Rotation rotation0 = new Rotation((-212.027023), (-212.027023), (-0.9999948887850136), (-212.027023), false);
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      Rotation rotation0 = new Rotation((-314.32718992398), (-452.6), Double.NaN, (-314.32718992398), true);
      Rotation rotation1 = new Rotation((-1975.0), (-363.7), (-1873.59), (-314.32718992398), false);
      try { 
        rotation1.getAngles(rotationOrder0);
        fail("Expecting exception: CardanEulerSingularityException");
      
      } catch(CardanEulerSingularityException e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      Vector3D vector3D0 = rotationOrder0.getA1();
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      RotationOrder rotationOrder1 = RotationOrder.XYZ;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      
      Rotation rotation1 = new Rotation((-314.32718992398), (-452.6), Double.NaN, (-314.32718992398), true);
      assertEquals(Double.NaN, rotation1.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      Vector3D vector3D0 = rotationOrder0.getA1();
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      RotationOrder rotationOrder1 = RotationOrder.XYZ;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      
      Rotation rotation1 = new Rotation(rotationOrder1, Double.NaN, (-452.6), (-363.7));
      assertEquals(Double.NaN, rotation1.getQ3(), 0.01);
      assertEquals(Double.NaN, rotation1.getQ2(), 0.01);
      assertEquals(Double.NaN, rotation1.getQ1(), 0.01);
  }
}

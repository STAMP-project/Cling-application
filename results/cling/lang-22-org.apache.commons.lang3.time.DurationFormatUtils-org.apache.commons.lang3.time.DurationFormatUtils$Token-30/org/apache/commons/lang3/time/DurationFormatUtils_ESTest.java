/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 21:01:36 GMT 2019
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.TimeZone;
import org.apache.commons.lang3.time.DurationFormatUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DurationFormatUtils_ESTest extends DurationFormatUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DurationFormatUtils.formatDuration(1211L, "1 second");
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      DurationFormatUtils.formatPeriod(1211L, (-2613L), "531.#*Ck", true, timeZone0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test01()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationISO(0L);
      assertEquals("P0Y0M0DT0H0M0.000S", string0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("C2Q<.SVgQtX|a)");
      String string1 = DurationFormatUtils.formatPeriod((-1948L), 0L, "j*b4-XQ", true, timeZone0);
      assertEquals("j*b4-XQ", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      DurationFormatUtils.formatDuration(0L, "j*b4-XQ", true);
      TimeZone timeZone0 = TimeZone.getTimeZone("C2Q<.SVgQtX|a)");
      String string0 = DurationFormatUtils.formatPeriod((-1948L), 0L, "j*b4-XQ", true, timeZone0);
      assertEquals("j*b4-XQ", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DurationFormatUtils.formatDurationWords(1211L, true, true);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      DurationFormatUtils.formatPeriod(1211L, (-2613L), "531.#*Ck", true, timeZone0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DurationFormatUtils.formatDurationHMS((-1L));
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0, 0, 0, 0).when(timeZone0).getRawOffset();
      doReturn(false, false, false, false, false).when(timeZone0).inDaylightTime(any(java.util.Date.class));
      // Undeclared exception!
      DurationFormatUtils.formatPeriod(1033L, (-1L), "0:00:00.99", true, timeZone0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(951L, "$bIy+M:W}]NjO");
      assertEquals("$bI0+0:W}]NjO", string0);
      
      String string1 = DurationFormatUtils.formatDurationWords(60000L, true, true);
      assertEquals("1 minute", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      DurationFormatUtils.formatDuration((-1L), "normalize");
      String string0 = DurationFormatUtils.formatDurationWords(307L, true, true);
      assertEquals("0 seconds", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(1000L, true, false);
      assertEquals("1 second", string0);
      
      String string1 = DurationFormatUtils.formatDuration((-1L), "");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      DurationFormatUtils.formatDuration(0L, "j*b4-XQ", true);
      TimeZone timeZone0 = TimeZone.getDefault();
      String string0 = DurationFormatUtils.formatPeriod(0L, 0L, "P0Y0M0DT0H0M0.000S", true, timeZone0);
      assertEquals("P0Y000DT00000.0000", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration((-1L), "normalize");
      assertEquals("nor0alize", string0);
      
      String string1 = DurationFormatUtils.formatPeriodISO(0L, (-1L));
      assertEquals("P-1Y11M30DT23H59M59.999S", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationISO((-527L));
      assertEquals("P0Y0M0DT0H0M0.73S", string0);
      
      TimeZone timeZone0 = mock(TimeZone.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(timeZone0).getOffset(anyLong());
      doReturn(0, 0, 0, 0).when(timeZone0).getRawOffset();
      String string1 = DurationFormatUtils.formatPeriod(80L, (-1812L), "P0Y0M0DT0H0M0.73SP0Y0M0DT0H0M0.73SP0Y0M0DT0H0M0.73SP0Y0M0DT0H0M0.73S", false, timeZone0);
      assertEquals("P0Y0-10DT07430-10.733598108P0Y0-10DT07430-10.733598108P0Y0-10DT07430-10.733598108P0Y0-10DT07430-10.733598108", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test11()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationISO(60000L);
      assertEquals("P0Y0M0DT0H1M0.000S", string0);
      
      String string1 = DurationFormatUtils.formatPeriodISO(951L, 951L);
      assertEquals("P0Y0M0DT0H0M0.000S", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationHMS(307L);
      assertEquals("0:00:00.307", string0);
      
      String string1 = DurationFormatUtils.formatPeriodISO(0L, (-1L));
      assertEquals("P-1Y11M30DT23H59M59.999S", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test13()  throws Throwable  {
      DurationFormatUtils.formatDuration(0L, "j*b4-XQ", true);
      String string0 = DurationFormatUtils.formatDurationWords(3600000L, true, true);
      assertEquals("1 hour", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test14()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationISO(60000L);
      assertEquals("P0Y0M0DT0H1M0.000S", string0);
      
      String string1 = DurationFormatUtils.formatPeriod(951L, 0L, "P0Y000DT00100.00060000");
      assertEquals("P0Y000DT00100.00060000", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test15()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(60000L, "P0Y0M0DT0H1M0.000S", true);
      assertEquals("P0Y000DT00100.00060000", string0);
      
      String string1 = DurationFormatUtils.formatPeriod(951L, 0L, "P0Y000DT00100.00060000");
      assertEquals("P0Y000DT00100.00060000", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test16()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(951L, "$bIy+M:W}]NjO");
      assertEquals("$bI0+0:W}]NjO", string0);
      
      String string1 = DurationFormatUtils.formatPeriod(951L, 0L, "P0Y000DT00100.00060000");
      assertEquals("P0Y000DT00100.00060000", string1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0:00:00.000", 632);
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("0:00:00.000");
      boolean boolean0 = durationFormatUtils_Token1.equals(durationFormatUtils_Token0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0:00:01.631");
      boolean boolean0 = durationFormatUtils_Token0.equals("0:00:01.631");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0:00:00.000", 632);
      boolean boolean0 = durationFormatUtils_Token0.equals(durationFormatUtils_Token0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test20()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(307L, true, true);
      assertEquals("0 seconds", string0);
      
      String string1 = DurationFormatUtils.formatPeriodISO(0L, (-1L));
      assertEquals("P-1Y11M30DT23H59M59.999S", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test21()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(0L, false, true);
      assertEquals("0 days", string0);
      
      String string1 = DurationFormatUtils.formatDuration(3600000L, "");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test22()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriod(86400000L, 5195L, "#U[&PV>yp('o1Hp");
      assertEquals("#U[&PV>0p(o1Hp", string0);
  }
}

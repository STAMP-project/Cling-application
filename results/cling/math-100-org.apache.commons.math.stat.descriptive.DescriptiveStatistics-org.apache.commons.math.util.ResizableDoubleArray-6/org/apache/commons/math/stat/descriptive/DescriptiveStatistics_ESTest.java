/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 22:57:48 GMT 2019
 */

package org.apache.commons.math.stat.descriptive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.stat.descriptive.DescriptiveStatistics;
import org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImpl;
import org.apache.commons.math.util.ResizableDoubleArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DescriptiveStatistics_ESTest extends DescriptiveStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setNumElements(1);
      // Undeclared exception!
      try { 
        resizableDoubleArray0.setElement((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Cannot set an element at a negative index
         //
         verifyException("org.apache.commons.math.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setNumElements(1);
      assertEquals(1, resizableDoubleArray0.getNumElements());
      
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl((-1));
      assertEquals(0L, descriptiveStatisticsImpl0.getN());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setNumElements(16);
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl();
      // Undeclared exception!
      try { 
        descriptiveStatisticsImpl0.getElement(16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // The index specified: 16 is larger than the current number of elements
         //
         verifyException("org.apache.commons.math.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setNumElements(1);
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      // Undeclared exception!
      try { 
        descriptiveStatistics0.getElement((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Elements cannot be retrieved from a negative array index
         //
         verifyException("org.apache.commons.math.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setNumElements(16);
      assertEquals(16, resizableDoubleArray0.getNumElements());
      
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl(1);
      descriptiveStatisticsImpl0.addValue(16);
      descriptiveStatisticsImpl0.setWindowSize(366);
      descriptiveStatisticsImpl0.addValue(1);
      descriptiveStatisticsImpl0.setWindowSize(1);
      assertEquals(1L, descriptiveStatisticsImpl0.getN());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl(1);
      descriptiveStatisticsImpl0.addValue(1);
      // Undeclared exception!
      try { 
        resizableDoubleArray0.setElement((-1), 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Cannot set an element at a negative index
         //
         verifyException("org.apache.commons.math.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      descriptiveStatistics0.addValue((-1));
      assertEquals(1L, descriptiveStatistics0.getN());
      
      DescriptiveStatistics descriptiveStatistics1 = new DescriptiveStatistics((-1));
      assertEquals(0L, descriptiveStatistics1.getN());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DescriptiveStatistics descriptiveStatistics0 = new DescriptiveStatistics();
      descriptiveStatistics0.addValue((-1));
      // Undeclared exception!
      try { 
        descriptiveStatistics0.getElement((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Elements cannot be retrieved from a negative array index
         //
         verifyException("org.apache.commons.math.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl((-1));
      ResizableDoubleArray resizableDoubleArray0 = descriptiveStatisticsImpl0.eDA;
      // Undeclared exception!
      try { 
        resizableDoubleArray0.setNumElements((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of elements must be zero or a positive integer
         //
         verifyException("org.apache.commons.math.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl(2);
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      descriptiveStatisticsImpl0.eDA = resizableDoubleArray0;
      resizableDoubleArray0.addElement((-730.35393857118));
      descriptiveStatisticsImpl0.addValue(2);
      resizableDoubleArray0.addElement(2);
      descriptiveStatisticsImpl0.getElement(2);
      // Undeclared exception!
      try { 
        resizableDoubleArray0.setNumElements((-1185));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of elements must be zero or a positive integer
         //
         verifyException("org.apache.commons.math.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl(2);
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      descriptiveStatisticsImpl0.toString();
      // Undeclared exception!
      try { 
        resizableDoubleArray0.setNumElements((-1185));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of elements must be zero or a positive integer
         //
         verifyException("org.apache.commons.math.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl(20);
      descriptiveStatisticsImpl0.eDA.setNumElements(204);
      descriptiveStatisticsImpl0.setWindowSize(20);
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(261);
      // Undeclared exception!
      try { 
        resizableDoubleArray0.setNumElements((-1218));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of elements must be zero or a positive integer
         //
         verifyException("org.apache.commons.math.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl(2);
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      descriptiveStatisticsImpl0.eDA = resizableDoubleArray0;
      resizableDoubleArray0.addElementRolling(0);
      resizableDoubleArray0.setElement(4, 5807.104096704894);
      descriptiveStatisticsImpl0.addValue(396.6591809319798);
      assertEquals(5L, descriptiveStatisticsImpl0.getN());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl(6);
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      descriptiveStatisticsImpl0.eDA = resizableDoubleArray0;
      descriptiveStatisticsImpl0.addValue(6);
      resizableDoubleArray0.setElement(6, 1);
      double double0 = descriptiveStatisticsImpl0.getElement(6);
      assertEquals(7L, descriptiveStatisticsImpl0.getN());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setElement(16, 16);
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl();
      // Undeclared exception!
      try { 
        descriptiveStatisticsImpl0.getElement((-965));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Elements cannot be retrieved from a negative array index
         //
         verifyException("org.apache.commons.math.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl(2);
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      descriptiveStatisticsImpl0.eDA = resizableDoubleArray0;
      resizableDoubleArray0.setElement(4, 5807.104096704894);
      descriptiveStatisticsImpl0.addValue(396.6591809319798);
      assertEquals(5L, descriptiveStatisticsImpl0.getN());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl(6);
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      descriptiveStatisticsImpl0.eDA = resizableDoubleArray0;
      resizableDoubleArray0.setElement(6, 1);
      descriptiveStatisticsImpl0.toString();
      assertEquals(7L, descriptiveStatisticsImpl0.getN());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setNumElements(16);
      resizableDoubleArray0.discardFrontElements(16);
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl(16);
      resizableDoubleArray0.setElement(1, 1);
      assertEquals(2, resizableDoubleArray0.getNumElements());
      
      String string0 = descriptiveStatisticsImpl0.toString();
      assertEquals("DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setElement(206, 206);
      resizableDoubleArray0.addElement(206);
      assertEquals(208, resizableDoubleArray0.getNumElements());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setElement(1, 16);
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl();
      descriptiveStatisticsImpl0.addValue(1);
      assertEquals(1L, descriptiveStatisticsImpl0.getN());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl();
      resizableDoubleArray0.setElement(16, Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        descriptiveStatisticsImpl0.getElement(16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // The index specified: 16 is larger than the current number of elements
         //
         verifyException("org.apache.commons.math.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl();
      descriptiveStatisticsImpl0.windowSize = 0;
      descriptiveStatisticsImpl0.addValue(2769.8404);
      resizableDoubleArray0.setElement(16, Double.NEGATIVE_INFINITY);
      assertEquals(17, resizableDoubleArray0.getNumElements());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl(6);
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      descriptiveStatisticsImpl0.eDA = resizableDoubleArray0;
      resizableDoubleArray0.setElement(6, 1);
      double double0 = descriptiveStatisticsImpl0.getElement(6);
      assertEquals(7L, descriptiveStatisticsImpl0.getN());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl(1);
      resizableDoubleArray0.setElement(0, 2);
      // Undeclared exception!
      try { 
        descriptiveStatisticsImpl0.getElement((-4817));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Elements cannot be retrieved from a negative array index
         //
         verifyException("org.apache.commons.math.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray(6);
      resizableDoubleArray0.setExpansionMode(1);
      // Undeclared exception!
      try { 
        resizableDoubleArray0.setElement((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Cannot set an element at a negative index
         //
         verifyException("org.apache.commons.math.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl(2);
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      descriptiveStatisticsImpl0.eDA.setExpansionMode(1);
      assertEquals(0L, descriptiveStatisticsImpl0.getN());
      
      resizableDoubleArray0.setElement(0, 0);
      assertEquals(1, resizableDoubleArray0.getNumElements());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl();
      descriptiveStatisticsImpl0.addValue(2);
      descriptiveStatisticsImpl0.eDA.setExpansionMode(1);
      descriptiveStatisticsImpl0.addValue(1);
      descriptiveStatisticsImpl0.addValue(2);
      assertEquals(3L, descriptiveStatisticsImpl0.getN());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setExpansionMode(1);
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl();
      // Undeclared exception!
      try { 
        descriptiveStatisticsImpl0.getElement(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // The index specified: 0 is larger than the current number of elements
         //
         verifyException("org.apache.commons.math.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl(2);
      descriptiveStatisticsImpl0.addValue(2);
      descriptiveStatisticsImpl0.eDA.setExpansionMode(1);
      descriptiveStatisticsImpl0.addValue(1);
      descriptiveStatisticsImpl0.addValue(1);
      assertEquals(2L, descriptiveStatisticsImpl0.getN());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl(2);
      assertEquals(0L, descriptiveStatisticsImpl0.getN());
      
      descriptiveStatisticsImpl0.addValue(2);
      descriptiveStatisticsImpl0.eDA.setExpansionMode(1);
      double double0 = descriptiveStatisticsImpl0.getElement(0);
      assertEquals(1L, descriptiveStatisticsImpl0.getN());
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setElement(1621, 848);
      resizableDoubleArray0.setElement(848, (-476.21072));
      // Undeclared exception!
      try { 
        resizableDoubleArray0.setElement((-1), 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Cannot set an element at a negative index
         //
         verifyException("org.apache.commons.math.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setNumElements(16);
      resizableDoubleArray0.addElement(6.0);
      resizableDoubleArray0.setElement(16, 655.2585);
      assertEquals(17, resizableDoubleArray0.getNumElements());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl(2);
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      descriptiveStatisticsImpl0.eDA = resizableDoubleArray0;
      descriptiveStatisticsImpl0.addValue(2);
      resizableDoubleArray0.setElement(0, 2);
      DescriptiveStatisticsImpl descriptiveStatisticsImpl1 = new DescriptiveStatisticsImpl(2);
      // Undeclared exception!
      try { 
        descriptiveStatisticsImpl1.getElement(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // The index specified: 0 is larger than the current number of elements
         //
         verifyException("org.apache.commons.math.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl(2);
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      descriptiveStatisticsImpl0.eDA = resizableDoubleArray0;
      descriptiveStatisticsImpl0.addValue(2);
      descriptiveStatisticsImpl0.addValue(1);
      resizableDoubleArray0.setElement(0, 0);
      descriptiveStatisticsImpl0.addValue(1);
      assertEquals(2L, descriptiveStatisticsImpl0.getN());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setNumElements(1);
      resizableDoubleArray0.setElement(0, 0);
      assertEquals(1, resizableDoubleArray0.getNumElements());
      
      DescriptiveStatistics descriptiveStatistics0 = DescriptiveStatistics.newInstance();
      descriptiveStatistics0.addValue(6.0);
      double double0 = descriptiveStatistics0.getElement(0);
      assertEquals(6.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setNumElements(205);
      resizableDoubleArray0.setElement(2, Double.NEGATIVE_INFINITY);
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl(2);
      // Undeclared exception!
      try { 
        descriptiveStatisticsImpl0.getElement((-1610612735));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Elements cannot be retrieved from a negative array index
         //
         verifyException("org.apache.commons.math.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setExpansionMode(0);
      assertEquals(0, resizableDoubleArray0.start());
      assertEquals(0, resizableDoubleArray0.getExpansionMode());
      assertEquals(0, resizableDoubleArray0.getNumElements());
      assertEquals(2.5F, resizableDoubleArray0.getContractionCriteria(), 0.01F);
      assertEquals(2.0F, resizableDoubleArray0.getExpansionFactor(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl(6);
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      descriptiveStatisticsImpl0.eDA = resizableDoubleArray0;
      descriptiveStatisticsImpl0.addValue(6);
      resizableDoubleArray0.setElement(6, 1);
      descriptiveStatisticsImpl0.toString();
      assertEquals(7L, descriptiveStatisticsImpl0.getN());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The initial capacity supplied: -1must be a positive integer
         //
         verifyException("org.apache.commons.math.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DescriptiveStatisticsImpl descriptiveStatisticsImpl0 = new DescriptiveStatisticsImpl(2);
      descriptiveStatisticsImpl0.eDA.setExpansionMode(1);
      // Undeclared exception!
      try { 
        descriptiveStatisticsImpl0.getElement((-142));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Elements cannot be retrieved from a negative array index
         //
         verifyException("org.apache.commons.math.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = null;
      try {
        resizableDoubleArray0 = new ResizableDoubleArray(3683, 3683, 3683, 3683);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal expansionMode setting.
         //
         verifyException("org.apache.commons.math.util.ResizableDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResizableDoubleArray resizableDoubleArray0 = new ResizableDoubleArray();
      resizableDoubleArray0.setElement(0, 0);
      // Undeclared exception!
      try { 
        resizableDoubleArray0.setNumElements((-1356));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of elements must be zero or a positive integer
         //
         verifyException("org.apache.commons.math.util.ResizableDoubleArray", e);
      }
  }
}

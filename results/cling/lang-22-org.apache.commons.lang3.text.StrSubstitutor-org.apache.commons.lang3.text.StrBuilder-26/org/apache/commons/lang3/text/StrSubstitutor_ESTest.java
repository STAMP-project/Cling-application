/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 21:24:49 GMT 2019
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileInputStream;
import java.io.Reader;
import java.io.StringWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import org.apache.commons.lang3.text.StrBuilder;
import org.apache.commons.lang3.text.StrLookup;
import org.apache.commons.lang3.text.StrMatcher;
import org.apache.commons.lang3.text.StrSubstitutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class StrSubstitutor_ESTest extends StrSubstitutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Properties properties0 = new Properties();
      properties0.put("", object0);
      StrSubstitutor.replace(object0, properties0);
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      // Undeclared exception!
      try { 
        strBuilder0.substring((-3075));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3075
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Properties properties0 = new Properties();
      properties0.put("", object0);
      StrSubstitutor.replace(object0, properties0);
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.toCharArray(793, 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendln("Nu");
      strBuilder0.insert(2, 1866.512F);
      Properties properties0 = new Properties();
      properties0.put("Nu", strBuilder1);
      assertEquals(11, strBuilder0.length());
      
      String string0 = StrSubstitutor.replace((Object) "Variable prefix matcher must not be null!", properties0);
      assertEquals("Variable prefix matcher must not be null!", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("9LN\"`^>JXLg");
      int int0 = strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, (-826));
      assertEquals((-1), int0);
      
      boolean boolean0 = strSubstitutor0.replaceIn(strBuilder0);
      assertEquals(11, strBuilder0.length());
      assertFalse(boolean0);
      assertEquals(43, strBuilder0.capacity());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('q');
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharMatcher0, (-1));
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
      
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((StrLookup<?>) null, "", ": ", 'q');
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer0);
      assertEquals('q', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Integer>) hashMap0);
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      strSubstitutor0.replaceIn(strBuilder0);
      // Undeclared exception!
      try { 
        strBuilder0.substring((-3075));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3075
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Integer>) hashMap0);
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StringBuffer stringBuffer0 = new StringBuffer("awt.toolkit");
      strSubstitutor0.replaceIn(stringBuffer0);
      // Undeclared exception!
      try { 
        strBuilder0.substring((-3075));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3075
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("9LN\"`^>JXLg");
      strSubstitutor0.replaceIn(strBuilder0);
      // Undeclared exception!
      try { 
        strBuilder0.validateRange(31, 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) "Infinite loop in property interpolation of ", 15, 15);
      strBuilder1.toCharArray(15, 101);
      assertEquals(15, strBuilder0.length());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrLookup<Object> strLookup0 = StrLookup.mapLookup((Map<String, Object>) hashMap0);
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'V');
      StringBuffer stringBuffer0 = new StringBuffer("w&tuHvO<8o5wz0BL");
      strSubstitutor0.replaceIn(stringBuffer0);
      assertEquals('V', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendSeparator('/', 600);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "", "", '/');
      // Undeclared exception!
      try { 
        strBuilder0.replace(strSubstitutor0.DEFAULT_SUFFIX, "$$J$", (-237), 2910, 948);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -237
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendSeparator("(z=L2Qm)m569]Rfpmg", 798);
      // Undeclared exception!
      try { 
        strBuilder0.substring(798);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) "Infinite loop in property interpolation of ", 15, 15);
      strBuilder1.toCharArray(15, 101);
      strBuilder0.appendSeparator("(z=L2Qm)m569]Rfpmg", 798);
      assertEquals(33, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendSeparator('/', 600);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "", "", '/');
      // Undeclared exception!
      try { 
        strBuilder0.replace(strSubstitutor0.DEFAULT_PREFIX, "$$J$", 24, 948, (-3077));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendSeparator('<', 126);
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        strBuilder0.insert(12, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 12
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendln("Nu");
      strBuilder0.insert(2, 1866.512F);
      strBuilder0.appendSeparator('y', 0);
      assertEquals(11, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Properties properties0 = new Properties();
      Object object0 = new Object();
      StrBuilder strBuilder0 = new StrBuilder(767);
      Reader reader0 = strBuilder0.asReader();
      properties0.load(reader0);
      String string0 = StrSubstitutor.replace(object0, properties0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("9LN\"w>JXLp");
      StrSubstitutor.replace((Object) strBuilder0, (Properties) null);
      // Undeclared exception!
      try { 
        strBuilder0.toCharArray((-191), (-4384));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -191
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Properties properties0 = new Properties();
      properties0.put(strBuilder0, strBuilder0);
      // Undeclared exception!
      try { 
        StrSubstitutor.replace((Object) "", properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.text.StrBuilder cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("OE>a\"g>|CN4", "OE>a\"g>|CN4").when(strLookup0).toString();
      doReturn("OE>a\"g>|CN4", "ToO8HdHsd").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("set() is unsupported", "'!`)V-WiK", "set() is unsupported", "").when(strMatcher0).toString();
      doReturn(11, 11, 11, 11, (-2217)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'u');
      Properties properties0 = new Properties();
      StrSubstitutor.replace((Object) "set() is unsupported", properties0);
      StrBuilder strBuilder0 = new StrBuilder();
      Object object0 = new Object();
      strBuilder0.appendFixedWidthPadRight(object0, 163, 'u');
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(strBuilder0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("9LN\"`^>JXLg");
      StrSubstitutor.replace((Object) strBuilder0, (Properties) null);
      // Undeclared exception!
      try { 
        strBuilder0.validateRange(31, 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test20()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("OE>a\"g>|CN4").when(strLookup0).toString();
      doReturn("OE>a\"g>|CN4").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("set() is unsupported", "'!`)V-WiK", "set() is unsupported", "").when(strMatcher0).toString();
      doReturn(11, 11, 11).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'u');
      char[] charArray0 = new char[15];
      Properties properties0 = new Properties();
      String string0 = StrSubstitutor.replace((Object) "set() is unsupported", properties0);
      assertEquals("set() is unsupported", string0);
      
      String string1 = strSubstitutor0.replace(charArray0);
      assertEquals('u', strSubstitutor0.getEscapeChar());
      assertEquals("OE>a\"g>|CN4", string1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test21()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendln((double) 2);
      strBuilder0.insert(2, (float) 2);
      String string0 = StrSubstitutor.replace((Object) "Nu", (Properties) null);
      assertEquals("Nu", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Properties properties0 = new Properties();
      StrBuilder strBuilder0 = new StrBuilder(767);
      Reader reader0 = strBuilder0.asReader();
      properties0.load(reader0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0);
      boolean boolean0 = strSubstitutor0.replaceIn(strBuilder0);
      assertFalse(boolean0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertEquals(0, strBuilder0.size());
      assertEquals(767, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("set() is unsupported", "'!`)V-WiK").when(strMatcher0).toString();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'z');
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, (-5013));
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
      
      strSubstitutor0.replace("R", 0, 0);
      assertEquals('z', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("set() is unsupported", "'!`)V-WiK").when(strMatcher0).toString();
      doReturn((-1), (-1)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'z');
      StrBuilder strBuilder0 = new StrBuilder();
      Object object0 = new Object();
      strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, (-5013));
      strBuilder0.appendFixedWidthPadRight(object0, 163, 'z');
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(strBuilder0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrBuilder strBuilder0 = new StrBuilder("9LN\"`^>JXLg");
      strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, (-826));
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("9LN\"`^>JXLg", (-826), 693);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('q');
      strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharMatcher0, (-1));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("", 2846, 124);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, ?>) hashMap0, "9LN\"w>JXLp", "9LN\"w>JXLp");
      StrBuilder strBuilder0 = new StrBuilder("9LN\"w>JXLp");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "9LN\"w>JXLp");
      strSubstitutor0.replace(stringBuffer0);
      // Undeclared exception!
      try { 
        strBuilder0.toCharArray((-191), (-4384));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -191
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Properties properties0 = new Properties();
      properties0.put(strBuilder0, strBuilder0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("PBAa.=n", (-4756), 28);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) "Infinite loop in property interpolation of ", 15, 15);
      // Undeclared exception!
      try { 
        strBuilder1.substring(798);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "->", "", ' ');
      strSubstitutor0.replace((StringBuffer) null);
      // Undeclared exception!
      try { 
        strBuilder0.toCharArray(2113, 20);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      StringBuffer stringBuffer0 = new StringBuffer();
      strSubstitutor0.replace(stringBuffer0);
      // Undeclared exception!
      try { 
        strBuilder0.toCharArray(47, 109);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test32()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("OE>a\"g>|CN4", (String) null, "j", "f*c<", (String) null).when(strLookup0).toString();
      doReturn("OE>a\"g>|CN4", "f*c<", "OE>a\"g>|CN4", (String) null, (String) null).when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("set() is unsupported", "'!`)V-WiK", "set() is unsupported", "", "2ouWG[?#x#Sz").when(strMatcher0).toString();
      doReturn(11, 11, 11, 11, 11).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'u');
      char[] charArray0 = new char[15];
      StrBuilder strBuilder0 = new StrBuilder();
      Object object0 = new Object();
      strBuilder0.appendFixedWidthPadRight(object0, 163, 'u');
      strSubstitutor0.replace(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      
      String string0 = strSubstitutor0.replace(charArray0);
      assertEquals("f*c<", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) "Infinite loop in property interpolation of ", 15, 15);
      strBuilder1.toCharArray(15, 101);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      StrLookup<Integer> strLookup0 = StrLookup.mapLookup((Map<String, Integer>) hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "java.library.path", "xTe$P2lb /", '1');
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("java.library.path", 302, 15);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendln("Nu");
      strBuilder0.insert(2, 1866.512F);
      assertEquals(11, strBuilder0.size());
      
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((StrLookup<?>) null);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "{|h<8Or`E4~5~2:;Fdg");
      String string0 = strSubstitutor0.replace(stringBuffer0);
      assertEquals("{|h<8Or`E4~5~2:;Fdg", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendln("Nu");
      strBuilder0.insert(2, 1866.512F);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((StrLookup<?>) null, "", "", 'T');
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("4QZ1N$# K<>ttoH", 2, 39);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendln("Nu");
      strBuilder0.insert(2, (float) 2);
      assertEquals(6, strBuilder0.size());
      
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((StrLookup<?>) null);
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('$');
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      String string0 = strSubstitutor1.replace(charArray0);
      assertEquals("$\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendln("Nu");
      strBuilder0.insert(2, 1866.512F);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((StrLookup<?>) null);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("Variable prefix matcher must not be null!", (-332), (-332));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendln("Nu");
      strBuilder0.insert(2, 1866.512F);
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('g');
      HashMap<String, FileInputStream> hashMap0 = new HashMap<String, FileInputStream>();
      StrLookup<FileInputStream> strLookup0 = StrLookup.mapLookup((Map<String, FileInputStream>) hashMap0);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher_CharMatcher0, strMatcher_CharMatcher0, 'g');
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("", 2, 19);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendln("Nu");
      strBuilder0.insert(2, 1866.512F);
      assertEquals(11, strBuilder0.size());
      
      StrLookup<Integer> strLookup0 = StrLookup.mapLookup((Map<String, Integer>) null);
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      String string0 = strSubstitutor0.replace("Ym", 2, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-87));
      StrBuilder strBuilder1 = strBuilder0.append(0.0F);
      char[] charArray0 = strBuilder1.toCharArray(1, 15);
      assertEquals(3, strBuilder0.size());
      assertArrayEquals(new char[] {'.', '0'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'\"");
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder0);
      assertEquals(34, strBuilder0.capacity());
      assertEquals("'\"", stringBuffer0.toString());
      assertEquals(2, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendSeparator('7', 600);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "", "", '7');
      strBuilder0.lastIndexOf(strSubstitutor0.DEFAULT_PREFIX, 0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("9e6686", 0, 600);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StrLookup<Integer> strLookup0 = (StrLookup<Integer>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "<4-", "<4-", '?');
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('?');
      char[] charArray0 = new char[8];
      charArray0[2] = '?';
      String string0 = strSubstitutor1.replace(charArray0);
      assertEquals("\u0000\u0000?\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals('?', strSubstitutor1.getEscapeChar());
  }
}

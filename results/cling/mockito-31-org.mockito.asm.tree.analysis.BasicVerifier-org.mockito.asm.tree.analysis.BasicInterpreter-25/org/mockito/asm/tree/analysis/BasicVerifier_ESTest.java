/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 08:23:54 GMT 2019
 */

package org.mockito.asm.tree.analysis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.tree.FieldInsnNode;
import org.mockito.asm.tree.IincInsnNode;
import org.mockito.asm.tree.IntInsnNode;
import org.mockito.asm.tree.LdcInsnNode;
import org.mockito.asm.tree.MultiANewArrayInsnNode;
import org.mockito.asm.tree.VarInsnNode;
import org.mockito.asm.tree.analysis.BasicValue;
import org.mockito.asm.tree.analysis.BasicVerifier;
import org.mockito.asm.tree.analysis.Value;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BasicVerifier_ESTest extends BasicVerifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicVerifier0);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      IntInsnNode intInsnNode0 = new IntInsnNode(10, 9);
      basicVerifier0.copyOperation(ldcInsnNode0, basicValue0);
      BasicValue basicValue1 = (BasicValue)basicVerifier0.newOperation(intInsnNode0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      IincInsnNode iincInsnNode0 = new IincInsnNode(2016, 2016);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      basicVerifier0.copyOperation(iincInsnNode0, basicValue0);
      Value value0 = basicVerifier0.unaryOperation(iincInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      IntInsnNode intInsnNode0 = new IntInsnNode(17, 17);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      basicVerifier0.copyOperation(intInsnNode0, basicValue0);
      Value value0 = basicVerifier0.newOperation(intInsnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      IntInsnNode intInsnNode0 = new IntInsnNode(14, 14);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      basicVerifier0.copyOperation(intInsnNode0, basicValue0);
      Value value0 = basicVerifier0.newOperation(intInsnNode0);
      assertSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      IincInsnNode iincInsnNode0 = new IincInsnNode(2016, 2016);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      basicVerifier0.copyOperation(iincInsnNode0, basicValue0);
      // Undeclared exception!
      try { 
        basicVerifier0.newOperation(iincInsnNode0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      VarInsnNode varInsnNode0 = new VarInsnNode(28, 28);
      Value value0 = basicVerifier0.getElementValue((Value) null);
      basicVerifier0.copyOperation(varInsnNode0, value0);
      // Undeclared exception!
      try { 
        basicVerifier0.newOperation(varInsnNode0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicVerifier0);
      IntInsnNode intInsnNode0 = new IntInsnNode(12, 22);
      Value value0 = basicVerifier0.newOperation(intInsnNode0);
      Value value1 = basicVerifier0.copyOperation(ldcInsnNode0, value0);
      assertSame(value0, value1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicVerifier0);
      basicVerifier0.newOperation(ldcInsnNode0);
      Value value0 = basicVerifier0.copyOperation(ldcInsnNode0, (Value) null);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      IntInsnNode intInsnNode0 = new IntInsnNode(13, 156);
      basicVerifier0.copyOperation(intInsnNode0, basicValue0);
      BasicValue basicValue1 = (BasicValue)basicVerifier0.newOperation(intInsnNode0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      IincInsnNode iincInsnNode0 = new IincInsnNode((-3851), (-3851));
      basicVerifier0.copyOperation(iincInsnNode0, basicValue0);
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(178, (String) null, "int", "L");
      // Undeclared exception!
      try { 
        basicVerifier0.newOperation(fieldInsnNode0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.mockito.asm.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicVerifier basicVerifier0 = new BasicVerifier();
      MultiANewArrayInsnNode multiANewArrayInsnNode0 = new MultiANewArrayInsnNode("o])1:\";.t|0Gq[]", (-561));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      basicVerifier0.copyOperation(multiANewArrayInsnNode0, (Value) null);
      BasicValue basicValue0 = (BasicValue)basicVerifier0.naryOperation(multiANewArrayInsnNode0, linkedList0);
      assertTrue(basicValue0.isReference());
  }
}
